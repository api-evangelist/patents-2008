---

title: Business process enablement of electronic documents
abstract: Business process enablement of electronic documents is provided. A method includes populating an electronic document supporting structured and unstructured content. The electronic document includes a description identifying a server and the content. The method further includes notifying a document processor of a submission event. The method also includes serializing a portion of the electronic document containing some of the unstructured content. The method additionally includes submitting the electronic document to the server in response to the submission event.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08201078&OS=08201078&RS=08201078
owner: International Business Machines Corporation
number: 08201078
owner_city: Armonk
owner_country: US
publication_date: 20080916
---
The present invention relates to semi structured electronic documents and more specifically to business process enablement of electronic documents containing unstructured content and optionally some structured content.

The virtual ubiquity of editors e.g. word processors spreadsheet software for semi structured electronic documents makes them valuable means of enabling end users to create semi structured content. However software needed for end users to collaboratively create the content is far from well integrated. Users may struggle with change tracking local disk operations and email attachments to manually control content integration. Ad hoc collaboration can degenerate as outdated copies proliferate from multiple users making edits out of turn.

Server software for collaboration may allow users to set up a common repository for working on shared documents. However these approaches provide a specific server side system into which the office documents are integrated. In other words end users get locked into the system solution which may be proprietary and offer limited interoperability.

In turn important features needed to integrate with arbitrary business processes tend not to be available in the closed vendor specific systems. For example digital signatures may be more important in open systems as a means of producing legally binding agreements. As a further example electronically drafted contracts tend to be long and involved with many complex sections yet current systems persist in offering a generic user interface that does little to help users navigate the complexities of the document or the business process in which it is involved.

According to one embodiment of the present invention a method for business process enablement of electronic documents is provided. The method includes populating an electronic document supporting structured and unstructured content. The electronic document includes a description identifying a server and the content. The method further includes notifying a document processor of a submission event. The method also includes serializing a portion of the electronic document containing some of the unstructured content. The method additionally includes submitting the electronic document to the server in response to the submission event.

A further embodiment is a system for business process enablement of electronic documents. The system includes a document processor executing on a client system. The client system supports communication with a server. The system further includes an electronic document with a description identifying the server process logic and content. The electronic document is interfaced to the document processor. The document processor submits the electronic document to the server in response to a submission event.

Another embodiment is a computer program product for business process enablement of electronic documents. The computer program product includes a storage medium readable by a processing unit and storing instructions for execution by the processing unit for implementing a method. The method includes populating an electronic document supporting structured and unstructured content. The electronic document includes a description identifying a server and the content. The method further includes serializing a portion of the electronic document containing some of the unstructured content and submitting the electronic document to the server.

An additional embodiment is a method for business process enablement of electronic documents. The method includes receiving an electronic document supporting structured and unstructured content at a client system. The electronic document includes a description identifying a server to submit the electronic document business process logic controlling actions performed on the electronic document and the content. The method further includes populating the electronic document using web services applying a digital signature to the electronic document and serializing a portion of the electronic document that includes some of the unstructured content. The method also includes submitting the electronic document to the server.

A further embodiment is a computer program product for business process enablement of electronic documents. The computer program product includes a storage medium readable by a processing unit and storing instructions for execution by the processing unit for implementing a method. The method includes receiving an electronic document supporting structured and unstructured content at a client system. The electronic document includes a description identifying a server to submit the electronic document business process logic controlling actions performed on the electronic document and the content. The method further includes populating the electronic document using web services applying a digital signature to the electronic document and serializing a portion of the electronic document that includes some of the unstructured content. The method further includes submitting the serialized electronic document to the server.

Additional features and advantages are realized through the techniques of the present invention. Other embodiments and aspects of the invention are described in detail herein and are considered a part of the claimed invention. For a better understanding of the invention with the advantages and the features refer to the description and to the drawings.

The invention as described herein provides business process enablement of electronic documents. While typical electronic documents are static collections of data that are written to and read from a storage medium they are managed separately from business processes that drive their creation and management. For example a business process may involve a number of parties populating a proposal an application a specification a complex contract a patent application and the like. Various parties involved can have different roles such as technical marketing pricing executive quality assurance and so forth to collaborate and perform process steps at distinct points in time. While referred to as a business process the scope of the invention is not limited to for profit activities but can be applied in any context that involves a formal workflow process such as college applications grant applications tax forms and the like. When a separate business process management tool is used to provide process logic and control access to the typical electronic document the resulting work product can become locked into a server side system. In an exemplary embodiment a client side document processor provides editing capabilities for an electronic document that includes a description identifying the server process logic and structured and or unstructured content. The process logic in the electronic document can include data entry and validation logic for specific business processes as well submission logic to trigger submission of the electronic document to server side processes. Embedding the server description process logic and content into the electronic document may enable an open flow between various client and server systems without being locked into a single proprietary solution.

In an exemplary embodiment the electronic document supports both structured and unstructured content. Structured content may include data that must comply with formatting constraints or correlate to specific items such as key values in a database e.g. a serial number. Unstructured content can include free flowing text and rich content such as charts tables graphs audio video clips and other linked or embedded objects. The electronic document can also include wizard like assistance in populating the electronic document and can access web services to further enhance the fill experience. Additionally the electronic document may support affixing digital signatures to protect the content of the electronic document from unauthorized modifications. One or many collaborators can create modify and secure semi structured or unstructured content in the electronic document that freely transitions between the client side and server side as needed. The document processor enables creation editing and submission of the complete electronic document not merely the data within the electronic document to the server identified in the electronic document.

Turning now to the drawings it will be seen that in there is a block diagram of a system upon which business process enablement of electronic documents is implemented in exemplary embodiments. The system of includes a server in communication with client systems over a network . In exemplary embodiments the server is a high speed processing device e.g. a mainframe computer a desktop computer a laptop computer or the like including at least one processing circuit e.g. a CPU capable of reading and executing instructions and handling numerous interaction requests from the client systems as a shared physical resource. The server may perform as a file server for storing and accessing various files. The server can also run other applications and may serve as a Web server applications server and or a database server.

In exemplary embodiments the client systems comprise desktop laptop general purpose computer devices and or networked devices with processing circuits and I O interfaces such as a keyboard and display device e.g. Web enabled phones or handheld devices . Users can initiate various tasks locally on the client systems such as creating or editing an electronic document in memory of the client systems . In an exemplary embodiment the electronic document includes not only content but also includes process logic and a server description . The content can include structured and or unstructured content. The process logic may include assistance validation and submission functions or methods that can be interpreted and acted upon by document processor . The process logic can be tailored to specific business processes as part of a business workflow. The document processor can execute the process logic or respond to messages or events triggered via the process logic . Upon a submission event the document processor sends the electronic document over the network to the server for further processing or storage to the data storage device as stored content .

The network may be any type of communications network known in the art. For example the network may be an intranet extranet or an internetwork such as the Internet or a combination thereof. The network can include wireless wired and or fiber optic links. Additional servers such as remote server can also be accessed via the network . The single server may also represent a cluster of servers collectively performing processes as described in greater detail herein.

The data storage device refers to any type of computer readable storage medium and may comprise a secondary storage element e.g. hard disk drive HDD tape or a storage subsystem that is internal or external to the server . Types of data that may be stored in the data storage device include for example various files and databases. It will be understood that the data storage device shown in is provided for purposes of simplification and ease of explanation and is not to be construed as limiting in scope. To the contrary there may be multiple data storage devices utilized by the server .

In exemplary embodiments the server executes various applications including a process manager and miscellaneous applications . The process manager can be used to coordinate server side activities and handle distribution of the electronic document as it moves between the client systems and the data storage device . The miscellaneous applications can include various applications that assist in generating process templates and creating and publishing services as well as performing server side document processing. The process templates in the data storage device can be designed to include a process flow for business processes embodied in the process logic in the electronic document . The process templates can include distribution lists to populate with roles of users at the client systems for controlling the permissions and flow between the users. The services can include web services as part of a service oriented architecture as well as publishing feeds e.g. really simple syndication RSS and or ATOM publishing protocol. Similarly the remote server can also provide remote services as web services and feeds.

The electronic document also referred to as an office document can be organized as a single file format or a combination of file formats. One example of a single office document file format is an OpenDocument format ODF that defines file formatting for electronic office documents such as spreadsheets charts presentations and word processing documents. To connect an ODF office document to a business process additional features may be added producing the electronic document . Full document submission of the electronic document to the server can be achieved in ODF by adding support for ODF content types to a serialization attribute of XForms submissions as exemplified by the following markup 

XForms is an extensible markup language XML format for the specification of a data processing model for XML data and user interface s for the XML data such as web forms. XForms provides a processing model that is defined for XML data e.g. content within a document such as the electronic document . The document can have one or more instances of XML data each of which is handled as if it were a separate in memory document object model DOM during execution of the document by the document processor . The name instance comes from the possibility that the XML data is an instance of an XML schema though an XForms instance is not required to be associated with a schema.

The XForms model augments the XML instance data with model item properties such as type readonly relevant required and constraint . These model item properties associate run time metadata with nodes of XML data and they can be attached to nodes of XML data using XPath expressions. The values of most of the model item properties can also be determined using XPath expressions. This allows the form author to specify the model item property value by a formula that is automatically re evaluated whenever dependent nodes of XML data are changed. For example the process templates may be XForms that are further populated to become electronic document instances. The XForms model includes a submission capability. A model can contain any number of submission elements each of which can respond to events that perform further actions such as data mutations or further submissions. The result of a submission can replace the entire electronic document containing the XForms or it can replace some of the content or it can be ignored.

ODF can integrate the XForms model into its form element which also includes a set of abstract form control elements such as form text that select XML data to operate upon and set other basic user interface properties. ODF may expose its abstract form controls to a free flowing presentation layer markup using a draw control element. The main layers in the integration of ODF and XForms can include an ODF presentation layer an abstract form control layer a business logic and dynamic validation layer e.g. to implement process logic and a data access and validation layer that includes multiple data instances e.g. content . The relationship between XML data nodes abstract form controls and presentation layer elements can be handled using ID references. For example an XForms model can contain any number of xf bind elements each of which indicates one or more nodes using a nodeset attribute. An xf bind can also have an id attribute which makes it a named site for a set of nodes that can be referenced by the id attribute value. An ODF form control uses an xf bind attribute to indicate an xf bind element by ID reference. Similarly each ODF form control may have a form id attribute that allows the presentation layer draw control element to refer to it with a draw control attribute.

The xf bind attribute in XForms can do more than connect an ODF form control to an XForms bind site. The xf bind attribute expresses a user interface binding which has several implications for the XForms model processor e.g. document processor which exposes the node value and model item property values to the bound form control and dispatches value and model item property change notification events to the bound form control. If the XForms model binds a type or constraint model item property MIP to a node and a user enters incorrect data content then the form control can prominently indicate that there is an error and the XForms model processor dispatches an xforms invalid event to the element containing the user interface binding attribute. XForms authors have the option of hooking this event and performing an action script such as raising a message to assist the user in understanding how to correct the error or execute a setvalue method to fix the error under certain conditions. If the XForms model binds a readonly MIP to a node and the value is true then the user is not allowed to modify the data. The readonly MIP has an inheritance rule so all nodes in a DOM subtree can be made read only by setting the subtree root to readonly. This can make entire sets of bound form controls behave as if they were readonly. The document processor can detect changes of state after initialization by listening for xforms readonly and xforms readwrite events dispatched by the electronic document when embodied as an XForms model.

If the XForms model binds a relevant MIP to a node and the value is false then the form control may be either hidden or disabled. This MIP also has an inheritance rule that can affect multiple form controls bound to nodes in a subtree by setting the subtree root node s relevance. The XForms model may support dynamic recalculation of MIPs which enables conditional relevance for choreographing wizard like behaviors that take a user of client system through a step by step process to assist in completing a complex fill experience.

To transport the electronic document to the server a submit serialize event can be used to submit arbitrary data XML or otherwise to the server . The electronic document can include a content type indicator to further define the type of data serialized enabling document processors process manager and miscellaneous applications to decode reconstruct the serialized content. Serialization can be performed on any portion of the electronic document including structured and or unstructured portions of the content . This can also be used to allow a host document processor to control the content uploaded by the submission. The document processor can listen for the event and detect content type appearing in the serialization attribute of the event target submission element and redefine the submit serialization to contain the entire electronic document . This allows the electronic document to return itself to the server for business processing and to participate in further workflow steps or be stored as a completed document in the stored content . A wizard experience capability can be offered directly within ODF based on supporting XForms model relevance at the presentation layer.

Access to web services and ATOM services e.g. services and remote services can be obtained by support of the extensions to XForms submission. XForms extensions for SOAP based web services can be added to the document processor and the electronic document . ATOM services may be implemented through the addition of put and delete methods for method attributes. The integration of XML signatures with ODF can follow a similar approach as integration of XML signatures with extensible forms description language XFDL . Specifically the XML signature can be generated into the XML data managed by an XForms processor such as the document processor . Although described in reference to a single ODF office document based on improved XForms support the invention can be embodied in any office document format by creating custom extensions to the office document format and its run time processor that implement the features described herein.

In an exemplary embodiment the electronic document exploits XForms markup support in two rich document formats XFDL and ODF as a dual form implementation. At the document level the XFDL form has a file attachment containment capability and it also has a full document submission capability. Therefore the XFDL form can be used as a container and transport envelope for an ODF office document representing a complex contract or agreement. The XFDL form may also include digital signature support and once affixed a digital signature protects not only the XFDL form but also the ODF attachment within it. The ODF document provides editable free flowing text for complex multi page documents. It may also include rich content elements like pie charts and bar graphs to serve as visual aids. The XFDL form can provide a wizard like front end for the electronic document to help users enter data systematically. This interaction may include access to SOAP based web services and ATOM services from the XFDL form such as services and remote services across the network .

The end user may edit the XML data using ODF form controls to modify the ODF document . The end user may also edit the free flowing text of the ODF document for example to add special terms and conditions beyond those that might reasonably appear in a document template which may have been defined via process templates of . When the user triggers the return to form toolbar button the UNO API is again used to obtain XML data as well as a serialization of the ODF content from the ODF document . These are used to set the data and ODF properties of the ODF view . Corresponding setter method actions are invoked in the form view . The implementations of the setter method actions use the JavaScript API to push the updated ODF content and the XML data into the running XFDL form with attachment containing ODF . Thus when the end user affixes a digital signature onto the XFDL form the electronic document contains the latest ODF content and is rendering the correct data as amended during the ODF view experience via the ODF view .

Print capability may be handled the same as setting data between views and . However the ODF view can simply print ODF without taking the focus from the form view . For both view and print operations simplicity is possible since both rich document formats XFDL and ODF have an underlying basis in XForms.

A client side usage pattern for the dual form may begin with receiving the electronic document of as an XFDL form from a web resource or an email at the client system of . depicts an example of a user interface screen for a hypothetical consumer loan application as the electronic document of in which end users receive a step by step wizard experience to help guide them through the process of providing the more structured data required by the overall office document application. This is also where the services and remote services of can be invoked to further enhance the user fill experience. For example process steps are depicted to indicate various types of data to be collected as part of the business process. Text input boxes provide controls for inputting form text. Navigation buttons may be included to simplify transitions between process steps. A submit button can be used to return the electronic document to the server .

The author of the electronic document of can determine at what point the end user is allowed to proceed to editing the attachment containing ODF in the XFDL form based on the design of the process template of associated with the electronic document . depicts sample content in a user interface for the hypothetical consumer loan application of which can include the structured data along with rich content items that serve as visual aids as well as free flowing text for customizing the agreement with specialized terms and conditions. For example a table and a chart are included as rich content items.

When the end user finishes interacting with the electronic document a toolbar button on the view container for the office document editor allows the end user to return to the XFDL form view e.g. Return to Form toolbar button of . Changes made during the office document edit experience e.g. ODF document are reflected back to the attachment containing ODF in the XFDL form as well as the underlying structured data shared by the XFDL form and the fill in the blanks parts of the electronic document of .

Conditions that switch between the view and may also advance the XFDL form wizard to a digital signatures step if included or to a document submission step. Thus when the user returns from the ODF view to the form view the user experience may already have advanced to a signing page or a submission page or a sign and submit page . depicts completion a phase to affix a digital signature over the electronic document for the hypothetical consumer loan application of . A digital signature viewer is depicted applying a digital signature over the user XFDL form including the attached ODF office document . The digital signature viewer may output information associated with the digital signature including the signing party s identity algorithms employed and version information.

Upon completing the electronic document the user can trigger button to submit the electronic document back to a server side business process e.g. process manager of . The electronic document may enter the next stage of a workflow such as an approval. The completed electronic document can kick off a business transaction and or can be saved as stored content of for future reference.

A shared XML data kernel may be used to offer user assistance via a wizard like experience and to provide access to web services e.g. services and remote services of during the fill experience. A version of the dual forms methodology can be implemented based only on having an electronic form act as a containment and transport envelope for the electronic document of and optionally also offering the digital signature capability. In this case immediately upon activating the form view the user experience is switched to the ODF view since only the ODF editor may be available. Once completed the user may then switch to sign and or submit phases. This variation can be used with various binary files that are treated as objects that may not otherwise support XML.

Turning now to a process for business process enablement of electronic documents will now be described in accordance with exemplary embodiments and in reference to . An author can create process templates that provide a starting point for populating an electronic document using a single format or multiple formats such as electronic document and or . For ease of explanation only the electronic document is referred to in the forgoing description however the process can be applied to the electronic document as well. The process manager can initiate a business process associated with populating the electronic document assign roles to various users and send the electronic document to client system to be populated.

At block the document processor can access the process logic to determine how to present contents of the electronic document to a user of client system for populating the electronic document for instance using XForms and creating user interface contents as depicted in . The process logic may define steps of a fill experience as part of a business process and validate the content populated in the electronic document . Should validation fail the document processor can abort submitting the electronic document . The process logic can further include methods responsive to user input to perform actions upon the electronic document and modify properties of the electronic document .

The electronic document may include both structured and unstructured content making it more dynamic than a standard form but also supporting more rules than a general purpose document. In an exemplary embodiment the electronic document is pre populated with server description that informs the document processor where to submit the electronic document . The server description may be filled in at the server prior to initially distributing the electronic document to be populated at the client system . Content in the electronic document may be XML data instances and or other formats. A user of the client system can interactively populate the content which may include the use of web services and ATOM feeds via the services and or remote services to provide a wizard like fill experience. The document processor can also apply a digital signature to the electronic document to prevent unauthorized modifications.

At block the process logic notifies the document processor of a submission event based on user input. For example submit button may appear on a user interface and drive the process logic to perform actions and notify the document processor . The document processor can read the server description to determine where to direct the electronic document .

At block the document processor may serialize a portion of the electronic document that includes some of the unstructured content in the content . Serialization can include serializing any portion or all of the content including unstructured and structured content. Serialization may minimize formatting issues on various platform configurations.

At block the document processor submits the electronic document as serialized to the server in response to the submission event. The document processor can transfer the electronic document to the server absent a user initiated save request and absent a user initiated electronic mail message. The server receives the electronic document and analyzes the electronic document to determine a next process step. The process manager may access the process logic of the electronic document to determine the next process step. For example the server can distribute the electronic document to another application on the server or to another client system in response to determining that the electronic document is incomplete. The server may store the electronic document in response to determining that the electronic document is complete.

Technical effects include providing business process enablement of electronic documents. Imbuing an electronic document with a description of the server to which the full document can be returned enables a document processor to automatically route the electronic document from a client system to the server in response to a submission event. Embedding business process logic in the electronic document that can perform functions upon the electronic document may enhance portability security support semi structured content within the electronic document and enable wizard like assistance in populating the electronic document. Directly supporting collaborative content creation can reduce inefficiencies relative to manual collaboration based only on change tracking saving to disk emailing and manually pushing only completed documents into business process systems. Using exemplary embodiments as described herein electronic documents know what process they belong to and how to get from each collaborator back to the server without local saving or email.

The capabilities of the present invention can be implemented in software firmware hardware or some combination thereof.

As will be appreciated by one skilled in the art the present invention may be embodied as a system method or computer program product. Accordingly the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium.

Any combination of one or more computer usable or computer readable medium s may be utilized. The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device. More specific examples a non exhaustive list of the computer readable medium would include the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a portable compact disc read only memory CDROM an optical storage device or a magnetic storage device. In the context of this document a computer usable or computer readable medium may be any medium that can contain or store the program for use by or in connection with the instruction execution system apparatus or device.

Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one ore more other features integers steps operations element components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated

The flow diagrams depicted herein are just one example. There may be many variations to this diagram or the steps or operations described therein without departing from the spirit of the invention. For instance the steps may be performed in a differing order or steps may be added deleted or modified. All of these variations are considered a part of the claimed invention.

While the preferred embodiment to the invention had been described it will be understood that those skilled in the art both now and in the future may make various improvements and enhancements which fall within the scope of the claims which follow. These claims should be construed to maintain the proper protection for the invention first described.

