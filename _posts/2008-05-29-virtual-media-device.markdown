---

title: Virtual media device
abstract: A system, device, and method for virtually connecting a media device to a computing device are disclosed. One embodiment comprises a method to operate a virtual media device in a computing device, wherein the virtual media device that is controlled by a remote media device. In this manner, a computing device may stream media data to and from the remote media device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08645579&OS=08645579&RS=08645579
owner: Microsoft Corporation
number: 08645579
owner_city: Redmond
owner_country: US
publication_date: 20080529
---
Real time multimedia communications are increasingly used as applications are able to be developed to utilize multimedia and as network infrastructures can handle increased throughput. One example of real time multimedia communications is Internet Messaging using a web camera. Most web cameras for audio and video communications today have a physical connection to a host computer via a Universal Serial Bus USB cable. This restricts the web camera to within a certain distance of the host computer therefore preventing the web camera from roaming around a house office coffee shop etc.

Some web cameras connect to host computers as Internet Protocol IP devices. This allows a web camera to move remotely from a host computer but the web camera functionality is accessed as an external service that is not visible to applications running on the host computer without knowing the IP address for the IP web camera.

A virtual media device is disclosed. For example one embodiment comprises a virtual media device operating in a computing device wherein the virtual media device is controlled by a remote media device. In this manner a computing device may stream media data to and from the remote media device.

This Summary is provided to introduce concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

Computing device includes a listener service in communication with port through a communication stack which may further include a network stack a universal serial bus USB stack or a combination of protocol stacks etc. and port may be a universal serial bus port etc. In this way the listener service may receive the media data from the port and forward it to a virtual media device . In one example a listener service may be a service running in user mode but other embodiments are not so limited.

An example MICROSOFT WINDOWS communication stack is shown in with example functional blocks outlined with a dotted line. In this example WINDOWS communication stack a WINDOWS sockets application programming interface API or WinSock defines a standard interface for listener service to access network services in the kernel portion of WINDOWS communication stack . WinSock communicates media data and commands using AFD.sys a device driver responsible for managing a TCP IP communications protocol. For example AFD.sys may manage a network frame size or may set a limit on simultaneous network transfers for certain types of devices. Continuing with a WINDOWS example communication stack media data then may be sent to or received from a network interface card through a logical link control interface such as through NDIS driver . WINDOWS communication stack is one example communication stack according to a WINDOWS architecture and certain protocols. Other embodiments are not so limited and other suitable communications stacks protocols connections combinations etc. may be used as communications stack .

The listener service communicates to the virtual media device through a virtual bus that includes a command bus a video bus and an audio bus . Other embodiments may use other communications between listener service and virtual media device in similar fashion to send and receive media data to and from a remote media device.

In the example computing device depicted in the audio bus and command bus are illustrated as bidirectional. Virtual media device may also be operable to render media data and output the media data to the remotely connected media device through the listener service . For example if remote media device is a web camera a user may walk around remotely from computing device and virtual media device may not only receive audio and video data from the web camera but may forward audio data from a live chat with a friend in communication with the user through a separate network interface coupled to computing device for example using a live messenger service through the Internet. Additionally in the illustrated example the virtual media device may be further operable to output a command to control the remotely connected media device through the listener service .

The video bus in system is shown as a unidirectional bus to receive video data from the listener service and forward it to the virtual media device . Other embodiments are not so limited. For example as web cameras may be developed with an interactive display an embodiment may communicate audio data and video data to and from the web camera.

In some embodiments the virtual media device may comprise multiple drivers such as a system kernel streaming driver a system port class audio driver mini drivers including a virtual audio driver and a virtual video driver etc. In this way virtual media device may provide media and multimedia streaming functionality to operate as if the remote media device were directly connected to the computing device .

In some embodiments the media data may be stored in a shared memory to reduce latency induced by multiple copies of the same data. In one example when media data is received from remote media device the listener service stores the media data in memory and the virtual media device captures the media data from the memory instead of having the listener service send the media data to the virtual media device and record the media data to memory multiple times.

In some embodiments the virtual media device may capture the media data from the listener service and output the media data to an application for example an application program that consumes media data such as a messaging service browser video or audio conferencing software or other suitable application programs that may communicate media data. In some embodiments the listener service may be configured to decode the media data and send the media data to virtual media device . Additionally the listener service may be configured to place the media data into a plurality of frames to be sent to the virtual media device .

In the illustrated example virtual media device communicates video data to video stack . In a WINDOWS environment an example video stack is a DirectShow filter graph. Virtual media device may also communicate audio data with audio stack . In a WINDOWS environment an example audio stack is the DirectSound component of the DirectX library of API s. DirectX codec s are explained in the current example however embodiments may use other suitable multimedia frameworks.

The remote media device is depicted as a web camera such as an IP based web camera but other suitable remote devices are not so limited. For example other IP devices may be coupled to computing device and appear to an application program as if they were directly connected to the computing device in similar fashion to remote media device . In some embodiments other example remote media devices may be simple input and output devices such as keyboards mice or other remotely connected devices that may exchange data media commands inputs and outputs etc. with the computing device .

In a more detailed example in a computing device running a MICROSOFT WINDOWS operating system OS a remotely connected media device may be a web camera that is in communication with the computing device over a wireless network and further communicates multimedia data including audio data and video data to a network interface e.g. a network interface card or a NIC . Other embodiments may communicate over types of networks other than wireless network or may even communicate over a direct connection etc. as non limiting examples. For example remote media device may be coupled with network interface through wired network .

In this example the web camera also may receive or send commands to computing device through the network interface using real time transport control protocol packets or RTCP packets and may receive or send multimedia data to computing device through the network interface using real time transport protocol packets or RTP packets. Other suitable communications and control protocols can be used to send media data or multimedia data between a remote media device and a computing device .

In some embodiments computing device may provide a locked mode for the port . For example when set to locked mode the virtual media device may allow listener service to access and or change a setting of port without allowing an application other than listener service to change port settings.

In one example kernel mode driver selectively operates a port in a locked mode that restricts changes to port settings.

In one example the media data may be received at the port in real time transport protocol packets but other protocols suitable for streaming media data may be used. Additionally some embodiments may comprise decoding the media data with the listener service after it is received at the port. In some embodiments method may further comprise receiving the media data from the port in real time transport protocol packets and encapsulating the media data into a plurality of frames to be sent to the virtual media device.

Then method also comprises forwarding the media data to a listener service in the computing device as indicated in block . For example the media data may be forwarded to the listener service through communication stack . Examples of communication stack include a network stack a universal serial bus USB stack or a combination of protocol stacks etc. and the port may be a universal serial bus port or another suitable communications port.

Next method comprises storing the media data to memory as indicated at block . For example when media data is received from a remotely connected media device method further comprises the listener service storing the media data in a shared memory and a virtual media device capturing the media data from the shared memory instead of having the listener service send the media data to the virtual media device and record the media data to memory multiple times as illustrated in block .

Then after capturing the media data from the memory with a virtual media device method comprises outputting the media data to an application program as shown in block . In this way the virtual media device may provide media and multimedia streaming functionality as if a remote media device were directly connected to a computing device.

In some embodiments method further comprises providing a locked mode for the port wherein when the virtual media device is configured to set a port to a locked mode an unauthorized application cannot change port settings.

In some embodiments method may include bidirectional communications with a remotely connected media device. For example method may further comprise rendering media data with the virtual media device and outputting the media data to the remotely connected media device through the listener service.

Additionally method may further comprise outputting a command with the virtual media device to control the remotely connected media device through the listener service. For example if the remotely connected media device is a web camera the web camera may have settings that may be adjusted. In this way method may send commands to adjust the settings including zooming in or out turning a volume up or down powering on or off or other settings on a remotely connected media device that may be operated by commands.

For example the web camera may be wirelessly connected to a computing device over the IEEE 802.11 suite of wireless protocols and may convert from a wireless protocol to USB audio and video data. However this example would convert from 802.11 wireless protocol into the USB protocol. illustrates a system providing a virtual media stream according to the embodiments described above with reference to . Other embodiments may use other protocols than those depicted in and other embodiments may also establish virtual media streams between different components than those listed in .

With reference to the example in the USB protocol conversion in would take place in a USB stack coupled directly to kernel mode media drivers or a virtual media device. However the configuration illustrated in passes the media data received from the wireless protocol to the listener service then down to the virtual media device and back up to a listener media streaming service. Referring now to system a media stream may be sent over an 802.11 wireless protocol .

Instead of converting the media stream from the 802.11 wireless protocol into the USB protocol and sending the media stream to a media streaming service system establishes a virtual media stream from the 802.11 wireless protocol to the media streaming service . This approach allows an IP connected device to provide media data to a virtual media device and thus create a virtual media stream between the 802.11 wireless protocol and the media streaming service .

Method includes a camera service and a 3party application operating in user mode and a mini port driver operating in kernel mode. Camera service and 3party application send a set request or a get request to mini port driver wherein a set request is to control settings and a get request is to get media data etc. In method either camera service or 3party application may send a request.

In response to a request the mini port driver then forwards the request to decision block to determine if the computing device is in camera mode. If the computing device is in camera mode and the request came from the camera service then a request successful message is sent to the camera service. For example if the request was to either set a control setting or to get data then since the request came from the camera service the request successful message is sent.

However if a request is received at mini port driver from 3party application and the computing device is not in camera mode then a request successful message is sent to 3party application . The reason a request successful message is sent to 3party application is that since the computing device is not in camera mode then the 3party application may change network settings or get media data.

If however the computing device is in camera mode and the request was sent from the 3party application then method forwards the request to decision block to determine if the request was a read request such as a get or a write request such as a set. In this case if the request was a read request then a request successful message is sent to the 3party application since the 3party application is not trying to change network settings but is only trying to receive data from a remotely connected camera.

In method a fail request is returned if the request is from a 3party application and it was a set request and the computing device is in camera mode. In this way the mini port driver may allow camera service to get media data or change network settings and the mini port driver may also provide a camera only mode where 3party applications can only read data from a remotely connected media device but not change network settings.

It will be appreciated that the embodiments described herein may be implemented for example via computer executable instructions or code such as programs stored on a computer readable medium and executed by a computing device. Generally programs include routines objects components data structures and the like that perform particular tasks or implement particular abstract data types. As used herein the term program may connote a single program or multiple programs acting in concert and may be used to denote applications services or any other type or class of program.

The terms computer and computing device as used herein include any device that electronically executes one or more programs including but not limited to personal computers laptop computers hand held devices cellular phones microprocessor based programmable consumer electronics and or appliances and any other suitable computing devices that may provide a local virtual media device that communicates media data with a remote media device.

It will further be understood that the configurations and or approaches described herein are exemplary in nature and that these specific embodiments or examples are not to be considered in a limiting sense because numerous variations are possible. The specific routines or methods described herein may represent one or more of any number of processing strategies. As such various acts illustrated may be performed in the sequence illustrated in other sequences in parallel or in some cases omitted.

The order of any of the above described processes is not necessarily required to achieve the features and or results of the embodiments described herein but is provided for ease of illustration and description. The subject matter of the present disclosure includes all novel and nonobvious combinations and subcombinations of the various processes systems and configurations and other features functions acts and or properties disclosed herein as well as any and all equivalents thereof.

