---

title: Method and system for processing access to disk block
abstract: Provided are a method and a system for processing an access to a disk block. The system receives a disk block access request from an OS domain, determines whether the OS domain is permitted to access a disk block with reference to a predetermined block table and processes disk block access of the OS domain according to the determination result. Accordingly, OS domains can share caches without having data copy through memory access control in a virtual machine monitor environment. Furthermore, a device domain controls access to a disk drive so that data corruption can be prevented.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08335903&OS=08335903&RS=08335903
owner: Samsung Electronics Co., Ltd.
number: 08335903
owner_city: Suwon-si
owner_country: KR
publication_date: 20080321
---
This application claims the benefit of Korean Patent Application No. 10 2007 0027804 filed on Mar. 21 2007 in the Korean Intellectual Property Office the disclosure of which is incorporated herein in its entirety by reference.

The present invention relates to a method and a system for processing an access to a disk block and more particularly to a method and a system for processing accesses of different operating system OS domains to a disk block in an environment using a virtual machine monitor VMM .

A computer file system maintains and manages files and data stored in the files such that the files and the data can be easily stored and found. While the file system uses physical storage spaces such as hard disks or CD ROMs as storage units a file system such as a network file system and a shared disk file system may use a virtual interface for accessing files existing on a network as a storage unit.

File systems are classified into a disk file system a network file system and a file system for special purpose. The disk file system is designed to store files in a data storage unit particularly a disk drive connected to a computer.

The shared disk file system enables an access to disk drives directly connected to a storage area network SAN or a TCP IP network. When a plurality of nodes share the same disk drive a technique for maintaining data consistency is required. Each node has a buffer cache and allows only one copy for the same disk block for data consistency. To achieve this block lock is required before the disk drive is accessed. The block lock is obtained using an additional server node managing block lock or a block lock mechanism provided by a disk.

The shared disk file system has a data copy overhead smaller than that of the network file system because data of a disk drive is directly copied to a buffer cache of a node that wants to access the data without help of other nodes.

A virtual machine is an abstracted hardware structure that allows various operating systems to be executed without being affected by hardware. Various operating systems and software can be executed irrespective of hardware and multiple operating systems can be executed in a single computer by using the virtual machine. For example a single hardware element simultaneously executes a plurality of virtual systems such that it looks like a plurality of systems exist.

A conventional system has a structure in which an operating system controls hardware to allow an application to use the hardware through a standard application programming interface API and the application is operated on the operating system. In a virtual machine structure however an operating system is executed while it mistakes a virtual hardware environment provided by a virtual machine monitor for substantial hardware and an application uses virtual hardware through an API provided by the operating system.

Conventional disk file systems including the network file system and the shared disk file system are used to share disk data between different computing devices and when they are applied to a virtual machine monitor environment overhead of data copy and integrity of data cannot be secured.

Specifically the network file system searches a buffer cache of a remote node when data is missed in a buffer cache and moves the data to a local node through a network when the data is hit in the buffer cache of the remote node. When the network file system is applied to a virtual machine monitor environment however data is copied between different operating system OS domains at the same node. Furthermore the shared disk file system cannot control direct access of nodes to a disk drive and thus arbitrary data recorded on a disk can be overwritten to generate data corruption.

The present invention provides a method and a system for processing OS domain access to a disk block in an environment in which that at least one OS domain is executed on a virtual machine monitor.

According to an aspect of the present invention there is provided a method for processing OS domain access to a disk block in an environment in which at least one OS domain is executed on a virtual machine monitor the method comprising receiving a disk block access request from a predetermined OS domain determining whether the OS domain is permitted to access the disk block with reference to a predetermined block table and processing an access of the OS domain to the disk block according to the determination result.

According to another aspect of the present invention there is provided a method of processing a disk block access the method comprising an OS domain requesting from a device domain access to a disk block the device domain requesting another OS domain to check whether a buffer cache thereof caches the disk block with reference to a predetermined block table the device domain requesting a virtual machine monitor to update a page table of the OS domain such that the OS domain and the OS domain caching the disk block in the buffer cache thereof share the page of the disk block according to the checking result and the device domain returning the address of the shared page of the disk block to the OS domain.

According to another aspect of the present invention there is provided a system for processing an OS domain to access a disk block in an environment in which at least one OS domain is executed on a virtual machine monitor the system comprising a device domain receiving a disk block access request from a predetermined OS domain determining whether the OS domain is permitted to access the disk block with reference to a predetermined block table and processing an access of the OS domain to the disk block according to the determination result.

The present invention will now be described more fully with reference to the accompanying drawings in which exemplary embodiments of the invention are shown. The invention may however be embodied in many different forms and should not be construed as being limited to the embodiments set forth herein rather these embodiments are provided so that this disclosure will be thorough and complete and will fully convey the concept of the invention to those skilled in the art. Throughout the drawings like reference numerals refer to like elements.

The domain and the domain respectively include buffer caches and and front end drivers and . The buffer caches and are memories used for disk buffering and they are used in most OSs.

The front end drivers and are paired with a back end driver of the device domain . The front end drivers and communicate with the back end driver of the device domain through event channels and of the virtual machine monitor in order to access the disk driver .

The device domain receives a disk input output request or a block lock request from the domain and domain processes the received request and returns the processing result.

Specifically when the device domain receives the disk input output request from the domain that is not permitted the device domain returns an error signal to the domain . When receiving the disk input output request that is permitted the device domain confirms whether the requested disk block exists in the buffer cache of the domain and directly accesses the disk drive when the requested disk block does not exist in the buffer cache . When the device domain directly accesses the disk drive the front end driver of the domain communicates with the back end driver of the device domain through the event channel of the virtual machine monitor and a native driver of the device domain accesses the disk drive to perform disk input output.

A lock request transmitted from the domain and the domain to the device domain includes Get Reader Lock Get Exclusive Writer Lock Put Reader Lock Put Exclusive Writer Lock Downgrade to Reader Lock and Upgrade to Exclusive Writer Lock. For example Get Reader Lock is a request for obtaining permission to read a block of a disk. When the device domain receives this request the device domain searches a block table for a corresponding block table entry. The block table entry includes a field representing whether the requested lock of the corresponding block is permitted and the device domain confirms whether the requested lock can be permitted with reference to the field. When the requested lock can be permitted the device domain updates the field to correct the block table entry and returns the result to the domain that transmitted the request.

The device domain includes a victim page cache . When a page is required to be replaced in an arbitrary OS domain for example the OS domain requests the device domain to re register the block table and the device domain allocates a page to the victim page cache and copies the contents of the page to be replaced to the allocated page of the victim page cache .

The virtual machine monitor allows the disk drive to be used by a plurality of OS domains that is the domain and the domain .

In general a virtual machine monitor is a middleware software layer and arbitrates access to a physical host platform among a plurality of different guest operating systems such that the different guest operating systems share the physical host platform. The virtual machine monitor provides a virtual platform to each of the guest operating systems to allow the guest operating system constructs a virtual machine. Furthermore the virtual machine monitor manages generation extinction and transplanting of a virtual machine between a platform and a user software environment.

In the present embodiment the virtual machine monitor provides the event channels and such that the front end drivers and of the domains and communicate with the back end driver of the device domain through the event channels and . Furthermore the virtual machine monitor manages physical pages of memories of the domains and . For example the virtual machine monitor manages a page table through a memory management unit. The memory management unit is a hardware element managing a virtual memory system and has a small capacity memory for maintaining a table required to map a virtual memory to a substantial memory.

The lock type represents a block sharing state. The block sharing state includes idle multiple reader and exclusive writer and it can be represented in 1 byte. The idle indicates that a corresponding block is not used by any domain the multiple reader indicates that multiple domains have permission to read the corresponding block and the exclusive writer indicates that only a specific domain has permission to write data to the corresponding block. In this manner data consistency of a disk drive block can be maintained.

More specifically block lock implements multiple reader single writer semantics in an embodiment of the present invention. That is while multiple domains can simultaneously have read only permission when write permission is required only exclusive copy is left and other block sharing states are invalidated.

Substantial data of a block having read only permission exists in only a buffer cache of a specific domain and other domains access this buffer cache as a shared memory.

The lock holder represents a bit field indicating a domain having block lock that is a bit field that indicates domains having block access permission. The lock holder can be represented in 4 bytes. For example the lock holder can represent domain IDs through . A bit 1 represents that a domain having a domain ID corresponding to the position of the bit has block access permission.

The home node represents a domain ID of a node having a cache page and it can be represented in 1 byte.

The page address represents a physical page address of a cache page and it can be represented in 4 or 8 bytes.

The device domain requests a virtual machine monitor to update a page table such that the domain and the domain shares the page of the corresponding block. Here hypercall from the device domain to the virtual machine monitor is used for the request for updating the page table for page sharing between nodes. The virtual machine monitor updates the page table of the domain returns the physical page address of the shared page to the device domain and requests the device domain to prepare for sharing the page. The device domain returns the address of the shared page to the domain . Then the domain reads the shared page.

The device domain requests a disk drive to read a disk having the corresponding block. Here the device domain accesses the disk drive through a native driver thereof The device domain waits for the disk drive to prepare data of the corresponding block. The disk drive copies the data of the corresponding block to the page of the domain and then notifies the device domain that the data of the corresponding block has been prepared. The device domain updates the home node of the block table entry to the domain . Accordingly it is corrected that the corresponding block currently belongs to the domain . When the disk block is directly accessed as described above corresponding node information is recorded as a home node in the block table and a corresponding page address is registered in the block table. The registered page means cache copy only. Subsequently the device domain notifies the domain that it has read the data of the corresponding block. Then the domain reads the page of the corresponding block.

When a domain requests the device domain to read a block the device domain checks whether the domain is permitted to access the block and searches the victim page cache thereof because the home node of the block corresponds to the device domain. The device domain requests the virtual machine monitor to replace a page. Then the virtual machine monitor updates the page table for page replacement and notifies the device domain of it.

The device domain removes the corresponding page from the victim page caches and adds the page given to the domain to a free page pool. Then the device domain updates the home node of the block table to the domain and returns the address of the corresponding page to the domain .

A block lock request sent to a device domain includes Get Reader Lock Get Exclusive Writer Lock Put Reader Lock Put Exclusive Writer Lock Downgrade to Reader Lock and Upgrade to Exclusive Writer Lock. When the device domain receives the block lock request the device domain searches a block table for a corresponding block table entry. The block table entry includes a field representing whether the requested lock of the corresponding block is permitted and the device domain confirms whether the requested lock can be permitted with reference to the field. When the requested lock can be permitted the device domain updates the field to correct the block table entry and returns the result to the OS domain that transmits the request.

Referring to when a domain needs Get Reader Lock the domain requests a device domain to execute block lock. The device domain searches a block table and when the current state of a corresponding block is idle notifies the domain of it. When the domain needs Get Reader Lock the domain requests the device domain to execute block lock. The device domain searches the block table confirms that the current state of the corresponding block is multiple reader and notifies the domain of it.

When the domain requires write lock the domain requests the device domain to upgrade the multiple reader that can be currently allowed to the domain to exclusive writer. Then the device domain requests a domain currently having reader state for the corresponding block to execute unlock. When the domain notifies the device domain that unlock has been executed the device domain updates the corresponding block to exclusive writer and notifies the domain of it.

When the domain requires reader lock again the domain requests the device domain to execute block lock. Then the device domain requests the domain having exclusive writer permission for the corresponding block to downgrade the exclusive writer to reader block. Then the domain may selectively flush the corresponding block stored in the buffer cache thereof to a disk drive. When the domain transmits acknowledgement to the device domain the device domain upgrades the block lock type of the block table to multiple reader state and sends return acknowledgement to the domain .

As described above data consistency of a disk drive block can be maintained under the control of the device domain .

The invention can also be embodied as computer readable codes on a computer readable recording medium. The computer readable recording medium is any data storage device that can store data which can be thereafter read by a computer system. Examples of the computer readable recording medium include read only memory ROM random access memory RAM CD ROMs magnetic tapes floppy disks and optical data storage devices. The computer readable recording medium can also be distributed over network coupled computer systems so that the computer readable code is stored and executed in a distributed fashion. Also functional programs codes and code segments for accomplishing the present invention can be easily construed by programmers skilled in the art to which the present invention pertains.

While the present invention has been particularly shown and described with reference to exemplary embodiments thereof it will be understood by those of ordinary skill in the art that various changes in form and details may be made therein without departing from the spirit and scope of the present invention as defined by the following claims.

As described above the present invention receives a disk block access request from an OS domain determines whether the OS domain is permitted to access a disk block with reference to a predetermined block table and processes disk block access of the OS domain according to the determination result. Accordingly OS domains can share caches without having data copy through memory access control in a virtual machine monitor environment. Furthermore a device domain controls access to a disk drive so that data corruption can be prevented.

