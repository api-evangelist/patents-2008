---

title: Performing temporal checking
abstract: An apparatus for performing temporal checking is disclosed. A signal logger for performing temporal checking includes a group of edge detection modules and a group of counting modules. During testing, the signal logger is coupled to a device under testing (DUT). Each of the edge detection modules is capable of maintaining edge information after a state transition on a signal within the DUT has been detected. Each of the counting modules is associated with one of the edge detection modules. Each of the countering modules is capable of maintaining a clock cycle count information associated with a detected edge. After the testing has been completed, temporal checking information on a signal within the DUT can be obtained by reconstructing the edge information and the associated clock cycle count information of the signal collected during the test.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07853420&OS=07853420&RS=07853420
owner: International Business Machines Corporation
number: 07853420
owner_city: Armonk
owner_country: US
publication_date: 20080414
---
The present application is a continuation of U.S. patent application Ser. No. 11 297 308 now U.S. Pat. No. 7 464 354 filed Dec. 8 2005 and entitled Method and Apparatus for Performing Temporal Checking which is incorporated herein by reference.

The present invention relates to circuit design verification in general and in particular to computer software for analyzing the functional correctness of a circuit design.

Still more particularly the present invention relates to a method and apparatus for performing temporal checking.

Design verification is typically utilized to determine whether a device exactly implements the requirements defined by the specification of that device. Design verification for a device under testing DUT may be performed on an actual device or most likely on a simulation model of the device.

The process of verifying a design through a simulation model of a DUT is aided by the availability of hardware description languages HDLs such as Verilog and VHDL. In order to interface with the simulation model of the DUT described in HDLs a verification engineer typically has to write additional programming code for the purpose of performing design verification on the DUT. The resultant simulated model of the DUT can receive input stimuli in the form of test vectors. The results produced by the simulated model of the DUT are then checked against the expected results for the DUT.

Testing environments can be static or dynamic. A static testing environment drives pre computed test vectors into the simulation model of a DUT and examines the results after the operation. However if a static testing environment is used to examine the results that are output from the simulation model of a DUT then errors in the test are not detected until after the test has been completed. As a result the internal state of the DUT at the point of error may not be determinable requiring the simulation to be repeated again in order to determine such internal states. Thus static testing may require the expenditure of considerable time especially during long tests.

Dynamic testing environments are more useful and efficient. In a dynamic testing environment a set of programming instructions is written to generate the test vectors in concurrence with the simulation model of a DUT while potentially being controlled by the state feedback of the simulated model of the DUT. Dynamic testing enables directed random generation to be performed and is more sensitive to effects uncovered during the test itself on the state of the simulation model of the DUT. Thus dynamic testing clearly has many advantages for design verification over static testing.

However both static and dynamic testings can be implemented only with fixed vector or pre generation input. A more sophisticated functional verification system enables a test generation to produce the environment particularly for functional verification in order for various elements to be defined and connected together correctly so that a DUT can perform as specified. An example of such functional verification system is the Specmantools developed by Verisity Ltd. in Israel and available through Verisity Design Inc. in Mountain View Calif.

For functional verification of state of the art integrated circuit devices it is essential to use an efficient methodology to check the dynamic behavior of various signals and or buses. Such kind of functional verification is commonly referred to as temporal checking. Temporal checking can be as simple as checking for a single pulse of a certain minimum or maximum length or can be as complex as verifying complicated sequences of events in a bus protocol.

The common implementation of temporal checking via a cycle based HDL simulator is to use a software simulation interface such as the Specmantools that is able to read the signals of interest in each simulation cycle. During testing the software simulation interface monitors the testing by interrupting and querying the cycle based HDL simulator on every clock edge in order to obtain the state and value of the signal s of interest. The cycle based HDL simulator has to be re started after each querying is done. Because of the cycle based HDL simulator has to be constantly interrupted and re started during temporal checking the simulation speed is significantly reduced. In addition the ratio of runtime state to interrupted state is relatively low because the cycle based HDL simulator may only be allowed to run for very short periods of time as small as one clock cycle before each interruption. Those drawbacks become a performance bottleneck when verifying a very large integrated circuit design where many thousand signals need to be checked simultaneously.

In accordance with a preferred embodiment of the present invention a signal logger for performing temporal checking includes a group of edge detection modules and a group of counting modules. During testing the signal logger is coupled to a device under testing DUT . Each of the edge detection modules is capable of maintaining edge information after a state transition on a signal within the DUT has been detected. Each of the counting modules is associated with one of the edge detection modules. Each of the countering modules is capable of maintaining a clock cycle count information associated with a detected edge. After the testing has been completed temporal checking information on a signal within the DUT can be obtained by reconstructing the edge information and the associated clock cycle count information of the signal collected during the test.

All features and advantages of the present invention will become apparent in the following detailed written description.

Referring now to the drawings and in particular to there is depicted a block diagram of a design verification system in accordance with a preferred embodiment of the present invention. As shown a test bench includes a device under testing DUT a signal logger and an input output I O data model . DUT is preferably written in a hardware descriptive language HDL such as Verilog or VHDL. In addition a test generator may also be written in HDL. Signal logger detects and logs the behavior of various signals within DUT . A simulator interacts with test generator for performing specific test generation procedure. Test generator receives constraints and programs I O data model to perform testing and verification on DUT .

During testing and verification simulator provides means to access internal node of the DUT by accessing the requested data through an application programming interface API . Such an API specifies the software function calls required in order to collect the desired data. The collected data is then analyzed by a data analyzer . After being analyzed by data analyzer the analyzed data can then be displayed to a user via a monitor preferably through a graphical user interface GUI .

With reference now to there is depicted a block diagram of signal logger in accordance with a preferred embodiment of the present invention. As shown signal logger includes edge detection modules counting modules and a time stamp module . Each of edge detection modules works in conjunction with an associated one of counting modules 

Signal logger is preferably a hardware device having edge detection modules implemented by flip flops counting modules implemented by counters and time stamp module implemented by a timer. However signal logger can also be written in HDL such that many signal loggers can be instantiated in the simulation environment with all the signal loggers being connected to a signal that needs to be monitored. Once the connections have been completed and the model build process has been run signal logger can be included in the model of the simulation system to be simulated as hardware elements during the testing and verification.

At the beginning of a test all counting modules start counting in terms of clock cycles. In conjunction each of edge detection modules is designated to detect one type of edge transitions either from a high state to a low state or from a low state to a high state which occurs during the testing. Once an edge transition has been detected by one of edge detection modules its associated one of counting modules stops its count. Time stamp module records the clock count time stamp each time when an edge transition is detected.

For example edge detection module is associated with counting module edge detection module is associated with counting module edge detection module is associated with counting module edge detection module is associated with counting module and edge detection module is associated with counting module . Each of edge detection modules is designated to detect an edge transition from a low state to a high state and each of edge detection modules is designated to detect an edge transition from a high state to a low state. Before testing begins edge detection modules are set to a high state edge detection modules are set to a low state and counting modules are all set to zero.

Referring now there is depicted an example of various waveforms collected by signal logger from in accordance with a preferred embodiment of the present invention. As shown a signal of interest SIGNAL within DUT from transitions from a low state to a high state between clock cycles and and then transitions from a high state back to a low state between clock cycles and . At clock cycle edge detection module which is designated to detect an edge transition from a low state to a high state transitions from a low state to a high state and remains in the high state throughout the entire test. In conjunction counting module which is associated with edge detection module stops its clock cycle count after clock cycle to signify that the above mentioned edge transition occurred between clock cycles and .

Similarly at clock cycle edge detection module which is designated to detect an edge transition from a high state to a low state transitions from a high state to a low state and stays in the low state for the remaining portion of the test. In conjunction counting module which is associated with edge detection module stops its clock cycle count after clock cycle to signify that the above mentioned edge transition occurred between clock cycles and .

After the test has been completed a test engineer can write software routines of complex temporal expressions to check the logged signals such as those shown in . For example if the first low to high transition on SIGNAL is defined as event A and the first high to low transition on SIGNAL is defined as event B then signal logger logs event A and event B including time stamps clock counts. A simple temporal expression can be defined that if event A occurs event B must occur within 10 cycles after that. Software routine can be used to query signal logger at the end of the test to get the logged information that includes such events and their associated time stamps clock counts.

As has been described the present invention provides a signal logger for performing temporal checking. The signal logger is part of the hardware model and can monitor and log the activity on any signal along with time stamp clock count when the appropriate user defined changes in the state of the signals is detected. After testing software routines can be used to post process the logged signals and various temporal and relationship checks can be performed on the logged signals. As a result runtime improvements in the order of one to two magnitudes on an emulator running a system level model can be achieved.

Compared to the prior art software only approach the signal logger of the present invention reduces the runtime and improves the efficiency of a design verification system. This is because the signal logger of the present invention monitors the state of the signals within a DUT without interrupting and querying a simulator. Thus most of the overhead wasted in interrupting querying and restarting the simulator can be avoided. Furthermore since the simulator is allowed to run continuously for a large number of clock cycles without interruption the performance gains from hardware simulators can be fully achieved. The additional logic that is added to the simulation model in order to implement the signal logger has a negligible effect on simulation runtime because such logic is completely insignificant compared to the typical logic complexity of a multi million gate chip model.

It is also important to note that although the present invention has been described in the context of hardware those skilled in the art will appreciate that the mechanisms of the present invention are capable of being distributed as a program product in a variety of forms and that the present invention applies equally regardless of the particular type of signal bearing media utilized to actually carry out the distribution. Examples of signal bearing media include without limitation recordable type media such as floppy disks or compact discs and transmission type media such as analog or digital communications links.

While the invention has been particularly shown and described with reference to a preferred embodiment it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention.

