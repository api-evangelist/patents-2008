---

title: Method and system for enhancing software documentation and help systems
abstract: A method and system for enhancing software documentation and help systems. In one embodiment, a virtual library for a selected combination of tools is created. The virtual library is then linked to the tools in the selected combination of tools. In another embodiment, a combination of tools for designing a complex software system is selected from one or more software releases. The one or more software releases comprises a plurality of available tools. The selected combination of tools comprises less than all of the plurality of available tools. Each of the plurality of available tools is associated with one or more documents. Access to only those one or more documents associated with tools in the selected combination of tools is provided.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07937418&OS=07937418&RS=07937418
owner: Cadence Design Systems, Inc.
number: 07937418
owner_city: San Jose
owner_country: US
publication_date: 20081229
---
The present application is a divisional of U.S. application Ser. No. 10 384 102 filed on Mar. 6 2003 which claims the benefit of U.S. Provisional Application Ser. No. 60 410 516 filed on Sep. 13 2002 both of which are hereby incorporated by reference in their entirety.

The present application is related to U.S. application Ser. No. 12 345 641 filed on Dec. 23 2008 now patented on Nov. 16 2010 as U.S. Pat. No. 7 836 102 which is entitled METHOD AND SYSTEM FOR ENHANCING SOFTWARE DOCUMENTATION AND HELP SYSTEMS and is hereby incorporated by reference in its entirety.

The present invention is related to documentation and help systems. More particularly the present invention is directed to a method and system for enhancing software documentation and help systems.

In the electronic design automation EDA industry tools for designing integrated circuits and printed circuit boards are packaged and distributed in product suites or tool sets in what are known as software releases. For a complex software design project designers may employ a combination of tools from several software releases installed on a computer network. These tools often use a documentation and help system to display the documentation for the tools. The documentation and help system may be standalone or integrated into the tool. The documentation may be split into several document or help sets or may be organized into one giant document set shared by all of the tools in the software release.

Earlier documentation and help systems display and search help sets for a single tool in a software release a predetermined combination of tools within a release or an entire release at a time. The help sets are statically used by a tool or shared between tools in a release. Earlier documentation and help systems are not designed to browse and search documentation for an arbitrary combination of tools which spans multiple software releases. Further they do not allow concurrent access to documentation for such arbitrary combinations of tools. For example a tool could not ask the help system to browse and search documentation for one arbitrary combination of tools and while another tool asks the same run time instance of the help system to browse and search documentation for another combination of tools. This is desirable when the two tools are participating in different design projects or design flows but sharing the same help system.

Additionally earlier documentation and help systems do not allow one run time instance of a tool to browse and search documentation for one combination of tools and another concurrent run time instance of the same tool to browse and search documentation for a different combination of tools. This is desirable when the same tool participates in different design projects each with its own combination of tools. Moreover when tools are used from multiple software releases it is possible to invoke more than one instance of a documentation and help system.

Rather than viewing document sets separately and possibly starting multiple instances of a documentation and help system as described above users would prefer a documentation and help system that allows them to browse and search documents for only the tools being used in a design project. Since documents may be stored in various locations across a network users would also prefer to be able to find documents without knowing where the documents are installed. In other words the installed software releases which contain tools and documents should be transparent to the users. Additionally users would prefer to eliminate the overhead of browsing and searching through large volumes of documents that are part of the software releases but do not apply to the tools in use. Further users would prefer to use a single version and instance of a documentation and help system in a design project. Moreover at any given time a number of projects may be in progress each project using a different combination of tools. Thus users would like to have concurrent access to a different set of documents for each project even though each release has a static set of documents.

The present invention provides a method and system for enhancing software documentation and help systems. In one embodiment a virtual library for a selected combination of tools is created. The virtual library is then linked to tools in the selected combination of tools. In another embodiment a combination of tools is selected from one or more software releases. The software releases comprise a plurality of available tools. The selected combination of tools comprises less than all of the plurality of available tools. Each available tool is associated with one or more documents. Access to only those one or more documents associated with tools in the selected combination of tools is provided.

Further details of aspects objects and advantages of the invention are described below in the detailed description drawings and claims. Both the foregoing general description and the following detailed description are exemplary and explanatory and are not intended to be limiting as to the scope of the invention.

Designers of complex software systems often use suites of software tools packaged and distributed in separate software releases. For a software design project users may employ a particular combination of tools from the various tool suites at their disposal. As a result users want to be able to browse and search selected documentation for tools that may be from multiple software releases.

The present invention provides a method and system for enhancing software documentation and help systems. The documentation and help system used to illustrate embodiments of the invention is a proprietary system used in the EDA industry called CDSDoc which is manufactured and sold by Cadence Design Systems Inc. of San Jose Calif. Although various embodiments of the invention are described in the context of the EDA tools CDSDoc and UNIX operating system embodiments of the invention are not limited to EDA tools CDSDoc or UNIX. The methodology and solution described herein is applicable to any documentation and help system for any software tool in any environment. For example the software release could be Microsoft Office XP running on Microsoft Windows XP operating system. Microsoft software is bundled with an integrated documentation and help system. Microsoft Office XP and Windows XP are manufactured and sold by Microsoft Corp. of Redmond Wash.

Documentation in CDSDoc is organized into books and libraries. Each book resides in a directory of its own and has several document files. Each library consists of several book directories. Other documentation and help systems may be organized into books help sets document sets or single document files. A virtual library can be thought of as a portal to browse and search selected parts of a set of actual document libraries. In an embodiment of the invention a project directory is used to provide a physical representation and description of a virtual library. The project directory contains a list of books document or help sets or individual document files to be made available to any user of the project. The directory also contains a project specific search index for all those books. For some documentation and help systems including CDSDoc files that define the path to and the version of the document and help system to be used for that project are also included in the project directory.

According to an embodiment of the invention a virtual library includes a project file a document list file a serialized document list file and a search index. In other embodiments of the invention the virtual library may also include a project list file a path file and or a library file.

A project file defines the project name and contains path and version information used to invoke and communicate with documentation and help system processes. In one embodiment the latest available version of a documentation and help system from one of the software releases is used. Illustrated in is project directory with a list of files . In cdsdoc.prj is the name of the project file for virtual library named chip. shows a sample cdsdoc.prj file . In the embodiment IC Chip is the project name the version of CDSDoc that the project will use is 3.0 and the path to CDSDoc version 3.0 is net server ic. In one embodiment project name IC Chip appears in a library window of the documentation and help system as illustrated in .

A document list file identifies all of the books that a user wants to view from one or more actual libraries included in software releases. In an embodiment the document list file is written by hand. In one embodiment absolute paths to the documents listed are needed. In doc.st is the name of the document list file for virtual library . Illustrated in is a sample doc.st file . In the embodiment paths to seven books amsenvugKPNS amsenvug verilogamsref anawavefin nvclog ncvlogtut ncvlogKPNS from two different releases ic50 and ldv42 located on two different servers server and server are included in doc.st file . Other documentation and help systems may use paths to document sets help sets or document files.

A serialized document list file is a binary image of the run time persistent object which contains books and documents listed in the document list file i.e. it is the document list file in a documentation and help system readable format. In another embodiment of the invention a serialized document list file is not included in a virtual library if the document list file is already in a documentation and help system readable format. In one embodiment at run time a library window in the documentation and help system reads the serialized document list file and constructs the persistent object in memory to display books in the virtual library. In doc.ser is the name of the serialized document list file for virtual library . In one embodiment a serialized document list file is derived from the document list file using a compiler included in the documentation and help system. In CDSDoc users can use the cdsdocCompiler command to create a serialized document list file from a document list file. For example the command cdsdocCompiler project u projects chip creates a serialized document list file in virtual library .

A search directory for the virtual library contains a full text search index that includes only those books listed in the document list file. This way users of a particular project search only the books identified for their project. This can be a much smaller collection than the full text search index shipped with each release which contains pointers to all of the documents installed for that release. In collects is the name of the search directory for virtual library . In one embodiment a search directory is constructed from the document list file using an indexer included in the documentation and help system. In CDSDoc users can use the cdsdocIndexer command to create a search index from a document list file. For example the command cdsdocIndexer project u projects chip creates a search index in virtual library that will be located in the directory u projects chip collects. In one embodiment only the search index is created. The books still reside in their respective release hierarchies and are not copied anywhere. shows how CDSDoc accesses collects search index in project directory chip to search books in libraries according to an embodiment of the invention.

A project list file contains pointers to other available virtual libraries so that users can choose from different virtual libraries while the documentation and help system is running. In one embodiment as each virtual library is used its reference is stored by the documentation and help system in a file used to add the virtual library name to the list of available hierarchies and libraries in the documentation and help system library window as illustrated in . The project list file allows a system administrator or user to load several virtual libraries in the documentation and help system library window at start up. In projects.lst is the name of the project list file for virtual library . Illustrated in is a sample projects.lst file . In one embodiment virtual libraries chip simulate and bigChip are added to the list of available hierarchies and libraries in the documentation and help system library window as illustrated in .

A path file allows users to identify documentation hierarchies for separate software releases and load them into the documentation and help system library window at start up. The path file contains pointers to directories containing actual libraries included in the software releases. In cdsdoc.pth is the name of the path file for virtual library . Illustrated in is a sample cdsdoc.pth file . In one embodiment document hierarchies Ic50 and ldv42 are added to the list of available hierarchies and libraries in the documentation and help system library window.

A library file lists the product and or family names of the tools used in the project from each release. The library file is created using a text editor in one embodiment. In anther embodiment the library file is created using an XML editor. Using the documentation and help system compiler a document list file can be generated from the library file. The generated document list file will include all of the books associated with the tools listed in the library file. Generating a document list file benefits users who do not know which book directory names to include in the file. Users know which tools they use but they are unlikely to know all of the books associated with their tools nor will they know all of the document directory names. In one embodiment a mapping file is used in conjunction with the library file to generate the document list file. The mapping file maps internal tool names to external tool names. In another embodiment only a library file is used when the internal tool names are identical to the external tool names.

In library.xml is the name of the library file for virtual library . Illustrated in is a sample library.xml file . In the embodiment AMS Designer and Analog IC are the product names of two tools from software release ic50 and Functional Verification is the family name of a group of tools from software release ldv42. The books associated with these tools will be included in the document list file generated from library.xml file . In CDSDoc users can use the cdsdocCompiler command to generate a document list file from a library file. For example the command cdsdocCompiler project u projects chip library creates a document list file in project directory chip which will include all of the book files for AMS Designer Analog Waveform and Functional Verification. In a further embodiment a serialized document list file can also be derived from the library file using the documentation and help system compiler. The derived serialized document list file will also include all of the books associated with the tools listed in the library file.

To link a virtual library to a tool an administrator or user sets an environment variable via a startup script or tool to point to the project directory. If the environment variable is set at startup the tools linked to the documentation and help system API will use the documentation and help system identified by the project file in the project directory. Clicking Help in a tool starts the documentation and help system if it is not already running.

A startup script or tool defines environment variable to point to the project directory where virtual library resides. Documentation and help system has an application programming interface API that allows tools to send document and help requests to help server in documentation and help system . At startup tools and API get environment variable i.e. tools get a pointer to virtual library .

When a user clicks Help in any one of the tools API starts documentation and help system if it is not already running from the release hierarchy identified in project file of virtual library . Help server accepts requests from tools and displays content in display window . Help server also receives a pointer to virtual library from tools via API and passes it on to library window and search server . Library window reads a list of document titles from serialized document list file and allows users to choose which document to display in display window . Search server uses search index to search the documents in virtual library . In one embodiment a standard web browser for example Netscape Navigator or Microsoft Internet Explorer can be used as display window . In an alternative embodiment library window and display window are merged into one window.

In another embodiment of the invention one or more of tools may be started with environment variable pointing to a different virtual library. When a help request is sent to documentation and help system from these tools the same running instance of documentation and help system displays and searches the second virtual library. Hence the same instance of documentation and help system may be concurrently shared by a number of tools to browse and search any number of virtual libraries. In another embodiment a number of instances of the same tool may concurrently share the same instance of documentation and help system to browse and search a number of virtual libraries.

As described above when a user has an environment variable set whenever the user clicks Help in any tool or starts the documentation and help system standalone the books associated with the virtual library to which the environment variable is pointing will load into the library window of the documentation and help system. illustrates a library window according to an embodiment of the invention. In the embodiment the user can click on pull down button in library window to change from one library to another. Pull down list displays any libraries the user has previously viewed through the documentation and help system any libraries for separate software releases that are listed in the optional path file and any projects virtual libraries that are listed in the optional project list file. In the virtual libraries listed are those identified in project.lst file shown in . Each project title IC Chip Big Chip and Simulate is identified in the project list file in each of the individual project directories.

The present invention allows users to define document libraries for software design projects and link them to the tools in those projects. In one embodiment users are able to view documentation for tools through a single virtual library even though the documentation may be scattered over an intranet with software releases or document sets having separately rooted paths.

Tools access the user defined libraries. In an embodiment the same tool may be invoked concurrently under different virtual library environments. For example one instance of the tool may be accessing one virtual library whereas another instance of the same tool may concurrently be accessing another virtual library. In one embodiment the virtual library applied to the tool is determined at run time based on the project the tool is part of i.e. the virtual library accessed by the tool is determined dynamically. Users have the ability to browse and search the virtual libraries through the documentation and help system. Additionally once a tool is linked to the API of a documentation and help system the tool can participate in an unlimited number of virtual libraries without any change to the tool software according to an alternative embodiment of the invention.

In another embodiment product set to document set mapping is included. For example if core documents are associated with each product or family of products virtual libraries may be defined as abstractions using product or family names. The library abstractions can then be compiled into actual document references using a compiler according to one embodiment of the invention.

Since the project definition of a virtual library can include paths to documentation and help system executables an entirely new help system may be installed at this path to replace the old one as long as it complies with the documentation and help system API protocol. Users have the ability to view actual libraries installed with the software as well as virtual libraries using one graphical user interface according to one embodiment of the invention. Additionally users have the option of switching between libraries.

According to one embodiment of the invention computer system performs specific operations by processor executing one or more sequences of one or more instructions contained in system memory . Such instructions may be read into system memory from another computer readable medium such as static storage device or disk drive . In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions to implement the invention.

The term computer readable medium as used herein refers to any medium that participates in providing instructions to processor for execution. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. Non volatile media includes for example optical or magnetic disks such as disk drive . Volatile media includes dynamic memory such as system memory . Transmission media includes coaxial cables copper wire and fiber optics including wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infrared data communications.

Common forms of computer readable media includes for example floppy disk flexible disk hard disk magnetic tape any other magnetic medium CD ROM any other optical medium punch cards paper tape any other physical medium with patterns of holes RAM PROM EPROM FLASH EPROM any other memory chip or cartridge carrier wave or any other medium from which a computer can read.

In an embodiment of the invention execution of the sequences of instructions to practice the invention is performed by a single computer system . According to other embodiments of the invention two or more computer systems coupled by communication link e.g. LAN PTSN or wireless network may perform the sequence of instructions required to practice the invention in coordination with one another.

Computer system may transmit and receive messages data and instructions including program i.e. application code through communication link and communication interface . Received program code may be executed by processor as it is received and or stored in disk drive or other non volatile storage for later execution.

In the foregoing specification the invention has been described with reference to specific embodiments thereof. It will however be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. For example the above described process flows are described with reference to a particular ordering of process actions. However the ordering of many of the described process actions may be changed without affecting the scope or operation of the invention. The specification and drawings are accordingly to be regarded in an illustrative rather than restrictive sense.

