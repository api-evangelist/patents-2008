---

title: System and method for integration of browser-based thin client applications within desktop rich client architecture
abstract: Techniques for facilitating the reuse of a browser-based thin client of a client-server application in a browser-independent context. These techniques may be used, for instance, to integrate the functionality of a browser-based thin client in a desktop-based, rich client infrastructure. In one set of embodiments, these techniques include determining one or more browser dependencies that require the thin client to operate within a web browser. For example, the thin client may depend on a web browser to handle application security, the loading/caching of client-side files, the receipt/passing of application parameters, and the like. These browser dependencies are then eliminated. As a result, the thin client can be subsequently reused without the presence of a web browser. In one set of embodiments, this process is performed by a conversion utility that automatically converts program code for the browser-based thin client into program code for a browser-independent client application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08996658&OS=08996658&RS=08996658
owner: Oracle International Corporation
number: 08996658
owner_city: Redwood Shores
owner_country: US
publication_date: 20080903
---
Embodiments of the present invention relate to computer software and more particularly relate to techniques for facilitating the reuse of a browser based thin client of a client server application in a browser independent context.

In the late 1980 s and early 1990 s many business applications were developed using a thick client based client server architecture. These applications which included both a client side and server side component were structured so that the client side component i.e. thick client performed the bulk of the application processing e.g. user interface generation logic processing etc. . An example of such a thick client based application is Oracle Forms developed by Oracle Corporation.

As the Internet grew in popularity in the mid to late 1990 s many organizations re architected their existing thick client based applications so that they could be accessed via the World Wide Web WWW . This process generally involved moving functions previously performed by the thick client to a middle tier layer running on a server side machine. This allowed users to access the application via a lightweight thin client running in a standard web browser. In these implementations the thin client was typically a JAVA applet or some other type of browser based software component and was configured to perform relatively simple tasks such as presenting user interfaces generated by the server capturing user inputs and the like.

Now there is a growing trend towards building browser independent composite applications. These applications do not require a web browser and enable users to view and interact with user interfaces from one or more component applications. For example one type of browser independent composite application may incorporate user interfaces from one or more legacy client server applications. To achieve this it would be advantageous to reuse existing browser based thin clients for the legacy client server applications in the context of the browser independent composite application.

However reusing a browser based thin client in a browser independent context is challenging for several reasons. For example in many cases existing browser based thin clients depend on web browser features i.e. cookies HTML forms etc. to handle security for interacting with their respective servers. In further cases existing browser based thin clients depend on the host web browser to handle the loading and caching of files the receipt and passing of application parameters and other functions.

Accordingly it would be desirable to have techniques for reusing a browser based thin client of a client server application that overcome the challenges above.

Embodiments of the present invention provide techniques for facilitating the reuse of a browser based thin client of a client server application in a browser independent context. These techniques may be used for instance to integrate the functionality of a browser based thin client in a desktop based rich client infrastructure. In one set of embodiments these techniques include determining one or more browser dependencies that require the thin client to operate within a web browser. For example the thin client may depend on a web browser to handle application security the loading caching of client side files the receipt passing of application parameters and the like. These browser dependencies are then eliminated. As a result the thin client can be subsequently reused without the presence of a web browser. In one set of embodiments this process is performed by a conversion utility that automatically converts program code for the browser based thin client into program code for a browser independent client application.

According to one embodiment of the present invention a method for facilitating the reuse of a browser based thin client of a client server application in a browser independent context is provided. The method comprises receiving program code for the browser based thin client and converting the program code for the browser based thin client into program code for a browser independent client application. The converting comprises determining one or more browser dependencies that require the browser based thin client to operate within a web browser in order to interact with a server side of the client server application and eliminating the one or more browser dependencies. In an embodiment the converting is performed in an automated fashion i.e. with minimal or no human intervention .

In one set of embodiments the browser based thin client may be a JAVA applet or an ActiveX control. Further the browser independent client application may be a desktop based rich client application or a web service. In a specific embodiment the client server application is Oracle Forms.

In one set of embodiments the browser based thin client is dependent on the web browser to handle application security when interacting with the server side of the client server application. In these embodiments the step of eliminating the one or more browser dependences includes eliminating the dependency on the web browser to handle said application security. In one embodiment this dependency can be eliminated by creating an authentication and authorization handlers in the browser independent client application wherein the authentication and authorization handlers perform authentication and or authorization duties on behalf of the browser independent client application that were previously performed by the web browser on behalf of the browser based thin client. The authentication duties may include for example authenticating a user attempting to login to the client server application. The authorization duties may include for example determining whether a user is authorized to perform a function via the client server application.

In one set of embodiments the authentication and authorization handlers include generic authentication and authorization Application Programming Interfaces APIs respectively. At runtime of the browser independent client application the generic authentication and or authorization APIs are automatically invoked when authentication or authorization is required. In some embodiments the generic authentication and authorization APIs may be configured to invoke one or more external security APIs that are external to the browser independent client application such as an authentication or authorization operation provided by an external security identity service.

In one set of embodiments the browser based thin client is dependent on the web browser to download and cache one or more files e.g. JAVA Archive files necessary for accessing the server side of the client server application. In these embodiments the step of eliminating the one or more browser dependences includes eliminating the dependency on the web browser to download and cache said one or more files.

In one set of embodiments the browser based thin client is dependent on the web browser to receive one or more execution parameters necessary for accessing the server side of the client server application. In these embodiments the step of eliminating the one or more browser dependences includes eliminating the dependency on the web browser to receive said one or more execution parameters. By way of example the execution parameters may be performance related parameters user interface related parameters and or login related parameters.

According to another embodiment of the present invention a system for facilitating the reuse of a browser based thin client of a client server application in browser independent context is provided. The system comprises a storage component configured to store program code for the browser based thin client and a processing component in communication with the storage component. In various embodiments the processing component is configured to receive the program code for the browser based thin client and convert the program code for the browser based thin client into program code for a browser independent client application. The converting comprise determining one or more browser dependencies that require the browser based thin client to operate within a web browser in order to interact with a server side of the client server application and eliminating the one or more browser dependencies. In an embodiment the converting is performed in an automated fashion i.e. with minimal or no human intervention .

According to another embodiment of the present invention a machine readable medium for a computer system is disclosed. The machine readable medium has stored thereon a series of instructions which when executed by a processing component cause the processing component to facilitate the reuse of a browser based thin client of a client server application in a browser independent context by receiving program code for the browser based thin client and converting the program code for the browser based thin client into program code for a browser independent client application. The converting comprises determining one or more browser dependencies that require the browser based thin client to operate within a web browser in order to interact with a server side of the client server application and eliminating the one or more browser dependencies. In an embodiment the converting is performed in an automated fashion i.e. with minimal or no human intervention .

A further understanding of the nature and advantages of the embodiments disclosed herein may be realized by reference to the remaining portions of the specification and the attached drawings.

In the drawings the use of like reference numbers in different drawings indicates similar components.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide an understanding of the present invention. It will be apparent however to one skilled in the art that the present invention may be practiced without some of these specific details.

Embodiments of the present invention provide techniques for facilitating the reuse of a browser based thin client of a client server application in a browser independent context. The techniques described herein are particularly applicable to integrating browser based thin clients in desktop based rich client applications such as desktop based composite applications. However it should be appreciated that these techniques may be used to integrate browser based thin clients in any kind of software environment or infrastructure that does not incorporate a web browser. Merely by way of example these techniques may be used to package the functionality exposed by a browser based thin client as a web service.

Further it should be appreciated that the techniques of the present invention may be used to facilitate the reuse of any type of browser based thin client corresponding to any type of client server application in a browser independent context. In a specific set of embodiments the techniques described herein may be used to facilitate the reuse of browser based thin clients for Oracle Forms based applications.

At step program code for a browser based thin client of a client server application is received. In one set of embodiments the browser based thin client is implemented as a JAVA applet. In other embodiments the browser based thin client is implemented as an ActiveX control or any other type of browser based component. The client server application may be based on any type of client server technology such as Oracle Forms or the like.

At step the program code for the browser based thin client is converted into program code for a browser independent client application. In other words the browser based thin client is converted into an application that is no longer dependent on the presence of a web browser in order to function. As discussed above the browser independent client application may be a desktop based rich client application such as a desktop based composite application. The browser independent client application may also be a web service that can be invoked from a Business Process Execution Language BPEL process. In various embodiments the program code conversion described at step is performed by a software conversion utility. In a specific embodiment the software conversion utility is capable of performing this conversion in an automated fashion i.e. with minimal or no human intervention .

It should be noted that prior art mechanisms exist for running a JAVA applet as a standalone JAVA application. For example a JAVA applet can be converted into a standalone JAVA application by manually changing the code structure of the applet in a defined manner. However these existing mechanisms fail to address the functional dependencies that an applet or any other type of browser based thin client may have with respect to its host web browser.

To overcome these deficiencies in the prior art the conversion performed at step includes 1 determining browser dependencies that require the browser based thin client to operation within a web browser in order to interact with a server side of the client server application and 2 eliminating the one or more browser dependencies. In some scenarios the browser based thin client may be dependent on its host web browser to handle application security when interacting with the server side of the application. For example in the case of Oracle Forms an application user is typically authenticated and or authorized via an HTML form based interface prior to initialization of the thin client and the authenticated authorized credentials of the user are maintained in a browser cookie. In these scenarios embodiments of the present invention detect and eliminate this browser dependency by integrating security handling directly into the program code of the browser independent client application. This process of integrating security handling is described in greater detail with respect to below.

In other scenarios the browser based thin client may be dependent on its host web browser to download and or cache one or more client side files necessary for execution. For example in the case of a JAVA applet based thin client the applet may rely on the browser to download and cache JAVA Archive JAR files that are needed to run the applet. In these scenarios embodiments of the present invention detect and eliminate this browser dependency by automatically handling the download and caching of such files within the browser independent client application.

In yet other scenarios the browser based thin client may be dependent on its host web browser to receive pass one or more execution parameters from to the server side of the application. For example these parameters may be received or passed as values within an HTTP URL and may include performance related parameters e.g. Java Virtual Machine parameters login related parameters e.g. username password etc. user interface related parameters e.g. UI dimensions etc. and or session related parameters e.g. session ID etc. . In these scenarios embodiments of the present invention detect and eliminate this dependency by automatically receiving sending these parameters from to the server side of the application from the context of the browser independent client application.

It should be appreciated that the specific steps illustrated in provide a particular method for facilitating the reuse of a browser based thin client in a browser independent context according to an embodiment of the present invention. Other sequences of steps may also be performed according to alternative embodiments. For example the individual steps illustrated in may include multiple sub steps that may be performed in various sequences as appropriate to the individual step. Furthermore additional steps may be added or existing steps may be removed depending on the particular application. One of ordinary skill in the art would recognize many variations modifications and alternatives.

At step an authentication handler is created in the browser independent client application where the authentication handler includes an authentication API configured to perform one or more authentication functions on behalf of the browser independent client application that were previously performed by a web browser on behalf of the browser based thin client. For example assume that the browser based thin client relied on the web browser to authenticate a user via an HTML form based interface. Further assume that the thin client relied on the web browser to maintain the authenticated credentials of the user in a browser cookie. In this case the authentication API created in the browser independent client application would take care of authenticating the user and the authentication handler would maintain the authenticated credentials of the user in a data structure directly within the browser independent client application. Thus the browser is no longer needed for authentication purposes.

Similarly at step an authorization handler is created in the browser independent client application where the authorization handler includes an authorization API configured to perform one or more authorization functions on behalf of the browser independent client application that were previously performed by a web browser on behalf of the browser based thin client. For example assume that the browser based thin client relied on the web browser to authorize the user via an HTML form based interface. Further assume that the thin client relied on the web browser to maintain the authorized credentials of the user in a browser cookie. In this case like the authentication example above the authorization API created in the browser independent client application would take care of authorizing the user and the authorization handler would maintain the authorized credentials of the user in a data structure directly within the browser independent client application. Thus the browser is no longer needed for authorization purposes.

It should be noted that although the authentication and authorization handlers of steps and are described as two separate handlers they may be combined into a single handler that performs combined authentication authorization functions. Moreover either the authentication handler or the authorization handler may be excluded depending on the needs of a particular application. One of ordinary skill in the art would recognize many variations modifications and alternatives.

Once the handlers are created their corresponding APIs may be called from a main process of the browser independent client application when authentication and or authorization is required step . For example the authentication and or authorization APIs may be called to ensure that the user has appropriate security credentials before allowing the user to login or to perform a particular function via the application. In one set of embodiments the authentication and authorization APIs are easily configurable by a developer of the browser independent client application. In this manner they can be modified to call different security APIs and or services as security requirements change. In a specific embodiment the authentication and or authorization APIs are configured to call one or more external security APIs that are external to the browser independent client application e.g. an authentication authorization operation exposed by an external security identity service .

It should be appreciated that the specific steps illustrated in provide a particular method for handling security in a browser independent client application according to an embodiment of the present invention. Other sequences of steps may also be performed according to alternative embodiments. For example the individual steps illustrated in may include multiple sub steps that may be performed in various sequences as appropriate to the individual step. Furthermore additional steps may be added or existing steps may be removed depending on the particular application. One of ordinary skill in the art would recognize many variations modifications and alternatives.

At steps web browser web server and security service interact to authenticate and or authorize a user at client . In particular web server sends an HTML form based security interface to web browser step web browser sends authentication authorization info to web server step security service authenticates authorizes the user based on the received info step and web server sends a session cookie comprising a security token and an HTML page including applet parameters to web browser step . Note that since this interaction is performed via web browser rather than browser based thin client thin client is necessarily dependent on web browser to handle security.

Once the user has been authenticated authorized web browser may request one or more client side files e.g. applet files that are needed to run thin client step . These files are sent by web browser step and subsequently loaded and cached by web browser .

At step thin client is initiated and connects to Forms listener . As part of this connection process web browser takes care of passing appropriate execution parameters to the Forms listener. Forms listener then spawns an instance of Forms runtime engine which sends the appropriate Forms UI to thin client step .

At steps and browser independent client application interacts directly with security service to authenticate and or authorize a user. In one set of embodiments this is performed by calling the authentication and or authorization APIs of the authentication and authorization handlers described with respect to . Since this interaction is performed directed by browser independent client application the dependency on web browser to handle security is eliminated.

At step browser independent client application connects with Forms listener . As part of this process browser independent client application is configured to send appropriate execution parameters to Forms listener . In this manner the dependency on web browser to receive and pass parameters is also eliminated.

Finally at steps and Forms runtime engine is spawned and sends the appropriate Forms UI to browser independent client application . Although not shown in application may also take care of requesting and loading any files needed by the application at runtime thereby eliminating the need to request for example applet files via web browser as shown in flow diagram .

Client computing devices may be general purpose personal computers including e.g. personal computers and or laptop computers running various versions of Microsoft Windows and or Apple Macintosh operating systems cell phones or PDAs running software such as Microsoft Windows Mobile and being Internet e mail SMS Blackberry or other communication protocol enabled and or workstation computers running any of a variety of commercially available UNIX or UNIX like operating systems including without limitation the variety of GNU Linux operating systems . Alternatively client computing devices may be any other electronic device capable of communicating over a network e.g. network described below with server .

Server may be a general purpose computer specialized server computer including e.g. a LINUX server UNIX server mid range server mainframe computer rack mounted server etc. server farm server cluster or any other appropriate arrangement and or combination. Server may run an operating system including any of those discussed above as well as any commercially available server operating system. Server may also run any of a variety of server applications and or mid tier applications including web servers JAVA virtual machines application servers database servers and the like. As indicated above in one set of embodiments server is adapted to run one or more server and or middle tier components that are configured to receive and service requests from client computing devices .

As shown client computing devices and server are communicatively coupled via a network . Network may be any type of network that can support data communications using any of a variety of commercially available protocols including without limitation TCP IP SNA IPX AppleTalk and the like. Merely by way of example network may be a local area network LAN such as an Ethernet network a Token Ring network and or the like a wide area network a virtual network including without limitation a virtual private network VPN the Internet an intranet an extranet a public switched telephone network PSTN an infra red network a wireless network e.g. a network operating under any of the IEEE 802.11 suite of protocols the Bluetooth protocol known in the art and or any other wireless protocol and or any combination of these and or other networks.

Runtime system environment may also include one or more databases . For instance databases may include an application database configured to store transactional data for a client server application running on server and client computing devices as well as any other type of database or data storage component discussed in the present disclosure. Databases may reside in a variety of locations. By way of example one or more of databases may reside on a storage medium local to and or resident in one or more of the computers . Alternatively databases may be remote from any or all of the computers and or in communication e.g. via network with one or more of these. In one set of embodiments databases may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to the computers may be stored locally on the respective computer and or remotely as appropriate. In one set of embodiments databases may include relational databases such as Oracle 10g that are adapted to store update and retrieve data in response to SQL formatted commands.

Computer system may additionally include a machine readable storage media reader a communications subsystem e.g. a modem a network card wireless or wired an infra red communication device etc. and working memory which may include RAM and ROM devices as described above. In some embodiments computer system may also include a processing acceleration unit which can include a digital signal processor DSP a special purpose processor and or the like.

Machine readable storage media reader can further be connected to a machine readable storage medium together and optionally in combination with storage device s comprehensively representing remote local fixed and or removable storage devices media for temporarily and or more permanently containing machine readable information. Communications system may permit data to be exchanged with network and or any other computer described above with respect to runtime system environment .

Computer system may also comprise software elements shown as being currently located within working memory including an operating system and or other code such as an application program which may be a client application Web browser mid tier application RDBMS etc. . It should be appreciated that alternative embodiments of computer system may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and machine readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information such as machine readable instructions data structures program modules or other data including RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices data signals data transmissions or any other medium which can be used to store or transmit the desired information and which can be accessed by a computer.

While the present invention has been described using a particular combination of hardware and software it should be recognized that other combinations of hardware and software are also within the scope of the present invention. The present invention may be implemented only in hardware or only in software or using combinations thereof.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. Many variations of the invention will become apparent to those skilled in the art upon review of the disclosure. The scope of the invention should therefore be determined not with reference to the above description but instead should be determined with reference to the pending claims along with their full scope or equivalents.

