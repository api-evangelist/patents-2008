---

title: Method and system for providing version control of parameters in a command-based API using java serialization
abstract: A technique for determining whether a server host supports the functions in a command sent by a client host. The client host formulates a command including a command object that contains parameter objects. The parameter objects, which represent the functions, are serialized, e.g., using the Java serialization command, and communicated to the server host. The server host attempts to deserialize the parameter objects. If it is successful, it is concluded that the server host supports the functions represented by the parameter objects. Or, it is concluded that the server host is incompatible with the functions represented by one or more parameter objects that cannot be deserialized. The server host may be a storage server, and the functions may be storage-related, such as a copy type to be performed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07921433&OS=07921433&RS=07921433
owner: International Business Machines Corporation
number: 07921433
owner_city: Armonk
owner_country: US
publication_date: 20080429
---
This application is a continuation of U.S. Ser. No. 10 697 761 filed Oct. 30 2003 now U.S. Pat. No. 7 409 693 the entire contents of which are incorporated herein by reference.

The invention relates generally to the field of computer systems and more specifically to a technique for determining whether a server side host supports a command provided by a client side host.

Computer systems include host computers that communicate with one another via a network to run network applications. Typically software is distributed and run on two or more hosts to realize the application. The network applications have application layer protocols that define the format and order of the messages that are exchanged between the hosts and what actions to take when a message is transmitted or received. In particular a network application typically includes a client side and a server side. In this case the application may be referred to as a client server application. A client side on one host may communicate with a server side on another host. The client is usually the host that initiates a communication or session with another host.

However difficulties arise when the client host and server host are running different versions of the network application or other software. In this case the client may provide a command to the server requesting it to perform a specific function that the server does not support. Various approaches have been developed to address this problem. For example the client may send additional data to the server such as a codeword that identifies the version the client is using. However this approach lacks generality and requires that a special protocol for coding and decoding the version data be implemented.

To overcome these and other deficiencies in the prior art the present invention provides a technique for determining whether a server supports different functions that are represented by parameter objects in a command that is sent to a server side host by a client side host.

In a particular aspect of the invention a method for providing a command from a client side host to a server side host is provided. The method includes invoking a client side application programming interface API at the client side host to pass in a set of parameter objects and to provide a command object that contains the parameter objects wherein each of the parameter objects represents a different parameter of a command serializing the command and parameter objects to provide serialized command and parameter objects and communicating the serialized command and parameter objects to the server side host as the command.

In another aspect of the invention a method for processing a command from a client side host at a server side host is provided. The method includes receiving serialized command and parameter objects at the server side host as a command from the client side host wherein the command object contains the parameter objects and each of the parameter objects represents a different parameter of the command and deserializing the serialized command and parameter objects to determine whether the server side host is compatible with the different parameters represented by the parameter objects.

Generally the present invention provides a technique for providing version control of parameters in a command based client server network application programming interface API . In a client server network API the levels of functionality supported by the client and server may differ. Moreover in a command based API new functionality may be represented as new additional parameters to the commands. For example for a server host in a storage subsystem the functions may be storage related. The functions may specify e.g. a copy type to be performed a location to store data or other storage action to be taken. For instance in the IBM Enterprise Storage Server ESS storage subsystem one function may be a normal continuous flash copy an instant copy of data such as a point in time copy of a volume while another function may be an incremental flash copy. The functions may also be thought of as optional features that may or may not be supported by different server hosts. The programming challenge is how to determine if a specific parameter of a command from the client portion of the API is supported by e.g. compatible with the server portion of the API. The present invention addresses this challenge by using Java deserialization of class type to determine if the server supports a specific parameter and the function represented by the parameter.

The general operation and configuration of the processors memories and network interfaces is well known in the art and is therefore not described in detail. The components illustrated are provided to assist in understanding the invention. The hosts may be general purpose computers workstations servers portable devices such as PDAs or other computer devices. The functionality described herein can be achieved by configuring the hosts and with appropriate software. In one approach the software comprises an object oriented software such as Java code that is stored in the memories . In this case the memories are program storage devices. The software is executed using the processors in a known manner.

Specifically in accordance with the invention each new parameter for a command based API is defined as a unique new Java Class type. Each parameter Class may or may not contain data. Java Serialization is used to transmit parameters from a Java Client e.g. client host to a Java Server e.g. server host . Whenever a new parameter class is added to the client host and the parameter is sent to the server host the server host will either deserialize the parameter successfully if the server supports the functionality represented by the parameter or fail to successfully deserialize it indicating that the server does not support the parameter functionality. A particular advantage of this technique for providing version control is that only one definition for a parameter is required. The version control information and the functionality are contained within one object so no additional separate version control data is needed. The Class type itself is the only unique data necessary to determine whether the API at the server host supports a given functionality. Thus an important aspect of the invention is how the classes for commands and parameters are organized. Example declarations of classes are provided further below.

Serialization is the process of converting an object to a byte stream. Deserialization is the opposite process. When an object is serialized information about its class and other objects that it refers to is also saved. To serialize an object using Java an object is passed as an argument to the writeObject method of an object of class java.io.ObjectOutputSteam which in turn is built from an object of class java.io.FileOutputStream. Moreover an object is serializable when its class implements the Serializable interface. This is an empty interface that doesn t contain any method declarations but simply identifies classes whose objects are serializable. During deserialization the readObject method is invoked on an object of class java.io.ObjectInputStream which is built upon a java.io.FileInputStream object. If the server host cannot locate a class file needed to make sense of a parameter object during deserialization the exception java.lang.ClassNotFoundException is thrown.

Generally the command serialization and parameter serialization are recursive. The process can be outlined as follows 

3 Command.writeObject method knows that in order to serialize a Command object it must serialize everything contained within that object.

5 Parameter.writeObject knows that in order to serialize a Parameter object it must serialize everything contained within the Parameter.

7 Control turns back to Command.writeObject . All Parameters have been serialized. Any other data in Command is serialized and Command Serialization completed.

Moreover the process may be analogized to nested Russian dolls. For instance say we had three nested Russian dolls big medium and small. The top call would be to BigDoll.writeObject which under the covers would invoke MediumDoll.writeObject which under the covers would invoke LittleDoll.writeObject . Deserialization is similar outside in .

While the above examples are provided using Java which is a high level object oriented programming language developed by Sun Microsystems Inc. the invention is suitable for use with other object oriented programming languages as well.

The invention has been described herein with reference to particular exemplary embodiments. Certain alterations and modifications may be apparent to those skilled in the art without departing from the scope of the invention. The exemplary embodiments are meant to be illustrative not limiting of the scope of the invention which is defined by the appended claims.

