---

title: Conflict resolution
abstract: Embodiments of a collaborative authoring environment enable a user to resolve editing conflicts arising when synchronizing a user copy of a data file with a master copy of the data file. Content updates may be synchronized separately from metadata updates. Metadata updates may be synchronized automatically, whereas content updates may be synchronized only when any identified editing conflicts are resolved. When an editing conflict is identified, the user interface of the authoring application may be configured to toggle between displaying and hiding the identified editing conflicts.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08352870&OS=08352870&RS=08352870
owner: Microsoft Corporation
number: 08352870
owner_city: Redmond
owner_country: US
publication_date: 20080428
---
Traditional collaborative editing tends to be performed serially. Users take turns accessing a document editing the document and storing their edits. To inhibit editing conflicts the accessing user may place a lock on the file to inhibit other users from editing the document when the accessing user is editing the document. The iterative editing process can cause delays since each user may wait for a turn at editing the document. In addition the iterative editing process may be difficult to manage. For example each user may need to keep track of who is editing which portions of the document which version of the document is the most recent and when the user will have a turn.

In other types of traditional collaborative editing each user can edit a different copy of a document. Subsequently all of the edited copies may be merged into a single document. This large scale merge also may cause delays lead to numerous editing conflicts and or be difficult to manage. For example the user responsible for merging the documents may be required to track the relationship between the documents. The user also may be responsible for resolving conflicts among two or more of the edited copies.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended as an aid in determining the scope of the claimed subject matter.

Embodiments of the present disclosure are generally directed to enabling a user to resolve editing conflicts arising when synchronizing a data file in a collaborative environment. Each user authoring a user copy of a data file may resolve editing conflicts between a master copy of the data file and the user copy. Updates from the user copy of the data file may be incorporated into the master copy after editing conflicts have been resolved.

According to aspects of the disclosure an authoring application enables a user to selectively show and hide editing conflicts within a user copy of a data file. The authoring application enables free editing of the user copy regardless of whether or not editing conflicts are shown or hidden. According to other aspects authoring application provides a contextual user interface that enables a user to resolve the displayed editing conflicts.

In some embodiments showing editing conflicts includes annotating conflicting content. In one embodiment annotating conflicting content indicates how the content conflicts. In another embodiment only conflicting content inserted revised and or deleted within the user copy is annotated.

These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are explanatory only and are not restrictive of aspects as claimed.

In the following detailed description references are made to the accompanying drawings that form a part hereof and in which are shown by way of illustrations specific embodiments or examples. While the disclosure will be described in the general context of program modules that execute in conjunction with an application program that runs on an operating system on a computer system those skilled in the art will recognize that the disclosure also may be implemented in combination with other program modules. The embodiments described herein may be combined and other embodiments may be utilized without departing from the spirit or scope of the present disclosure. The following detailed description is therefore not to be taken in a limiting sense and the scope of the invention is defined by the appended claims and their equivalents.

In accordance with the principles of the present disclosure a collaborative authoring application provides an authoring environment in which one or more users can edit one or more data files e.g. word processing documents presentation documents spreadsheet documents pictures or other images sound files software applications executable code etc. via editing operations e.g. insertion revision and or deletion of content and or metadata . Each user obtains a user copy of the data file based on a version of the data file represented by a master copy. A user may edit the user copy of the data file to create a new version of the data file and periodically synchronize the new version with the master copy.

Synchronization as the term is used herein refers to the sending and or receiving of one or more version updates between the master copy of the data file and a user copy of the data file to create a common version of the data file. For example each user periodically may send to the master copy a version update representing the new version of the data file and periodically may receive from the master copy a version update representing a current version of the master copy e.g. which may reflect edits performed by other users .

As briefly described above embodiments of the present disclosure are directed to enabling a user to resolve editing conflicts arising when synchronizing a data file in a collaborative environment. In general editing conflicts may arise when the master copy of the data file changes e.g. editing operations are performed on the master copy between when a user copy is obtained and the user copy is synchronized with the master copy or between synchronizations. Such changes to the master copy will be referred to herein as intervening changes. 

An editing operation performed on a user copy of the data file results in an editing conflict as the term is used herein when the editing operation interferes with an intervening change made to the master copy i.e. or vice versa . For example if a user performs an editing operation in a user copy of a data file to revise a first data unit that was deleted in a master copy of the data file by an intervening change then the editing operation resulting in the revision of the first data unit would conflict with the editing operation resulting in the deletion of the first data unit in the master copy.

Referring now to the drawings illustrates an example authoring system having features that are examples of inventive aspects of the disclosure. The authoring system includes a storage device storing a master copy of a data file e.g. word processing documents presentation documents spreadsheet documents pictures or other images sound files software applications executable code etc. . In one embodiment the storage device can include one or more storage devices e.g. a network of storage devices . In another embodiment the storage device can include one or more computing devices.

The authoring system also includes at least one user computing device that may be communicatively coupled to the storage device . As the term is used herein a user computing device includes any device configured to obtain and author a user copy of a data file from a master copy of the data file. As the term is used herein authoring a data file may include creating the data file and or editing the data file via editing operations. Each of the user computing devices can author the data file by creating a user copy of the data file based on the master copy . The user device may edit the user copy when the user device is communicatively coupled to the storage device i.e. online or when the user device is disconnected from the storage device i.e. offline .

The user copy of the data file may be synchronized when the user computing device communicatively couples to the storage device i.e. is online and periodically sends to the storage device one or more updates to be incorporated into the master copy and thereby shared with other user computing devices. Synchronization of the user copy also includes periodically obtaining from the storage device updates from the master copy that originated from other user computing devices. When a user computing device is offline the user computing device does not synchronize with the storage device and hence the other user computing devices.

Additional details pertaining to synchronization of a user copy of a data file with a master copy can be found in co pending application Ser. No. 11 938 082 filed Nov. 9 2007 and entitled Collaborative Authoring the disclosure of which is hereby incorporated herein in its entirety. Additional details pertaining to synchronization when the user computing device is offline can be found in co pending application Ser. No. 11 957 010 filed Dec. 14 2007 and entitled Collaborative Authoring Modes the disclosure of which is hereby incorporated herein in its entirety.

In the example shown in four user computing devices A B C and D are communicatively coupled to a storage device . In other embodiments however any number of user computing devices may be coupled to the storage device . In the example shown each user computing device A B C D can send to the storage device updates generated by the user of the user computing device and can request from the storage device updates generated by the users of the other user computing devices. The computing devices A B C and D each contain a user copy A B C and D respectively of the data file.

The user computing devices A B C D can be a different device from the storage device or can include different user accounts implemented on the storage device . In one embodiment a device that acts as a storage device for one data file may act as a user computing device for a different data file and vice versa. In one embodiment the storage device can be a server computing device and the user computing devices A B C D can be client computing devices.

According to aspects of the disclosure updates to the data file include content updates and or metadata updates. As the term is used herein content updates refer to any editing operation made to the substantive content of a data file. For example content updates for a word processing document can include added paragraphs i.e. or sections thereof deleted paragraphs i.e. or section thereof revised paragraphs i.e. or sections thereof and additions deletions and or changes to tables charts images or other such objects. In another embodiment content updates for a presentation document can include added deleted and or revised pictures text animations sounds and other such data objects.

As the term is used herein metadata updates refer to any editing operation made to metadata of the data file. Non limiting examples of metadata include content locks presence information and other such data. Presence information indicates which users have indicated an intention to edit the document. Content locks inhibit editing of any content within the lock by users that do not own the lock. For example content locks may inhibit editing conflicts by indicating which portions of a document or other data file have been claimed by another user. In some embodiments the content locks can prevent i.e. bar a user from editing a portion of a document that has been claimed by another user. In other embodiments however the user can choose to break the content lock and edit the portion of the data file. In such cases the authoring application can warn the user that conflicts may arise when editing the locked portion.

As shown in content and metadata of a data file can be stored in memory of the storage device . In some embodiments the metadata of the data file can be stored separately from the content . For example the content can be stored in the data file and the metadata can be stored in a table not shown separate from the data file . In other embodiments however the metadata can be stored within the data file . Content and metadata of the user copy of the data file can be stored in a cache see cache in on a user computing device . One or more authoring applications on the user computing device process and manipulate the content and or the metadata of the user copy of the data file.

In general the user computing devices can synchronize content updates separately from metadata updates. In some embodiments metadata updates are automatically synchronized among the storage device and user computing devices whereas content updates from each user computing device are synchronized at the request of the respective user. In one embodiment the authoring environment may synchronize content updates only when editing conflicts do not exist i.e. or have been resolved but may synchronize metadata updates regardless of existing editing conflicts.

In one embodiment an editing conflict may stem from a content update received from the master copy. In such an embodiment changes to content and or metadata of the user copy interfere with intervening changes to the content of the master copy . Such editing conflicts are referred to herein as mergeable conflicts. For example in one embodiment the same data unit may have been edited differently in the user copy and the master copy of the data file in between synchronizations. In another embodiment the data unit may have been edited in the master copy before a content lock obtained on the data unit in the user copy was synchronized with the master copy .

In another embodiment an editing conflict may stem from a metadata update received from the master copy . In such an embodiment changes to the content and or metadata of the user copy interfere with intervening changes to the metadata of the master copy e.g. the addition of content locks . Such editing conflicts are referred to herein as unmergeable conflicts. For example the user device may receive a metadata update from the master copy of a data file indicating that content revised in the user copy has already been locked by another user.

In one embodiment changes to the metadata of a user copy of a data file that interfere with intervening changes to the master copy are overridden by the intervening changes to the master copy . For example if the storage device receives a metadata update from a first user device A requesting a content lock on a first data unit of a data file and determines the corresponding first data unit of the master copy is locked already to a second user device B then the storage device will deny the lock request of the first user device A.

A receive operation obtains at the authoring application updates indicating intervening changes made to the master copy of the data file. For example in one embodiment the receive operation obtains a content update indicating any intervening changes made to the content of the master copy by one or more other users authoring the data file. In another embodiment the receive operation obtains a metadata update indicating any intervening changes made to the metadata of the master copy by one or more other users authoring the data file. In another embodiment the receive operation obtains both content and metadata updates.

In one embodiment the receive operation receives updates from the master copy at predetermined intervals. In another embodiment the receive operation receives an update from the master copy when a threshold amount of editing has been performed on the master copy. In another embodiment the receive operation receives an update from the master copy in response to a request for the update. For example the receive operation may request an update from the master copy in order to update the data file before saving the data file. In such an embodiment the receive operation requests an update from the master copy when instructions to synchronize the data file are received from the user.

An update operation instantiates the intervening changes into the user copy of the document e.g. by merging the intervening changes into the user copy of the document . In one embodiment the update operation instantiates intervening metadata changes differently from intervening content changes. In one embodiment the update operation may instantiate content updates and metadata updates automatically. In another embodiment the update operation may instantiate metadata updates automatically and may instantiate content updates at the request of the user. For example the update operation may present a button or other interface tool to the user indicating the availability of updates that may be instantiated by selecting the button or other interface tool.

The update operation also may determine whether any editing conflicts exist. In some embodiments the update operation may instantiate the intervening changes differently depending on whether editing conflicts are identified. For example in one embodiment the update operation may inhibit instantiation of content updates when editing conflicts are identified but may continue to instantiate metadata updates automatically despite the existence of editing conflicts. Advantageously synchronizing the metadata updates despite the existence of editing conflicts may mitigate the creation of further editing conflicts. For example synchronizing lock data may inhibit concurrent editing of the same data unit by different users.

A synchronize operation attempts to synchronize the user copy with the master copy by forwarding to the master copy updates indicating changes made to the user copy of the data file. In one embodiment the synchronize operation forwards the updates for distribution to other users collaboratively authoring the data file. The synchronize operation only stores the user copy as the master copy i.e. overwrites the master copy if no editing conflicts between the user copy and the master copy are identified. In one embodiment the synchronize operation obtains the most recent version of the master copy and determines whether editing conflicts exist between the user copy and the most recent version of the master copy.

According to aspects of the disclosure the synchronize operation may enable the user to initiate resolution of the editing conflicts at any time after the editing conflict has been identified at the discretion of the user. The synchronize operation may enable the user to continue freely editing the user copy of the data file even though one or more editing conflicts have been determined to exist. In one embodiment the synchronize operation may continue to edit the user copy with editing conflicts being hidden from the user. In another embodiment the synchronize operation may continue to edit the user copy with editing conflicts being presented to the user. If editing of the user copy is continued despite the existence of one or more editing conflicts then content updates indicating changes to the user copy may be stored locally until the editing conflicts are resolved instead of being forwarded to the master copy for synchronization as will be discussed in greater detail herein.

The synchronize operation may synchronize metadata updates differently from content updates. For example in one embodiment the synchronize operation may forward content updates only if all editing conflicts have been resolved and may forward metadata updates regardless of whether editing conflicts have been resolved. As noted above synchronizing the metadata updates despite the existence of editing conflicts may mitigate the creation of further editing conflicts. Furthermore ceasing to synchronize content updates when editing conflicts exist may inhibit introducing the editing conflicts into the master copy of the data file. The authoring process completes and ends at a stop module .

In general an authoring environment having features that are examples of inventive aspects in accordance with the principles of the disclosure can be implemented on a user computing device e.g. a personal computer a server computer a notebook computer a PDA a Smartphone or any other such computing device . A non limiting embodiment of a user computing system configured to implement an authoring environment and perform authoring processes such as authoring process of is described herein with reference to .

In the exemplary computing system for implementing the principles of the disclosure includes a user computing device such as user computing device . In a basic configuration the user computing device typically includes at least one processing unit for executing applications and programs stored in system memory . Depending on the exact configuration and type of computing device the system memory may include but is not limited to RAM ROM EEPROM flash memory CD ROM digital versatile disks DVD or other optical storage devices magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or other memory technology.

System memory typically stores an operating system such as the WINDOWS operating systems from MICROSOFT CORPORATION of Redmond Wash. suitable for controlling the operation of the computing device . System memory also may include a data file cache in which a user copy of a document can be stored. Metadata of the data file also can be stored within the user cache .

The system memory also may store one or more software applications such as authoring applications for creating and editing data files. One non limiting example of an authoring application suitable for authoring documents in accordance with the principles of the present disclosure is MICROSOFT OFFICE WORD authoring software from MICROSOFT CORPORATION of Redmond Wash. Other non limiting examples of authoring applications include POWERPOINT presentation software and VISIO drawing and diagramming software both also from MICROSOFT CORPORATION of Redmond Wash.

Computing device also may have input device s such as a keyboard mouse pen voice input device touch input device etc. for entering and manipulating data. Output device s such as a display screen speakers printer etc. also may be included. These output devices are well known in the art and need not be discussed at length herein.

The computing device also may contain communication connections that allow the device to communicate with other computing devices for example the storage device of over a network in a distributed computing environment e.g. an intranet or the Internet . By way of example and not limitation communication device media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media.

An identify operation determines whether editing conflicts exist between the current version of the master copy and the user copy. More specifically the identify operation determines whether any intervening changes to the master copy and any editing operations performed on the user copy since the most recent synchronization i.e. or since the user copy was obtained interfere with one other.

A merge operation combines the user copy and the master copy into a merged version of the data file and presents the merged version to the user. In one embodiment the merge operation integrates the intervening changes into the user copy of the data file. In another embodiment the merge operation integrates the user changes into the master copy of the data file. In another embodiment the merge operation integrates the intervening changes and the user changes into the most recently synchronized version of the master copy i.e. the version of the master copy that was obtained and edited by the user .

A first determination module splits the flow of the synchronize process based on whether any editing conflicts were identified by the identify operation and or whether any identified editing conflicts from previously received updates remain unresolved. If the first determination module determines at least one editing conflict has been identified then an alert operation indicates the presence of the editing conflict to the user. For example the alert operation may present a message to the user indicating the existence of one or more editing conflicts. In one embodiment the alert operation also may indicate consequences of having unresolved identified editing conflicts e.g. the inability to fully synchronize the user copy with the master copy until the editing conflict is resolved .

A second determination module enables the user to choose when to review and resolve the identified editing conflict. In the example shown the second determination module presents to the user an option of reviewing the editing conflict or continuing to edit the user copy of the data file without viewing the editing conflict. If the second determination module determines the continued editing option has been selected by the user then a continue operation enables the user to edit the data file freely as will be discussed in greater detail herein.

If the second determination module determines the review option has been selected by the user however then a review operation enables the user to review and optionally to resolve the editing conflict using a resolution process that will be discussed in greater detail herein. When the review operation completes the synchronize process proceeds back to the first determination module to determine whether any editing conflicts remain unresolved. The operation flow described above repeats until the first determination module determines no editing conflicts exist.

When the first determination module determines no editing conflicts exist then a third determination module determines whether all intervening changes from the master copy have been obtained and instantiate into the user copy. For example the third determination module may determine whether any intervening changes have been made to the master copy since the most recent update. In one embodiment the third determination module compares a version number of the current version of the master copy with a version number of the version of the master copy represented by the most recently received update.

If the third determination module determines additional intervening changes exist i.e. that the most recently received update does not reflect the current state of the master copy then the synchronize process returns to the obtain operation and the synchronize process begins again. If the third determination module determines no additional intervening changes exist i.e. that the most recently received update reflects the current state of the master copy however then an indicate operation provides an indication the editing conflict has been resolved. For example in one embodiment the indicate operation may display a message to the user indicating that all editing conflicts have been resolved. In another embodiment the indicate operation may display a graphic icon or other indicia to the user indicating the editing conflicts have been resolved. A store operation overwrites the master copy of the data file with the user copy. The synchronize process completes and ends at a stop module .

The editing instructions indicate changes to content and or metadata of the merged version of the user copy of the data file. For example the editing instructions may indicate a data unit e.g. a paragraph a column a table a slide a graphic etc. of the new data file should be added deleted or revised. The editing instructions also may indicate a change in metadata e.g. a change in content locks etc. . An implement operation performs the editing operation on the new copy of the document.

A determination module determines whether the user has indicated a desire to stop editing. For example in a first embodiment the determination module may determine the user has chosen to resolve editing conflicts. In another embodiment the determination module determines the user has chosen to close the new copy of the data file or to synchronize the new copy with the master copy of the data file. In another embodiment the determination module may determine the user has chosen to continue editing the new copy of the data file.

If the determination module determines the user has chosen to continue editing the data file then the editing process cycles back to the receive operation and begins again. If the determination module determines the user has chosen to stop editing the data file however then a save operation stores any changes made by the user. Generally the save operation stores the merged version of the data file including any changes made by the user in a location other than the master copy of the data file. In one embodiment the save operation stores the merged version of the data file in local memory e.g. a local cache . In another embodiment the save operation may store the merged version of the data file on a storage device separate from the master copy. The editing process completes and ends at a stop module .

In some embodiments the display operation displays all conflicting edits from both the master copy and the user copy. For example in one embodiment the display operation may display content resulting from the conflicting editing operations as merged into the user copy of the data file. In another embodiment the display operation may display content resulting from the conflicting editing operations as merged into the master copy of the data file. In another embodiment the display operation may display content resulting from the conflicting editing operations as merged into the version of the data file prior to any intervening changes.

In one embodiment if conflicting editing operations are made to the same object e.g. a character a word a paragraph a graphic a slide a cell a row a column etc. within the data file then the display operation will display the object transformed by both editing operations. In another embodiment the display operation will display two copies of the object one copy representing the version of the object found in the master copy of the data file and the other copy representing the version of the object found in the user copy of the data file.

In one embodiment the display operation displays the conflicting content as annotations to the non conflicting content of the merged version of the data file. For example in one embodiment conflicting content added to the data file either in the master copy or in the user copy may be shown added to the non conflicting content and annotated to indicate the conflicting content was inserted in one version of the data file. In another embodiment conflicting content removed from the data file either in the master copy or in the user copy may be shown added to the non conflicting content and annotated to indicate the conflicting content was deleted in one version of the data file. Additional disclosure relating to the display of conflicting edits will be provided herein.

An obtain operation receives authoring instructions from the user. For example the obtain operation may receive user input through an input device such as input device of . A first determination module determines whether the user has provided instructions to return to continuing to edit the data file freely instead of continuing to review editing conflicts. For example in one embodiment the first determination module may determine the user has selected a toggle interface which will be disclosed in greater detail herein. In another embodiment the first determination module may determine the user has provided instructions to accept or reject one or more of the conflicting editing operations.

If the first determination module determines the user has provided instructions to return to editing then the review process completes and ends at a stop module even if identified editing conflicts remain unresolved. If the first determination module determines the user has not provided instructions to return to editing however then an implement operation performs the user instructions. In general the implement operation may accept or reject each editing operation in accordance with the instructions provided by the user. For example in one embodiment the implement operation may instantiate a conflicting editing operation into the merged version of the data file if the user provides instructions to accept the editing operation. In another embodiment the implement operation may remove the effects of a rejected editing operation from the merged version of the data file. Additional details regarding performance of the implement operation are provided herein.

A second determination module determines whether any identified editing conflicts remain unresolved. In one embodiment the second determination module does not determine whether any new editing conflicts have been created since the most recent identification of editing conflicts e.g. through updates received from the master copy through additional editing operations performed by the user etc. . Rather the second determination module determines whether any of the editing conflicts already identified remain unresolved. In another embodiment the second determination module determines whether any new editing conflicts exist.

If the second determination module determines at least one identified editing conflict remains unresolved then the resolution process cycles back to the first determination module . If the second determination module determines the identified editing conflicts have been resolved however then the resolution process completes and ends at the stop module .

In general the user interface displayed by the authoring application on the user device such as authoring application on user device of may change based on whether one or more editing conflicts have been identified by the authoring application. In some embodiments the authoring application may display alerts indicating the existence of editing conflicts to the user. For example in one embodiment a status bar may indicate the existence of editing conflicts. In another embodiment a message box providing indicia indicating consequences of the editing conflicts may be displayed to the user. For example the message box may indicate content cannot be synchronized until the identified editing conflicts are resolved.

In addition when an editing conflict is identified the user interface of the authoring application may be configured to toggle between showing editing conflicts and hiding editing conflicts at the discretion of the user. In general the user interface of the authoring application enables free editing of the data file both when editing conflicts are shown and when editing conflicts are hidden. The user interface enables additional functionality enabling review and resolution of editing conflicts when the user chooses to view editing conflicts.

The user interface includes an authoring window in which the user copy of the data file may be displayed. In one embodiment the authoring window includes an editing area in which the content of the user copy is displayed. Metadata of the data file e.g. content locks also may be displayed in the editing area . The user of the authoring application may interact with the content in the editing area to add delete or revise the displayed content.

The user interface includes the authoring window of having the editing area in which the content and metadata of the data file may be displayed and or edited. The user interface also includes a toggle interface . In general selection of the toggle interface by the user will cause the user interface to display identified editing conflicts. In one embodiment selection of the toggle interface also will activate a conflict resolution interface.

The user interface also includes a toggle interface by which the user may hide identified editing conflicts. In one embodiment selection of the toggle interface also will deactivate the conflict resolution interface . For example selection of the toggle interface may cause the user interface of to be displayed to the user instead of the user interface .

The user interface includes an authoring window having an editing area in which the content and metadata of the data file may be displayed and or edited. The editing area also displays identified editing conflicts or content resulting from identified editing conflicts. For example in one embodiment the editing area may display a merged version of the data file generated by merging the user copy with the master copy.

In some embodiments the identified editing conflicts displayed within the editing area are indicated via annotations to the content resulting from the conflicting editing operations. In one embodiment the annotations indicate how of the resulting content conflicts. For example in one embodiment a section of content e.g. a word a paragraph a table a column a graphic etc. may be annotated to indicate the section was inserted deleted and or revised in the user copy and or the master copy. Example annotations indicating such insertion deletion and or revision may include a predetermined color a strikethrough underlining a predetermined opacity highlighting or other such indicia.

The user interface also can include a summary window in which the authoring application may communicate information about identified editing conflicts to the user. In some embodiments the summary window can include a summary information area . For example the summary information area may display the number of editing conflicts identified by the authoring application and remaining unresolved. The summary information area also may indicate the number of mergeable and unmergeable editing conflicts. In one embodiment the summary information area may be refreshed i.e. updated as the editing conflicts are resolved.

In some embodiments the summary window also may display a listing of any unresolved editing conflicts. For example in one embodiment all conflicting content e.g. content added deleted and or revised in the user copy or the master copy is listed within the summary window . In one embodiment the listed content may be annotated to indicate an origin of the content e.g. the user copy or the master copy . In another embodiment the listed content may be annotated to indicate a type of editing action e.g. revision insertion deletion etc. yielding the content.

The user interface may be configured to enable a user to resolve the displayed editing conflicts. For example the user interface may enable the user to provide resolution instructions for one or more displayed editing conflicts. In one embodiment the user interface enables the user to provide resolution instructions for the displayed editing conflicts in accordance with a sequence. In another embodiment the user interface enables the user to provide resolution instructions for any displayed editing conflict selected by the user.

Examples of resolution instructions include an accept instruction by which the user indicates a given editing operation should be instantiated into the merged version of the data file and a reject instruction by which the user indicates the editing operation should not be performed on the merged version of the data file. Other examples of resolution instructions may include a next instruction by which the user proceeds to a subsequent editing conflict without resolving the currently selected editing conflict and a back instruction by which the user returns to a previous editing conflict without resolving the currently selected editing conflict.

In some embodiments the user may provide a resolution instruction by interacting with one or more resolution interfaces . Non limiting examples of resolution interfaces include buttons e.g. an accept button a reject button a next button etc. drop down menus tabs and other such interface tools. In one embodiment the user interface displays one or more resolution interfaces to the user when the editing conflicts are displayed. In another embodiment the user interface displays one or more resolution interfaces to the user when conflicting content is selected by the user.

For example the user may provide a resolution instruction by selecting e.g. via a cursor or other input interface content within the editing area that results from one of the conflicting editing operations and interacting with a resolution interface. In other embodiments the user may provide a resolution instruction by selecting an editing operation displayed within the summary window and interacting with a resolution interface to provide or select a resolution instruction.

For example in the user interface includes a resolution interface that is displayed when an editing conflict is selected from the listing in the summary window . The resolution interface shown in includes an accept button and a reject button . In other embodiments however the resolution interface may include any desired interface tool. In the example shown in the resolution interface is displayed as a pop up window. In other embodiments however the resolution interface may include a toolbar or section thereof a drop down menu or portion thereof or other such display interface.

A determination module determines whether the resolution instruction indicates the selected conflicting content is to be accepted or rejected. If the determination module determines the obtain operation receives an accept instruction then the implementation process proceeds to an accept operation . If the determination module determines the obtain operation receives a reject instruction however then the implementation process proceeds to a reject operation . Details regarding example processes for implementing the accept and reject operations are discussed below with reference to . The implementation process completes and ends at a stop module .

A determination module determines whether or not the accepted content resulted in content and or formatting being added into the data file. For example in one embodiment the determination module determines whether or not the accepted content includes a character word table column graphic or other data unit to the data file. In another embodiment the determination module determines whether the accepted content added any formatting e.g. bold underlining font color highlighting etc. to the data file.

If the determination module determines the accepted editing operation resulted in content and or formatting being added then the accept process complete and ends at the stop module . If the determination module determines the accepted editing operation removes content and or formatting from the data file however then a remove operation deletes the content and or formatting from the merged version of the data file. The accept process completes and ends at the stop module after completion of the remove operation .

A determination module determines whether or not the rejected editing operation would have resulted in content and or formatting being added to the data file. For example in one embodiment the fourth determination module determines whether or not the rejected editing operation would have added a character word row cell or other data unit or content object to the data file. In another embodiment the determination module determines whether the rejected editing operation would have added any formatting e.g. bold underlining font color highlighting etc. to the data file.

If the determination module determines the rejected editing operation would not have resulted in content and or formatting being added to the data file then the reject process complete and ends at the stop module . If the determination module determines the rejected editing operation would have added content and or formatting however then a remove operation deletes the content and or formatting from the merged version of the data file. The reject process completes and ends at the stop module after completion of the remove operation .

The principles of the present disclosure can be better understood by walking through example applications. In a first example application illustrate changes to an example user interface displayed by an authoring application as a first user is editing a user copy of a data file online. In a second example application illustrate changes to an example user interface displayed by an authoring application as a first user is editing a user copy of a data file offline.

In a user interface of an authoring application includes a display window including an editing area displaying content of the user copy of the data file a command toolbar providing command options and a status bar indicating a status of the user copy of the data file. For example the status bar may indicate when content updates are available for instantiation into the user copy of the data file. The status bar also may indicate when editing conflicts have been identified. In the example shown the status bar indicates no content updates are available from the master copy of the data file.

The authoring application enables editing of the user copy of the data file for example using the example authoring process of . In the example shown the authoring application enables the first user to edit the user copy of the data file freely see edit operation of within the editing area of the display window . In the first user is editing a first data unit of content displayed in the editing area . The first user has arranged a cursor over the first data unit to enable editing of the first data unit. A second user has obtained a lock on a second data unit of content within the editing area . The lock which is displayed within the editing area inhibits the first user from freely editing the second data unit.

In the first user has edited the first data unit to change the word dog to doe . In one embodiment changing the word dog to doe includes providing an editing operation to delete the word dog and an editing operation to insert the word doe . In another embodiment changing the word dog to doe includes providing an editing operation to delete the character g and an editing operation to insert the character e . In other embodiments other editing operations may be utilized to achieve the same results.

In one embodiment editing of the first data unit initiates a transmission to the master copy of the data file of a request by the first user to lock the first data unit. In another embodiment the first user may provide express instructions to lock the first data unit. For example the first user may select the first data unit and select a lock option on the user interface . Accordingly a lock owned by the first user has been placed around the first data unit in . In the example shown the lock is distinguished from the lock owned by the second user. For example the lock owned by the first user is displayed in dotted lines and the lock owned by the second user is displayed in solid lines. Distinguishing locks owned by the first user from locks owned by other users may enable the first user to know which data unit the first user has locked without deterring the first user from editing the data unit. In one embodiment each user may have a distinct lock e.g. each user s lock may have a distinct color shading formatting etc. .

In the authoring application obtains updates indicating intervening changes made to the master copy of the data file see receive operation of . In one embodiment the authoring application receives the update after a predetermined interval of time elapses. In another embodiment the authoring application receives the update in response to a request to synchronize the user copy with the master copy. For the purposes of this example application the authoring application is assumed to have received the update automatically after a predetermined time interval. The status bar of the display window has been updated in to indicate an update has been received.

In one embodiment the authoring application receives a metadata update from the master copy. In another embodiment the authoring application receives a content update from the master copy. In the example application the authoring application receives both a metadata update and a content update. The metadata update indicates the second user has released the lock on the second data unit and has obtained a lock see lock of on the first data unit. In this example the second user synchronized a lock request for the first data unit with the master copy before the first user. Accordingly the second user was awarded the lock on the first data unit. The metadata update also indicates a third user has obtained a third lock on the third data unit. The content update indicates the second user has edited the first data unit to change the word lazy to lively .

When the authoring application receives the update the authoring application determines whether any editing conflicts exist between the user copy and the received update. If no editing conflicts exist then the authoring application instantiates the metadata updates automatically see update operation of . In the example application the metadata update indicates the third user has established a lock on the third data unit. Accordingly the third lock is shown around the third data unit in .

In one embodiment if a metadata update conflicts with a user change however then the metadata update is not instantiated until the user attempts to synchronize the user copy with the master copy. In the example application the metadata update indicates the second user has a lock on the first data unit which conflicts with the first user s request to lock the first data unit. Accordingly the second user s lock on the first data unit is not instantiated into the user copy automatically. In another embodiment a release of a content lock is not instantiated until any identified editing conflicts are resolved. Accordingly the second user s release of the lock on the second data unit is not instantiated into the user copy automatically.

If no editing conflicts exist then the authoring application also enables the user to determine when the content updates should be instantiated e.g. merged into the user copy of the data file see update operation of . For example the authoring application may provide an instantiation interface by which the first user may provide instructions to instantiate the update. Non limiting examples of instantiation interfaces include buttons menu options and other interface tools.

If the authoring application identifies an editing conflict however then the authoring application inhibits the user from instantiating the updates into the user copy. In one embodiment the authoring application does not display an instantiation interface. In another embodiment the authoring application does not display an indication of the availability of the update. In the example application the metadata update conflicts with a user change. Accordingly the authoring application does not provide the first user with an opportunity to instantiate the content update.

In the first user instructs the authoring application to attempt to synchronize the user copy of the data file with the master copy see synchronize operation of . In one embodiment the authoring application implements the synchronize process shown in . The authoring application obtains an updates from the master copy if appropriate see obtain operation of and determines whether any editing conflicts result from the update see identify operation of . In the example shown the authoring application does not obtain any new updates i.e. no intervening changes have been made to the master copy since the last update . The authoring application determines that intervening changes represented by the previously received update conflict with user changes.

The authoring application then merges the user copy of the data file with the master copy of the data file see merge operations of and displays the merged copy of the data file to the first user. In the example shown the authoring application displays the merged version of the data file in the editing area in . In general the authoring application may integrate the user and master copies using any desired merge technique. For example in one embodiment the authoring application displays all content added to deleted from and or revised in the user copy of the data file and the master copy of the data file.

In another embodiment the authoring application may determine the version of the data file represented by the master copy and may perform any content or formatting additions deletions and or revisions from the user copy on unlocked data units of the master copy version of the data file i.e. instantiates mergeable conflicts . For unmergeable conflicts such as user edits to data units locked on the master copy e.g. user edits performed prior to receiving the metadata update indicating the lock the authoring application may add a duplicate data unit adjacent the locked data unit and may revise the duplicate data unit based on the revisions made in the user copy e.g. change content add a content lock etc. . Accordingly the data unit remains locked and unchanged in accordance with the state of the master copy. However changes to the data unit by the first user are retained in the merged version of the data file until the first user chooses to remove them.

In the example shown in the first data unit is shown locked by the second user see lock and changed by editing operations performed by the second user. For example the second occurrence of the word lazy has been changed to lively . A duplicate of the first data unit has been generated and arranged adjacent the first data unit. The duplicate is locked to the first user see lock and includes revisions made by the first user prior to the attempt to synchronize e.g. the second occurrence of dog has been changed to doe . The second data unit is still locked to the second user in . In one embodiment the authoring application only releases locks when the user copy is synchronized with the master copy. In another embodiment the authoring application only releases locks when the locked data unit is fully synchronized. In other embodiments the authoring application may indicate the lock has been released.

Because the authoring application has identified editing conflicts the authoring application does not continue to save to the master copy see first determination module of . Rather the authoring application displays one or more alert messages to notify the first user of the existence of the editing conflicts see alert operation of . For example in an alert is displayed in the display window to inform the first user of the presence of editing conflicts. In the example shown the status bar also has been updated to indicate the presence of editing conflicts. In other embodiments the status bar may be updated to indicate a number of updates that have not yet been instantiated a number of editing conflicts identified or other such information. In still other embodiments other types of alerts or indicia may provide notice of the existence of editing conflicts to the first user.

The authoring application also presents a toggle interface to the first user in to enable the user to choose between continuing to edit the data file without viewing conflicts and reviewing the editing conflicts see second determination module . The first user may choose to continue editing the data file without reviewing the editing conflicts see continue operation of . The first user also may choose to select the toggle interface to reveal the editing conflicts see review operation of . In one embodiment selection of the toggle interface also activates a summary window . The first user may continue to edit the merged version of the data file regardless of whether the first user chooses to view the editing conflicts.

One example process by which the authoring application may implement the review operation of includes the review process of . When the user selects the toggle interface the authoring application presents the editing conflicts to the user see display operation of . For example in one embodiment selecting the toggle interface splits the display window between the editing area and a summary window in which the editing conflicts are listed see list of and summary information about the conflicts may be displayed see summary area of .

In general the editing area displays the merged version of the data file and enables the user to freely edit the merged version. In some embodiments the merged version of the data file displayed in the editing area is annotated to indicate which portions of content are in conflict. For example in one embodiment the merged version of the data file is annotated to indicate whether the conflicting content resulted from insertions e.g. via underlining or other formatting text color highlighting or other such indicia or deletions e.g. via strikethroughs or other formatting text color highlighting or other such indicia .

In the example shown revisions to content are shows as a series of deletions and insertions. In other embodiments however revisions to content may be distinctly annotated. In other embodiments the metadata e.g. locks also may be annotated to indicate which portions of metadata conflict. In the example shown in the first data unit does not contain any editing conflicts since the first data unit is locked on the server to the second user. Accordingly the first data unit is not annotated. The duplicate data unit which is shown in as locked to the first user is underlined to indicate the data unit has been inserted into the data file.

The conflicting editing operations also are displayed by the summary window . The summary area of the resolution interface indicates the number of conflicting editing operations contained within the merged version of the data file. In the example shown the summary area indicates one conflicting editing operation has been identified. The listing of the summary window displays the conflicting content. In one embodiment the listing displays the conflicting content separate from the non conflicting content. In another embodiment the listing annotates the conflicting content to indicate whether the content as inserted and or deleted e.g. see indicia of . In another embodiment the listing annotates the conflicting content to indicate the origin e.g. user copy or master copy of the conflicting content e.g. see indicia of .

The first user of the authoring application may interact with either the editing area or the summary window to provide instructions see obtain operation of either to return to editing the data file or to resolve any of the editing conflicts displayed see first determination module of . For example in one embodiment the user may select the toggle interface again to hide the editing conflicts. Choosing to hide the conflicts removes the annotations from the editing conflicts. In one embodiment choosing to hide the editing conflicts will cause the user interface of to be displayed. The synchronize process would end see stop module of the authoring application would determine that at least one editing conflict remained unresolved see first determination module of and the first user would again be able to choose between freely editing the data file and resolving conflicts.

Alternatively the first user may provide instructions to accept or reject conflicting content or portions thereof. In one embodiment the first user may select content displayed within the editing area of the display window and may select an option on a resolution interface to provide instructions to resolve the editing operation. For example the first user may select the content on which instructions are to be provided and may select a menu option from a resolution mention see . In other embodiments the first user may provide the resolution instruction using another type of resolution interface tool.

In the example shown in the first user selects see selection indicia a first portion of the conflicting content and selects a reject option on the resolution menu via the cursor . Accordingly the authoring application determines the user has not provided instructions to return to editing see first determination module of and performs the resolution instruction see implement operation of . In other embodiments the first user may have selected all or a different portion of the conflicting content.

One example process by which the authoring application may perform the rejection of the selected portion of the conflicting content is the reject process of . The authoring application removes the annotations from the selected conflicting content in the editing area of the display window see clean operation of . The authoring application also determines see determination module of the rejected editing operation resulted in the selected conflicting content being added into the data file. Accordingly the authoring application removes the selected conflicting content from the merged version of the data file see remove operation of . If the editing operation had resulted in content being deleted then the reject process would have ended without removing the selected conflicting content from the data file.

Returning to the review process of the authoring application determines that at least one of the identified editing conflicts remains unresolved see second determination module of thereby restarting the review process . By restarting the review process the first user may choose to continue resolving editing conflicts e.g. using the review process of while the user interface is configured in the conflict resolution mode. Alternatively the first user may choose to hide the editing conflicts at any time by selecting the toggle interface .

Continuing with the review process the authoring application obtains another set of instructions from the first user see obtain operation of . In this example application the authoring application obtains instructions to resolve the remaining conflicting content. For example illustrates another resolution interface with which the first user may provide resolution instructions to the authoring application. The resolution interface is a menu listing resolution options e.g. accept reject etc. . The menu is arranged adjacent the selected conflicting content. In one embodiment the authoring application displays the resolution interface when the user selects conflicting edits from the listing within the summary window . In another embodiment the authoring application may display the resolution interface within the editing area when conflicting content is selected within the editing area . In other embodiments however the first user may use any desired type of resolution interface to provide resolution instructions to the authoring application.

In the user selects e.g. via a right mouse click via a left mouse click hovers over or otherwise selects via another input device the remaining conflicting content within the listing of the summary window and selects the accept option on the resolution interface e.g. using the cursor . Accordingly the authoring application determines the first user did not provide instructions to hide the editing conflicts and return to editing see determination module of and implements the accept instruction see implement operation of .

One example process by which the authoring application may accept the selected conflicting content includes the accept process of . The authoring application removes any annotations from the selected conflicting content see clean operation of . The authoring application determines the selected conflicting content was inserted into the data file see determination module of . Accordingly the accept process completes and ends see stop module of . If the authoring application had determined the conflicting content was deleted from the data file then the authoring application would have deleted the conflicting content from the data file see remove operation of .

Returning to the review process of the authoring application determines no more editing conflicts remain unresolved see second determination module . Accordingly the review process completes and ends see stop module of thereby completing the review operation of the synchronize process of . The synchronize process proceeds back to the first determination module at which the authoring application determines whether any identified editing conflicts remain unresolved.

Since the first user resolved all identified editing conflicts in this example application the authoring application determines that no editing conflicts remain unresolved. Accordingly the authoring application checks with the master copy to determine whether additional updates are available see the second determination module of . If additional updates have become available then the synchronization process cycles back to obtain and merge the new updates. The new update includes any intervening changes made since the previous update was obtained. Any conflicts stemming from the new update are resolved as discussed above. This process of obtaining updates and resolving any identified conflicts repeats until the first user has resolved all editing conflicts between the user copy of the data file and the current state of the master copy of the data file.

When the authoring application determines no editing conflicts exist see first determination module of and no new updates are available see second determination module of the authoring application sends an update from the user copy to the master copy see store operation of to complete synchronization of the user and master copies. For example in one embodiment the authoring application may send the user copy in its entirety to a storage device with instructions to overwrite the master copy. In another embodiment the authoring application may send an incremental update indicating how the user copy differs from the master copy.

The authoring application alerts the first user when the authoring application successfully uploads the update to the master copy see indicate operation of . For example in the status bar has been updated to indicate the update was successfully transmitted. In some embodiments the authoring application also may display an alert window indicating the success of the upload. In one embodiment the alert window may provide further explanation e.g. indicating consequences of the upload. In the example shown in the summary window is removed from the user interface since no editing conflicts are identified. In other embodiments however the summary window may remain until toggled by the first user.

The second example application in which the first user is editing a data file offline is provided in . In a user interface of an authoring application includes a display window including an editing area displaying content of the user copy of the data file a command toolbar providing command options and a status bar indicating a status of the user copy of the data file. For example the user interface may be the same as user interface of .

In the example shown the status bar indicates the first user is editing a user copy of a data file offline i.e. is not communicatively connected to a storage device storing a master copy of the data file . Another user has a lock on the first data unit within the editing area . Accordingly the authoring application inhibits the first user from editing the first data unit.

The authoring application enables editing of the user copy of the data file for example using the example authoring process of . In the example shown the authoring application enables the first user to edit the user copy of the data file freely see edit operation of within the editing area of the display window . illustrates editing changes made by the first user to the user copy of the data file. In particular the first user has added two sentences to the third data unit. In other embodiments however the first user may have added revised and or deleted any content or metadata within the user copy of the data file.

Because the first user is editing the user copy offline the authoring application cannot synchronize a lock request for the third data unit. In one embodiment the authoring application stores the lock request until the user logs online. In such an embodiment the authoring application may display a lock around the third data unit. In another embodiment the authoring application does not attempt to lock the third data unit. In one embodiment the authoring application alerts the first user that a lock request cannot be synchronized and accordingly that editing the data unit may result in editing conflicts. For the purposes of this example application the authoring application stores the lock request for later synchronization with the master copy.

In the authoring application obtains updates indicating intervening changes made to the master copy of the data file see receive operation of . In one embodiment the authoring application receives the update after a predetermined interval of time elapses. In another embodiment the authoring application receives the update in response to a request to synchronize the user copy with the master copy. For the purposes of this example application the authoring application is assumed to have received the update automatically after a predetermined time interval. The status bar of the display window has been updated in to indicate an update has been received.

When the authoring application receives the update the authoring application determines whether any editing conflicts exist between the user copy and the received update. If no editing conflicts exist then the authoring application instantiates the metadata updates automatically see update operation of . For the purposes of this example application the authoring application is assumed to have received a content update indicating changes made to the third data unit which conflicts with the first user s lock request for the third data unit. However the update does not indicate a lock around the third data unit e.g. the other user may have locked the third data unit when making the edit and subsequently released the lock . Accordingly the authoring application does not provide the first user with an instantiation interface or otherwise inhibits instantiation of the update.

In the first user connects to the storage device i.e. logs online and instructs the authoring application to attempt to synchronize the user copy of the data file with the master copy see synchronize operation of . In one embodiment the authoring application implements the synchronize process shown in . The authoring application obtains an updates from the master copy if appropriate see obtain operation and determines whether any editing conflicts result from the update see identify operation . In the example shown the authoring application does not obtain any new updates e.g. no intervening changes have been made to the master copy since the last update . The authoring application determines that intervening changes represented by the previously received update e.g. the added content to the third data unit conflict with user changes e.g. the lock request for the third data unit .

The authoring application then merges the user copy of the data file with the master copy of the data file see merge operations of and displays the merged copy of the data file to the first user. In the example shown the authoring application displays the merged version of the data file in the editing area in . As noted above the authoring application may integrate the user and master copies using any desired merge technique. In the example shown the authoring application has added new content from the master copy to the first and third data units of the user copy.

The first set of new content TBD which was added to the first data unit does not result in an editing conflict. The first user did not edit the first data unit. The second set of new content Jump fox jump which was added to the third data unit results in an editing conflict since the first user attempted to lock the third data unit. The other user was able to edit the third data unit since the first user s lock request has not yet been synchronized with the master copy prior to the edit. However since the update does not indicate the third data unit is locked by another user the first user s lock is maintained around the third data unit.

Because the authoring application has identified an editing conflict the authoring application does not continue to save to the master copy see first determination module of . Rather the authoring application displays one or more alert messages to notify the first user of the existence of the editing conflicts see alert operation of . For example in an alert is displayed in the display window to inform the first user of the presence of editing conflicts. In the example shown the status bar also has been updated to indicate the presence of editing conflicts. In other embodiments the status bar may be updated to indicate a number of updates that have not yet been instantiated a number of editing conflicts identified or other such information. In still other embodiments other types of alerts or indicia may provide notice of the existence of editing conflicts to the first user.

The authoring application also presents a toggle interface to the first user in to enable the user to choose between continuing to edit the data file without viewing the editing conflicts and reviewing the editing conflicts see second determination module of . The first user may choose to continue editing the data file without reviewing the editing conflicts see continue operation of . The first user also may choose to select the toggle interface to reveal the editing conflicts see review operation of . In one embodiment selection of the toggle interface also activates a summary window see . The first user may continue to edit the merged version of the data file regardless of whether or not the first user chooses to view the editing conflicts.

One example process by which the authoring application may implement the review operation of includes the review process of . When the user selects the toggle interface the authoring application presents the editing conflicts to the user see display operation of . For example in one embodiment selecting the toggle interface splits the display window between the editing area and a summary window in which the editing conflicts are listed see list and summary information about the conflicts may be displayed see summary area .

In general the editing area displays the merged version of the data file and enables the user to freely edit the merged version. In some embodiments the merged version of the data file displayed in the editing area is annotated to indicate which portions of content are in conflict. For example in one embodiment the merged version of the data file is annotated to indicate whether the conflicting content resulted from insertions e.g. via underlining or other formatting font color highlighting opacity or other such indicia or deletions e.g. via strikethroughs or other formatting font color highlighting opacity or other such indicia .

In the example shown the first data unit does not contain any editing conflicts since the first data unit is locked on the server to the second user. Accordingly the first data unit is not annotated. The second data unit also does not contain any editing conflicts so the second data unit is not annotated. Some content within the third data unit which is shown as locked to the first user is underlined to indicate the content has been inserted into the data unit.

In one embodiment only conflicting content originating from the user copy is annotated. Advantageously only annotating user created conflicts allows the user to understand the state of the master copy of the data file and differences between the master copy and the user copy. In other embodiments however conflicting content originating from the master copy may be annotated as well as or in place of the conflicting content from the user copy.

The conflicting editing operations also are displayed by the summary window . The summary area of the resolution interface indicates the number of conflicting editing operations contained within the merged version of the data file. In the example shown the summary area indicates one conflicting editing operation has been identified. The listing of the summary window displays the conflicting content. In one embodiment the listing displays the conflicting content separate from the non conflicting content. In another embodiment the listing annotates the conflicting content to indicate whether the content as inserted and or deleted e.g. see indicia of . In another embodiment the listing annotates the conflicting content to indicate the origin e.g. user copy or master copy of the conflicting content e.g. see indicia of .

The first user of the authoring application may interact with a resolution interface e.g. see resolution interface of to provide instructions see obtain operation of either to return to editing the data file or to resolve any of the editing conflicts displayed see first determination module of . For example in one embodiment the user may select the toggle interface again to hide the editing conflicts as discussed above.

Alternatively the first user may provide instructions to accept or reject conflicting content or portions thereof. In one embodiment the first user may select content displayed within the editing area of the display window and may select an option on a resolution interface to provide instructions to resolve the editing operation. For example the first user may select the content on which instructions are to be provided and may select an accept button or a reject button from an example resolution interface see . The example resolution interface also may include a next button and a previous button for sequencing among conflicts. In other embodiments the first user may provide the resolution instruction using another type of resolution interface tool.

In the example shown in the first user selects a first portion of the conflicting content see selection indicia in the summary window and selects an accept button on the resolution interface via a cursor . In other embodiments however the first user may have provided the instruction via any desired resolution interface. Accordingly the authoring application determines the user has not provided instructions to return to editing see first determination module of and performs the resolution instruction see implement operation of .

One example process by which the authoring application may accept the selected conflicting content includes the accept process of . The authoring application removes any annotations from the selected conflicting content see clean operation of . The authoring application determines the selected conflicting content was inserted into the data file see determination module of . Accordingly the accept process completes and ends see stop module of . If the authoring application had determined the conflicting content was deleted from the data file then the authoring application would have deleted the conflicting content from the data file see remove operation of .

Returning to the review process of the authoring application determines no more editing conflicts remain unresolved see second determination module of . Accordingly the review process completes and ends see stop module of thereby completing the review operation of the synchronize process of . The synchronize process proceeds back to the first determination module at which the authoring application determines no editing conflicts remain unresolved. The authoring application also determines no additional updates are available from the master copy see the second determination module of and accordingly sends an update from the user copy to the master copy see store operation of to complete synchronization of the user and master copies.

The authoring application alerts the first user when the authoring application successfully uploads the update to the master copy see indicate operation of . For example in the status bar has been updated to indicate the update was successfully transmitted. In some embodiments the authoring application also may display an alert window indicating the success of the upload. In one embodiment the alert window may provide further explanation e.g. indicating consequences of the successful upload. In the example shown in the summary window is removed from the user interface since no identified editing conflicts remain unresolved. In other embodiments however the summary window may remain until deactivated by the first user e.g. via toggle interface of .

Embodiments of the disclosure may be implemented as a computer process method a computing system or as an article of manufacture such as a computer program product or computer readable media. The processes programs can be implemented in any number of ways including the structures described in this document. One such way is by machine operations of devices of the type described in this document. Another optional way is for one or more of the individual operations of the methods to be performed on a computing device in conjunction with one or more human operators performing some of the operations. These human operators need not be collocated with each other but each can be only with a machine that performs a portion of the program.

The computer program product may be a computer storage media readable by a computer system and encoding a computer program of instructions for executing a computer process. The computer program product may also be a propagated signal on a carrier readable by a computing system and encoding a computer program of instructions for executing a computer process. The term computer readable media as used herein includes both storage media and communication media.

Those skilled in the art will appreciate that the disclosure may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. The disclosure may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types.

