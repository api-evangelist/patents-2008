---

title: System and method for providing common operators across multiple applications
abstract: A system and technique for managing and manipulating data objects, and more particularly data files, of different types utilizing a common user interface. The system allows management of folders and files across many different file types native to many different source applications, such as operating system files, document management system files, photo storage applications, electronic computer aided drawing vaults and the like. The system initializes by requesting an operations list including file information which the system uses to map source application commands to predetermined common commands associated with the system. The system also uses the operations list to display folders and files using native icons and to query the user using text associated with the underlying source application, allowing for ease of file management across a broad array of file applications and types.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07814054&OS=07814054&RS=07814054
owner: 
number: 07814054
owner_city: 
owner_country: 
publication_date: 20080403
---
The present invention relates in general to a document management system and more particularly to a document management system utilizing application specific graphics commands and text in a global document management environment.

Document management systems are well known in the art. Given the diversity of document types maintained by such systems prior art document management systems use a standard set of commands icons and text unique to the document management system. Unfortunately these standard commands are often unique to the document management system and may bear little resemblance to the commands icons and text associated with the underlying source applications associated with the documents being managed.

Retrieving and managing numerous document types from a large database is difficult enough without users having to adapt to and make assumptions about how the document management system standard commands icons and text relate to the commands icons and text associated with the underlying source applications with which they are familiar. It would therefore be desirable to provide a document management system capable of utilizing the commands icons and text associated with the underlying source applications.

One problem with prior art document management systems is that source applications like document management system applications file storage applications and operating systems do not use the same types of commands icons and text. One source application may use the phrase trash can for substantially the same item another underlying source application uses the phrase graveyard. Selecting one phrase over the other in a document management system cannot help but confuse users expecting encountering graveyard when they expect to see a trash can. It would therefore be desirable to provide a document management system capable of utilizing source application specific descriptive text.

An additional drawback associated with prior art document management systems involves source applications changing commands icons and text with subsequent versions. Even if a prior art document management system was programmed with source application specific commands icons and text the document management system would have to be modified and updated every time one of the many underlying source applications changed. Additionally between the time of the underlying source application change and the update to the document management system the document management system may crash or at the very least not be able to utilize the most current commands icons and text associated with the underlying source applications. It would therefore be desirable to provide a document management system capable of utilizing the most current commands icons and text associated with the underlying source applications.

Yet another drawback associated with prior art document management systems is the adoption of document management system icons for files rather than the underlying source application icons with which users have become accustomed. While not critical successful operation of a document management system the use of unfamiliar icons runs the risk of increasing delays and mistakes associated with misidentification. It would therefore be desirable to provide a document management system which utilized the same file icons as the underlying source applications.

While it might be possible to program a document management system with all of the unique commands icons and text associated with certain source applications the document management system would still not be able to utilize the commands icons and text associated with other source applications the user may wish to utilize. The system would also not be able to utilize the commands icons and text associated with new source applications as they became available.

Although there are some prior art systems which do allow for a minimal amount of cross application commands such prior art applications are designed with similar software modules and similar commands either very specific to particular source applications or very generic limiting themselves to only the most basic commands. Accordingly functionality rich cross platform systems are relegated to custom application specific environments or are difficult to use functionality poor systems using generic icons and text and capitalizing on those few commands and operations with a specific identity spanning as many source applications as possible. It would therefore be desirable to provide a functionality rich system with the ability to utilize a broad range of operators across many underlying source applications.

Based upon the foregoing it would be desirable to provide a document management system capable of utilizing the commands icons and text associated with the underlying source applications. The desired system would be functionality rich system and would utilize a broad range of operators across many underlying source applications. The difficulties associated with the prior art discussed hereinabove are substantially eliminated by the present invention.

Document management is a critical component of the commercial building construction industry. Quick and accurate access to and management of different file types within a database both during and after the construction phase reduces the time cost and errors associated with project completion. Various types of files and folders of files including blueprints document management system files photographs documents and invoices all may need to be managed at one time or another. Typically construction files are stored as many different file types including but not limited to .pdf files .doc files .jpg files .xls files .mp3 files .mpg files zip files .xml files and .dwg files as well many other file types. One problem associated with these various files is that they can be stored and managed by different source applications. Some files may be stored in an operating system while others might be stored within a project management application. Others may be available through an architectural application. Each application has its own way of representing and storing the files and its own set of commands for the various files.

While different command icon and text conventions for managing each different type of file may not be unduly burdensome for an information technology professional memorizing all of the various permutations of command icon and text for each separate source application may prove unwieldy for persons not employed in the field of information technology arena. While there are document management systems which utilize their own command icon and text conventions this is merely one more convention the user must memorize. Additionally such systems either do not allow certain source application file manipulation commands or map those commands to master commands using a novel nomenclature the user may not readily be able to verify maps to a particular source application command.

The master application of the present invention requests an operations list from the underlying source applications including commands icons and text conventions. The master application maps common source commands to common master commands. The master application also maps text conventions associated with the common source commands to allow the user to confirm prior to execution that the proper source command is being employed.

The master application maintains a list of uncommon source commands which the master application dynamically generates and displays to the user upon request. The master application also correlates source application icons with the appropriate source application file type to allow the user to readily identify familiar file types. In the preferred embodiment the master application presents the user with a single user interface allowing the user to manage files stored in a wide array of formats associated with many underlying source applications.

The problem addressed by the present invention is providing a single document management interface which allows a plurality of file types to be managed using native icons a common set of master commands confirmed using source application nomenclature and dynamically generated non standard commands.

The present invention primarily resides in a novel software program readily executed via known digital processing components and interacting with known source applications. In the following description for the purpose of explanation numerous specific details are set forth to provide a thorough understanding of the present invention. It will be apparent however that the present invention may be practiced without the specific details included herein. In certain instances well known structures and devices are shown in block diagram form and descriptions of well known components and programming techniques are omitted so as to avoid unnecessarily obscuring the method and system of the present invention with details readily apparent to those skilled in the art having the benefit of the disclosure before them.

Management of source application files of the present invention is not limited to any particular business. The invention defines management of source application files using common master commands and uncommon source application specific commands within an environment of native icons and text.

As shown generally in a block diagram provides a general overview of the system and method employed by the present invention for utilizing a master software application to access a plurality of source applications using a single application programming interface API . The first source application is a document management application the second source application is an operating system and the third source application is a project management system application. All three applications are provided on separate servers and but may of course be provided on a single server or may be provided on the user s own computer .

Provided on the server or elsewhere is memory housing a data and file store used by the source applications and . The server is preferably coupled to the user s computer via a communication network such as the Internet an intranet or any other desired type of network. Additional servers and may be coupled to the communication network to allow for additional source applications and additional users to utilize the system of the present invention.

The master application includes source code coupled to a data and file store database and the API . A user accesses the API is via a display device such as a monitor and input devices such as a keyboard and mouse . The user s computer has its own operating system data and file store database API and liaison application which is described in greater detail below.

As shown in when it is desired to utilize the present invention the user launches the master application . Upon launch the master application requests an operations list from the source applications and . To accomplish this task liaison applications and are coupled to known APIs and and databases and associated with each source application and . Each liaison application understands the operations of the associated source application as well as the communication mechanisms of the master application .

The master application uses SOAP Simple Object Access Protocol to communicate with the liaison application . All communications are conducted using XML Extensible Markup Language Item documents. illustrates the operations list . The operations list includes an XML Extensible Markup Language Item document shown generally as and a corresponding Item schema construct shown generally as .

Item documents and Item schema constructs are not limited to just the operations list but are used throughout the master application and liaison applications and for all communications and configuration storage. An Item document and Item schema construct are used to make the request for the operations list and an Item document and Item schema construct are received back with the operations list . In response to the request the master application also receives within the operations list a list of the object types to which each operation can be applied the necessary parameters for each operation and the vernacular to be used within the master application s graphical interface. The master application receives stores and uses information from the operations list to create corresponding menu items for both the common uncommon commands as described in more detail below.

Requesting the source application operation lists upon launch enables the master application to receive a current list of operations for new versions of existing source applications and as well as all recently added source applications. As described above the operations lists contain information relating to command icon and text conventions associated with each of the source applications and .

As shown in when it is desired to utilize the system of the present invention the user utilizes the input devices and to launch the system through the master application on the user s computer . The master application then displays on the user s monitor a graphical user interface having three panels the navigation panel the detail panel and the properties panel . If desired the user may open an additional instance of the master application to provide an additional interface having its own navigation panel details panel and properties panel to increase the number of files or documents that can be displayed and to aid in moving documents back and forth between locations.

The master application requests information relating to the type of icons to display in association with each folder and file type in the operations list . The master application requests the icon display information from each liaison application and via SOAP and an Item document . The resulting icon files are stored with the master application with new or modified icon files being requested downloaded and stored as needed. All configuration references to icon files are stated relative to a base icon folder. The base icon folders are each provided within separate source application implementation subfolders of the master application s installed folder structure. Once stored within the appropriate source application implementation subfolder the master application can reference the icon file by operations menus toolbars or any other element within the master application . If a given icon file is not available and cannot be downloaded from the liaison application a set of default icons associated with the master application are used. Upon receipt of the operations list the master application uses these icon files to display graphical icons and on the graphical user interface in association with their respective file types.

The master application checks to determine if it is up to date. The master application may check periodically or based upon the number or type of requests made by the user . If the master application is not up to date the master application checks the operations list to identify operations associated with a particular source application which similar to a predetermined list of common commands associated with the master application . Common commands may include commands such as Cut Copy Paste Delete etc.

Preferably multiple source applications and contain operations similar to the common commands. While the operations list may not contain a operation associated with one or more source applications and which matches the common commands exactly in the preferred embodiment of the present invention the source applications and will have an operation which is at least similar to a common command. Whereas a common command might be Copy the operations list might list a similar source application operation designated as Duplicate. 

Once the relationship between the master application common commands and source application operations has been identified the master application maps these relationships and stores them in the master application data and file store database . Alternatively the master application may store these mapped relationships into the database associated with the server or elsewhere.

Once the master application has stored the mapped relationships the master application determines whether there are any additional source applications which have not been mapped. If there are additional source applications which have not been mapped the process returns to step and the master application requests the operations list from the next source application and continues the process until all of the source applications and have been mapped.

Once all of the source applications have been mapped the user utilizes the mouse to select a particular item such as a file to manage. and . The user then selects a common command from available common commands or perform an action such as drag and drop on the file or an uncommon command as explained more fully below. If the user wishes to perform an action such as drag and drop the user simply proceeds with the action.

If the user wishes to execute a common command the user may right click on the file with the mouse causing the master application to open a pop up menu listing the available common commands associated with the file . The user then selects the desired common command by left clicking on the desired common command with the mouse . Once the user selects the desired common command the master application searches database to determine the operation mapped to the common command . Example operations may be GetFile PutFile DeleteFile or the like.

Once the master application has determined the appropriate operations the master application determines whether additional input is required from the user . If the master application determines that no additional input is required from the user the process moves to step described in more detail below. If the master application determines that additional input is required from the user the master application displays a dialog box as shown in . Operations requiring additional input from the user have an additional attribute within the master application operation s item schema . and . This item schema contains a query source application specific text associated with the source application operation if any and possible answers and to choose from for a given source application and object or file . This information is put into a standard dialog box which displays the query and a drop down list of possible answers and and a cancel option .

If the user determines from the source application specific text possible answers and or otherwise that the source application operations mapped to the common command are not the operations the user desires to execute the user selects the cancel option and the process moves to step where the master application queries the user as to whether the user wishes to execute another common command .

If however the user determines that at least one of the source application operations mapped to the common command is the command the user desires to execute the user selects the desired command and the master application requests the associated operation be performed on the file by the source application . The master application then receives response data from the source application reflecting the results of the source application operation being performed on the file . Using this response data the master application updates the interface to reflect the results of the operation. For instance if the operation deleted the file the updated interface will no longer display the icon associated with the file .

Once the interface has been updated the process moves to step where the master application determines whether the user wishes to execute another command. If not the process stops . If the user does wish to execute another command the process returns to step .

The user again selects the desired object or file as outlined above. The user then selects the command associated with the operation the user wishes to perform on the file . If uncommon commands are available an advanced menu is available. The master application dynamically generates the advanced menu from the Item document of the operations list for the current source application when the master application launches and after the master application requests the various operation lists from each associated source application liaisons and . Once created the advanced menu is hidden until required by the user .

If the operation the user desires to perform is not a common operation the user selects the file with the mouse and selects the advanced option from the pull down menu . The advanced option opens the pop up advanced menu listing the available uncommon commands associated with the file . From the advanced menu the user may select the desired uncommon command from the list of uncommon commands available for the current source application and the currently selected objects or file within the master application . An example of an uncommon command might be Map Network Drive. 

Once the user selects the desired uncommon command the master application obtains command definitions previously mapped to the uncommon command and stored in the database . The master application then determines whether additional input is required from the user . If the master application determines that no additional input is required from the user the process moves to step described in more detail below. If the master application determines that additional input is required from the user the master application displays a dialog box as shown in . Operations requiring additional input from the user have an additional attribute within the master application operation s item schema . and .

This item schema contains a query source application specific text and other information if any associated with the source application operation. This information is put into a standard dialog box which displays the query and options such as pull down menus and and confirmation and cancel options. The dialog box is similar to the dialog box described above. If even more direction is required from the user however the master application describes the appropriate form of the dialog box using XAML eXtensible Application Markup Language . In the present invention XAML simplifies creating a user interface for a programming model such as the .NET Framework programming model. The master application may also create visible user interface elements in the declarative XAML markup. The master application may then separate a user interface definition from the run time logic using code behind files joined to the markup through partial class definitions. This also allows each dialog box to contain its Own unique user interface.

If the user determines from the source application specific text pull down menus and or otherwise that the source application operations mapped to the uncommon command are not the operations the user desires to execute the user selects the cancel option and the process moves to step where the master application queries the user as to whether the user wishes to execute another uncommon command . If the user determines that at least one of the source application operations mapped to the uncommon command is the command the user desires to execute the user selects the desired command and the master application requests the associated operation be performed on the file by the source application . The master application then receives response data from the source application reflecting the results of the source application operation being performed on the file . Using this response data the master application updates the interface to reflect the results of the operation.

Once the interface has been updated the process moves to step where the master application determines whether the user wishes to execute another command. If not the process stops . If the user does wish to execute another command the process returns to step with the process repeating until the user does not wish to execute any additional commands.

As shown in the navigation pane provides a plurality of folders from which a plurality of sub folders may depend. The folders and sub folders may be located on the user s computer the server or another computer or server . From the plurality of sub folders additional sub folders and files may also depend. Files may include portable document format files computer aided drawing files document management system files or any other file type known in the art.

As shown for a particular selected file the properties pane displays the basic properties such as file size the dates and time related to the most recent modification and miscellaneous information such as a description. The master application gathers this information and as part of the operations list gathered as part of the launch process. The master application requests downloads and stores Item documents pertaining to object or file properties. This information is cached indefinitely and only updated if the initial request from the master application indicates changes or additions to the object or file model. Since different source applications and have different object types the properties pane is generated dynamically based on which items are selected. Context sensitive lists for any given properties are requested downloaded and created dynamically on the fly as needed.

The request by the master application is made using an Item document and all the corresponding lists are returned in an Item document . The requesting Item document contains all the current property values of the selected items so that lists can be generated and returned in real time based on the state of any and all selected items or files .

As changes are made to files using common commands and uncommon commands in a manner such as that described above such changes are stored on the database associated with the server . If it desired to move a file between folders and the user simply utilizes the mouse to drag and drop the file between folders as desired.

Standard code makes the user interfaces and behave like typical drag and drop interfaces a user would experience in any of a number of prior art applications. Unlike prior art application however once the user drops an item such as a file the master application coordinates the various commands necessary to complete the user request with the source applications and . For example if a user drags a file from an operating system source application to a document management system DMS source application indicating a request to move the file . The master application interprets that action and splits the request into three separate commands 

In the foregoing specification the invention has been described with reference to specific embodiments thereof. It will however be evident that various modifications and changes can be made thereto without departing from the broader spirit and scope of the invention. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

