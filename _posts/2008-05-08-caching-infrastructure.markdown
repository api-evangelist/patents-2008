---

title: Caching infrastructure
abstract: Example systems and methods are directed at maintaining and retrieving presence metadata. One example method includes receiving a request from a first client to edit a document file, and sending short-term check out metadata to the first client to begin an editing session. The method also includes writing the transition ID to a transition table stored in a cache, wherein the presence of another transition ID in the cache indicates that a document has switched from a single-client mode to a multi-client mode. An example system includes a processing unit operative to receive a document, the document including short-term check out metadata indicating an editing session has begun, ping a cache to determine if another transition ID is stored in the cache, and send a transition ID to a transition table stored in a cache to switch from a single-client mode to a multi-client mode.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08176005&OS=08176005&RS=08176005
owner: Microsoft Corporation
number: 08176005
owner_city: Redmond
owner_country: US
publication_date: 20080508
---
In a collaborative environment some computer applications allow multiple clients to simultaneously edit a document. As multiple clients are editing the document a server may maintain a copy of the document. The server may need to continually update the copy of the document to reflect the current state of the document. This can lead to inefficiencies.

For example even with only a single client editing the document the client s application may need to continuously update the server to allow the transition to multi party editing when it occurs. This can increase server load thereby causing a degradation in performance.

According to one aspect an example method for retrieval of presence metadata includes receiving a request from a first client to edit a document file sending short term check out metadata to the first client to begin an editing session and writing the transition ID to a transition table stored in a cache wherein the presence of another transition ID in the cache indicates that a document has switched from a single client mode to a multi client mode.

According to another aspect an example system includes a cache infrastructure for retrieval of presence metadata. The system includes a memory storage unit and a processing unit coupled to the memory storage unit wherein the processing unit is operative to receive short term check out metadata from a first client to begin an editing session add a transition ID to the short term check out metadata write the transition ID to a transition table stored in a cache and switch from a single client mode to a multi client mode. Switching from the single client mode to the multi client mode comprises the processing unit being operative to notice when the first client attempts to take another short term lock on the document and seeing that that a second client has already received the document. The processing unit is operative to determine if the multi client mode is in progress by checking a database receive a ping from the first client to determine if the transition ID is in the cache and when the transition ID is not in the cache receive pings from the first client at regular intervals and save the document to the server a plurality of times without incurring any reads writes to the database and when the transition ID is in the cache receive a ping from the first client to collect a lock table from the database to identify the second client and receive the second client s lock information by receiving pings that do not carry lock information.

According to yet another aspect an example client computer for retrieval of metadata relating to a multi client editing session includes a memory unit and a processing unit operative to receive a document from a storage device the document comprising short term check out metadata indicating an editing session has begun ping a cache to determine if another transition ID is stored in the cache and send a transition ID to a transition table stored in a cache when the another transition ID is not stored in the cache to switch from a single client mode to a multi client mode when the another transition ID is stored in the cache.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter. Nor is this Summary intended to be used to limit the claimed subject matter s scope.

In the following detailed description references are made to the accompanying drawings that form a part hereof and in which are shown by way of illustrations specific embodiments or examples. While the disclosure will be described in the general context of program modules that execute in conjunction with an application program that runs on an operating system on a computer system those skilled in the art will recognize that the disclosure also may be implemented in combination with other program modules. The embodiments described herein may be combined and other embodiments may be utilized without departing from the spirit or scope of the present disclosure. The following detailed description is therefore not to be taken in a limiting sense and the scope of the disclosure is defined by the appended claims and their equivalents.

Embodiments of the present disclosure provide an environment in which multiple clients can collaboratively author a document while consuming minimal server resources. In example embodiments when a coauthoring capable application is editing a document the application adds coauthoring metadata to the document and keeps a server copy of the file updated with the latest metadata. The coauthoring metadata and server copy allows seamlessly transitions from a single client to a multi client editing state and vice versa. To keep conflicts to a minimum the coauthoring metadata is uploaded to the server. When a new client opens the document the client is notified of the areas of the document where other clients are working.

The authoring system also includes at least one client computing device that is communicatively coupled to the storage device . Each of the client computing devices can edit the document by creating a client copy of the document and editing the client copy . The client copies of the document are synchronized when the client computing devices periodically send to the storage device updates to be shared with the other client computing devices and periodically obtain from the storage device updates from other client computing devices.

As the term is used herein a client computing device includes any computing device that obtains a client copy of a document to be authored from a master copy of the document. The client computing device can be different from the storage device or can include a different client account implemented on the storage device . In one embodiment a computing device that acts as a storage device for one document may act as a client computing device for a different document and vice versa.

In the example shown four client computing devices A B C and D are communicatively coupled to the storage device . In other embodiments however any number of computing devices may be coupled to the storage device . In the example shown each client computing device A B C D can send to the storage device updates generated by the client of the client computing device and can request from the storage device updates generated by the clients of the other client computing devices. In one embodiment the storage device can be a server computing device and the client computing devices A B C D can be client computing devices. Other system configurations are possible. For example in an alternative embodiment multiple server computing devices can be used.

As shown in the document stored on the storage device can include content and metadata . Authoring applications on the client computing devices process and manipulate the content and metadata of the client copies of the document . In some embodiments metadata can be stored separately from content . For example content can be stored in the document and metadata can be stored in a table see separate from the document . In other embodiments however the metadata can be stored within the document .

In general the client computing devices can synchronize updates to the content separately from updates to the metadata . In general metadata updates are automatically synchronized among the storage device and client computing devices whereas content updates from each client computing device are synchronized at the request of the respective client.

Referring to lock metadata can be stored in a variety of different formats. For example the lock metadata of is stored in a table format . The lock table of includes a list of clients each of whom is identified with a client identifier e.g. an identification number that is uniquely assigned to the client. Data units to be locked are identified with unit identifiers e.g. identification numbers that are uniquely assigned to each data unit within a document. The lock table associates the unit identifiers of the one or more data units to be locked with the client identifiers of the clients who own the locks.

For example in the lock table data units and are associated with a first client . Other clients therefore are inhibited from editing data units and . Data unit is associated with client . Other clients including the first client therefore are inhibited from editing data unit . The fourth client has not locked any portion of the document and so is not associated with any unit identifiers. In other embodiments however lock metadata can be stored in a different format or within the document. For example the lock table can be arranged by unit identifier instead of by client identifier.

Presence metadata also can be stored in a variety of formats. For example presence metadata can be stored in the lock table of . In another embodiment however presence metadata can be stored in a separate table or in a different format. Presence metadata includes the client identifier of each client that is currently accessing the document or that has staked a claim e.g. generated a content lock on a data unit of the document. For example a metadata table such as the lock table can store the client identifier of each client having a claim to at least one data unit of the document. Like lock metadata presence metadata can be synchronized automatically.

The client computing device includes an authoring application configured to provide an authoring environment in which a client can create and or manipulate a document to be authored. The client computing device also includes a cache a layer object LO and a synchronization manager sync manager . The cache stores a client copy of the document to be authored. The cache also stores the metadata including lock and presence metadata associated with the document. Updates to the content and metadata of the document also can be stored in the cache .

The layer object provides an interface between the authoring application and the cache . The layer object also provides an interface between the authoring application and the sync manager . The sync manager communicates with the storage device and provides an interface between the storage device and the cache . For example the sync manager can send updates to and obtain updates from the storage device and the cache .

In general an authoring environment having features that are examples of aspects in accordance with the principles of the disclosure can be implemented on a client computing device e.g. a personal computer a server computer a notebook computer a PDA a Smartphone or any other such computing device . A non limiting embodiment of a client computing system configured to implement an authoring environment is described herein with reference to .

In the exemplary computing system for implementing the principles of the disclosure includes a client computing device such as client computing device . In a basic configuration the client computing device typically includes at least one processing unit for executing applications and programs stored in system memory . Depending on the exact configuration and type of computing device the system memory may include but is not limited to RAM ROM EEPROM flash memory CD ROM digital versatile disks DVD or other optical storage devices magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or other memory technology.

System memory typically stores an operating system such as the WINDOWS operating systems from Microsoft Corporation of Redmond Washington suitable for controlling the operation of the computing device . System memory also may include a document cache in which a client copy of a document can be stored. Metadata of the document also can be stored within the client cache .

The system memory also may store one or more software applications such as authoring applications for creating and editing documents. One non limiting example of an authoring application suitable for authoring documents in accordance with the principles of the present disclosure is Word word processing software from Microsoft Corporation. Other non limiting examples of authoring applications include POWERPOINT presentation software and VISIO drawing and diagraming software both also from Microsoft Corporation. Other software applications can also be used.

Computing device also may have input device s such as a keyboard mouse pen voice input device touch input device etc. for entering and manipulating data. Output device s such as a display screen speakers printer etc. also may be included. These output devices are well known in the art and need not be discussed at length herein.

The computing device also may contain communication connections that allow the device to communicate with other computing devices for example the storage device of over a network in a distributed computing environment e.g. an intranet or the Internet . By way of example and not limitation communication device media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media.

Turning now to is a flow chart setting forth the general stages involved in a method consistent with an embodiment of the disclosure for retrieving presence metadata. Method may be implemented using a computing device as described in above with respect to . Ways to implement the stages of method will be described in greater detail below. Method may begin at starting block and proceed to stage where computing device may receive metadata . For example a client using computing device e.g. a client computer may open a document e.g. . Opening the document may cause computing device to receive short term check out metadata for the document.

From stage where computing device received metadata method may advance to stage where computing device may add a transition ID to the metadata .

Once computing device adds the transition ID to metadata in stage method may continue to subroutine where computing device may write the transition ID to a transition table stored in cache . For example writing the transition ID to metadata may indicate more than one client is editing the document i.e. switching from a single client mode to a multi client mode as show in .

In one example the transition ID is a unique number such as a Globally Unique Identifier GUID i.e. a pseudo random 128 bit number . The transition table is a list of the transition IDs. The transition table can also include an expiration date for each transition ID. The expiration date can be used to clear a transition ID when a client forces creation of a transition ID and thereupon abandon editing of the document without notification. Other configurations are possible.

From subroutine stage where computing device may write the transition ID to a transition table stored in cache method may advance to stage where computing device may ping storage device e.g. a server to determine if the transition ID is in cache .

When the transition ID is not in the cache computing device may ping the server at regular intervals and save the document to the server a plurality of times without incurring any reads writes to a database that stores presence information.

When the transition ID is in the cache computing device may ping the server to collect a lock table from a database to identify a new client and in a separate web service request submitting the client s lock information. Computing device may then delete the transition ID from the transition table.

Computing device may also submit a client s lock information. Submitting the client s lock information may include pinging the server. For example the computing device can submit am I alone pings to the server wherein the am I alone pings do not carry lock information. An am I alone ping is simply a ping to the server or other storage device wherein computing device is requesting information to determine if the document is being edit by another client or if another client had begun editing the document after the client began editing the document.

Every time each client downloads presence metadata the number of clients in an editing session and the last time each client updated their presence information e.g. transition ID transition table database etc. may be checked among other things at regular intervals. If the presence information has not been updated by any client in a configurable window of time it is considered a violent exit from the session. Any client who first observes this exit can delete the client from the presence information. Further the delete operation should be a graceful merge so that any other client who also made the same observation can re request the omissions which results in a no op in the server.

If the presence information reflects only one client which should be the examining client i.e. computing device the following actions may be done to minimize problems associated with the timing of the change of state of the document 1 clear up the presence table so it reflects the state as a single client mode 2 delete the transition ID to the transition table and 3 start the am I alone pings at regular intervals.

The transition ID in the transition table indicates another user has joined the coauthoring session and is in transition back to multi user authoring. When the system transitions back to one client editing that client starts sending the am I alone pings. The am I alone pings returned to the client indicate the client is alone until another client puts the transition ID back in the transition table.

Once computing device pings storage device in stage method may continue to stage where computing device may refresh cache .

For example computing device may refresh cache by updating the transition table stored in cache . For instance updating the transition table may include pinging cache to check for the presence of the transition ID in cache . When the transition ID is not present in cache a determination may be made to see if cache has been refreshed within a predetermined time interval. When cache has been refreshed within the predetermined time interval a response to the ping may be sent from cache . When cache has not been refreshed within the predetermined time interval the transition table corresponding to the document s content database may be fetched. Once computing device has refresh cache in stage method may then end at stage .

For example switching from single client mode to multi client mode may be initiated by a second client attempting to take another short term lock on the document and seeing that that the client has already received the document. Switching to multi client mode may include computing device receiving the document and transition ID at cache . In this instance computing device may actually be a second client computing device. After receiving the transition ID computing device may write the transition ID to the transition table and write to the database information indicating the second client has joined the editing session and is now working on the document.

If computing device determines the document is in multi client mode in stage subroutine may continue to stage where computing device may adds the client as the nth client. For example adding the nth client may include computing device receiving the document and transition ID and writing to the database information indicating the nth client has joined the editing session.

From stage where computing device switches from single client mode to multi client mode or stage where computing device adds the nth client subroutine may advance to stage where computing device may return to stage .

Reference may be made throughout this specification to one embodiment an embodiment embodiments an aspect or aspects meaning that a particular described feature structure or characteristic may be included in at least one embodiment of the present disclosure. Thus usage of such phrases may refer to more than just one embodiment or aspect. In addition the described features structures or characteristics may be combined in any suitable manner in one or more embodiments or aspects. Furthermore reference to a single item may mean a single item or a plurality of items just as reference to a plurality of items may mean a single item. Moreover use of the term and when incorporated into a list is intended to imply that all the elements of the list a single item of the list or any combination of items in the list has been contemplated.

Embodiments of the disclosure may be implemented as a computer process method a computing system or as an article of manufacture such as a computer program product or computer readable media. The processes programs can be implemented in any number of ways including the structures described in this document. One such way is by machine operations of devices of the type described in this document. Another optional way is for one or more of the individual operations of the methods to be performed on a computing device in conjunction with one or more human operators performing some of the operations. These human operators need not be collocated with each other but each can be only with a machine that performs a portion of the program.

The computer program product may be a computer storage media readable by a computer system and encoding a computer program of instructions for executing a computer process. The computer program product may also be a propagated signal on a carrier readable by a computing system and encoding a computer program of instructions for executing a computer process. The term computer readable media as used herein includes both storage media and communication media.

Those skilled in the art will appreciate that the disclosure may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. The disclosure may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types.

