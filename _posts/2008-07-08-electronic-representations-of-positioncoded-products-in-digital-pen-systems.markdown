---

title: Electronic representations of position-coded products in digital pen systems
abstract: Disclosed methods, computer-readable media, and systems relate to position-coded products and processing data from such products. In one implementation, a computer-readable storage medium stores a program for a computer to perform a method for creating an electronic representation of a position-coded product. The method may access an electronic document file with a set of document pages and map the document pages, copy for copy, within a selected number of copies, to pattern pages according to an ordering of the pattern pages.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08271864&OS=08271864&RS=08271864
owner: Anoto AB
number: 08271864
owner_city: Lund
owner_country: SE
publication_date: 20080708
---
This application claims the benefit of priority to Swedish Patent Application No. 0701675 1 filed on Jul. 10 2007 and U.S. Provisional Patent Application No. 60 929 908 filed on Jul. 17 2007 the disclosures of which are expressly incorporated herein by reference in their entirety.

The present invention generally relates to a technology platform for generating position coded products and processing data from such products.

It is known to print document pages with a position coding pattern. The resulting position coded product is thus embedded with positions on its surface. These positions can be retrieved from the product surface by the use of a digital pen which may have a scanner at its front end for reading the pattern.

This technology can be used to electronically capture and process handwriting e.g. pen strokes drawn with the digital pen on the product. By providing different pattern on different products or even different copies of the products the captured pen strokes can be uniquely assigned to a specific product or copy. This opens up the possibility of managing the captured pen strokes based on their position content. For example a system component may direct captured pen strokes to a specific receiving computer that is dedicated to processing data from a specific product. The receiving computer may associate areas on the originating product with processing rules and process the captured pen strokes according to these rules. Accordingly the resulting system is transparent to the end user who may work as if using ordinary pen and paper. Although such a system is simple to use the underlying system architecture may be complex.

Generally a design tool is provided to allow a deployer to design a product and to generate a print file that defines one or more copies of the position coded product. Furthermore the receiving computer may require an application program for processing the captured pen strokes. Suitably this application program may operate based on a product definition that defines the placement of a pattern on the product and the location of areas on the product. Thus a product definition may need to be created and made available to the respective application program. Generally it may also be desirable for the digital pen to be controlled by the positions on the product e.g. the pen may vibrate or provide other feedback whenever it is placed on certain areas of a product. Thus it may be necessary to create and distribute a basic product definition for digital pens. It may also be desirable to distribute one or more background images of the product to the application programs and or to a peripheral device nearby the user to allow the captured pen strokes to be displayed to the user against a background image of the product. Such a system may be complex and require distribution of many files of enabling data to different system components.

The present invention may provide electronic document files methods computer readable media and systems for development design and deployment of digital pen systems.

According to an embodiment of the invention there may be provided a computer readable storage medium storing a program for causing a computer to perform a method. The method may create an electronic representation of a position coded product. The method may include for example accessing an electronic document file. The electronic document file may include for example an indication of a number of copies a set of document pages for each copy at least one pattern license identifying a set of pattern pages each pattern page being a unique part of a position coding pattern and metadata indicating an ordering of the pattern pages. The document pages may be associated with the pattern pages. The document pages may be implicitly associated copy for copy with the pattern pages according to the ordering. The method may further include deriving the metadata and the set of document pages from the electronic document file mapping the document pages copy for copy within the selected number of copies to the pattern pages according to the ordering and generating a printable representation of each copy of each document page merged with its mapped pattern page.

According to another embodiment of the invention there may be provided a method including for example accessing an electronic document file comprising layout specifications for a set of document pages adding to the electronic document file an indication of a number of copies of the set of document pages adding to the electronic document file at least one pattern license identifying a set of pattern pages each pattern page being a unique part of a position coding pattern and adding to the electronic document file metadata that indicates an ordering of the pattern pages.

According to still another embodiment of the invention there may be provided a method for manipulating an electronic document file that represents a position coded product. The method may include for example adding layout specifications for a set of document pages to the electronic document file. Each document page may correspond to a page of the product. The method may further include adding at least one pattern license identifying a set of pattern pages to the electronic document file. Each pattern page may be a unique part of a position coding pattern. The method may also include activating the electronic document file for a number of product copies adding to the electronic document file metadata indicating an ordering of the pattern pages and associating the document pages copy for copy within the number of activated product copies with the pattern pages according to the ordering.

According to another embodiment of the invention there may be provided a method for representing a position coded product in a digital pen system. The method may include for example creating an electronic document file of a predetermined format. The electronic document file may include a set of document pages. The method may further include adding to the electronic document file at least one pattern license identifying a set of pattern pages with a given ordering. Each pattern page may be a unique part of a position coding pattern. The method may also include activating the electronic document file for a number of product copies. Each product copy may contain the set of document pages and the document pages may be associated with the pattern pages. The association may be implicit and according to the ordering. The method may also include printing the activated product copies by deriving the document pages and the associated pattern pages based on the electronic document file and indicating the activated product copies thus printed in the electronic document file.

According to another embodiment of the invention there may be provided a system for enabling data collection. The system may include for example a paper design component for creating an electronic document file of a predetermined format. The electronic document file may include a set of document pages. The system may further include a paper activation component for adding to the electronic document file at least one pattern license identifying a set of pattern pages with a given ordering. Each pattern page may be a unique part of a position coding pattern. The paper activation component may also be for activating the electronic document file for a number of product copies. Each product copy may contain the set of document pages and the document pages may be associated with the pattern pages. The document pages may be associated implicitly. The system may also include a printer for printing a number of the activated product copies by deriving the document pages and the associated pattern pages based on the electronic document file.

According to another embodiment of the invention there may be provided a method for enabling printing of a selected number of copies of a position coded product. The method may include for example accessing an electronic document file according to the first aspects deriving the metadata and the set of document pages from the file mapping the document pages copy for copy within said selected number of copies to the pattern pages according to said ordering and generating a printable representation of each copy of each document page merged with its mapped pattern page.

One or more of the above embodiments may allow the position coded product and all copies thereof to be represented by a single data file. Data pertaining to the product may be contained in one electronic document file which may be made available to the different system components in a digital pen system. Depending on the functions to be performed on the data pertaining to the product by the different system components different software or software modules may be used. The different system components may be provided with the software modules needed to perform the respective functions in the digital pen system. Meanwhile the single data file may be used and distributed between the different system components. The software modules of the system components may provide access possibilities to manipulating the file required by the respective system components. Even though the single data file may include information that should not be available for manipulation by all the different system components the access to the parts of the file may be controlled by the software modules used by the respective system components. Thus using a single data file distribution and handling of enabling data may be facilitated thereby it may simplify development design and deployment of digital pen systems. For instance there may be no need to keep track of which files or information each system component needs in order to perform its functions. It may be sufficient that the system component receives the single data file and the software run by the system component may control which functions it may perform.

Using an implicit mapping of copies and document pages to pattern pages may ensure that the size of the electronic document file does not become excessive even if it represents many copies of a product. For example implicit mapping may be accomplished simply on the basis of the order of the pattern pages and the order of the documents pages. For example simply based on order the xth pattern page may be implicitly associated with the xth document page. Alternatively the invention may include a formula that maps a pattern page to a document page. e.g. the xth pattern page may be associated with the xth y document page or some other formula . Regardless of the implicit mapping scheme employed memory usage may be reduced because location data associating every document page with every pattern page need not necessarily be stored such as in an electronic document file. The copies and document pages may be mapped to the pattern pages using a convention common to the entire digital pen system. Thus when a pattern license identifying a set of pattern pages is added to the electronic document file the pattern pages may be directly mapped to the document. Thanks to this convention there may be no need for specifying the mapping of document pages to pattern pages. This implies that the size of the electronic document file may be kept small. Specifically the size of the electronic document file may not be affected by the number of copies and document pages that are mapped to pattern pages.

Also the implicit mapping may provide that a distributed handling of the electronic document file may be facilitated. The different components of the digital pen system may be specifically adapted to their respective purpose and need only be able to perform the specific functions. For example the paper design component may not need to be able to handle any licenses of position coding pattern. It may even be an ordinary document design tool adapted to handle the file format of the electronic document file. Furthermore the paper activation component may not need to be able to handle any printing of documents whereas the paper print component may not need to be able to manipulate any content of the electronic document file. The implicit mapping may provide that the position coding pattern is printed in the same combination with the document pages as specified during adding of a license. Thus different actions to be taken in creating a position coded product may conveniently be distributed and be adapted to actions taken by different parties in printing of non position coded products. Also the complexity of the system components may be small and or small amounts of information need to be transmitted between the system components.

Further when interpreting a recorded position it may easily be associated with the document page that is mapped to the relevant pattern page according to the implicit mapping. Also captured pen strokes may be easily presented with the background by combining a pattern page corresponding to the strokes with the associated document page. Furthermore the electronic document file may represent the individual copies of the printed product with or without strokes as well as any copies to be printed.

Also the electronic file may be updated to represent a further set of copies of the product by simply adding one or more pattern licenses to the file and updating the metadata of the file to indicate the proper ordering of the pattern pages that are indicated by the pattern licenses in the file. Thus there may be no need to create a new file handling the mapping of the document pages to the added pattern pages. Also there may be no need for specifying how the document pages should be mapped to the pattern pages. This may be handled by the used convention for mapping document pages to pattern pages once the pattern license has been added to the file. Thus the structure of the electronic document file may both save processing time and memory resources in the event that new copies of a product are to be created.

The possibility of adding pattern licenses to the file also enables a predefined layout of document pages to be reused at any time. Thus once a layout has been designed the single electronic document file may be used to represent any future printed copies of the position coded product regardless of how many copies are made and when the copies are printed.

Moreover since the electronic document file merely comprises a pattern license identifying a set of pattern pages the electronic document file is vastly reduced in size compared to a file comprising the actual graphical code symbols forming the position coding pattern. A file comprising the actual graphical symbols may be huge since the symbols are densely provided on a product. Therefore the structure of the electronic document file facilitates designing the layout of document pages in a first step and thereafter transmitting the file with the indication of the pattern pages to a specialized printing facility for printing a number of copies of the position coded products. The specialized printing facility need only have software for reading the layout of the document pages and the pattern license and for creating the graphical symbols of the position coding pattern. There is no need to enable the printing facility to perform any manipulation of the file. Further the electronic document file may be provided with tying data that ties the pattern license to the electronic document file. This may prevent the pattern license to be moved between files or be manipulated to include further pattern pages at the printing facility.

Furthermore the pattern license may specify any number of pattern pages. This implies that the number of pattern pages may be adapted to the intended number of copies of the document pages to be produced. Thus the waste of unused pattern pages in the allocation of pattern to the electronic document files may be kept at a minimum.

It is also possible to introduce captured pen strokes into the electronic document file and allow presenting of the layout of the document page with the entered strokes to reproduce the appearance of the printed product on which strokes have been drawn with a digital pen. Furthermore the document may be printed again together with the strokes for allowing further handling of the document with a digital pen on a printed product.

It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the embodiments of the invention as claimed.

The following detailed description refers to the accompanying drawings. Wherever possible the same reference numbers are used in the drawings and the following description to refer to the same or similar parts. While several exemplary embodiments and features of the invention are described herein modifications adaptations and other implementations are possible without departing from the spirit and scope of the invention. For example substitutions additions or modifications may be made to the components illustrated in the drawings and the exemplary methods described herein may be modified by substituting reordering or adding steps to the disclosed methods. Accordingly the following detailed description does not limit the invention. Instead the proper scope of the invention is defined by the appended claims.

The following describes a novel platform for development design and deployment of systems for generating and processing data from position coded products.

These types of systems are based on the use of a position coding pattern i.e. a passive machine readable pattern that can be applied to a substrate such as paper to encode position data thereon. The position data can then be retrieved from the encoded substrate by the use of a digital pen which may have a scanner for reading the pattern. By activating the scanner while the pen is in contact with the substrate sequences of position data e.g. pen strokes may be recorded to represent the pen s movement on the substrate. In this way an electronic representation of handwriting may be generated.

The machine readable pattern may be printed together with human understandable graphics. If each substrate is printed with different pattern resulting in different position data it is possible to distinguish between position data originating from different substrates.

This principle may be used for information capture and processing. As shown in an electronically represented multi page form may be printed with unique pattern on each page. When the printed form then is filled in using a digital pen the resulting position data may be conveyed from the digital pen to a back end processing system in which the position data may be correlated to the individual pages of the originating form. The position data may for example be displayed to an operator and or processed in accordance with processing rules for that specific form and the resulting data may be stored in a database . Different printed copies of the same form may also bear a different pattern so that the position data uniquely identifies the originating form copy at the back end system. The digital pen may have a unique penID which may be conveyed together with the position data to allow the back end system to identify the originating pen or differentiate the received data between different pens.

This type of system may require a large position coding pattern since each page and possibly each copy needs to be provided with unique pattern.

In one embodiment shown in the position coding pattern may be implemented to encode a large number of positions in a global x y coordinate system x y . Thus the position coding pattern represents a huge continuous surface of positions. This huge pattern may be then logically subdivided into addressable units pattern pages of a size suitable for a single physical page. Thus each page may be printed with pattern from a different pattern page so that each printed page is encoded with unique positions in the global coordinate system . The subdivision of the position coding pattern is known in the system so that a page address PA for the relevant pattern page can be derived from each recorded position. As shown in each pattern page may be associated with a local coordinate system whereby a recorded position in the global coordinate system can be converted to a page address and local position in the local coordinate system of the pattern page identified by the page address. Such a coding pattern and a subdivision thereof are disclosed in U.S. Pat. No. 6 663 008 and U.S. 2003 0061188.

In another embodiment shown in the position coding pattern may be divided into pattern pages by way of its encoding. Specifically the position coding pattern encodes a plurality of unique pattern pages in which the encoded positions are identical between different pattern pages but each pattern page may be encoded with a unique identifier. Thus the digital pen records position data in the form of a unique identifier a page address PA and x y coordinates within a pattern page. Such coding patterns are known from U.S. Pat. No. 6 330 976 U.S. Pat. No. 5 661 506 and U.S. Pat. No. 6 766 944.

In either embodiment the position coding pattern may define a space of unique pattern pages represented by a PA space. The PA space may be ordered i.e. the pattern pages can be ordered in sequence based on page address. Thus PA ranges can be defined in the PA space to identify all pattern pages between a first and a second page address.

There are many conceivable types of information management systems that can be based on the digital pen and paper DP P technology described above. The present Assignee has previously developed a complete infrastructure for generating position coded products and conveying recorded position data to appropriate processing devices. However as the technology gains acceptance a need for tailored systems providing specific functionality has arisen. To promote development of such systems the present Assignee has now designed a new platform for development of systems based on DP P technology. The platform includes a number of basic software building blocks software modules which provide basic functionality for DP P systems. These software modules may be provided on any suitable computer readable storage medium including a record medium or a read only memory. Each module may expose at least one API Application Programming Interface that can be accessed by a software developer to integrate the module with customized software. Thus the provision of these basic building blocks may facilitate a system provider to develop tailored system components. The platform may be held together by a common file format i.e. AFD Anoto Functionality Document that conveys data between building blocks.

In one embodiment the platform may include an Interaction Module IM a Document Module DM a License Module LM and a Print Module PM .

An exemplary Interaction Module is illustrated in . It operates on a stream of data received from a decoding system in a digital pen. Specifically the Interaction Module may generate basic events based on real time pen data. Such basic events may include PenConnected indicating connection to a specific pen PenDisconnected indicating disconnection of a specific pen Error indicating a data error in the stream of data PageUp indicating that the pen has been lifted from a product surface Coord including one item of position data NewPageAddress indicating that position data has been received from a new pattern page and NoCode indicating an inability to detect pattern . The Interaction Module may also provide refined events by loading a document specification and by mapping received position data against this document specification. Such refined events may include AreaEnter indicating that the position data now falls within a specific area AreaExit indicating that the position data no longer falls within a specific area PageEnter indicating that position data has been received from a new document page . The Interaction Module provides an API allowing an external entity to register for certain events and to input aforesaid document specification e.g. in the form of an AFD file see below .

The Interaction Module may be used inside a digital pen to provide real time events to a pen control system or it may be used in an external receiving device to provide real time events to an interactive application designed to give user feedback in real time based on pen data. Such an application may thus provide essentially instant visual audible or audio visual feedback to the user of the digital pen based on the manipulation of the pen on a coded product.

An exemplary Document Module shown in may create a file in the AFD format AFD file and manipulate data contained therein. Specifically the Document Module may provide an API for deleting data in and adding data to the file. The Document API may ensure that data is read written in a consistent way at the correct place in the AFD file.

An exemplary Print Module shown in may operate on an AFD file content to generate a printable file of a coded product e.g. in Postscript or PDF format or to print the coded product directly on a printer . Conceptually the Print Module merges one or more pages of human understandable content with a corresponding number of pattern pages cf. . Suitably the Print Module includes or accesses a pattern generation function PGM in which generates the graphical code symbols for a particular pattern page based on a page address. The Print Module may provide an API for optimizing the printing of the coded product. For example the API allows setting printing parameters such as printing speed fonts selection mixture of inks used for printing pattern and human understandable content etc. The API also allows adapting parameters of the pattern to properties of the printer e.g. size of code symbols nominal spacing of code symbols placement of code symbols etc.

An exemplary License Module shown in may generate pattern licenses that give the holder access to a specific part of the position coding pattern. A pattern license defines one or more ranges of page addresses associated permissions and security data. The permissions give the holder rights to use specific functionality on the platform e.g. printing the pattern sending data recorded from the pattern and storing data recorded from the pattern. The security data may be used to verify that the license is authentic and has not been manipulated since it was created. Pattern licenses can be sublicensed in a number of levels. However the License Manager ensures that a sublicense does not extend beyond its parent license i.e. a sublicense can only be given within the PA range of the parent license and within the functionality permissions of the parent license. The License Module may also be configured to verify a pattern license based on its security data. The License Module provides an API for handling licenses e.g. creating sublicenses checking permissions of a license and verifying a license.

The AFD file format may be used as a structural container for all digital data required to represent an electronic or tangible document within the platform. Thus the AFD file may identify the human understandable content of the document the pattern on the document the placement of the pattern on the document functions or properties associated with specific areas in the pattern etc.

In the context of the present application a document may be electronically represented as a number of document pages in the AFD file. The AFD file may also electronically represent a number of copies of the document. A specific document page of a specific copy of the electronic document is also referred to as a page instance . The AFD file may also associate a respective pattern page with each such page instance. The AFD file may furthermore indicate whether a page instance is to be printed in tangible form or not.

The AFD file may be used to represent the document as it migrates through a DP P system built on the above mentioned modules e.g. when the document is designed when the document is activated with pattern in the system when the document is printed in the system when data recorded from the printed document is transported in the system and when the recorded data is processed in the system. Thus the content of the AFD file may be changed in a structured manner as the AFD file is migrated between the above mentioned modules.

Before illustrating the use of the AFD file in an exemplifying system implementation the data structure of the AFD file will be briefly explained.

In one embodiment the data is organized in the AFD file by document page and possibly by page instance. In an alternative embodiment the data is organized in the AFD file by page address.

In either case the Document API may allow access to the AFD file using an index to individual instances of each document page. Suitably this index references each instance by a combination of a copy number copy and a page number page . Thereby there is a perceived correspondence between the digital representation of the document and its eventually printed counterpart which is realized as a number of copies each consisting of a number of pages see . This analogy between the physical and digital worlds may be of great help to a system developer deployer. If the data is organized by page address in the AFD file the file may contain conversion data relating page addresses to page instances copy page and the Document API may include a function to convert from instance copy page to page address and vice versa.

To facilitate access and readability the AFD file may also be structured into mandatory storage sections each being dedicated for a specific category of data. Within these storage sections data may be structured by copy page and or page address as applicable.

The AFD format may allow system developers to add customized storage sections which will be ignored by the above Document API but can be accessed through a file reader of choice. This will allow system developers deployers to associate any type of data with a document through its AFD file. For this purpose it is clearly desirable for the AFD file to be accessible via standard file readers and or text editors.

In one embodiment the AFD file is written in a descriptive markup language such as XML and tagged to identify different storage sections.

In another embodiment the AFD file is implemented as an archive file which aggregates many files into one suitably after compressing each file. This allows different types of files to be stored in their original format within the AFD file and provides for a small file size of the AFD file. The different storage sections in the AFD file may be given by folders and or files within the archive file. In one specific embodiment the archive file is a ZIP file.

In one embodiment shown in the AFD file may include the six mandatory categories of data which may or may not be given as explicit storage sections in the AFD file GENERAL PATTERN STATIC DYNAMIC RESOURCES and GENERATED DATA. GENERAL includes metadata about the document including mapping data indicating the mapping between pattern pages and page instances. PATTERN includes one or more pattern licenses that each defines a set of pattern pages. STATIC includes page specifications page templates that define an invariant layout for each document page i.e. layout data which is relevant to all instances copies of a document page. Such layout data may include graphical elements active areas and properties associated with such active areas. Active areas are not identifiable as such on the printed document but are defined in relation to one or more document pages for use in subsequent processing of position data recorded from the printed document. Graphical elements include human understandable elements lines icons text images etc as well as pattern areas i.e. subsets of the actual coding pattern. DYNAMIC includes page specifications that define instance specific layout data i.e. layout data which is unique to a particular instance copy of a document page. Such layout data may also include graphical elements active areas and properties associated with such active areas. RESOURCES includes resources that are either common to the document or that are referenced by the static or dynamic page specifications. GENERATED DATA includes data that is generated in connection with the tangible document the coded product as printed such as pen strokes pictures sound etc.

The AFD file may contain tying data that exclusively ties the pattern license s to the AFD file to prevent that pattern licenses are moved between AFD files. This feature might be important in order to avoid collisions in the DP P system caused by the same position data being recorded from different coded products. Furthermore it might be important for securing revenue from pattern licenses.

The non activated AFD file form 1.aft is conveyed to the Paper Activation Tool in which the document is activated in a specific number of copies by associating the document with a sufficient number of pattern pages. This is done by adding a suitable pattern license to the AFD file together with mapping data which identifies how the available pattern pages are to be mapped to the document. The Paper Activation Tool may also be used to add dynamic page specifications with instance specific layout data to the AFD file. The thus activated AFD file form1.afd is conveyed both to the Paper Print Tool and to a Software Development Tool which is used for creating forms processing software that receives and processes pen data based on the AFD file i.e. the forms processing application . The Paper Print Tool may generate instructions for the printer online or offline to print a selected number of position coded copies of the document. It is to be noted that the selected number of copies to be printed may be equal to or less than the number of activated copies. Thus the Paper Print Tool may consume at least part of the pattern pages available in the activated AFD file. After the printing operation the Paper Print Tool may update the AFD file to indicate the consumed pattern pages. The updated AFD file may be stored in an AFD repository so that a user can access the file at a later time to print more copies of the document. If needed the AFD file can be activated with more pattern pages by another pattern license being added to the file using the Paper Activation Tool .

It is also to be noted that also the non activated AFD file form1.aft may be conveyed to the Paper Print Tool which may generate a non position coded printout of the document.

As shown in the AFD file format may also be used to convey the pen data from the pen to the forms processing application . This might be convenient since the forms processing application can access both pen data and an AFD file using one and the same API Document API . Again file name or file extension may be used to distinguish such an AFD file containing merely metadata and pen data on the platform. In one embodiment illustrated in such a pen data file in AFD format has file extension .afs. The pen data typically includes position data pen strokes recorded by the pen on one or more of the printed document copies as well as an identifier penID which is stored in a memory of the digital pen to uniquely identify the pen in the system.

The forms processing software created with the Software Development Tool may be installed on a computer server as a forms processing application . The application may need to access the AFD file to apply appropriate processing rules to the received pen data. Specifically the AFD file may be used to map the received position data to active areas.

Each forms processing application may be customized for a specific form which is represented by one specific AFD file. Alternatively a forms processing application may be configured to process data from different forms each represented by an AFD file. It is thus possible that a plurality of different forms processing applications co exist on one computer server and or that one forms processing application is capable of accessing a number of AFD files. In either case the computer server may have access to a repository storing several different AFD files. Upon receipt of position data form a digital pen the computer server may identify the relevant forms processing application and or AFD file by matching the received position data to the pattern pages in the different AFD files stored in the repository as will be further described below.

Thus the system is structured such that the same software modules may be used by several different system components. Still each system component does not need to include every software module whereby the available functions to each system component may be easily controlled.

In one embodiment the Paper Print Tool need only comprise a Print Module and optionally a License Module. Any updates that need to be made to the AFD file upon printing may be performed in the Document Module of the Paper Activation Tool at request for printing of one or more copies of the document pages. This implies that the Paper Print Tool may be very simple to handle and that specialized print shops may be willing to install the Paper Print Tool in order to provide services for printing position coded products. Also since the AFD file need not comprise the graphical code symbols of the position coding pattern the size of the AFD file may be small which facilitates transmitting the file between different units. Thus the system may allow transmitting the AFD file for printing to a Paper Print Tool which may be directly connected to the printer that will produce the position coded products. This also implies that the Paper Print Tool may be adapted to the characteristics of the specific printer that produces the position coded products. For instance colour separation of background images may be adapted to the specific printer and thereby an improved printing result may be obtained. Also parameters of the position coding pattern may be set such that graphical code symbols of high quality may be produced. For instance the size of the graphical code symbols may be slightly adjusted depending on the printer that produces the position coded products for improving the ability of a digital pen to read the pattern. An AFD file containing tying data that exclusively ties the pattern license s to the AFD file may be used. This may prevent a pattern license from being moved by the print shop between AFD files or the pattern license from being tampered with. An owner of a proprietary position coding pattern may issue pattern licenses to a party for designing position coded products and may allow this party to transmit the pattern license to a print shop for producing the position coded products. Tying the pattern license to the AFD file may prevent the pattern license from being moved to another AFD file and may prevent the pattern license from being tampered with to increase the range of pattern pages included in the pattern license. This may provide the owner of the position coding pattern the ability to secure revenues from issuing pattern licenses.

As indicated above the activated AFD file form1.afd includes page mapping data which defines how the document pages are mapped to pattern pages. The page mapping data may include an explicit reference to a pattern page for each page instance of the document. However if the document is to be printed in a large number of copies the size of the AFD file may then become excessive. Mapping by convention may be used i.e. using a predetermined set of rules to map a given number of copies to a given set of pattern pages. In one such embodiment the pattern pages in an AFD file given by its pattern license s may be arranged in an ordered sequence by page address and are then mapped against document pages by dead reckoning copy for copy.

For example consider a non activated AFD file that defines a three page document as shown in . This AFD file is then activated to contain a pattern license that spans pattern pages with page addresses from 3000 3009 indicated by grey boxes in . By convention the document pages of the first copy copy 0 may be associated with pattern pages 3000 3001 and 3002 respectively and the document pages of the second copy copy 1 are associated with pattern pages 3003 3004 and 3005 respectively and so on indicated by dotted boxes in . The Paper Print Tool applies this convention to print two position coded copies of this document based on the thus activated AFD file. Thereby pattern pages 3000 3005 are consumed leaving available pattern pages in the range 3006 3009 as indicated in . Concurrently the AFD file is updated to indicate the available pattern pages so that another 1 copy can be printed from the AFD file at a later time.

In one embodiment the page mapping data indicates the current first available pattern page in the AFD file. In the above example the mapping data would be PA 3000 before printing and PA 3006 after printing.

In another embodiment the page mapping data may indicate the next copy to be printed. In the above example the mapping data would be copy 0 before printing and copy 2 after printing. This type of mapping data might make it easier for a developer deployer to understand the status of the AFD file i.e. how many copies can be printed before the AFD file must be activated with more pattern. However this mapping data requires that the Document Module and Print Module convert next copy to page address when mapping document pages to pattern pages. This may be done by dead reckoning from the starting pattern page in the AFD file given by its pattern license .

In the above example the mapping order within the PA range may be given by page address. However in an alternate embodiment the pattern license of an AFD file may contain more than one PA range and pattern license s can be added to an existing AFD file. Therefore the AFD file may contain page mapping data that indicate a mapping order for the PA ranges defined in the pattern license s in the AFD file. Thus the page mapping logic sorts the different PA ranges according to the mapping order and sorts the pattern pages within each PA range according to page address.

The AFD file may also contain layout mapping data which defines the relative placement of the pattern page or parts thereof to the document page. The layout mapping data may include explicit location data for each instance of the document with the location data defining where to place what part of a pattern page.

However to simplify processing and reduce the AFD file size the layout mapping data may be partly based on mapping by convention. As explained above see every pattern page may be associated with a local coordinate system pattern page coordinate system with a known origin on the pattern page e.g. its upper left corner. As shown in every document page may likewise be associated with a local coordinate system paper coordinate system with a known origin on the document page e.g. its upper left corner. In one embodiment of there is by convention a known and fixed relation between these coordinate systems such that the pattern page completely overlaps the associated document page . In the example of the origin of the paper coordinate system can be expressed as a pair of non negative x y coordinates in the pattern page coordinate system . Using this convention the document page is thus conceptually superimposed on the pattern page in a known way. By further convention a selected subset of the pattern page pattern area is placed on the document page in its overlapping location. Thus by specifying a pattern area in the pattern page coordinate system its location on the document page in the paper coordinate system is automatically given. Vice versa the pattern area may be automatically known for any region specified on a document page in the paper coordinate system . Conceptually this can be compared to a Christmas calendar in which hinged doors in a cover sheet can be opened to reveal a hidden underlying sheet. When a region is defined on the document page the underlying pattern pattern area may be revealed.

Clearly only a small amount of data is required to specify pattern areas on document pages resulting in a reduced size of the AFD file. For example it is sufficient to define the location of a region on the document page its content of pattern is known by convention.

In one embodiment the system developer deployer may only be exposed to one of the paper coordinate system and the pattern page coordinate system . Thus the location and size of active areas and graphical elements may all be defined in one of these coordinate systems. Likewise digital pens will output position data given in this coordinate system. In another embodiment the developer deployer may be exposed to the paper coordinate system again to enhance the analogy between the physical and digital worlds. The location of a graphical element as given in the AFD file will thus match the location of the graphical element on the printed product. In this embodiment the digital pen may convert positions in the pattern page coordinate system to positions in the paper coordinate system which is done by a simple linear coordinate shift.

The use of a known linear shift between pattern page and document page makes it easy to visualize display recorded position data against a background image representing the visual appearance of the document page. If necessary the background image is scaled to match the size of the document page whereupon position data given in the paper coordinate system can be directly rendered on the background image. Position data given in the pattern page coordinate system is first transformed to the paper coordinate system by a linear coordinate shift. Thus pen strokes can be visualized in their proper context without requiring extensive processing which may allow its use on small handheld device with limited processing power. Low resolution background image s for display may be generated and stored in the AFD file by any one of the Paper Design Tool Paper Activation Tool and Paper Print Tool shown in .

One such feature is a parameter has pattern which is associated with each document page to indicate whether the document page should be associated with a pattern page or not. The parameter value may thus cause the mapping logic to skip this document page when mapping document pages to pattern pages. Subsequently this document page will be printed without any pattern. This feature may ensure that pattern need only be applied to document pages where it is useful to avoid wasting pattern pages. For example a cover page with introductory information about the rest of the document might not need to be provided with position coding pattern. In the example of the AFD file defines a five page document with a cover page to be printed without pattern. The AFD file is activated with 10 pattern pages. Printing of two copies results in two tangible five page copies while still leaving two pattern pages for later use in the AFD file.

For reasons of AFD file size the has pattern parameter may be set for each document page as in the above examples to be applicable to all instances of a certain document page. However in an alternative embodiment individual page instances may be associated with the has pattern parameter.

Another mapping feature is a reserved page. This is an empty document page which is mapped against a pattern page but is not printed. A reserved page may be used as padding at the end of a document. illustrates an example in which an AFD file defines a four page document of which the last page is a reserved page R. Printing of two copies results in two tangible three page copies.

Reserved pages may be used for example to update an existing document AFD file by adding document pages to be printed with pattern. In the absence of reserved pages it may not be possible to add a document page to be printed with pattern to an existing AFD file since this would change the mapping between document pages and pattern pages. This is due to the fact that the page mapping logic is based on dead reckoning from a starting page address document page by document page and copy by copy. If the document AFD file is provided with one or more reserved pages such a reserved page can be converted to a document page to be printed with pattern without disturbing the existing mapping between document pages and pattern pages.

In another example reserved pages are used to make sure that each copy of all documents in a system occupies the same number of pattern pages. This may be useful in a print on demand PoD system in which many different documents can be printed with position coding pattern on digital printers and digital pens are configured to collate the recorded data by document copy. To avoid downloading information about the pattern pages of all document copies in the digital pens at least part of the position coding pattern may be partitioned into ranges of pattern pages PA ranges with each range being intended for a document copy. Information about this partitioning can be stored in the digital pens which thus are capable of collating the recorded data within the respective range. To ensure that the mapping logic causes each document copy to occupy a full PA range reserved pages can be added as needed to each AFD file.

In one embodiment the reserved page R is implemented as a simple number designation in the AFD file e.g. an nr of reserved pages parameter indicating the number of pages to be added at the end of the document or a total number of pages parameter indicating the size of the aforesaid range. The number designation allows the mapping logic to allocate the appropriate number of pattern pages for each document.

Still another mapping feature is a virtual page. The virtual page may be mapped against a pattern page but is not printed as a separate page. The virtual page is thus similar to a reserved page but is implemented in a less space efficient manner and has more versatile use. A virtual page can be added anywhere in the document and it is implemented as regular document page. It can thus have pattern areas human understandable graphics active areas resources etc. Although a virtual page cannot be printed as a separate document page it can be printed as part of another document page. For example as indicated in a part on the virtual page V may be defined as a pattern area using the above mentioned layout mapping Christmas calendar and this section may be referenced by a non virtual document page to be pasted onto this document page at a specific location e.g. given in the paper coordinate system . Such a pasted part will be printed as a non transparent element that covers any elements of this document page such as pattern area graphics etc. In the example of printing of two copies results in two tangible three page copies of which the pattern area from the virtual page V has been inserted on the first and second pages of each copy. The inserted pattern area contains pattern from the pattern pages mapped to the virtual page i.e. page address 3002 and 3006 respectively . Thus in this example a virtual page is used as a container of pattern areas that can be pasted onto the pages to be printed. The position data recorded from the printed document will be stored as generated data in association with the virtual page.

An embodiment of the AFD format implemented as an archive file is schematically depicted in in which different data storage sections are indicated within brackets for ease of understanding.

The GENERAL section may include three XML files in the top folder of the AFD file main.info main.document and main.pattern. The info file contains global data metadata about the AFD file which may be selectively extracted from the AFD file for simplified processing on the platform e.g. for locating a proper AFD file among a plurality of AFD files for routing the AFD file to a proper destination etc. The document file includes document data metadata which is used when accessing data in other data storage sections of the AFD file typically in reading writing or mapping operations. The pattern file includes basic page mapping data. It is thus realized that the pattern file is updated whenever pattern licenses are added to the AFD file.

The PATTERN section may include a licenses folder for holding one or more pattern license files. Each license file is identified by its starting page address and its level. Recalling that sublicenses can only be granted within the range of pattern pages of a license it should be realized that if two pattern licenses share the same starting page address they should belong to the same license chain i.e. they should have different values of their level parameter. Thus the combination of starting page address and level can be used to uniquely identify each pattern license file.

The STATIC section which holds static page specifications includes a pages folder which has a subfolder for each page of the document given by page number page . Each such subfolder can hold an area collection given by a page.areas file a graphics collection given by a page.gfx file and one or more property collections. Different file extensions suffix are used to distinguish different property collections from each other. The area collection defines active areas given by areaIDs i.e. areas to be used by the processing application or the digital pen if the AFD file is available to the pen see further below . The graphics collection defines or identifies graphical elements that collectively form the visible layout of the page. Each property collection is used to associate a specific property to the active areas defined by the areas file. Specifically the property collection associates a set of areaIDs with data strings. A property collection could be used to associate the active areas on a page with area names character recognition types number character email phone number etc audio file names function calls pen feedback vibration types one thump double thump etc .

The DYNAMIC section which holds dynamic page specifications is organized similarly to the STATIC section and stores corresponding data. Specifically this may include an instances subfolder to the pages folder which can hold an area collection a graphics collection and one or more property collections for each instance. Each such collection is given a file name that identifies the relevant instance given by copy number copy and page number page .

The RESOURCES section may include a resources subfolder to the pages folder. The resources subfolder can hold any type of file which is either common to the document or is referenced in the static or dynamic page specifications. Such resources may include background images of different resolution to be used when displaying recorded position data audio files image files depicting a respective graphical element an originating document file such as a word processing document a PDF file a presentation document a spreadsheet document etc.

The GENERATED DATA section may include a data folder which holds all data generated in connection with the document as printed. Recorded position data is stored as time stamped pen strokes. In the illustrated example the pen strokes may be stored in a proprietary .sff file format and with a file name that indicates the time range for the included pen strokes i.e. the earliest and latest time stamps in the file. This name convention is used to facilitate temporal mapping i.e. to make it easy to quickly find pen strokes based on their recording time.

The pen strokes may be stored in a structure of subfolders and may be sorted by page address and penID. The page address thus identifies the pattern page from which the pen strokes were recorded and the penID identifies the digital pen that recorded the pen strokes. In contrast to other parts of the AFD file pen strokes may be associated with their originating page address instead of instance copy page . The page address is unique within the entire system whereas the instance is only unique within a particular AFD file. If pen strokes are associated with page address they can easily be transferred between different AFD files. Furthermore as will be described below it might be desirable for digital pens to use the AFD format as a container of pen strokes. Generally the digital pen has no information about the page mapping for a particular document and is thus unable to store the pen strokes based on instance.

Other generated data may also be stored in the data folder or in an appropriate subfolder possibly with a file name that identifies the time range and possibly with a file extension that identifies the type of data. Such generated data may include a picture taken by the pen or by an accessory device in connection with the printed document an audio file recorded in connection with the printed document bar code data recorded in connection with the printed document text resulting from handwriting recognition HWR processing of pen strokes etc.

Thanks to the convention of naming these files of generated data different data files that may be recorded simultaneously or within the same time frame may be associated to each other. The strokes and other data that may be recorded with the same time range have file names containing an identifier of this time range. Thus the associated files may be easily detected. This may allow a sound recorded in connection with a specific stroke to be easily found and played or a place where the stroke was made to be easily determined by a recorded GPS position.

The GUID parameter is a globally unique or essentially unique identifier of the AFD file. The GUID may serve several purposes. For example it may be used as index to expediently locate a particular AFD file in a database. As will be explained below it may also be used for version control and to check the integrity of the AFD file. Furthermore if the digital pens output recorded data in the form of an AFD file the GUID could be used in conveying the AFD file to its appropriate processing application.

The GUID may be added to the AFD file when the file is locked e.g. when the invariant page layout has been finalized e.g. using the Paper Design Tool and the corresponding layout data is stored as static page specifications in the AFD file. In one embodiment the GUID is generated as a random number. In another embodiment it is generated as a fingerprint of at least part of the AFD file. Any subsequent changes to the static page specifications in the AFD file may require unlocking of the file and results in a new value of the GUID. Thereby the GUID may be used for version control.

However it should be noted that the GUID may be not affected when the AFD file is updated with pattern licenses and generated data. The GUID may likewise be unaffected by changes to the dynamic page specifications in the AFD file.

In one embodiment the GUID may be generated as a function of the static page specifications in the AFD file e.g. by operating a hash function on this data. Thereby the integrity of this data may be checked anywhere within the platform by operating the hash function on the content of the static page specifications and comparing the resulting hash value to the GUID. Suitably the hash function is dependent both on content and on the order of content to ensure that different GUID values are generated if e.g. one parameter value is changed from 0 to 1 and another parameter value is changed from 1 to 0. Such a hash function may be implemented as a CRC cyclic redundancy check .

The target uri parameter is a routing information identifier. It may implicitly or explicitly identify a destination address for the AFD file or data therein. The destination address may indicate the address of a processing application for final processing of the AFD file e.g. a network address of the computer server in or it may indicate the network address of a routing or forwarding service for conveying the AFD file to the processing application.

The pageaddress start and pageaddress stop parameters indicate the lowest and highest page address respectively given by the pattern license s in the AFD file. Thus these parameters define the maximum page address range PA range of the AFD file and may be used for rejection testing among a plurality of AFD files based on a page address. For example a processing application may map page address es of received position data against the maximum PA range to find candidate AFD files to be used in processing the position data. It is to be noted that for final acceptance it is necessary to identify the PA range of each individual pattern license in the candidate AFD files and map the received position data against these PA ranges. This is due to the fact that each AFD file may include pattern licenses with quite different PA ranges causing discontinuities in maximum PA range given by the pageaddress start and pageaddress stop parameters.

The procedure of examining individual pattern licenses in a plurality of different AFD files may be rather processing intensive and time consuming. A preceding coarse rejection test based on the maximum PA range of each AFD file may allow to eliminate irrelevant AFD files from further examination.

The current copy parameter identifies the next copy to be printed and is used in the page mapping procedure as described above.

The total number of copies parameter identifies the total number of copies that can be printed using the pattern licenses in the AFD file.

A digital signature may also be used to exclusively tie the pattern license to the AFD file. In one such embodiment a digital signature tying signature is generated on license data the license file s or part thereof in combination with non license data from the AFD file. Such non license data may include all or part of the static page specification in the AFD file. The resulting tying signature is added to the AFD file so as to interweave the pattern license with the AFD file. illustrates one embodiment of an AFD file in which a tying signature S S is included in each of the pattern licenses P P to exclusively associate the respective pattern license P P with non license data NLD in the AFD file.

In one embodiment the License Manager API provides a function for generating a digital signature based on a license file and setting the signature parameter in the license file equal to the digital signature. To use such a function the non license data is first added to the license file which is then subjected to the signature generating API function.

The tying signature may be generated by the Paper Activation Tool before it adds the pattern license to the AFD file. In one example the tying signature is calculated by operating a hash function on the license and non license data and using a private key of an asymmetric key pair to encrypt the resulting hash value.

The Paper Print Tool may be required to verify the included pattern license s before printing an AFD file. Using the above example this verification may include extracting the hash value by decrypting the tying signature in the AFD file using a public key of the asymmetric key pair and re recalculating the hash value by operating the hash function on the license and non license data. If the extracted and re calculated hash values match the verification succeeds otherwise it fails.

In one embodiment the GUID parameter in main.info in the AFD file may be used as non license data. This may provide processing efficiency. Furthermore only a small amount of data may be added to the license file in order to use the signature generating API function of the License Manager. The verification of such a license file includes extracting the hash value by decrypting the tying signature in the license file and re recalculating the hash value by operating the hash function on the content of the license file. If the extracted and recalculated hash values do not match the verification fails. Otherwise it proceeds by recalculating the GUID based on the content of the AFD file recalling that the GUID might be generated as a fingerprint of AFD file content and by checking that this re calculated GUID matches the GUID in the license file. By using a re calculated GUID instead of the GUID in main.info an illicit user is prevented from circumventing the verification by copying both a pattern license and a GUID from one AFD file to another AFD file.

By including the size of each PA range given by the copies parameter in main.pattern the page mapping logic can operate solely on metadata i.e. without having to access the individual pattern licenses. This may save processing power and reduce processing time. There are alternative ways of including the size of the PA range in the metadata e.g. by identifying the number of pattern pages for each PA range or by identifying the last page address in each PA range.

To further exemplify the use of main.pattern consider an AFD file that defines four document pages. The AFD file has been activated for 9 copies by adding a pattern license that defines two PA ranges one starting at PA 10 and spanning copies and one starting at PA 100 and spanning copies. The resulting content of main.pattern is shown in . The page mapping logic causes pattern pages to be mapped to page instances in the following order with brackets indicating separate copies 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 100 101 102 103 104 105 106 107 .

This AFD file is later activated with pattern for one more copy by another pattern license being added to the AFD file. This pattern license defines a PA range starting at PA 200 and spanning copy. The resulting content of main.pattern is shown in . Based on this content the resulting page mapping is 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 100 101 102 103 104 105 106 107 200 201 202 203 .

As shown in the page.areas file may contain definitions of any number of two dimensional active areas on a document page or instance. Each active area is identified by an areaID which is unique within the page instance but need not be unique within the document. Each areaID is associated with an indication of one of a plurality of available geometric shapes such as rectangle circle right angled triangle isosceles star ellipse etc . Each such shape is further defined by a set of x y coordinates. The x y coordinates may define the location size and optionally shape parameters of the respective shape on the page instance.

As shown in the page.gfx file may contain definitions of any number of graphical elements using a default setting on scale and color. Each graphical element may be identified by an elementID that is unique within the page instance but need not be unique within the document. Each elementID may be associated with an indication of one of a plurality of available graphics types. In the embodiment of these types include image text pattern area scale and color. Each such type is further defined by a set of graphics parameters. An image may be defined by a resource source path indicating an image definition file in the AFD file or elsewhere optionally supplemented by an indication of a specific page in the image file a location x y coordinates a width and a height. A text may be defined by text string a location x y coordinates a font an angle and a size. A pattern area may be defined by a location x y coordinates a width and a height. The scale parameter defines the measurement units in which a location is given e.g. in millimeters inches or a proprietary pattern unit default . In one embodiment one proprietary pattern unit Anoto Unit AU corresponds to 0.3 8 mm. A color may be defined by control values fractions for primary colors e.g. red r green g and blue b .

In one embodiment a pattern area may be imported from an external AFD file. Such a pattern area is defined in page.gfx by a source path indicating the external AFD file a copy a page an elementID and a location x y coordinates . Such a definition may cause a Paper Print Tool to open the external AFD file apply the page mapping logic to identify the pattern page associated with the relevant instance given by the copy and page in the external AFD file retrieve the definition location width height of the given elementID in the static graphics collection for the given page in the external AFD file generate the pattern area based on this definition using the layout mapping logic and place the pattern area at the given location.

In one embodiment a graphical element may be connected autolinked to an active area included in the same static or dynamic page specification. In one such implementation a graphical element image text and pattern area in has the option of being defined by an areaID. Thus by specifying an areaID as a graphics parameter for a graphical element the Document Module may automatically adjust the location width and height of the graphical element to the location width and height of the area given by the areaID. By utilizing this feature in a Paper Design Tool or Paper Activation Tool it is ensured that a graphical element follows an active area if it is resized or moved. Likewise if an areaID is found as a graphics parameter in a graphics collection the Paper Print Tool automatically loads the corresponding area collection and sets the location width and height of the graphical element to the location width and height of the bounding box around the relevant area.

In the following the use of the Document Module of will be further described in the context of the exemplifying system implementation of . Where appropriate specific reference will be given to parameters used in the AFD file format implementation of as well as to the exemplifying AFD file content illustrated in . The illustrated processes may be implemented by calling functions available through the Document API of the Document Module and possibly by functions available through the APIs of the License Module and Print Module as indicated below. It is to be understood that all processes are mere examples. Thus steps may be added removed or effected in different order.

The process of is equally applicable when an existing non activated AFD file is to be amended. If the existing AFD file is locked the process may either prevent amendments to the static page specifications require some kind of authorisation or at least issue a warning.

The process of may be applicable when an existing activated AFD file is to be further activated for a selected number of additional copies. Again the Document Module may be operated to calculate the required number of pattern pages and to add corresponding pattern license s to the AFD file. Dynamic page specifications may also be created and added for newly activated instances given by copy page .

The process then identifies a starting point for the page mapping in PA space based on the ordered list of the PA ranges in main.pattern and the number of previously printed copies given by current copy in main.info step . The starting point will indicate the first available page address in a specific PA range. Then in step the process maps page addresses to document pages by dead reckoning from the starting point in PA space. If the number of copies in the PA range is insufficient the process will continue mapping pattern pages from the next PA range listed in main.pattern. The page mapping thus results in one page address being allocated to each document page. After the page mapping the process retrieves code symbol graphics for each pattern page step for example by querying a pattern generation function PGM in based on page address. The process also retrieves the static and dynamic graphics collections as well as any resources referenced therein from the AFD file step . The process then generates the pattern areas for each instance using the above described layout mapping and creates a printable representation of the generated pattern areas using the Print Module step . Similarly the process creates a printable representation of human understandable graphics for each instance using the Print Module step . These representations may then be combined in a print file using the Print Module step . Before saving the AFD file step the process updates current copyto specify the copy of the next copy to be printed step . Step may be automatically carried out by the Document Module any time after receiving the request for a number of copies provided that steps and succeed.

Finally the AFD file is saved step and the pen data file is closed step . If dynamic page specifications have been added to the AFD file by the Paper Print Tool the forms processing application may need to access the thus updated AFD file in order to be able to process the pen data file. In such a scenario the Paper Print Tool may store activated AFD files in a repository which is available to the forms processing application.

The following description will focus on differences over the system in . The PoD system of may similarly include a Paper Design Tool that is used for creating non activated AFD files .aft files and storing them in an AFD repository . A PoD Tool is provided to embody the functionalities of the Paper Activation Tool and the Paper Print Tool of . Thus the PoD Tool allows a user to select an AFD file in the AFD repository for printing in a selected number of copies whereupon the PoD Tool automatically activates the selected AFD file with pattern license s derived from a License Database and generates instructions for printing. The activated AFD file is then returned to the AFD repository for storage. Suitably the AFD file may only be activated with the exact number of pattern pages required in the printing operation so that all pattern license s in the AFD file are consumed when the AFD file is returned to the repository . The PoD Tool may also allow the user to add instance specific data graphics areas properties etc to each printed page. Corresponding dynamic page specifications will be added to the AFD file. Upon receipt of position data from a digital pen a PoD application on the computer server can retrieve the appropriate AFD file from the repository for use in processing the position data. As indicated in the dynamic page specifications in the AFD file may include a reference to a database . For example each printed copy may be associated with an individual and particulars of this individual may be stored in the database . Thus the AFD file may include a unique database index for each printed copy so that the receiving computer server can extract and use relevant particulars from the database in its processing of position data recorded by the digital pen on the printed copy .

The PoD system may be configured to allow any electronic document in any document repository to be printed with coding pattern over its entire surface. This may be accomplished by configuring the Print Design Tool to automatically convert the electronic document to a non activated AFD file by adding static page specifications that define page wide pattern areas so that each page instance is associated with a pattern area that spans the entire page. The original electronic document may be embedded in the AFD file and or a layout image for each document page may be added to the resources folder and referenced by the static page specification. The PoD Tool may then activate and print the AFD file resulting in the original electronic document being printed with unique pattern on each page. Pen strokes recorded with a digital pen on the printed document are conveyed to the computer server which may or may not be the same physical device that hosts the PoD Tool which retrieves the proper AFD file from the repository and maps the pen strokes to the electronic document. The pen strokes may e.g. be displayed against the layout image s and or be stored as generated data in the AFD file.

This procedure may be completely hidden to the user who merely selects a document for position coded printing from a document repository thereby bringing the Paper Design Tool and the PoD Tool to perform the above described actions causing a printer to print a required number of copies of the document all with unique pattern pages.

The AFD files may be transferred to the digital pen in any conceivable way including electronic downloading or uploading via a communications interface of the pen. In a variant the AFD files are imported by scanning a product surface with the pen. For example an AFD file may be embedded in a machine readable code on the position coded printout or on a separate product surface. Other alternatives regarding transfer of files to digital pens are also possible. Further details and alternatives regarding transfer of files to digital pens are disclosed in Assignee s PCT publication WO2006 004506 which is incorporated herein by reference.

The AFD files may be used by the pen control system in different levels of refinement. In one embodiment before outputting position data in a pen data file .afs the pen control system may locate the corresponding AFD file in pen memory and add data from this AFD file to the pen data file. For example the pen may add aforesaid GUID to the pen data file. As mentioned above this allows for simplified processing at the receiving computer server which can identify the proper processing application AFD file by mapping GUIDs instead of mapping page addresses thereby possibly improving processing speed. In another example routing information target uri from the AFD file is added to the pen data file allowing the pen data file to be routed to the correct computer server for processing.

Furthermore the entire content of the corresponding AFD file may be copied to the pen data file. In the scenario of this means that all AFD file content is truly migrated throughout the DP P system and there is little or no need to store activated AFD files in a repository which is accessible to the receiving computer server .

In another embodiment the pen control system may operate based on the content of the AFD file. Specifically the pen control system may be configured to map recorded position data against the area collections and any associated property collections and use any referenced resources such as audio files images executable code etc.

In one example the pen feedback may be controlled by the content of the AFD file e.g. by the pen control system selectively activating an integrated vibrator speaker indicator LED display etc based on recorded position data in relation to active areas.

In another example based on the functionality described in Assignee s PCT publication WO2006 041387 which is incorporated herein by reference the AFD file may contain one or more encryption keys to be used by the pen control system in encrypting the corresponding pen data file or part thereof.

In yet an example the AFD file may associate active areas with calls to functions implemented by the pen control system.

In still another example the pen control system may limit its functionality based on the permissions parameter of the pattern licenses included in the AFD file. Such permissions may control the pen control system s ability to store position data to output position data to read and process barcodes to encrypt output data to carry out handwriting recognition HWR processing on recorded position data etc. Furthermore the pen control system may be configured to limit its use of the AFD file to the expiry date specified in the pattern license s of the AFD file see . Further details and alternatives are given in aforesaid WO 2006 004506 as well as in Assignee s PCT publication WO 2007 117201 and PCT Application No. PCT SE2008 050314 all of which are incorporated herein by reference.

In another example the AFD file may include software code which is to be interpreted compiled or directly executed by the pen control system. The code can be written in any suitable programming language. The code and thus the AFD file may implement an application to be run by the pen. Thus such an application code may be written to access and process the position data detected by the pen in real time and optionally to access hardware and or software components in the pen such as internal memory communications interface and associated software audio driver speaker display driver display vibrator text to speech TTS conversion software handwriting recognition HWR software microphone barcode reading software hardware data encryption software hardware etc. In one specific implementation illustrated in the pen control system includes a Java Virtual Machine core classes and supporting Java libraries as well as a custom Java API on top of its operating system. The pen control system is thus formed as a Java based runtime system. The application code which is distributed to the pen in the AFD file is written in Java language to be run in real time by the pen control system. The application code may be associated with one or more page addresses so that the pen control system is caused to launch instantiate the Java application whenever the pen detects position data from such page address es . Depending on implementation the position data may emanate directly from a decoding system in the pen or be provided as events from an Interaction Module in the pen. The Java application may be configured to use the area collections property collections and resources that are available in the AFD file. If the AFD file is implemented as a ZIP file it may include Java specific metadata e.g. a manifest file in the AFD file thereby identifying the AFD file to the Java based runtime system as a so called JAR Java Archive file. A JAR file is a customary container for distributing Java application code class files . Thus the Java based runtime system is able to access the AFD file as a JAR file and extract relevant content for launching the Java application. The use functionality and structure of such application code and pen control systems for digital pens are further disclosed in Assignee s PCT publications WO 2007 097693 and WO 2007 117201 which are incorporated herein by reference.

As is readily appreciated by a person skilled in the art other embodiments than the ones disclosed above are equally possible within the scope and spirit of the invention which is defined and limited only by the appended claims.

For example it is to be understood that the Interaction Module is provided to potentially facilitate the development of controlling software for digital pens. Thus the Interaction Module is not needed if the pen control system is designed to operate directly on the position data detected by the pen s decoding system. Furthermore the Document Module is not needed if the digital pen does not handle AFD files internally e.g. if pen data is output in non AFD format.

It is also possible that the digital pen is configured to convey position data events to a nearby supporting device e.g. a PC PDA or mobile phone which includes a Document Module that allows the supporting device to handle AFD files and possibly an Interaction Module to facilitate interaction with the real time data from the pen. The supporting device may be configured to implement any pen functionality discussed above with respect to . For example the supporting device may create pen data files in AFD format and convey these files to the back end system and or it may import activated AFD files and access their content for processing the position data events received from the digital pen.

It is also to be noted that the pen data need not be conveyed to a back end system for processing. Instead the pen data processing may be completed at the front end i.e. at the location of the digital pen user. Such a front end processing system may be located in the digital pen itself or in the supporting device.

Furthermore the skilled person will realize that the foregoing embodiments examples and implementations can be combined in a number of different ways. For example pens capable of importing AFD file content may be used in a PoD system .

The foregoing description has been presented for purposes of illustration. It is not exhaustive and does not limit the invention to the precise forms or embodiments disclosed. Modifications and adaptations of the invention will be apparent to those skilled in the art from consideration of the specification and practice of the disclosed embodiments of the invention. For example the described implementations include software but systems and methods consistent with the present invention may be implemented as a combination of hardware and software or in hardware alone. Examples of hardware include computing or processing systems including personal computers servers laptops mainframes micro processors and the like. Additionally although aspects of the invention are described for being stored in memory one skilled in the art will appreciate that these aspects can also be stored on other types of computer readable media such as secondary storage devices for example hard disks floppy disks or CD ROM or other forms of RAM or ROM.

Computer programs based on the written description and methods of this invention are within the skill of an experienced developer. The various programs or program modules can be created using any of the techniques known to one skilled in the art or can be designed in connection with existing software. For example program sections or program modules can be designed in or by means of Java C HTML XML or HTML with included Java applets. One or more of such software sections or modules can be integrated into a computer system or existing e mail or browser software.

Moreover while illustrative embodiments of the invention have been described herein the scope of the invention includes any and all embodiments having equivalent elements modifications omissions combinations e.g. of aspects across various embodiments adaptations and or alterations as would be appreciated by those in the art based on the present disclosure. The limitations in the claims are to be interpreted broadly based on the language employed in the claims and not limited to examples described in the present specification or during the prosecution of the application which examples are to be construed as non exclusive. Further the steps of the disclosed methods may be modified in any manner including by reordering steps and or inserting or deleting steps without departing from the principles of the invention. It is intended therefore that the specification and examples be considered as exemplary only with a true scope and spirit of the invention being indicated by the following claims and their full scope of equivalents.

