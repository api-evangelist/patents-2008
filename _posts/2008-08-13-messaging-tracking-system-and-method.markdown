---

title: Messaging tracking system and method
abstract: One embodiment of the invention includes a message tracking system. The system comprises a message agent programmed to detect messages transmitted from one application to at least one other application. The system also comprises a detector programmed to determine a protocol that is associated with a given message of the messages detected by the message agent. The system further comprises a tracking manager programmed to generate tracking information for the given message based on the protocol determined by the detector and to store the tracking information in memory.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08549090&OS=08549090&RS=08549090
owner: HBC Solutions, Inc.
number: 08549090
owner_city: Englewood
owner_country: US
publication_date: 20080813
---
The present invention relates generally to communications and more specifically to a message tracking system and related method.

In an integrated network environment software and hardware components can be configured to communicate information with each other. Such information can be sent in an asynchronous or synchronous manner generally depending on the nature of the information. For instance in the broadcast media as well as other industries there tend to be many proprietary and custom interfaces in use to achieve interoperability between various business processes and operational systems that utilize different protocols in a given network environment. Each of the applications in an enterprise can employ a respective protocol for sending messages to one or more recipients. Thus as existing standards evolve and as new standards emerge the communication of messages between an increasing number of applications becomes more complex.

One embodiment of the invention includes a message tracking system. The system comprises a message agent programmed to detect messages transmitted from one application to at least one other application. The system also comprises a detector programmed to determine a protocol that is associated with a given message of the messages detected by the message agent. A tracking manager is programmed to generate tracking information for the given message based on the protocol determined by the detector and to store the tracking information in memory.

Another embodiment of the invention includes a method for tracking messages. The method includes receiving a first message that has been published by a first application at a message tracking system. A protocol is determined according to which the first message is configured. Tracking information associated with the first message is generated based on the determined protocol and the tracking information is stored onto a computer readable medium. At least one related message is received at the message tracking system which message is responsive to the first message. The tracking information is updated based on the at least one related message.

Another embodiment of the invention relates to a system that includes a publishing application programmed to publish messages within a network. At least one subscribing application is configured to subscribe to the messages from the network. A detector is programmed to determine a protocol associated with a given one of the messages. A tracking manager is programmed to generate tracking information for the given one of the messages based on the determined protocol. A graphical user interface GUI provides user access to the tracking information.

The present invention relates generally to communications and more specifically to a message tracking system and a related method. In a network e.g. an enterprise network software applications publish messages onto the network such as in an asynchronous manner. Additional software applications can subscribe to and receive certain of the messages via the network. The particular types of messages and content of such messages will depend on the particular application sending the messages and the protocol according to which the message is provided. The subscribing applications can also send responses e.g. replies or acknowledgements to messages that they receive. The messages can be provided to any of a plurality of protocols which protocols can include any proprietary or publicly available standards. As new systems and applications are developed the protocols utilized also tend to evolve and new protocols are developed. This is true with the media broadcast industry as well as with other industries.

According to an aspect of the invention a message tracking system can be programmed to receive messages that are published on the network by any number of one or more applications. The message tracking system can be programmed to generate tracking information associated with the published messages which tracking information can be accessible by a user such as for planning workflow updates and or troubleshooting purposes. The tracking information for each of the messages can be provided as a flight plan that includes elements that represent a complete message lifecycle or message transaction between two or more of the plurality of software applications. The message tracking system can be configured to generate such tracking information for each of the messages regardless of the protocol in which each of the messages are configured. For instance the message tracking system can include a registrar that stores one or more configuration files that include query statements for processing messages provided according to each of any number of one or more protocols. The configuration file s enable the tracking system to gather information that is used to generate and update the tracking information for a respective flight plan. The configuration file s is expandable such that it will be appreciated that no custom and or protocol specific tracking software is required and no modifications to the core tracking system are required to accommodate each of the protocols that might be utilized. The message tracking system thus can be considered to operate in a protocol agnostic manner.

As will be appreciated by those skilled in the art portions of the invention may be embodied as a method data processing system or computer program product. Accordingly these portions of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment combining software and hardware. Furthermore portions of the invention may be a computer program product on a computer usable storage medium having computer readable program code on the medium. Any suitable computer readable medium may be utilized including but not limited to static and dynamic storage devices hard disks optical storage devices and magnetic storage devices.

Certain embodiments of the invention are described herein with reference to flowchart illustrations of methods systems and computer program products. It will be understood that blocks of the illustrations and combinations of blocks in the illustrations can be implemented by computer executable instructions. These computer executable instructions may be provided to one or more processor of a general purpose computer special purpose computer or other programmable data processing apparatus or a combination of devices and circuits to produce a machine such that the instructions which execute via the processor implement the functions specified in the block or blocks.

These computer executable instructions may also be stored in computer readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable memory result in an article of manufacture including instructions which implement the function specified in the flowchart block or blocks. The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the functions specified in the flowchart block or blocks.

Each of the computers can be configured to execute one or more software applications that can publish messages to one or more subscriber applications . The applications can publish the messages and responses using an asynchronous message protocol. The messages can be subscribed to by one or more other software applications in the network . In such a publish subscribe e.g. pub sub architecture a given software application may publish a message for one or more subscriber applications the identity of which may or may not be known to the publishing application. Each of the subscribing applications can receive the published messages that are pertinent to it such as based on message metadata. Additionally or alternatively a service can be utilized for publishing messages and sending the message to an appropriate set of one or more subscribers as is known in the art. Accordingly messages can be transmitted between two or more software applications in the network based on publication of and subscription to the messages.

The network system also includes a computer that includes a message tracking system . The computer can be configured as a PC workstation special purpose processing device an enterprise class server or any other device that can be programmed accordingly. The message tracking system is programmed to track messages that are sent within the network . For example the message tracking system can receive messages that are published to the network which can include all messages or a selected subset of messages that are published. As one example an application can publish a message such as by providing the message to an appropriate service e.g. a post office service programmed for publishing messages. Alternatively the application itself can publish the message. In either case such published message is received by the message tracking system such as via an associated application programming interface API that specifies requisite information to the message tracking system. The message tracking system thus receives the message via the API based on which the message tracking system can generate tracking information associated with each published message. The resulting tracking information can be made accessible for use by another application or by a user such as via a computer or associated workstation at one or more of the computers and . For instance the user of respective one of the computers and can utilize the tracking information of the respective messages for planning workflow updates and or troubleshooting purposes.

It will be understood that the messages can be published according to a plurality of different message protocols. As used herein the term protocol is intended to encompass any convention or standard that to enable transfer or exchange of data or information between two or more computing endpoints which endpoints may include software applications hardware or a combination of hardware and software. For example each of the software applications can publish messages according to a specific and distinct protocol. The protocols that are supported by the network system can be any of a variety of types and further can vary according to industry standards.

In the broadcast media industry some examples of message protocols that can be utilized in the system in include the Broadcast eXchange Format BXF Programming Metadata Communications Protocol PMCP the Advanced Television Systems Committee ATSC Standard A 65C Abstract Device Interface ADI and Video On Demand VOD including version 1.1 though version 2.0 of the VOD standard which is specified by Cable Television Laboratories Inc. . As a more specific example the Society of Motion Picture and Television Engineers SMPTE according to the work of the S22 10 Committee continues ongoing efforts to develop BXF which is a protocol to provide for exchange of data among broadcast systems. The standards that have been developed by and are currently being developed by the S22 10 Committee of the SMPTE under document number SMPTE 2021 are incorporated herein by reference.

Various industries have developed standard protocols for a variety of purposes which can also be utilized by a tracking system implemented according to an aspect of the invention. For example in the automotive industry the Automotive Aftermarket Industry Association AAIA has developed the Product Information Exchange Standard PIES which can be used for the management and exchange of a variety of product attribute information in the vehicle aftermarket industry see e.g. http www.aftermarket.org eCommerce Pies Pies.asp . In the news industry the International Press Telecommunications Council IPTC has developed the NITF News Industry Text Format which utilizes XML to define the content and structure of news articles see e.g. http www.nitf.org . As a further example the IPTC has developed the G2 family of news exchanged standards including NewsML G2 2.0 which is a media type agnostic news exchange format for general news see e.g. http www.iptc.org G2 Standards newsml g2.php . Similarly in the publishing and news industry the International Digital Enterprise Alliance IDEAlliance has also developed and continues to develop various standards protocols including the PROSE XML specification see e.g. http www.idealliance.org prosexml the PRISM 2.0 standard see e.g. http www.prismstandard.org and XMP Open see e.g. http www.xmp open.org to name a few standards made available from IDEAlliance. Those skilled in the art will understand and appreciate various other types of protocols and standards that can be utilized for tracking messages according to an aspect of the invention including existing and yet to be developed protocols known and proprietary .

It will be understood that the message tracking system can be programmed to track the messages in a protocol agnostic manner regardless of the protocol in which each of the messages are published. This can be accomplished by an extensible e.g. expandable configuration file or files that can store configuration information for each protocol to facilitate extraction of selected types of information for each such protocol. The configuration file s can be stored as an XML document for example although other languages and formats can be utilized for storing the configuration file for the set of registered protocols.

By way of further example the message tracking system includes a detector that is programmed to extract metadata from the published messages. The metadata can include data that identifies the protocol for the message and routing information associated with the message. For instance the API can pass the protocol as a protocol identifier outside of the message content that is also passed to the tracking system. Alternatively or additionally the protocol identifier can be provided by the API as part of the message content that is passed to the tracking system . The routing information for example can include direction data and message category data or the routing information can be utilized to ascertain a direction data and a category data of the message.

The detector can employ the protocol to obtain a set of one or more query statements that are utilized to extract the routing information. A tracking manager can assemble a flight plan that includes a sequence of sub transactions based on the protocol and at least a portion of the routing information. The status of the sequence for the flight plan can be updated by the tracking manager based on messages sent in response to the originating published message. The response messages can include replies and or acknowledgements that refer back to or otherwise relate directly the original message associated with the flight plan. As an example touch points in the network system can detect responses sent by respective software applications e.g. acknowledgements replies or otherwise forward messages associated with the published message being tracked. The touch points can be implemented as processes or hardware programmed to detect response messages and to inform the tracking system accordingly. A flight plan thus represents the tracking information of a given message from beginning to end of the message lifecycle such that it defines a complete message transaction between two or more software applications . The flight plan can be accessed e.g. via a graphical or text based user interface by an authorized user via one or more of the computers or to track the status of the corresponding message.

It is to be understood that the network system is not intended to be limited to the example of . For example the network system is not limited to providing asynchronous messaging between the software applications . For example the software applications can be configured to route each of the messages for which tracking is desired to the message tracking system such that the messages can be re routed to their intended destinations by the message tracking system or by other associated processes. As another example the software applications can include hardware firmware applications that can publish transmit messages onto the network . While the example of depicts software application in a plurality of computers it is to be understood that any of the software applications can be implemented in a common computer which may also include the message tracking system . Thus it will be understood that a publishing application and one or more subscribing application can be implemented as separate processes or methods implemented in a single computer. Accordingly the network system can be configured in any of a variety of ways.

The message tracking system is programmed to receive a message via a message interface . The message interface thus provides a mechanism through which the messages can be provided to the message tracking system such as may be published from one or more of the applications or systems. As an example the application that publishes a given message or a service that publishes messages in response to requests from the application provides the message to the tracking system via an API that specifies the message interface . The message interface thus can be considered a passive listening component that monitors the network or otherwise receives messages that are published by one or more other applications.

The message tracking system includes a detector . The detector is programmed to extract message characteristic metadata from the message from the message interface . As an example the detector can be programmed to extract protocol information from the message provided by the message interface which protocol information describes or otherwise identifies the protocol according to which the message has been provided. Alternatively as described herein the detector can ascertain the protocol from information that is passed external to the message body such as specified by an API that provides the message to the tracking system .

The message includes a plurality of message characteristics or metadata. For example the message includes a message identifier ID a protocol ID behavior data source or origin data destinations data an origin ID and a content data . The message ID can uniquely identify the message . The protocol ID can identify which of the plurality of protocols in which the message has been generated and or published onto the network . The particular data requirements utilized to represent the message characteristics or metadata can vary according to the protocol with the message is provided. Some or all of the message ID protocol ID behavior data source data destination s data and origin ID can define the routing information that is extracted from the message e.g. by the detector of .

The behavior data can indicate the type of the message or characteristics associated with the type of message such as can describe the intent of the message that is published or based on which the intent or category of message can be ascertained. As an example the message can be a query message a request message an informational message an acknowledgement message a reply message a content message a scheduling message a permissions message a proposal message billing messages or any of a variety of other message types that is published for a known intended purpose for subscribers of the message. As with other message characteristics the behavior data can be specific to the communications protocol with which the message was published. The source data can indicate an originating software application or system that published the message . The destination s data can indicate one or more subscribing software application or system for which the message is intended. The origin ID can indicate an original message to which the message pertains. For example if the message is an acknowledgement or a reply message the origin ID can indicate the original message to which the message is acknowledging or replying. The content data can include the content of the message that one or more of the subscribing software applications are to receive and process. The extent and information that provides the content data will vary according to the behavior or type of message. For example the content can include instructions a request for information provide a playlist for a given channel or channels as well as identify include or identify program content. It is to be understood that the message could include other types of characteristics or metadata as well which can vary according to the protocol and type for the message.

Referring between the detector can be programmed to employ the message query component for extracting the message ID the protocol ID the behavior data the source and destination s data and and the origin ID if applicable . For example the detector can first extract the protocol ID associated with the message such as can be passed with the message to the message interface from an application or system via an appropriate API. Alternatively or additionally the message query component can extract the protocol information from the message . As an example the message query component can be programmed to activate XPath statements to extract the message characteristic metadata from an XML document corresponding to the message.

The detector can then employ the determined message protocol to query the message for extracting other message characteristics or metadata. The detector can thus be programmed to provide extracted message data for a given message which as described herein can be used to generate tracking information for such message. Additionally when a message is determined to be a response to a published given message the routing information can be extracted by the detector for updating existing tracking information for the given message. For instance the extracted message data can indicate that a respective message is a response that refers back to an original published message e.g. a reply or acknowledgement message .

The detector is programmed to access a protocol registrar in response to determining the protocol of the message. As an example the protocol registrar can be stored in memory along with the executable components of the message tracking system or can be configured in an external memory structure. The protocol registrar includes one or more configuration files for a plurality of X protocols where X is a positive integer denoting the number of registered protocols. As an example the protocols can be configured as one or more Extensible Markup Language XML document specific to a given one of the plurality of protocols that are supported by the tracking system . The protocol registrar is itself extensible such that it can be expanded or appended to accommodate new or different protocols without requiring any further programming of the tracking system .

Each of the registered protocols in the protocol registrar includes a set of one or more message query statements . As mentioned herein the set of message query statements can be provided in a single XML document that provides the registrar or separate documents can be provided for the various registered protocols to provide the register . Each of the message query statement sets can correspond to message query statements that are specific to the respective one of the protocols . For the example messages provided as XML documents the message query statement sets can include a specific set of XPath statements that can be implemented to query the message to ascertain the routing information and other message characteristics or metadata for the respective message protocol.

The protocol ID or other protocol information determined by the detector can be provided to the protocol register to determine if the protocol for a given message has been registered such that set of message query statements exists. If the protocol is registered the appropriate message query statement set is returned to the message query component for extracting the routing information and other message characteristics or metadata from the message. If the detector determines that the protocol of the given message is not registered the message can be ignored. Alternatively or additionally the message tracking system can send an alert message e.g. to an administrator or application with sufficient information to inform a user a person or an application of the unregistered protocol such that the protocol can be added to the register if desired.

In the example of the protocol registrar demonstrates one such protocol designated at as version 1 of BXF BXF v1 . Structured beneath the protocol element are sub elements and attributes indicated at which describe details regarding the protocol. In this example the sub elements and attribute include namespace for defining the vocabulary for the XML document schema path prefix and errorXpath property used to return error information for invalid nodes . Also provided in the protocol registrar is a message query statement set .

By way of further example the message query statement set includes a set of XPath statements that can be employed to query a BXF v1 message that is received at the detector for a predetermined set of information. The message query statement set includes RootError such as can be implemented to query a message to determine a routing error or failed delivery of an original message. The query statement set also includes a MessagelD such as can be implemented to query a message for the unique identifier of the message and a ReferredMessageID such as can be implemented to query a message for the original or source message to which the current message is responsive. The message query statement set can also includes Origin and Destination such as can be implemented to determine the publisher of the message and subscribers for which applications the message is intended. The query statement set can also be employed to extract a CreateTime property such as can be implemented to ascertain the date and time stamp of the message. Accordingly the message query statement set can be accessed by the detector and employed by the message query component to interrogate a received message upon determining that the message has a version 1 BXF protocol. Those skilled in the art will understand and appreciate that the protocol registrar can and will typically include similar protocol XML documents for each of the other protocols that are supported. The set of protocols that are included by the protocol registrar define the set of registered protocols for the message tracking system .

Referring back to as described above the message query component can employ the determined protocol for a given message to select a message query statement set to extract message metadata such as including the routing information and behavior information for a given message. As an example the behavior information can include a message category element associated with the given message. As another example the behavior information can include information that describes the intent of the given message. As such the detector may be programmed to derive the message category of the given message based on the behavior information.

By way of further example the detector can be programmed to access a message category registrar . The message category registrar includes a plurality Y of registered message categories that each correspond to a standardized category into which the message can be classified where Y is a positive integer denoting the number of different standard message categories utilized in the tracking system . As an example the message categories can each be configured as .XML files or the message category registrar can be a single .XML file that describes each of the message categories . As an example the detector may be programmed to determine an appropriate message category from information in the message category registrar . For instance the detector may be programmed to ascertain and access an appropriate one of the message categories to which the message belongs based on the extracted message metadata. The extracted message metadata can include the routing information e.g. the behavior information and like that is extracted from the message by the message query component employing a protocol dependent query statement set . Additionally or alternatively a message category registrar may be omitted and the detector can be programmed to infer the category for the given message based on the extracted message metadata. The message registrar provides a list of categories that can be expanded or reduced as may be needed to accommodate a changing enterprise system.

By way of further example the message category registrar includes a plurality of different types of messages each of which message types includes a plurality of message attributes that collectively describe a respective one of the message types. One particular attribute of each message type is a category attributes that identifies a respective one of a plurality of different predefined general message usage categories. Also provided in each of the message types is a direction attribute that is programmed to describe the direction for each of the message types.

In the example of the message category registrar includes the following types of messages a Ping Acknowledgement message type a Playlist Query message type a Media Query message type a Program Schedule message type and a Content message type . It is to be understood that the message category registrar can include more or fewer or different messages types form the message types demonstrated in the example of . Structured beneath each of the demonstrated message categories are attributes that describe predefined information regarding the message types. Examples of attributes that can be provided for each message type include Name Description Category Direction Group Role and Active. The attributes associated with each of the different message types and can be utilized to assemble the tracking information for a given type of message or to update tracking information for an original message.

Referring back to the example of the extracted metadata and associated information regarding the protocol message category and other pertinent metadata for a given message are collectively represented as extracted message data . The message data can be provided by the detector or otherwise made accessible to a tracking manager . The tracking manager is programmed to generate the tracking information for a given original message. The tracking manager is configured to generate the tracking information as a flight plan instance for the original message and to update the flight plan instance in response to additional messages sent in response to the original message.

The tracking manager includes a flight plan generator that is programmed to assemble the flight plan for the original message. To assemble the flight plan the flight plan generator accesses a flight plan template registrar . The flight plan template registrar includes a plurality of Z flight plan templates where Z is a positive integer denoting the number of preprogrammed templates. For example a template can be created for each type of protocol e.g. Z X . Alternatively different templates can be provided for each message category e.g. Z Y . Still another alternative is to provide a unique template for each category of message for each protocol e.g. Z X Y . Yet another alternative is to provide a common set of templates that can be used for some of the categories and protocols such that the number of templates is independent of the number of protocols and the message categories.

As an example the flight plan templates can be configured as .XML files that are each specific to a given combination of protocol message category and direction of the message. The flight plan template registrar can be included in memory along with the executable components of the message tracking system or alternatively the flight plan template registrar can be stored in an external memory structure.

As a further example the flight plan generator can include a direction component that is programmed to ascertain a direction of the message based on the routing information that is included in the message data . The direction of the message can correspond to the handling of the message with respect to the manner in which the message is routed. As an example the direction component can determine a direction of the message such as can be selected from a set of predefined directions. The particular nomenclature for such directions can be defined according to the type of infrastructure in which the tracking system is utilized. For the example where the tracking system resides within or is implemented as part of an enterprise platform e.g. an automated business process the following set of directions may be utilized application to application platform to application and application to platform. As described herein the direction can be provided as part of the message category and thus may be provided by the detector as part of the message data . For example the direction component can extract the direction of the message from the message category selected for a given message. Alternatively the direction component can determine a direction of the message based on the extracted message metadata such as including the message behavior and destination s data e.g. attributes and of the message .

The flight plan generator can query the flight plan template registrar for a flight plan template that is appropriate for a given originating message. For example the flight plan generator includes a matching component that is configured to query the flight plan template registrar to determine if a flight plan template exists for the specific combination message attributes and properties for a given original message. The matching component can employ the protocol direction and message category for the given message to select a corresponding one of the flight plan templates . Thus upon registering a match the matching component returns the corresponding flight plan template to the flight plan generator .

As an example illustrates an example of a flight plan template that can be utilized to generate flight plan instances in accordance with an aspect of the invention. The flight plan template can be implemented as a schema definition programmed for constructing a valid flight plan instance. For example the flight plan template can be implemented as an XML schema operating as a class that specifies contents of each element structure of instance documents and data type of each element and restrictions on content for each data element that can be part of a corresponding flight plan. The flight plan generator can employ a template processor to construct a well formed flight plan instance for a given message based on the selected template and the message data from the detector e.g. the message data as well as other relevant information derived from the message data .

By way of example the flight plan template can define a plurality of elements that can be associated with a message and the sequential steps that can correspond to a completed message transaction of the message between two or more software applications. The flight plan template can define a flight plan ID element such as to describe a unique identifier for the resulting instantiated flight plan. The flight plan template also includes a protocol element a message category element and a direction element that can be instantiated to describe the protocol message usage category and direction of the message according to the source data. The flight plan template can also include a sub transaction element . The sub transaction element can be employed to structure each a sequential step that is to be completed in a message transaction between two or more of the software applications . It will be appreciated that the flight plan template can include additional elements and attributes such as may be useful for describing various properties of a complete message transaction.

Referring back to the example of the flight plan generator can dynamically determine the number and type of sub transactions based on the number of subscribers and connected applications such as can be stored in a subscriber application registrar . One or more instances of the sub transaction element can be provided to describe each response e.g. acknowledgement and or reply messages that is subsequently provided from subscriber applications responsive to the original published message for which the flight plan is generated. Therefore the sub transaction element can be instantiated to represent each of the sequential steps necessary for completing message transaction between the publishing application and the one or more subscriber applications.

As a further example the flight plan generator can access a subscriber application registrar to obtain information regarding each of the software applications that subscribes to each of the messages that are published to the network . Therefore the flight plan generator can instantiate a sub transaction element for each of the software applications or systems that are determined to be subscribers for a given message. Accordingly the flight plan generator is programmed to instantiate a flight plan template to provide a flight plan instance according to the message data and subscribers for each original message. The flight plan instance can be provided as an XML document that can be accessible to a user. For example a flight plan instance implemented as an XML document can be transformed e.g. by an Extensible Stylesheet Language Transformation XSLT to provide a graphical and or text based user interface corresponding to the flight plan instance .

The preceding description is an example of the instantiation of a new flight plan based on the message being a new message that is published for one or more subscribing applications or systems. However it is to be understood that the message tracking system also detects one or more subsequent message that are responsive directly to a message for which a given flight plan was already instantiated. Therefore upon the detector determining that the message refers back to a previous message such as based on the origin ID characteristic the tracking manager can update one or more attributes of a respective flight plan instance .

The tracking manager includes a flight plan update component . The flight plan update component is programmed to update the appropriate one or more attributes of sub transaction elements for a respective flight plan instance based on responses that are sent as part of a message transaction responsive to the original message. For instance the update component can set an attribute of the flight plan to indicate whether the corresponding sequential step of the flight plan was successfully completed or not. Specifically the flight plan update component can apply information that is extracted by the detector from the subsequent responsive messages e.g. provided as the message data to update the status of sub transaction elements of the flight plan instance .

After updating a last of the sub transaction elements of the flight plan instance or upon a failure of the active flight plan the flight plan can be considered complete. Thus tracking system can store completed flight plan instance s which can include successfully completed flight plans or failed flight plans to represent the tracking information for the respective messages. This flight plan information can be accessed by a user or a corresponding application such as for planning workflow updates and or troubleshooting purposes. For example the user could view the flight plans from a graphical user interface GUI which can correspond to an XML document of one or more flight plan instance or to a transformation of the XML instance to different human readable form e.g. another XML document HTML document text or the like .

By way of example to generate the flight plan instance the detector first determines the protocol of the message and accesses the protocol and the message query statement set corresponding to the determined type of protocol e.g. BXF v1 protocol . The message query component interrogates the published message to determine the behavior and the routing information of the message . Based on the protocol the behavior and routing information the detector determines a corresponding message category such as provided in the message category registrar . The flight plan generator employs the resulting set of message data to determine the direction of the message e.g. as described in the matching message category or as determined based on the routing information . The flight plan generator queries the flight plan template registrar to determine if a flight plan template matches the message characteristics such as including the protocol e.g. BXF v1 message usage category e.g. request and direction e.g. platform to application for the given message. In the message usage category for the flight plan instance is a request. 

The flight plan instance of includes five sub transactions . Each of the sub transactions includes a common set of elements or attributes namely SUB TRANSACTION ID SUB TRANSACTION DESCRIPTION PREVIOUS SUB TRANSACTION ID MESSAGE STATE and PROCESSING ENTITY. It will be appreciated that each of the sub transaction elements need not be the same for every flight plan instance. The SUB TRANSACTION ID element describes the sequence of the sub transactions which can be associated with the MESSAGE IDs of the message for which the flight plan instance was generated and subsequent messages e.g. from subscribers that are associated with the complete message transaction between the originating application and one or more subscribing applications. It will be understood that the particular set of sub transactions for a flight plan instance can vary depending on the protocol of the originating message as well as the message usage category and the direction.

The SUB TRANSACTION DESCRIPTION element can represent a message behavior of the message that is associated with the respective sub transaction . For example the SUB TRANSACTION DESCRIPTION of SUB TRANSACTION ID is the same as the behavior of the flight plan based on the SUB TRANSACTION ID being associated with the message that initiated the flight plan . The PREVIOUS SUB TRANSACTION ID element corresponds to a reference to the prior sub transaction in the sequence. The MESSAGE STATE element corresponds to a status of the respective sub transaction which is be updated by the flight plan update component in response to the message tracking system determining a change in status for the corresponding sub transaction such as by subscribing to the respective messages having the SUB TRANSACTION ID. The PROCESSING ENTITY element can identify the computer or or other associated network node which corresponds to the source i.e. publisher of the respective message of the SUB TRANSACTION ID in the message transaction such that the processing entity operates as a touch point for the message transaction represented by the flight plan . Any process or application through which messages can pass can operate as touch points that are programmed to inform the message tracking system of the status of a respective message sub transaction.

The flight plan instance thus can be accessed and viewed by a user or implemented by one or more of the computer devices such as for planning workflow updates workflow initiation and or troubleshooting purposes. It is to be understood that the flight plan instance is but one example of a flight plan such as can be generated for business process associated with the broadcast media industry and that any of a variety of flight plan instances can be generated for the broadcast media industry as well as for other industries according to an aspect of the invention. For example a given flight plan instance could include additional elements associated with the originating message such as can vary depending on different protocols and or behaviors and could include a greater or fewer number of sub transactions than demonstrated in . The particular message categories and protocols and other attributes of a flight plan instance can vary according to the industry or application requirements and the related behavior of the messages. Furthermore the flight plan instance can be presented in a variety of different ways such as in a XML HTML or text document which representation can also vary according to application requirements.

Referring back to the example of the set of protocols can be extensible e.g. expandable . As a result the message tracking system can comprise software that is protocol independent in generating the tracking information for each message to which the message tracking system subscribes. For instance the software that is implemented by the message interface the detector and the tracking manager can be standardized across all of the protocols that are supported by an enterprise network system in which the tracking system operates. Furthermore because of the modularity of the protocols the message categories and the flight plan templates additional protocols can be added to and supported by the tracking system such as by adding new corresponding protocols and corresponding message query statement sets for each additional protocol. Additionally new flight plan templates can be added if necessary to the flight plan template registrar to accommodate new protocols which may have different message behaviors. For example in the above described example of additional protocols can be appended to the XML document that defines the protocol registrar of . Accordingly the core software code that forms the message tracking system need not be reprogrammed or otherwise modified as new protocols are added to the tracking system.

It is to be understood that the message tracking system is not intended to be limited to the example of . As an example the components of the message tracking system could be implemented as separate processes which could be distributed across multiple devices on a given enterprise. Those skilled in the art will understand and appreciate that the message tracking system can be configured in any of a variety of ways based on the teachings contained herein.

The computer system includes a user interface . The user interface can include a man machine interface or input output I O devices such as including a monitor a keyboard and a mouse. Therefore the user can interact with the computer system by providing inputs to and receiving output data via the user interface . The computer system also includes one or more processors which could be a central processing unit CPU for the computer system . The processor is demonstrated in the example of as being coupled to each other component of the computer system which can be implemented by one or more buses or other internal connections with in the computer system. The computer system also includes memory that stores executable applications and data. The memory can include any combination read only memory ROM random access memory RAM as well as any other form of memory structure e.g. flash memory a hard disk drive or the like which may be located within a common chassis or distributed in one or more other devices to which the computer system is connected. In addition to storing executable instructions the memory can store data that is used by the applications and processes running thereon.

The memory can include any number of executable applications or systems that operate within the enterprise. Applications running in the computer system are executable by the processor . For example the executable applications can include one or more software enterprise systems programmed to provide desired functionality within an enterprise system. For the example of the broadcast industry the applications can include broadcast specific business processes such as including one or more of the following a traffic system an accounting and billing system media management system an inventory management system as well as playout and automation systems. Various commercially available broadcast industry related products are commercially available from Harris Corporation of Melbourne Fla. and its affiliates as well as from other vendors. Additionally or alternatively one or more e.g. all or most of the executable applications can be implemented remotely such as on a one or more other computer system that is in communication with the computer system such as via a network . The applications running on the computer system can communicate with applications or systems running on the other computer system s via a network interface .

The memory can also include a message tracking system such as is programmed to perform the functionality shown and described herein see e.g. and its corresponding description . As an example the message tracking system can be programmed to subscribe to messages that are published within an enterprise network via a network interface that connects the computer system to the network . For instance a publishing service can pass the messages to the tracking system via an API. Thus the message tracking system can extract message characteristic and metadata from messages and instantiate a selected flight plan template for tracking the lifecycle of the published messages. The tracking information e.g. a flight plan instance can be accessed by a user via the user interface such as at the computer system or remotely at a different computer.

The computer system can include a configuration file development tool . The configuration file development tool can be configured as an executable application or process stored in the memory that can be utilized to replace append or modify one or more of the protocol configuration files message categories configuration files the flight plan template files. For example a user or another application can employ the configuration file development tool to add a protocol to the protocol configuration file e.g. an XML document . After adding the one or more new protocols a user could employ the configuration file development tool to modify the message categories configuration files and flight plan template configuration files to support the newly added protocol s via the configuration file development tool such as based on a GUI associated with the user interface . Alternatively updates to the configuration files can be provided automatically e.g. by a web service or other application to accommodate new protocols that may be made available by a manufacturer or a developer or a as published by a standards body. It will be appreciated that the message tracking system need not be changed or reprogrammed with protocol specific software to enable the system to handle the addition of new protocols. Instead the protocol information need only added to a selected subset of one or more configuration files e.g. the protocol registrar . Since the configuration files can be implemented as an XML document according to a predefined schema the modifications can be performed by an authorized user without requiring changes to the executable instructions that provide tracking system functionality. Those skilled in the art will understand appreciate that the configuration files and other documents and files can be represented in different languages and forms currently known and yet to be developed ways that such information can be represented.

It is to be understood that the computer system is not intended to be limited to the example of . For example the computer system is demonstrated simplistically such that the computer system can include any of a variety of additional components not demonstrated in the example of . In addition one or more of the components of the computer system can be distributed across the network system such that one or more of the components of the computer system can reside on any number of one or more other computer devices or systems.

In view of the structural and functional features described above certain methods will be better appreciated with reference to . It is to be understood and appreciated that the illustrated actions in other embodiments may occur in different orders or concurrently with other actions. Moreover not all features illustrated in may be required to implement a method according to the subject invention. It is to be further understood that the following methodology can be implemented in hardware e.g. one or more processors such as in a computer or computers software e.g. stored in a computer readable medium or as executable instructions running on one or more processors or as a combination of hardware and software.

At a determination is made as to whether the protocol is a registered protocol. If the protocol is not registered with the method the method can return to to receive additional messages. If the protocol is determined to be a registered protocol the method proceeds to . At tracking information associated with the originating message is generated based at least in part on the determined protocol at . For example message characteristic or metadata can be extracted from the message based on activating query statements to query each message that is provided according to a registered protocol. The message characteristics can include message ID and or routing characteristics i.e. message behavior publisher and subscribing destination s . The tracking information can be generated as a flight plan based on the extracted characteristics of the message. The flight plan can be generated by instantiating a flight plan template which can be selected based on the protocol message category and routing direction information. At the tracking information is stored onto a computer readable medium such as RAM or other memory device. The computer readable medium can be memory that can be accessed by a user or the system such as from a GUI that is associated with the method and programmed to provide a text and or graphic based display corresponding to the flight plan instance.

At a determination is made as to whether a related message that is responsive to the first message is received. The method can loop at until all expected response messages have been received. If an expected response is not received the determination at can wait for a time out period if no messages are received within an expected time period and then return an error. Then at least one response message can be an acknowledgement or a reply and can reference the originating message in metadata for the message. If a response message is received the method proceeds to . At the tracking information is updated based on the response message that is received. The updating at can be performed by a flight plan update component of the method that is programmed to update the status or other information for each of a plurality of sub transaction steps based on metadata in each of the expected response messages. The sub transaction steps of a flight plan can collectively represent a complete message transaction between the originating application and the subscribing applications.

At a determination is made as to whether the transaction associated with the originating message has completed. If the transaction is not yet complete e.g. additional responses or other related messages are still expected the method can return to to repeat the process at . If it is determined that the transaction has completed the method can end at . If the message has ended the stored tracking information including all updates as provided at can be made available for planning workflow updates troubleshooting or other purposes.

What have been described above are examples and embodiments of the invention. It is of course not possible to describe every conceivable combination of components or methodologies for purposes of describing the invention but one of ordinary skill in the art will recognize that many further combinations and permutations of the present invention are possible. Accordingly the invention is intended to embrace all such alterations modifications and variations that fall within the scope of the appended claims. In the claims unless otherwise indicated the article a is to refer to one or more than one. 

