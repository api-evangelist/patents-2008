---

title: System and method for efficiently providing a recommendation
abstract: A system and method for applying a first filter and a second filter, such as a recommendation and a constraint filter, to a plurality of items, including determining a cost of applying the first filter and the second filter to the plurality of items, and determining an order of applying the first and second filters based on the cost of applying the first and second filters.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08548987&OS=08548987&RS=08548987
owner: Thalveg Data Flow LLC
number: 08548987
owner_city: Los Altos
owner_country: US
publication_date: 20081031
---
This application is a divisional of U.S. application Ser. No. 09 404 597 filed Sep. 24 1999 now U.S. Pat. No. 7 461 058 which is incorporated by reference herein in its entirety.

This invention relates generally to data processing systems and more particularly collaborative filtering and recommender systems.

Recommender systems are becoming widely used in e commerce business activities. For example systems that make personalized recommendations are used as a marketing tool to turn window shoppers into buyers increase cross sells and up sells and deepen customer loyalty. Recommender systems allow e commerce operators to take advantage of customer databases to provide valuable personalized service to customers.

Current recommender systems can make generic recommendations to customers but they do not take into account many of the business rules that merchandisers wish to implement such as don t recommend an item that is out of stock don t recommend an item from a category that the customer has not selected don t recommend items that are not in season or don t recommend inappropriate items to minors. In other words current recommender systems base recommendations solely on the customer preference data.

Existing recommender systems allow only the simplest form of filtering and they do it one of two ways prefiltering or postfiltering.

Prefiltering requires a constraint system that discovers acceptable items and then submits all discovered items to a prediction system that makes recommendations from this subset. Prefiltering has some serious practical limitations however. For example gathering the list of acceptable items is difficult to accomplish efficiently as the list of acceptable items may be very large since it is selected from the whole item catalog.

Postfiltering also requires a system to filter the recommendation list. Postfiltering requires that the recommendation system produce more recommendations than actually required. The oversized list is passed to a constraint system which then removes unacceptable items. Although postfiltering may avoid the problem of having to select items from a large list it may fail to provide recommendations if the postfiltering eliminates all items.

Methods and systems consistent with the present invention provide a recommendation server that receives a recommendation request from a user of a client computer. The recommendation server contains software to provide recommendations to the user. To provide the recommendations the recommendation server applies a constraint filter and a recommendation filter to a set of items.

In accordance with methods and systems consistent with the present invention a method for providing a recommendation list specifies a constraint filter to select items satisfying a constraint selects the items that satisfy the constraint filter computes predicted values based on a recommendation filter and appends the items meeting predetermined criteria.

In accordance with methods and systems consistent with the present invention a method for applying a recommendation filter and a constraint filter to a plurality of items is provided. The method receives a recommendation request from a user specifies a constraint filter to select ones of the items satisfying a constraint and determines the order of the filters based on a cost of the filters. The method applies the constraint filter first when the cost of the constraint filter is lower than the cost of the recommendation filter. Otherwise the method applies the recommendation filter first when the cost of the recommendation filter is lower than the cost of the constraint filter.

The following detailed description of the invention refers to the accompanying drawings. Although the description includes exemplary implementations other implementations are possible and changes may be made to the implementations described without departing from the spirit and scope of the invention. The following detailed description does not limit the invention. Instead the scope of the invention is defined by the appended claims. Wherever possible the same reference numbers will be used throughout the drawings and the following description to refer to the same or like parts.

Recommender systems provide recommendations to users based on various attributes. For example collaborative filtering CF systems are a specific type of recommender system that recommend items to a user based on the opinions of other users. In their purest form CF systems do not consider the content of the items at all relying exclusively on the judgment of humans of the item s value. In this way CF systems attempt to recapture the cross topic recommendations that are common in communities of people.

Commercial applications of ratings based collaborative filtering now exist in a variety of domains including books music grocery products dry goods and information. One example of a CF system is the GroupLens Research system that provides a CF for Usenet news and movies. More information on CF technology may be found at hereby incorporated by reference.

To use the recommendation system an operator may first create a constraint using a constraint language that allows different business rules to be described in textual form. For example to select a candidate from a set of red items a constraint may be candidate isa red thing. To select a candidate from a set of movies that are both comedies and not r rated a constraint may be candidate isa comedy and not candidate isa r rated. 

An item may be anything for which a user may recommend. For example in the domain of movies each movie may be an item. An item may be assigned arbitrarily to one or more categories. For example a fiction book may be a member of the Fiction category. Category membership may represent any attribute of a user or item. For example an item that is in stock may be a member of the in stock category or an item that is red may be a member of the red things category. This type of categorization allows the recommendation system to apply a constraint filter based on any attribute or combination of attributes of the item. A constraint filter is a software with a complex boolean expression as an attribute that the recommendation system uses to restrict items.

A constraint may also consist of free variables. A free variable is a placeholder for an attribute that can be determined at execution time. For example to provide the user with the ability to choose a category when applying a constraint a constraint may be candidate isa X where the user inputs X at runtime.

Once the operator creates the constraint the recommendation system may begin accepting recommendation requests from a user. To use the recommendation system a user may access a web site with instructions and web pages for the user to fill out to use the recommendation system. Upon accessing the web site the user enters a recommendation request including values for various free variables and the number of items desired. The recommendation request may include the values for the free variables for the constraint filter the number of items desired and user information. One skilled in the art will appreciate that other methods may be used to obtain a recommendation request such as a telephone call center or manual entry.

Once the recommendation system receives the recommendation request the system next determines the order of a constraint filter and a recommendation filter to apply to the received recommendation request. The constraint filter determines whether an item satisfies a constraint and the recommendation filter determines a predicted value of the item based on historical or statistical information. One type of recommendation filter is the well known collaborative filtering CF technique.

The recommendation filter may compute a predicted value to determine if an item should be recommended. A predicted value is a number that rates an item according to certain criteria. For example a predicted value may be used to rank an item based on recommendations from similar users of the recommendation system. The predicted value is essentially an estimate of how much a user is likely to enjoy an item and may be determined for example by a CF technique. One skilled in the art will appreciate that the predicted value may be determined in a number of different ways such as previous purchases previous comments or a particular rating given by the user.

To determine the order of filters to apply the recommendation system determines the cost of applying successively each filter to all items. The cost of applying each filter is explained below. For example if the cost to apply a constraint filter before a recommendation filter is lower than the other sequence the recommendation system may choose to apply the constraint filter first. Preferably the recommendation system provides a recommendation to a user with the lowest cost.

Once the order of the filters is determined the recommendation system recommends a list of items to the user that the user may be interested in based on the recommendation filter and also passes the constraint filter. If the cheapest method is to apply the constraint filter first each time an item passes the constraint it becomes a potential candidate for a recommendation list. The candidate is then passed to the recommendation filter. If the candidate passes the recommendation filter the candidate and the candidate s predicted value are appended to a recommendation list.

Recommendation server transmits and receives web pages from a browser on client computer using hypertext markup language HTML Java or other techniques. These web pages may include images or instructions to obtain recommendation requests from a user. Recommendation server also contains a database that stores various data such as constraint filters recommendation filters and items further described below.

Although only one client computer is depicted one skilled in the art will appreciate that data processing system may contain many more client computers and additional client sites. One skilled in the art will also appreciate that client computer may come with the recommendation server software already installed.

As shown in recommendation server includes a memory a secondary storage device a CPU an input device and a video display . Memory includes recommendation software which determines if an item should be recommended to the user by applying a constraint filter and a recommendation filter described below. Recommendation software also interacts with client computer for transmitting and receiving files such as HTML files or Java files. To interact with client computer recommendation software may include a web server. Although a web server is described in this particular embodiment of the recommendation server recommendation server may interact with a client in other ways such as voice prompts call centers or kiosks. Memory also includes constraint builder software which creates constraints that are used by recommendation software to recommend an item to the user. Recommendation software and constraint builder software also provide access to database in secondary storage device .

Secondary storage device includes grammar file containing a set of rules which map textual constraints to their internal representation in the constraint filter. Secondary storage device also includes database with constraint table that stores built constraints to use with recommendation software and item table with attribute information about each item. For example item table could store a category identification item number and number in stock.

Although aspects of the present invention are described as being stored in memory one skilled in the art will appreciate that these aspects may be stored on or read from other computer readable media such as secondary storage devices like hard disks floppy disks and CD ROM a carrier wave received from a network like the Internet or other forms of ROM or RAM. Additionally although specific components and programs of client computer and recommendation server have been described one skilled in the art will appreciate that these may contain additional or different components or programs.

Once the constraint is verified for the correct syntax constraint builder software may translate the textual constraint into for example a constraint in a tree structure format step . Constraint builder software includes the well known yacc parser to translate the textual constraint. The builder software reads grammar specification file and generates a constraint tree consisting of objects by using the grammar specifications applied to the textual constraint. The new constraint tree is in a format acceptable to recommendation software .

Grammar specification file consists of many different object formats to create the constraint tree such as logical expression objects relational expression objects or leaf objects. Logical expression objects are a type of boolean expression such as AND OR or NOT. Relational expression objects compare two leaf objects. Leaf objects represent any entity in the application domain. A leaf may be a category leaf free variable leaf candidate leaf or subject leaf. A category leaf represents at least one item in database such as Thriller or Shoes. A free variable leaf is essentially a placeholder that is specified at execution time by the user or operator. The free variable leaf stores a variable name which is bound to an actual entity in the application domain during the recommendation process further described below. Similar to the free variable leaf the candidate leaf is also a placeholder. The candidate leaf represents the actual item discovered by the recommendation filter. Finally a subject leaf is a placeholder for the user who requested the recommendation. For example a user may have an attribute of being 14 years old. Thus leaf objects in the constraint tree may reflect this attribute.

For example a textual constraint created by an operator to produce recommendations for movies that are now playing and are of a genre selected by a user and prohibits the recommendation of r rated movies to minors may be 

X candidate isa movie and candidate isa X and candidate isa NowPlay and not subject isa minor and candidate isa R rated .

Constraint builder software would translate the textual constraint to the tree of objects depicted in .

Once constraint builder software translates the textual constraint to a constraint tree the constraint tree is placed as an entity in constraint table step . The constraint tree is used later by recommendation software during the recommendation process. This completes the constraint creation process.

Once received at recommendation server recommendation software binds the free variables in the appropriate constraint with the category selected by the user and the number of items desired step . To do so recommendation software first locates the appropriate constraint in constraint table . The constraint may be found in constraint table for example by a tag appended to the recommendation request indicating the constraint. Once located recommendation software descends the constraint tree to locate free variable objects. Once a free variable object is found recommendation software copies the information from the recommendation request to the free variable. For example in if a user selected rock and jazz as the categories to search step generates an array of length two that contains the object representing jazz and rock with a corresponding index number. The array looks as follows 

Step uses the array when descending the constraint tree searching for a free variable object. When a free variable object is located the index is matched and the corresponding object is copied to the free variable object. Ultimately recommendation software will examine each node in the constraint tree to locate all free variables and store corresponding information in each free variable. Although two free variables were used in one skilled in the art will appreciate that many more free variables may exist in the recommendation request.

After the free variables in the constraint tree are bound recommendation software examines each item in item table for an item to recommend to the user. The process begins with recommendation software determining the lowest cost method to complete a recommendation request step . To do so recommendation software determines the cost of applying constraint filter and recommendation filter in different orders to the items. As shown in each filter has a generation interface that produces items and a rejection interface that determines whether a particular item is suitable for recommendation to the user. Each filter is applied sequentially. The generation interface is called on the first filter and the produced items are passed to the rejection interface on the second filter.

If the cost of generating a sufficient number of items by applying the generation interface of the constraint filter before applying the rejection interface of the recommendation filter is lower than applying the generation interface of the recommendation filter before applying the rejection interface of the constraint filter then recommendation software will apply the generation interface of the constraint system first to item table . Otherwise recommendation software applies the generation interface of the recommendation filter first. The cost may be approximated by the following equation Cost number of results required probability that a randomly selected item will pass the rejection interface of the second filter cost of applying the generation interface of the first filter to generate a single item cost of applying the rejection interface of the second filter to a single item 

Once the order of the filters is determined recommendation software determines if enough items have been located step . That is recommendation software continues to discover new items in item table until the required number of items requested from the user has been reached. Once an item has been discovered in item table the item is evaluated step . Evaluation occurs by applying the constraint filter to the item. Items that pass the constraint filter will be passed to the recommendation filter step . An item passes the constraint filter when it satisfies the constraints conditions. If an item does not pass the constraint filter the item is discarded and not recommended.

Next the recommendation filter may compute a predicted value for the item step . Also in step each item whose predicted value is at least a threshold value is appended to a result list for display on client computer . The results may be displayed in HTML.

Methods systems and articles of manufacture consistent with the present invention provide a recommendation server that receives a recommendation request from a user of a client computer. The recommendation server contains software to provide recommendations to the user. To provide the recommendations the recommendation server applies a constraint filter and a recommendation filter on a set of items.

The foregoing description of an implementation of the invention has been presented for purposes of illustration and description. It is not exhaustive and does not limit the invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practicing of the invention. For example the described implementation includes software but the present invention may be implemented as a combination of hardware and software or in hardware alone.

