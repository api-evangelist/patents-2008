---

title: Method for tracking an event through multiple module-specific files
abstract: A method and apparatus for tracking data associated with an event across multiple files includes generating a particular value upon occurrence of a particular event during a first process spawned from a first module. The particular value is unique among all events during processes spawned from all modules. First data associated with the particular event is written to a first file of the multiple files. The first file records information associated with the first process according to the first module. The first data includes the particular value. Second data is sent to a second process spawned from a second module. The second data includes the particular value.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07895605&OS=07895605&RS=07895605
owner: Cisco Technology, Inc.
number: 07895605
owner_city: San Jose
owner_country: US
publication_date: 20080213
---
This application is a Continuation of and claims priority to U.S. application Ser. No. 10 198 946 filed on Jul. 18 2002 now U.S. Pat. No. 7 424 716 issued Sep. 9 2008 the entire contents of which is hereby incorporated by reference for all purposes as if fully set forth herein.

The present invention generally relates to using software applications that involve multiple modules of computer instructions. The invention relates more specifically to tracking one event through multiple files each file written specifically for a process that executes instructions in one module.

Computer programs are sets of instructions for controlling processors in computing devices. Computer programs are typically written in one or more high level languages that are easy for a human being to understand. These source language statements are then typically compiled by a special type of program called a compiler and converted to coded instructions which often correspond to the actual operations performed by a processor in a computer device.

Frequently the coded instructions are not identical to the native instructions for the processor but instead are instructions for a particular virtual machine. A virtual machine is a process that interprets coded instructions and executes them. The virtual machine itself is an executable sequence of instructions in the native language of the processor. Virtual machines are sometimes called interpreters. As used herein the term machines includes virtual machines interpreting virtual machine instructions operating systems interpreting operating system instructions and processors executing native instructions.

In general coded instructions from one or more modules can be linked to form an executable program. Modules can consist of source language statements coded instructions for a particular virtual machine runtime executables or some combination of these with or without associated data. Modules in a high level source language may be compiled by a run time compiler to produce corresponding modules in coded instructions.

It is becoming more common to create programs that include heterogeneous modules. For example a program may include a machine executable module a module executable by a first type of virtual machine and a module executable by a second type of virtual machine. During execution of the program a routine in the machine executable module may call a routine in the module running in a first type of virtual machine and that routine may call another routine in the module running in a second type of virtual machine.

In addition it is common for programs executing on different processors to interact with each other. For example an application program such as a network management program runs as a first process on one processor on one device on a network. While running the first process may make a request of a device management server program the server a second process executing separately on a second device on the network to provide management information about the second device. In turn the second process may launch a local configuration program as a third process executing separately on the second device or invoke a user authentication program executing on a separate third device. The local configuration program determines properties of the local device by either getting the current status of the local device or changing the status or both. In many situations the interacting programs will be written by different programmers in different organizations for different types of virtual machines on the different processors. For example one will be a Java program while the other is a C language program.

It is also typical for each process that runs to log certain events in a log file written specifically for that process. Logged events might include for example reaching certain milestones in the processing of data encountering particular user actions invoking separate processes receiving results from separate processes invocations by separate processes returning results to separate processes and encountering an error or interruption in processing. The log files are often important in determining what a process spawned from a module actually does when a particular user under particular circumstances executes the instructions in the module. Sometimes what a process does contrasts with what it was designed to do because of equipment failures external problems or because some circumstances were unanticipated by the programmers of the module. The log files help developers of each module determine the actual performance of processes spawned from the module. Typically the log files are specific to a module the events are identified and event properties are represented in ways specifically designed by the developers of the module.

A problem arises when it becomes useful to track an event across log files written by interacting processes spawned from separately developed modules often executing on different processors. For example an error encountered by the third process causes an error event to be entered in the log file for the third process along with data about the error of concern to developers of the third module the local configuration program or the authentication agent program. The error is identified in the third log file by some error code X determined by the developers of the third module. The third process may then enter other information into the log file.

As a result of the error the third process returns control to the calling process the second process with some indication of error. The error indication returned by the third process to the second process causes an error event to be entered in the log file for the second process along with data about the error of concern to developers of the second module the device management server. The error is identified in the second log file by some error code Y determined by the developers of the device management server and may be unrelated to X the code that identifies the error in the third log file. The second process may then enter other information into the second log file.

As a result of the error the second process returns control to the calling process the first process with some indication of error. The error indication returned by the second process to the first process causes an error event to be entered in the log file for the first process along with data about the error of concern to developers of the first module the network management program. The error is identified in the first log file by some error code Z determined by the developers of the network management program and may be unrelated to the way the error is identified in the second log file.

A user of the first process will find it difficult to retrieve information about the error event stored in the log file for the third process. The error identification X used in the third log file is unknown to the user of the first process.

One approach that could be pursued is to require each current process to pass the error identification in the current process determined by the developers of the module for the current process to the calling process that called the current process. In addition the current process stores the error code returned from a called process in the log file along with the error identification. For example the second process stores the value X along with the value Y in the second log file and passes the value Y to the first process. Then the first process stores the value Y along with the value Z in the first log file. A user of the first process can retrieve information about the error event stored in the third log file by tracking backwards through the second log file. For example the user finds in the first log file that the error Z is associated with the error Y then searches the second log file to find that the error Y is associated with the error X then searches the third log file to find the error X and the information about the error X.

One problem with this approach is that a user must track the error through all the log files of the intervening processes. Another problem with this approach is that the error codes may not be unique. For example the error code X might appear several times in the third log file every time the third process encounters the same problem or the error code Y might appear several times in the second log file or both error codes might appear several times in their respective log files. There might not be sufficient information to determine which error identification is associated with the event of interest to the user.

Another approach that could be pursued is to require each current process to identify an error in the current process by the error identification returned from a called process to use the same error identification in the log file and to pass the same error identification to the calling process. For example the second process stores the value X in the second log file and passes the value X to the first process. Then the first process stores the value X in the first log file. A user of the first process can retrieve information about the error event stored in the third log file by going directly to the third log file. For example the user finds in the first log file that the error identification is X then searches the third log file to find the error X and the information about the error X. The user does not have to search the log files of all the intervening processes.

One problem that remains with this approach is that the error codes may not be unique. For example the error code X might appear several times in the third log file every time the third process encounters the same problem. There might not be sufficient information in the third log file to determine which error identification is associated with the event of interest to the user.

Based on the foregoing there is a clear need for a tracking one event through multiple files each file written specifically for a process that executes instructions in one module.

The past approaches described in this section could be pursued but are not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated herein the approaches described in this section are not admitted to be prior art to the claims in this application merely by inclusion in this section.

A method and apparatus are described for tracking one event through multiple files written specifically for different processes based on different modules. In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

The needs identified in the foregoing Background and other needs and objects that will become apparent for the following description are achieved in the present invention which comprises in one aspect a method for tracking data associated with an event across multiple files. Each file is written specifically for a process that executes instructions in one module of multiple modules of computer instructions. Upon occurrence of a particular event during a first process spawned from a first module a particular value is generated that is unique among all events during processes spawned from all modules. First data associated with the particular event is written to a first file of the multiple files. The first file stores information associated with the first process according to the first module. The first data includes the particular value. Second data is sent to a second process spawned from a second module. The second data includes the particular value.

According to another aspect a method includes receiving first data from a first process that executes computer instructions in a first module of multiple modules. The first data is received at a second process that executes computer instructions in a second module. The first data includes a particular value that is unique among all events during processes spawned from all modules of the multiple modules. The particular value is included in a first file of the multiple files. The first file is associated with the first process. Second data associated with receiving the first data is written to a second file. The second file is different from the first file. The second file stores information associated with the second process according to the second module. The second data includes the particular value. Third data is sent to a third process that executes computer instructions in a third module. The third data includes the particular value.

According to another aspect a method includes reading first data from a first file that stores information associated with a first process. The first process executes computer instructions in a first module of multiple modules. The first data is recorded according to instructions in the first module and includes a particular value that uniquely identifies a particular event among all events during execution of all of the multiple modules. Second data is read from a second file of the plurality of files. The second file is different from the first file and stores information associated with the second process according to the second module. It is determined whether the second data includes the particular value. If so then a particular portion of the second data associated with the particular value is presented to a user interested in the particular event.

In other aspects the invention encompasses a computer apparatus and a computer readable medium including a carrier wave configured to carry out the foregoing steps.

According to another aspect a computer readable medium for tracking data associated with an event across multiple files comprises a first file. Each file is written specifically for a process that executes instructions in one module of multiple modules of computer instructions. The first file stores information associated with a first process that executes computer instructions in a first module of the multiple modules. The first file includes a particular value that uniquely identifies a particular event among all events during execution of all processes for all modules among the multiple modules.

Embodiments based on one or more of these aspects allow a user to track a single event among multiple log files written for multiple processes spawned by multiple modules.

Embodiments are described in the following sections in the context of error events written to log files by separate processes based on different modules developed in different languages by different developers which modules are invoked directly or indirectly by a particular application. However the invention is not limited to this context. Other embodiments include other events recorded in multiple files written by multiple processes. For example some embodiments include tracking an event affecting multiple web pages written by different web servers that execute on one or more different host machines connected to a network.

To illustrate tracking an event across multiple log files it is assumed that an application program begins when a user launches Process A which interacts with Process B which interacts with Process C. Each of the processes writes a log file to record information about the progress of its processing. In other embodiments each process may interact with more or fewer processes.

Each process writes a log file respectively to record its progress as indicated by the solid arrows with straight segments. The data written to the log files may include indications of one or more various events such as reaching certain milestones in the processing of data encountering particular user actions invoking separate processes receiving results from separate processes invocation by separate processes returning results to separate processes and encountering an error or interruption in processing.

The curved arrows indicate that process Process A the main process of the application program invokes process Process B which invokes process Process C .

Executing on the one or more hosts is an event viewer process event viewer according to some embodiments. The event viewer process is described in more detail in a later section with reference to .

For purposes of illustrating a simple example shows only three processes and three log files. However embodiments are not limited to this example and a practical system may have two or any number greater than two of processes and log files.

According to the illustrated embodiments the event information in each log file includes event context identification event context ID fields . A value for the event context ID field is unique for each event among all events for all the processes spawned from all the modules used by the application program. Event information associated with the same event is given the same value of the event context ID in the log file of every process involved in the program. For example if the values are identical in context ID fields then the event information is all associated with the same event.

In some embodiments one or more of the event information includes an address of a log file of a different process involved with the event. For example event information for Process B includes an address for the log file of Process C. Similarly event information for Process A includes an address for the log file of Process B.

In order to have the same value in the event context IDs the value of the event context ID passes from Process C which writes Log File to Process B which invokes Process C and which writes Log File to Process A which invokes Process B and which writes Log File . Such passing of the value is indicated in by a curved arrow connecting event context ID field to event context ID field and a curved arrow connecting event context ID field to event context ID field . The passing of the value is described in more detail below with reference to .

In some embodiments the process writing the event information records an address of a log file of a different process that passes the context ID to the process that writes the event information. For example event information for Process B includes an address for the log file of Process C that provides the context ID to Process B. Similarly event information for Process A includes an address for the log file of Process B that provides the context ID to Process A

In order to ensure that the values in two event context ID fields are the same only if they are associated with the same event the value is generated to be unique for each event. For purpose of illustrating an example the unique value may be generated by concatenating a date and time when the event is detected with a name of the module whose instructions are executed by the process that detects the event and with an identification of the device on which is executing the process that detects the event. A unique identification for a device suitable for use in the event context ID is the media access control MAC address value assigned to every device that can be connected to a network. The illustrated embodiment exploits the expectation that at any one time only one process is executing on a particular device.

It is assumed for purposes of illustration that Process C executes instructions in a module called Module C and is executing on a device with a MAC address of MAC C. It is further assumed that an error event is detected by Process C at 3 AM on Jan. 3 2001. According to an illustrated embodiment a value for the event context ID field is generated by concatenating data such as 2001 1 3 03 00 00.000000 Module C MAC C. The data can be expressed with other representations in other embodiments. For example the date could be expressed in days since midnight on New Year s Eve and the time could be expressed in number of microseconds since midnight on the current day or a universal epoch value such as the UNIX epoch value can be used. The data can be combined in a different order in other embodiments. For example the module name could occur first followed by the date which is followed by the MAC address which is followed by the time.

In other embodiments other means of generating a unique value are employed. For example if a device has multiple processors then a processor ID is included in the event context ID. In some embodiments the value of the event context ID is generated by applying a hash function to the date time module name and MAC address so that the value is expressed in a given number of bits of data regardless of the number of characters in the name of the module or MAC address.

An illustrated embodiment of a method for tracking events across multiple log files is described below with reference to flowcharts in and . Although steps of the flowcharts are depicted in a particular order in the illustrated embodiments in other embodiments the steps can be performed in a different order or overlapping in time.

In step the user launches Process A from Module A. For example process is launched from Module A among the modules as indicated by the broken arrow in in response to commands by a user. For purposes of illustration it is assumed that Module A contains instructions in the C programming language to manage multiple devices on a network. Process writes data to log file to record the progress of its processing.

In step Process A invokes Process B from Module B. The invocation can be performed in any manner known when the embodiment is implemented. For example the invocation can take the form of a procedure call that causes Process B to be launched from Module B with parameters values sent according to an application programming interface API or a remote procedure call that causes Process B to be launched from Module B on a separate host according to the remote procedure API. In other embodiments the invocation can take the form of sending a message to Process B that is already running such as a server process. For example process is launched from Module B among the modules as indicated by the broken arrow to respond to requests from other processes. For purposes of illustration it is assumed that Module B contains instructions in the C programming language for a network management server that manages a particular network device. Process writes data to log file to record the progress of its processing.

In step Process B invokes Process C from Module C. The invocation can be performed in any manner known when the embodiment is implemented. For example process is launched from Module C among the modules as indicated by the broken arrow to respond to requests from other processes. For purposes of illustration it is assumed that Module C contains instructions in the Java programming language for an authentication agent program that prompts a user to enter a user identification User ID and a password. Process writes data to log file to record the progress of its processing.

In step Process C encounters an event. In the illustrated example Process C encounters an error event associated with authentication failure. For example a user has failed to enter a proper user ID and password combination within a certain amount of time or number of tries. It is assumed for purposes of illustration that such a failure is designated by error number X according to the developers of Module C.

In step Process C generates a unique value for the context ID for the event. For example Process C generates the value 2001 1 3 03 00 00.000000 Module C MAC C described above.

In step Process C records the value of the context ID in the context ID field of Log File along with other data for the event. For example Process C stores in event information the value 2001 1 3 03 00 00.000000 Module C MAC C in the context ID field of the Log File along with other data associated with the event. For example Process C stores the error number X in the local event ID field . For purposes of illustration it is assumed that the other information associated with the event that is stored in the event information includes data indicating the number of attempts made the IDs and passwords used and the amount of time waited after each prompt for a response from the user. For example it is assumed that the user made two attempts with the same ID and two different passwords but did not respond to a third prompt in a maximum time allotted for a response such as two minutes and it is assumed that this information is stored in the event information outside the context ID field and the local event ID field .

Because Process C did not receive the context ID from another process that sent a log file address no log file address in written in event information . In some embodiments a default log address is written to event information which indicates that no other process or log file is involved with the event. For example a blank field a zero or the URL address of Log File C itself is written to event information .

Also during step Process C passes the value of the context ID to Process B that invoked Process C. Any manner known in the art can be used to pass this data. For example the value can be passed in a parameter of the API used to invoke Process C in some embodiments. In some embodiments the value can be written to a file shared by the two processes. In some embodiments the value is passed in a message sent from Process C to Process B. In the illustrated embodiment the value 2001 1 3 03 00 00.000000 Module C MAC C for the context ID is passed in an error message from Process C to Process B.

In some embodiments during step Process C also passes a network address for its log file Log File . For example the Universal Resource Location URL of the log file is passed back to the calling module. For purposes of illustration it is assumed that the Log File has a URL of domainC.com directoryC Logfiles file242 and that Process C passes this URL as the network address for the Log File .

In response to receiving the error message from Process C Process B responds to the error. For purposes of illustration it is assumed that Process B a network management server generates an error number Y that indicates to the developers of the B Module that an attempt to modify properties of a device failed. The error does not indicate whether this failure is due to a failure to authenticate the user or due to a hardware problem with the device or due to an illegal request being received from Process A or due to some other cause.

In step Process B records the value of the context ID in the context ID field of Log File along with other data for the event. For example Process B stores in event information the value 2001 1 3 03 00 00.000000 Module C MAC C in the context ID field of the Log File along with other data associated with the event. For example Process B stores the error number Y in the local event ID field . For purposes of illustration it is assumed that the other information associated with the event that is stored in the event information includes data indicating the device whose properties were to be modified and the current settings for properties of that device. For example it is assumed that the device to be modified has MAC address MAC B and has a list List B of values for properties that describe the current state of the device and it is assumed that this information is stored in the event information outside the context ID field and the local event ID field . In some embodiments Process B also records the address of the log file passed back from Process C. For example Process B stores the value domainC.com directoryC Logfiles file242 in the event information of Log File .

Also during step Process B passes the value of the context ID to Process A that invoked Process B. Any manner known in the art can be used to pass this data. In the illustrated embodiment the value 2001 1 3 03 00 00.000000 Module C MAC C for the context ID is passed in an error message from Process B to Process A.

In some embodiments during step Process B also passes a network address for its log file Log File . For purposes of illustration it is assumed that the log file has a URL of domainB.com directoryB Logfiles file232 and that Process B passes this URL as the network address for the Log File .

In response to receiving the error message from Process B Process A responds to the error. For purposes of illustration it is assumed that Process A a network management program generates an error number Z that indicates to the developers of the A Module that an attempt to modify properties of a device failed. The error does not indicate whether this failure is due to a failure to authenticate the user or due to a hardware problem with the device or due to an illegal request being sent by Process A or due to some other cause.

In step Process A stores the value of the context ID in the context ID field of Log File along with other data for the event. For example Process A stores in event information the value 2001 1 3 03 00 00.000000 Module C MAC C in the context ID field of the Log File along with other data associated with the event. For example Process A stores the error number Z in the local event ID field . For purposes of illustration it is assumed that the other information associated with the event that is stored in the event information includes data indicating the device whose properties were to be modified and the new settings for properties of that device that were requested when Process B was invoked by Process A. For example it is assumed that the device to be modified has MAC address MAC B and that a list List A contains values for properties that describe the requested state for the device and it is assumed that this information is stored in the event information outside the context ID field and the local event ID field . In some embodiments Process A also records the address of the log file passed back from Process B. For example Process A stores the value domainB.com directoryB Logfiles file232 in the event information of Log File .

In step a user tracks an event leading to error Z across log files using the values in the context ID field. An embodiment of step is described in more detail below with reference to .

With a conventional system when a user tries to determine what led to a particular occurrence of error Z in Process A the user would have to examine a large amount of data in log files and reason through which entries are associated with receiving error Z as described in the Background section. It may be impossible to determine which event information in Log file is associated with a particular occurrence of error Z in Log file . According to the illustrated embodiment the user only need determine from Log File that the event has the context ID of 2001 1 3 03 00 00.000000 Module C MAC C and then find that same value in one of the other log files e.g. Log File to find additional information associated with the same event.

In step a user launches an event viewer process . In other embodiments the viewer process may already be executing on one or more of the hosts and the user merely sends a message indicating a desire to view data associated with events. Step includes indicating the process with which the events are associated. For example the user indicates that events associated with the network management program Process A are of interest.

In step the event viewer reads data from the log file for the indicated process. For example the event viewer reads data for Process A from the Log File and presents some or all of the information from the log file to the user. For example the event viewer displays a list of events associated with Process A including multiple occurrences of error number Z.

In step the user selects one of the events to view. For purposes of illustration it is assumed that the user selects the occurrence of error number Z that was generated as described in the preceding section. The event information for this event is stored in event information in Log File .

In step in response to the user s selection the event viewer determines the event information associated with the user s selection. For example the event viewer determines that the event information for the selected event is stored in event information in Log File . The event viewer then determines that the event of interest has the particular value of the event context ID 2001 1 3 03 00 00.000000 Module C MAC C that is stored in the event context ID field of event information . The event viewer then displays some of the event information for the user to view. For example the event viewer displays information indicating the selected error Z is associated with an attempt to reset the properties of device MAC B to the values given in List A. In some embodiments the contents of the event context ID are also displayed but for purposes of illustration it is assumed that the particular value of the event context ID is not displayed to the user.

In step the event viewer reads data from a different log file. Any method for selecting the different log file may be used. In some embodiments every log file is examined in either a preset order or in an arbitrary order. In other embodiments the log file to read is determined based on the process called immediately before the event of interest in the original log file. For example if Log File for Process A records that Process A sent a message to Process B just before the selected error Z occurred then the event viewer would select the log file of Process B to read next. In some embodiments the event viewer selects the log file having the network address passed by the called process and recorded in the event information of the current log file. For example Log File of Process A records the URL domainB.com directoryB Logfiles file232 of Log File of Process B in the event information along with the event context ID 2001 1 3 03 00 00.000000 Module C MAC C. In this embodiment the viewer would next read data from log file of Process B. Such embodiments offer the advantage that not all log files have to be searched for the particular value of the context ID only those log files associated with that particular event. In some embodiments the user indicates the log file to read. For example if the user suspects the selected error is due to a problem encountered in Process C the user can direct the event viewer to next examine Log File C. For purposes of illustration it is assumed that the different log file is Log File for Process C.

In step the event viewer determines whether the different log file just read includes event information with the particular value of the event context ID in the event context ID field. For example the event viewer determines that Log file C includes event information with the value 2001 1 3 03 00 00.000000 Module C MAC C in the event context ID field .

If it is determined in step that the different log file does not include the particular value control passes back to step to read the data from a different log file if any. Nothing from the current different log file is displayed in association with the particular event.

If it is determined in step that the different log file does include the particular value control passes to step . In step the event viewer determines the event information associated with the particular event based on the particular value of the event context ID. For example the event viewer determines that the event information for the selected event is stored in event information in Log File for Process C. The event viewer then displays some of the event information for the user to view. For example the event viewer displays information indicating the selected error Z is associated with error X during an unsuccessful attempt to authenticate a user. The event viewer may even indicate the value of the user ID entered and the two invalid values for passwords entered in the first two tries and the amount of time the Process C waited for responses including the maximum amount of time waited for a third response that never came. In some embodiments the contents of the event context ID are also displayed but for purposes of illustration it is assumed that the event context ID is not displayed to the user.

According to the illustrated embodiment the user easily finds information associated with a particular event in any of several log files written specifically for processes of different modules. The user need not view all log files associated with the event. or even read all log files of intervening processes associated with the event.

In some embodiments that read all log files or that determine what files to read based on entries in other log files the Log File B is also read during one iteration of step . In such embodiments it is determined in step that the Log File B does include the particular value and control passes to step . In step the event viewer determines that the event information for the selected event is stored in event information in Log File for Process B. The event viewer then displays some of the event information for the user to view. For example the event viewer displays information indicating the selected error Z is associated with error Y during an unsuccessful attempt to reset a device. The event viewer may even indicate the device MAC B being reset and the list List B of the current setting for that device at the time of the error. In some embodiments the viewer determines the URL of the next log file to read based on the value domainC.com directoryC Logfiles file242 stored in log file address of event information . In some embodiments the contents of the event context ID are also displayed.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

The invention is related to the use of computer system for implementing the techniques described herein. According to one embodiment of the invention those techniques are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another computer readable medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus embodiments of the invention are not limited to any specific combination of hardware circuitry and software.

The term computer readable medium as used herein refers to any medium that participates in providing instructions to processor for execution. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radiowave and infra red data communications.

Common forms of computer readable media include for example a floppy disk a flexible disk hard disk magnetic tape or any other magnetic medium a CD ROM any other optical medium punch cards paper tape any other physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM any other memory chip or cartridge a carrier wave as described hereinafter or any other medium from which a computer can read.

Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infrared transmitter to convert the data to an infra red signal. An infrared detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the worldwide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are exemplary forms of carrier waves transporting the information.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution. In this manner computer system may obtain application code in the form of a carrier wave.

In the foregoing specification the invention has been described with reference to specific embodiments thereof. It will however be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

