---

title: Architecture, system and method for an RTP streaming system
abstract: An architecture, system and method for an RTP streaming system is disclosed. In one embodiment, a method includes developing multiple standalone modules, developing application programming interfaces associated with the standalone modules, and tying together the standalone modules to form a subsystem associated with a streaming application and with a network. The method further includes integrating standalone modules including an RTP module, an RTCP module and a payload interface, associated with any one of a server mode and a client mode. The method also includes managing a streaming session associated with media streams via an RTPSS manager, adding the media streams to a stream manager. For each media stream of the streaming session: the method includes performing packetization services in the server mode and de-packetization services in the client mode, and performing server-mode related services in the server mode and client-mode related services in the client mode.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08307118&OS=08307118&RS=08307118
owner: Ittiam Systems (P) Ltd.
number: 08307118
owner_city: Bangalore, Kamataka
owner_country: IN
publication_date: 20080124
---
The present invention relates to multimedia systems and more specifically to a modular reusable configurable and extensible architecture for an RTP streaming system.

Multimedia are media that utilize a combination of different content forms. Multimedia entertainment systems and communication devices may be associated with a variety of multimedia applications. Some examples include IP Video Phones IPVPs streaming server client network audio player and Video on Demand VoD service.

Multimedia applications often have common functionality. Related components may include for example network streaming components such as Real time Transport Protocol RTP an RTP control Protocol RTCP Audio Video Speech packetization modules and Adaptive Jitter Buffer AJB .

Due to the common functionality of components or modules across applications there is a vested interest in reusing the common components or modules rather than incurring time effort and cost expenditures associated with re development for each multimedia application. In addition system software written during integration may also have reusable aspects.

One of the possible approaches to reusability is development of common modules as independent modules with a generic Application Programming Interface API . System designers may then select the independent components needed for a particular system.

This approach however requires a detailed knowledge on the part of a system designer of each of the independent modules as well as the knowledge necessary to tie the independent modules together to build a complete system application . There may be a substantial time investment to customize each independent module for a given application and increased complexities and challenges for the system designers. The foregoing may increase the time to market for completed systems and may result in cost prohibitive systems and lost market share.

Other features of the present embodiments will be apparent from the accompanying drawings and from the detailed description that follows.

An architecture system and method for an RTP streaming system is disclosed. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the various embodiments. It will be evident however to one skilled in the art that the various embodiments may be practiced without these specific details.

The server system refers to a specialized server that uses a real time transfer protocol RTP an RTP control protocol RTCP etc. to stream media streams e.g. audio video images graphics etc. over the Internet. The client system may be a remote system accessing the media streams provided by the server system . The subsystem is an extensible modular development framework that performs streaming functions using the RTP the RTCP payload components and payload interface e.g. for packetizing and de packetizing . For example standalone modules such as RTP module RTCP module packetization de packetization modules adaptive jitter buffer AJB module etc. are tied together to form the subsystem with configurability provided to cater to a vast range of multimedia streaming systems.

The streaming application includes media streams e.g. non text files in the form of RTP packets such as audio animation video images live streams etc. transmitted to the client system via the network . The media streams thus transmitted can be viewed and or listened to shortly after downloading process begins thereby alleviating delay of waiting for entire file to download. The streaming application A includes media streams stored in the server system that are to be transmitted via the network and the streaming application B includes media streams received by the client system via the network . The network enables communication of the media data or RTP packets from the server system to the client system .

In various embodiments the subsystem functions either in a server application or in a client application. In one embodiment the subsystem can be used in the server mode in applications similar to a streaming server. In another embodiment the subsystem can be used in the client mode in applications similar to a streaming client. In yet another embodiment the subsystem can be used in a single application for example with one instance as a server and another instance as a client such as an Internet Protocol Video Phone IPVP application. The subsystem can interoperate with standard clients and servers.

In accordance with one or more embodiments described above multiple standalone modules e.g. RTP module RTCP module packetization de packetization module AJB module etc. are developed and tied together to form the subsystem associated with the streaming application and associated with the network . In these embodiments application programming interfaces APIs associated with the standalone modules are developed.

The RTPSS manager manages a streaming session of one or more media streams. For example the media streams may include audio stream video stream graphics images animation etc. In one embodiment managing the media streams includes initializing the standalone modules in the subsystem . The stream manager manages individual media streams of the streaming session.

In some embodiments the media streams are added to the stream manager by the RTPSS manager . In these embodiments streaming sessions related to each of audio stream video stream etc. e.g. managed by the stream manager are maintained by the RTPSS manager .

The payload interface performs packetization services e.g. in a server mode and de packetization services e.g. in a client mode related to media data of the media streams. In some embodiments the payload interface is coupled to packetization de packetization modules implemented as standalone payload components e.g. performing services related to payload header . In one embodiment the packetization services include adding of payload specific headers to the media data if the encoding format of the media stream is supported by the subsystem . The RTP module performs RTP services associated with the media data and RTP packets associated with the media streams. For example the RTP services include adding RTP headers to the media data to form RTP packets.

In some embodiments the RTP module is configured to add RTP headers to the media data to form RTP packets upon receiving media data e.g. having associated payload specific headers if any even if the encoding format of the media stream is not supported by the subsystem . Thus it can be envisioned that the design of the subsystem is extensible e.g. such that application specific components could be easily plugged in to the system to support addition and use of new components specifically payload functionalities transparently and or support proprietary implementations.

The RTCP module provides RTCP processing associated with the media streams and controls enablement and disablement of the RTCP processing for each media stream. In addition the RTCP module controls automatic sending and receiving of the RTCP packets for a media stream. The server mode module performs server mode related services and the client mode module performs client mode related services. For example the server mode module includes a server network module and an encryption module and the client mode module includes an AJB module a framer a client network module and a decryption module which are described in greater detail in and .

In some embodiments the standalone modules are integrated in the server system or in the client system . The integration of the standalone modules in the subsystem enables reusability of the standalone modules and or the subsystem associated with the streaming application . One can envision that the integrated

Further the subsystem design is modular as the standalone modules can be used independently in any streaming application . Also the subsystem is highly configurable as the streaming application can easily configure features of the standalone modules thereby making effective use of the standalone modules of the subsystem .

In addition the subsystem design is extensible such that application specific components can be easily plugged in to the subsystem . The modular reusable and extensible architecture of the subsystem brings down overall system development and or integration effort e.g. by 30 to 50 compared to traditional approaches in any client or server application. It can be noted that the implementation of the subsystem in a system design associated with the client or server application reduces the time to market and enables system designers to focus on application specific development innovation. Implementation of the subsystem in the server mode and the client mode is explained with greater detail in the following description of and respectively.

The subsystem associated with the streaming application A includes standalone modules such as the payload interface the RTP module and the RTCP module in addition to the RTPSS manager the stream manager a server network module and an encryption module of the server mode module to function in the server mode.

In some embodiments the standalone modules associated with the server mode are tied together and are integrated to form the subsystem associated with the streaming application A and further associated with the network such that the subsystem can be used in the streaming application A. In these embodiments the standalone modules are developed with well defined application programming interfaces APIs unit tests and validation process. It can be noted that the integration of standalone modules in context of the server mode enables reusability of the standalone modules and the subsystem and also each of the standalone modules can be configured i.e. to cater a vast range of multimedia streaming systems and used independently. It can be noted that a significant amount of system software written during the integration can also be reused. Further illustrates data flow path and control path between the various modules in the server context.

In operation the RTPSS manager manages a streaming session of media streams. In some embodiments managing the streaming session includes initializing the standalone modules forming the subsystem and maintaining e.g. detecting SSRC

In some embodiments the stream manager manages individual media streams e.g. individual audio video speech streams etc. associated with the streaming session. In these embodiments the stream manager selects appropriate data flow path within the subsystem based on the encoding format of the individual media stream.

In one embodiment the stream manager provides the supported streams received from the encoders parsers A N to the payload interface if the encoding format of the media stream is supported by a system of the server mode. The payload interface associated with the server mode module performs packetization services related to the media data of the supported media streams . The payload interface is coupled with packetization modules such as H.264 video A AAC audio B G.729 speech C ASF A V N having codec specific header information such that packetization services are performed on the media stream having H.264 video AAC audio G.729 speech ASF A V formats e.g. as illustrated in . One skilled in the art will appreciate that appropriate packetization module can be integrated e.g. plugged in in the subsystem if a new payload format is to be supported by the streaming application without any integration effort to support the new payload format.

The packetization services may include adding payload specific headers to the media data of the supported media stream . Upon performing the packetization services related to the media data the media data having the associated payload specific headers is sent to the RTP module by the stream manager . The RTP module then performs RTP services associated with the media data and RTP packets associated with the supported media streams . The RTP services include adding of RTP headers to the media data via the RTP module to form RTP packets.

In one embodiment the payload specific headers and the RTP headers are added by the payload interface e.g. using the services of the specific payload component A N of and the RTP module respectively to the media data if the encoding format of the media stream is supported by the system associated with the server mode. Thus in case of the supported media streams data flow path e.g. selected by the stream manager is from the encoder parser to the payload interface to add the payload specific headers and then to the RTP module to add the RTP headers to the media data of the supported media streams as illustrated in .

In another embodiment if the encoding format of the media stream is not supported by the subsystem then media data of the unsupported media stream having associated payload specific headers if any is received by the RTP module to perform RTP services which include adding of RTP headers to the media data of the unsupported stream to form RTP packets. Thus in case of the unsupported media streams data flow path associated with each individual media stream is from the encoder parser to the RTP module to add the RTP headers. Hence it can be noted that the subsystem designed in the server mode is extensible e.g. such that application specific components could be easily plugged in to the subsystem to support addition and use of new components specifically payload functionalities transparently and or support proprietary implementations.

In some embodiments the RTCP module provides RTCP processing associated with the media streams e.g. the supported media streams the unsupported media streams . In these embodiments the RTCP module controls enablement and disablement of the RTCP processing for each media stream of the streaming session. The RTCP module may also control automatic sending and receiving of RTCP packets for a media stream of the streaming session. In these embodiments the subsystem associated with the server mode collects session information and regularly sends the RTCP packets at dynamically calculated intervals without the need for any intervention from the system .

The RTCP module automatically sends the RTCP packets for the media stream either directly to the network layer of the OSAL to deliver to a client application or to the network interface managed by the system such that the RTCP packets to be sent to the client application are delivered to the network layer of the OSAL though the network interface .

In one embodiment the server network module of the server mode module selectively sends the RTP packets e.g. formed using the RTP module via the network . For example as illustrated in the server network module sends the RTP packets directly to the network layer of the OSAL to deliver to a client application.

In another embodiment the server network module may selectively provide the RTP packets to the streaming application A to schedule delivery via the network i.e. the server network module may provide the RTP packets to the network interface such that the RTP packets are delivered to the network layer of the OSAL though the network interface which are then forwarded to the client application at a scheduled time by the system .

In some embodiments the encryption module of the subsystem is used to encrypt the RTP packets and or add proprietary information to the RTP packets. In these embodiments the encryption module enables plug in of encryption algorithm modules to encrypt the RTP packets. In one embodiment the proprietary information may be added to the RTP packets when the delivery of the RTP packets to the client application is scheduled at a later time by the system .

It can be noted that the standalone modules described above are tied together to form the subsystem in the server context as data flow between the standalone modules remains same across wide range of streaming applications A associated with the server mode. Further one skilled in the art will realize that tying together of the standalone modules to form a subsystem associated with the server mode ensures reusability of each of the standalone modules as well as the subsystem reduction in system development and or integration efforts and the time to market. In addition the above described subsystem in context of the server mode is modular as the payload interface the RTP module and the RTCP module can be used independently in any streaming application A.

The subsystem described in terms of a server context is highly configurable so that the streaming application A can easily configure features of the standalone modules and use the standalone modules effectively. Also implementation of the subsystem associated with the server mode in a system design reduces the time to market and enables system designers to focus on application specific development innovation.

Further it can be noted that the overall effort required for system development and integration in any server application is reduced significantly e.g. by about 30 to 50 compared to traditional approaches since packetization and sending of packets over the network are carried out within the subsystem . For example in the subsystem associated with the server mode an integration effort needed for a system designer to support new payload format is almost nil. In addition the above described subsystem enables provision to select the stream manager and session maintenance e.g. detecting SSRC collision for RTP streams within the RTP module thereby reducing the system integration effort when the RTP module is used independently as the standalone modules are developed independently with a separate set of APIs.

In some embodiments the standalone modules associated with the client mode are tied together and are integrated to form the subsystem associated with the streaming application B and associated with the network such that the subsystem can be used in the streaming application B. In these embodiments the standalone modules are developed with well defined APIs unit tests and validation process. It can be noted that the integration of the standalone modules in context of the client enables reusability of the standalone modules and the subsystem in client applications and also each of the standalone modules can be configured i.e. to cater to a vast range of multimedia streaming systems and used independently. Further illustrates a data flow path and a control path between the various modules of the subsystem associated with the client context.

In operation the RTPSS manager manages overall streaming session of media streams. For example the media streams include audio stream video stream speech stream etc. In addition encoding formats associated with the media streams may be H.264 video A AAC audio B G.729 speech C ASF A V N etc. In some embodiments managing the streaming session includes initializing the payload interface the RTP module and the RTCP module and maintaining the sessions within each of the individual audio video or speech streams.

Further the stream manager manages individual video audio or speech streams within the streaming session. In some embodiments media packets of the individual stream are optionally received by the stream manager either through the network interface or directly from the network layer of the OSAL . In these embodiments the individual streams received via the network may include subsystem supported streams or streams unsupported by the subsystem as illustrated in .

In one embodiment the stream manager directs the media packet of the media stream received over the network to the AJB module . The AJB module includes hash buffer management jitter management and statistics collection within the subsystem of the client mode. The AJB module inserts the media packets into an AJB in order to buffer re order out of order packets and or de jitter the media packets received over the network . In one embodiment the subsystem can be configured in an auto mode such that the media packets are received automatically e.g. through the client network module and inserted into the AJB.

In some embodiments the framer module is configured to generate decodable units associated with the media packets of the media stream. A decodable unit is defined as data that can be interpreted by the decoder . For example the decodable unit can be a Network Abstraction Layer NAL in case of H.264 video format or a picture for H.263 video format. The decodable unit is generated using the framer module based on the needs of the decoder . For example when the decoder needs a decodable unit the decodable unit can be generated by making an appropriate call to the subsystem of the client mode. Thus in the auto mode of the subsystem the streaming application B can add a media stream and focus on system design beyond accessing the decodable unit.

In some embodiments the framer frames the decodable units of the media packets for delivery to the streaming application B. In these embodiments an appropriate decodable unit is delivered to the streaming application B based on the encoding format and configuration parameters. For example the decodable unit is considered as appropriate after collation or de aggregation of the media packets and satisfying any specific framing or low latency related constraints e.g. the subsystem of the client mode needs to handle Arbitrary Slice Ordering mode of H.264 video codec in a special manner . In these embodiments the collation or de aggregation of the media packets to form the decodable unit is performed within the subsystem based on the encoding format. The appropriate decodable unit is delivered to the decoder through the system interface .

The payload interface associated with the client mode performs de packetization services to de packetize the media packets using codec specific information. In these embodiments the payload interface is coupled with de packetization modules e.g. having codec specific information such as H.264 video A AAC audio B G.729 speech C ASF A V N such that de packetization services are performed on the media packets having H.264 video AAC audio G.729 speech ASF A V formats e.g. as illustrated in . One skilled in the art will appreciate that appropriate de packetization module can be integrated e.g. plugged in in the subsystem if a new payload format is to be supported by the streaming application without any integration effort to support the new payload format.

In another embodiment the subsystem of the client mode can be configured in a network disable mode. In the network disable mode the client network module receives RTP packets from the streaming application B. In some embodiments the decryption module of the client mode module decrypts the media packets to form RTP packets and deliver to the subsystem . In these embodiments the decryption module enables plug in of decryption algorithm modules to decrypt the media packets.

In an alternate embodiment if the encoding format of the media packets is not supported by a system then the stream manager provides the media packets to the streaming application B. Further in case of the unsupported media packets the subsystem provides access of the RTP module and the AJB module to the streaming application B. In these embodiments the media packets in the AJB module are provided to the streaming application B which then can be provided to the decoder e.g. after collation or de aggregation of the media packets . It can thus be noted that new de packetization modules can be plugged in to the subsystem with ease.

It can be seen that the standalone modules are tied together to form the subsystem in the client mode as data flow between the standalone modules remains same across wide range of streaming applications. Further one skilled in the art will realize that tying together of the standalone modules to form the subsystem associated with the client mode ensures reusability of each of the standalone modules as well as the subsystem reduction in system development and or integration efforts and the time to market. In addition the above described subsystem in context of the client mode is modular as the payload interface the RTP module and the RTCP module can be used independently in any streaming application B. Also implementation of the subsystem associated with the client mode in a system design reduces the time to market and enables system designers to focus on application specific development innovation.

It can also be noted that overall effort required for system development and or integration in any client application is reduced significantly e.g. by about 30 to 50 compared to traditional approaches since receiving de packetization of the media packets re ordering jitter management and other functionalities are carried out within the subsystem of the client mode. For example in the subsystem associated with the client mode an integration effort needed for a system designer to support new payload format is almost nil.

The diagrammatic system view may indicate a personal computer and or a data processing system in which one or more operations disclosed herein are performed. The processor may be a microprocessor a state machine an application specific integrated circuit a field programmable gate array etc. The main memory may be a dynamic random access memory and or a primary memory of a computer system. The static memory may be a hard drive a flash drive and or other memory information associated with the data processing system.

The bus may be an interconnection between various circuits and or structures of the data processing system. The video display may provide graphical representation of information on the data processing system. The alpha numeric input device may be a keypad keyboard and or any other input device of text e.g. a special device to aid the physically handicapped . The cursor control device may be a pointing device such as a mouse. The drive unit may be a hard drive a storage system and or other longer term storage subsystem.

The signal generation device may be a BIOS and or a functional operating system of the data processing system. The network interface device may perform interface functions e.g. code conversion protocol conversion and or buffering required for communications to and from the network between a number of independent devices e.g. of varying protocols . The machine readable medium may provide instructions on which any of the methods disclosed herein may be performed. The instructions may provide source code and or data code to the processor to enable any one or more operations disclosed herein.

For example a storage medium having instructions that when executed by a computing platform results in execution of a method of providing a subsystem associated with a streaming application including developing multiple standalone modules developing application programming interfaces associated with the standalone modules and tying together the standalone modules to form the subsystem associated with the streaming application and associated with the network .

The subsystem includes modules such as an RTPSS manager to manage a streaming session of media streams a stream manager to manage individual media streams a payload interface to perform packetization services or de packetization services related to media data of the media streams an RTP module to perform RTP services associated with the media data and or RTP packets associated with the media streams an RTCP module to provide RTCP processing associated with the media streams to control enablement and disablement of the RTCP processing for each media stream of the streaming session and to control automatic sending and receiving of the RTCP packets for a media stream of the streaming session and a server mode module to perform server mode related services or a client mode module to perform client mode related services.

In operation a streaming session associated with media streams is managed via an RTPSS manager . In operation the media streams are added to a stream manager . Operations and are performed to form RTP packets through adding RTP headers when the media stream is supported and unsupported by the subsystem respectively. In operation payload specific headers are added to media data of the media stream via the payload interface and RTP headers are added to the media data to form RTP packets via the RTP module if an encoding format of the media stream is supported by the subsystem . In operation media data of the media stream having associated payload specific headers are received and RTP headers are added to the media data to form RTP packets via the RTP module if the encoding format of the media stream is not supported by the subsystem . In operation RTP packets are sent directly over the network .

In operation enablement and disablement of RTCP processing for each media stream of the streaming session is controlled via the RTCP module . In operation automatic sending of RTCP packets for a media stream of the streaming session is controlled. Implementation of the subsystem in a client mode is described in following operations . In operation standalone modules including the RTP module the RTCP module the payload interface and the AJB module associated with the client mode are integrated. In operation a streaming session associated with media streams is managed via the RTPSS manager .

In operation RTP packets are optionally received from the streaming application . In operation the media packets are optionally decrypted via the RTP module to form RTP packets. In operation plug in of decryption algorithm modules is enabled to decrypt the media packets. It can be noted that the process performs operations and if the media packets are to be decrypted. In operation the media packets are provided by the stream manager to the streaming application B if an encoding format of the media packets is not supported by the subsystem .

The above described technique reduces overall system development and or integration effort by significant amount e.g. 30 to 50 compared to traditional approaches and hence reduces the time to market. For example the above described system enables integration of appropriate packetization and de packetization modules into a subsystem e.g. the subsystem when a new payload format has to be supported by a streaming application e.g. the streaming application of without any integration effort needed for system designers to support the new payload format. Also the above described system reduces the system integration effort when an RTP module e.g. the RTP module of is used independently e.g. as the standalone modules are developed independently with a separate set of APIs by enabling choice of provision of a stream manager e.g. the stream manager of and session maintenance for RTP streams within the RTP module. In addition it can be noted that implementation of the subsystem in a system design associated with the client or server application reduces the time to market and enables system designers to focus on application specific development innovation.

Further the above described subsystem facilitates configuring e.g. adding removing various modules at a build time for program or code memory optimization. The inclusion of each module is determinable at build time for any system. For example if the subsystem is to be used only in a server context then components like the AJB module can be removed at the time of build e.g. as illustrated in . Also in case H.264 video is not needed then it is possible to remove H.264 payload module at the time of build. This enables tailoring code size of the subsystem to suit the target application.

In addition the above described subsystem in the server and client context provides a variety of input options in terms of buffer ownership and modes of operation as the subsystem can be implemented in a wide range of multimedia applications. For example each encoder decoder is capable of specifying its output buffers and the format in which the media data is placed. Thus the subsystem illustrated in can directly write off the data based on appropriate parameter settings during initialization thereby reducing expensive memory copy and or data movement within the subsystem.

Moreover the above described subsystem includes interoperability with standard system and has an elaborate testing process. This helps in enabling the systems to leverage testing process and or time which can bring down significant efforts in system testing cycle.

Also the method may be in a form of a machine readable medium embodying a set of instructions that when executed by a machine cause the machine to perform any method disclosed herein. It will be appreciated that the various embodiments discussed herein may not be the same embodiment and may be grouped into various other embodiments not explicitly disclosed herein.

In addition it will be appreciated that the various operations processes and methods disclosed herein may be embodied in a machine readable medium and or a machine accessible medium compatible with a data processing system e.g. a computer system and may be performed in any order e.g. including using means for achieving the various operations . Accordingly the specification and drawings are to be regarded in an illustrative rather than a restrictive sense.

