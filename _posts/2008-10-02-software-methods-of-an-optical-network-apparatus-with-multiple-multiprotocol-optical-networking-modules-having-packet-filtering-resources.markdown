---

title: Software methods of an optical network apparatus with multiple multi-protocol optical networking modules having packet filtering resources
abstract: An API is provided to an optical networking apparatus to facilitate uniform access, control and interaction with its multi-protocol optical networking modules (MPONM) by its applications. Each of the MPONM has a number of function blocks having corresponding drivers. In response to an application's request to initialize a MPONM, the initialization function of the API cooperates with the function block drivers to create a data structure for the MPONM, and returns a handle of the data structure to the application. Thereafter, in response to a need to have an operation performed in the packet filtering function block of a MPONM, the application makes the request to the API, including with the request the handle of the data structure of the MPONM. In response, the API allocates a packet filtering resource to perform the operation, and returns a handle corresponding to the allocated resource to the application for use in further requests. When the application is finished with the resource, the resource is de-allocated by the API.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07984457&OS=07984457&RS=07984457
owner: Null Networks LLC
number: 07984457
owner_city: Las Vegas
owner_country: US
publication_date: 20081002
---
The present application is a continuation application of U.S. patent application Ser. No. 10 211 158 filed Aug. 2 2002 the entire content and disclosure of which is hereby incorporated by reference in its entirety.

The present invention relates to software methods and networking apparatuses. More specifically the present invention relates to software methods to provide uniform access control and or interaction with packet filtering resources of multi protocol network processors of multi protocol optical networking modules MPONM in an optical networking apparatus.

With advances in integrated circuit microprocessor networking and communication technologies an increasing number of devices in particular digital computing devices are being networked together. Devices are often first coupled to a local area network such as an Ethernet based office home network. In turn the local area networks are interconnected together through wide area networks such as SONET networks ATM networks Frame Relays and the like. Of particular importance is the TCP IP based global inter network the Internet. Historically data communication protocols specified the requirements of local regional area networks whereas telecommunication protocols specified the requirements of the regional wide area networks. The rapid growth of the Internet has fueled a convergence of data communication datacom and telecommunication telecom protocols and requirements. It is increasingly important that data traffic be carried efficiently across local regional as well as wide area networks.

Because of this trend of increased connectivity an increasing number of applications that are network dependent are being deployed. Examples of these network dependent applications include but are not limited to the World Wide Web email Internet based telephony and various types of e commerce and enterprise applications. The success of many content service providers as well as commerce sites depend on high speed delivery of a large volume of data across wide areas. As a result high speed data trafficking devices such as high speed optical or optical electro routers switches and so forth are needed.

Unfortunately because of the multiplicity of protocols including datacom and telecom protocols that may be employed to traffic data in the various types of networks designers and developers of networking components and equipments such as line cards routers and switchers have to wrestle with a multitude of prior art protocol processors. Each of these protocol processors is typically dedicated to the support of either local regional or regional wide area protocols in their design of these components equipments. This burden is costly and slows down the advancement of high speed networks.

U.S. patent application Ser. Nos. 09 860 207 and 09 861 002 both filed on May 18 2001 entitled A MULTI PROTOCOL NETWORKING PROCESSOR WITH DATA TRAFFIC SUPPORT SPANNING LOCAL REGIONAL AND WIDE AREA and AN OPTICAL NETWORKING MODULE INCLUDING PROTOCOL PROCESSING AND UNIFIED SOFTWARE CONTROL respectively disclosed a novel highly flexible multi protocol network processor capable of supporting high speed data traffic in local regional and wide area networks and a multi protocol optical networking module that can be constructed from such a multi protocol network processor. Resultantly sophisticated optical electrical networking apparatuses such as optical electrical routers and switches may be built more efficiently with multiple ones of the disclosed multi protocol optical networking module each having its own multi protocol network processor .

In turn the task for developing networking applications for such sophisticated optical electrical networking apparatus with multiple ones of the disclosed multi protocol optical networking module each having its own multi protocol network processor have become much more difficult. Accordingly a software architecture including methods that reduces the complexity and improves the ease for developing networking applications for such complex networking apparatuses with multiple ones of the disclosed multi protocol optical networking module each having its own integrated multi protocol network processor is desired.

The present invention includes software methods in particular an application programming interface API for networking applications to interact with filtering resources including one or more lookup tables or content addressable memories and filtering logic of multi protocol network processors MPONM of an optical electrical networking apparatus.

In the following description various aspects of the present invention will be described. However it will be apparent to those skilled in the art that the present invention may be practiced with only some or all aspects of the present invention. For purposes of explanation specific numbers materials and configurations are set forth in order to provide a thorough understanding of the present invention. However it will be apparent to one skilled in the art that the present invention may be practiced without the specific details. In other instances well known features are omitted or simplified in order not to obscure the present invention.

Parts of the description will be presented in data processing terms such as data variables methods request return and so forth consistent with the manner commonly employed by those skilled in the art to convey the substance of their work to others skilled in the art. As well understood by those skilled in the art these quantities take the form of electrical magnetic or optical signals capable of being stored transferred combined and otherwise manipulated through electrical and or optical components of a processor and its subsystems.

The terms provide and providing and other terms of the like as used in this specification and in the claims include indirect as well as direct provision of the object of the provision operation. That is an entity A may provide another entity B with an item C the object of the provision operation directly or indirectly by providing entity B with information to obtain the object item C such as a pointer to a location from which the object item C may be obtained.

Section headings are merely employed to improve readability and they are not to be construed to restrict or narrow the present invention.

Various operations will be described as multiple discrete steps in turn in a manner most helpful in understanding the present invention however the order of description should not be construed as to imply that these operations are necessarily order dependent. In particular these operations need not be performed in the order of presentation.

The phrase in one embodiment is used repeatedly. The phrase generally does not refer to the same embodiment however it may.

Referring now to wherein a block diagram illustrating one embodiment of an optical electrical networking apparatus having multiple MPONM within which the present invention may be practiced is shown. As illustrated for the embodiment optical networking apparatus includes a number of MPONM a n a control processor and memory such as computer readable storage memory coupled to each other through system bus .

In various embodiments the various MPONM may be connected to system bus in like or different manners. For example all MPONM may be connected via corresponding parallel interfaces or some MPONM may be connected via corresponding serial interfaces while others are connected via corresponding parallel or other bus interfaces. Accordingly for the embodiment various device drivers having functions are provided to facilitate the various corresponding types of interfaces for connecting MPONM to system bus . That is a serial interface oriented device driver is provided to facilitate connection of some or all of MPONM via corresponding serial interfaces a parallel interface oriented device driver is provided to facilitate connection of some or all of MPONM via corresponding parallel interfaces and so forth.

Each of MPONM includes at least one multi protocol network processor having a number of function blocks as e.g. described in further detail below as well as in the above identified co pending U.S. patent applications. The various function blocks are selectively employed in combination to service data transmission and receipt in accordance with a selected one of a number of frame based protocols including frame based protocols encapsulated within a synchronous protocol as well as streaming and packet variants of the synchronous protocol. These protocols include at least one each of a datacom and a telecom protocol.

In one embodiment the function blocks include a system interface block a network interface block a MAC block an Ethernet 64 64 coder an Ethernet on SONET coder block a PPP protocol and HDLC processor block a HDLC Packet over SONET coder block a SONET path processor block a SONET section and line processor block a packet filtering block and a control interface. In accordance with one embodiment of the invention MPONM are each equipped with a plurality of packet filtering resources including one or more packet filters and one or more lookup tables CAMS to determine the disposition e.g. drop pass divert of ingress traffic.

Thus it should be appreciated that without the teachings of the present invention if networking applications are required to access control or otherwise interact with multiple function blocks of multiple network processors on multiple MPONM directly the complexity may become unmanageable if not prohibitive for the average software developer. This is especially true in view of the multiplicity of network processors and MPONM present in each optical networking apparatus and the different manners the MPONM may be connected not to mention the multiplicity of programmable packet filtering resources as well as other function specific components provided by each MPONM.

Accordingly under the present invention MPONM API and function block service routines are provided for interfacing with the function blocks of the network processors of the MPONM to insulate the complexity of the function blocks of the network processors of the MPONM from networking applications . In particular for the embodiment MPONM API includes at least an externalized module initialization function and a number of externalized functions associated with corresponding function blocks provided to further streamline the interactions between networking applications and MPONM function block service routines . Examples of externalized functions include but are not limited to externalized functions correspondingly associated with controlling the operations of the MAC SONET and other function blocks.

In various embodiments a number of externalized cross function block functions not shown may also be provided as part of MPONM API . An example of such functions is a configuration function to set the various configurable parameters of the function blocks. The term externalized is used in the current context from the visibility perspective of networking applications for ease of understanding. The characterization has no significance as to the essence of the present invention.

As will be described in more detail below MPONM API buffers networking applications in accessing controlling or otherwise interacting with a MPONM through MPONM function block service routines using MPONM data structures one for each MPONM . The asterisk at the end of a reference number denotes a wild card representing any of the trailing suffixes of the reference numbers employed in a figure. For example stands for or any one of the other references of FIG. . 

Except for MPONM API including the initialization and externalized functions the teachings of the present invention incorporated with function block service routines and the manner in which networking applications and function block service routines cooperate with MPONM API networking applications and function block service routines otherwise represent a broad range of such elements known in the art and are typically application dependent. Accordingly except for the manner networking applications and function block service routines cooperate with MPONM API the two elements will not be otherwise further described.

In one embodiment networking application identifies the particular MPONM by providing the handle of the device driver handling the connecting interface through which the particular MPONM is connected to bus and if applicable information such as memory mapped addresses port numbers and so forth associated with how the particular MPONM is mapped on the connecting interface.

As will be described in more detail below in response the module initialization function of MPONM API in conjunction with the function block service routines more specifically init function of the function block service routines advantageously creates an instance of a MPONM data structure for the corresponding MPONM to be initialized if the module data structure has not been previously created for the corresponding MPONM to facilitate subsequent access control and or interaction with the corresponding MPONM by networking applications . As part of the process a handle of the module data structure for the corresponding MPONM is returned to the invoking one of networking applications . More specifically in one embodiment the handle is a pointer to the corresponding module data structure of the initialized MPONM .

Thus as illustrated networking application saves the returned handle or pointer to the module data structure for the MPONM upon receipt of the handle or pointer from the module initialization function of MPONM API . Thereafter networking application determines if another MPONM is to be initialized block . If so operations are repeated Otherwise the initialization process for networking application proceeds to completion.

In other embodiments a module initialization function may support each initialization request requesting initialization of one or more desired MPONM instead. For these embodiments more than one desired MPONM may be specified in a single request with the request returning multiple corresponding handles or pointers for the successfully initialized ones of the requested MPONM .

As illustrated in upon having a need to request a service or having an operation performed in a function block of a MPONM networking application retrieves the handle or pointer to the module data structure of the MPONM block and then formats and submits the request to an externalized function of MPONM API block . In the illustrated embodiment some requests e.g. requests associated with invoking cross function block externalized functions may include identifications of the function blocks within which the requested operations are to be performed. However whether through association of the invoked externalized function or identification the identification of the function block is not particularized to a MPONM nor is an identification of the MPONM provided. Instead the MPONM within which the identified function block the requested operation is to be performed is implicitly identified. More specifically the handle or pointer of the corresponding module data structure of the MPONM is provided by networking application in its request.

In one embodiment of the invention an identification of the function block within which the requested operation is to be performed is provided to MPONM API in conjunction with only the initial request for that function block. In response to an initial request directed to a given function block of a MPONM MPONM API returns a handle that implicitly identifies the function block for simplified subsequent access by networking applications . In one embodiment each subsequent request by networking applications includes a first handle implicitly identifying a MPONM that contains a function block to be accessed and a second handle implicitly identifying the function block to be accessed and or one or more resources associated therewith. For example a request by networking applications might include a first handle implicitly identifying a MPONM as well as a second handle implicitly identifying a filter resource such as a content addressable memory located within a packet filter function block of the MPONM corresponding to the first handle. More specifically the identification of the filter resource is not particularized to a MPONM nor is an identification of the MPONM or filter resource provided. In one embodiment the function block handle represents a pointer to a pointer of the module data structure of the MPONM whereas in other embodiments the function block handle may represent a pointer to a separate module data structure than that of the MPONM .

The implicit reference through the handle or pointer of the module data structure of the MPONM of interest as well as the implicit reference by the secondary and possibly subsequent handle s or pointer s of the function block and or resource within a function block to be accessed improves the ease of use for the software developers of networking applications who are more familiar with handles pointers as opposed to having to be cognizant of specific hardware modules and hardware details including the details of the connection interfaces through which the MPONM are correspondingly connected. This is especially true where the developers are required to reference multiple hardware modules each having a multiplicity of function blocks often times containing a multiplicity of shared resources including but not limited to packet filtering resources.

Thus in accordance with one embodiment of the invention one or more networking applications can dynamically allocate access and release individual packet filtering resources using one or more secondary handles implicitly identifying the associated resource without the need for the developer to have specific knowledge of the hardware software configuration or resource availability.

As illustrated each module data structure includes a root object and cross function block objects having cross function block shared data variables. Examples of data included in cross function block objects include but are not limited to data and or pointers employed in interacting with the appropriate device driver for the particular MPONM .

Additionally each module data structure includes a number of anchor data objects one each for the function blocks supported. Anchor data objects may include a number of function block specific control data variables. Examples of such function block specific control data variables include status variables denoting e.g. whether the corresponding function block service routine was successful in performing certain requested operations.

Further attached with each anchor data objects of the function blocks are function block specific data objects having function block specific operational data variables. Examples of such function block specific operational data variables include bit masks filter criteria comparison bit patterns and so forth. In other embodiments the present invention may be practiced using other data organizations.

As illustrated for the embodiment upon receipt of a request to initialize a MPONM initialization function of MPONM API determines if the MPONM has previously been initialized block . More specifically initialization function determines whether the corresponding module data structure of the MPONM has previously been created or not e.g. as a result of responding to another initialization request for the same MPONM by the same or another networking application . If so the module initialization function returns the handler pointer of the corresponding module data structure of the MPONM block .

Otherwise i.e. if the module data structure has not been previously created before initialization function creates the root and cross function block objects of the module data structure of the MPONM block .

Thereafter initialization function successively calls the initialization functions of the corresponding function block service routines of the function blocks to contribute to the creation of data structure to facilitate subsequent access control or interaction with MPONM by networking applications block . In response each of the initialization functions of the corresponding function block service routines creates the corresponding anchor and descendent data objects for the corresponding function block of the MPONM block .

For the embodiment after each invocation initialization function further determines whether the contributory creation expected of the invoked initialization function of the function block driver is successful block . If an error is returned for the contributory creation initialization function successively undoes all prior successful additions to the module data structure block and initialization function returns an error notice to the network application block .

If the contributory creation was determined to be successful at block the module initialization function further determines if more initialization functions of additional function block service routines are to be invoked block . If at least one initialization function of an additional function block service routine is to be invoked initialization function continues operation at block as earlier described. If not the cooperative creation initialization process is completed and initialization function returns the handle pointer of the module data structure of MPONM as earlier described block .

In various embodiments successive invocation of the initialization functions of the function block service routines to contribute to the creation of the module data structure may be made in a predetermined order to address certain application dependencies such as data dependencies between data of the different function blocks.

Operationally as described earlier upon having a need to have an operation performed within a function block of a MPONM networking application requests an appropriate externalized function accordingly.

Typically the same externalized function is invoked for the same function block of different MPONM . Moreover the request does not explicitly identify the MPONM only the module data structure of the MPONM . Nevertheless the invoked externalized function of the MPONM API processes the request and interacts with the appropriate functions of the appropriate function block service routines to operate on the appropriate function block of the appropriate MPONM accordingly. Resultantly accessing controlling or otherwise interacting with MPONM by networking applications is streamlined.

Note that as alluded to earlier the exact manner an initialization function of a function block service routine contributes in the creation of the module data structure of a MPONM i.e. the kind of data variables the function block service routine adds to maintain or otherwise manipulate using module data structure is application dependent. Similarly the nature and the manner in which the various functions of the function block service routine interacts with the corresponding function blocks of MPONM are also application dependent. These issues vary from function blocks to function blocks.

The MPONM API of the present invention provides a set of externalized software based functions for managing line speed packet filtering capabilities of an optical networking apparatus such as optical networking apparatus of . In accordance with one embodiment of the invention the optical networking apparatus can be used to filter ingress traffic based on a range of bytes in each packet. For POS flows for example the range includes but is not necessarily limited to the IP source address IP destination address ToS packet length packet ID and protocol value as well as fragment information. For Ethernet e.g. MAC flows the range includes the MAC source address MAC destination address VLAN ID and type length field.

Packets matching specified filter conditions may be removed from the data stream or passed e.g. into a parallel interface depending upon a developer defined configuration e.g. as implemented via the MPONM API of the present invention. Packets removed from the data stream may be dropped entirely or diverted e.g. via an ingress packet buffer to a processor control interface for software analysis for example. The MPONM API of the present invention facilitates the creation of logical address groups the addition and deletion of addresses from each group the creation of filtering rules and the addition of groups to a rule among other functionalities. Moreover the MPONM API automates the management of groups tables and rules including but not limited to table initialization table entry assignment filter function definition and filter priority management.

Reference is now drawn to where a logical overview of packet filter rule configurations in accordance with one embodiment of the invention is shown. In a rule crossbar indicating rule group memberships is illustrated. As shown the horizontal lines within the crossbar represent rules whereas the vertical lines within the crossbar represent groups. A dot appearing at the intersection of a group line and a rule line indicates that the corresponding group is a member of the corresponding rule.

Each rule is associated with a Boolean rule type including an AND rule an OR rule a NOR rule or a NAND rule. Furthermore each rule is associated with a discrete priority ranging from highest to lowest and a preprogrammed action to be taken upon a match occurring between an incoming packet and the corresponding rule. In one embodiment if an incoming packet matches more than one rule i.e. more than one rule evaluates to true the matching rule associated with the highest priority dictates the action to be taken. In the illustrated embodiment possible actions include drop divert and pass . Moreover if no rules evaluate to true an action associated with a default rule is taken.

In one embodiment of the invention the filter configuration is built on a set of eight search tables consisting of 256 entries each and seven programmable filters which operate based upon assigned priorities. In one embodiment these search tables are independently configurable for searching on byte fields within packets. In one embodiment the search tables can be configured to search on contiguous eight byte fields within the first 24 bytes of each packet. In one embodiment each search table is implemented as a content addressable memory CAM however the invention is not limited to such an implementation.

For both IP and MAC packets the MPONM API of the present invention causes portions of the packet header fields to be masked before they are compared to groups created by the developer via the MPONM API. In one embodiment comparison result outputs from each group are combined using logical operations and fed to a bank of prioritized filters which determine whether a packet should be dropped allowed to pass through to the system interface or diverted to a microprocessor such as control processor of .

Furthermore once a group has been created block and at least one rule e.g. indicating whether a given ingress packet should be allowed to pass be diverted or be dropped has been created block the preexisting group may be added to i.e. associated with the one or more preexisting rules block . Likewise a preexisting group could also be deleted from one or more preexisting rules block . In accordance with the illustrated embodiment other than the dependencies shown in the MPONM API functions may generally be invoked in any order.

Packet filter groups are collections of patterns that are matched against user defined fields of an incoming packet header. In one embodiment a developer creates a group by supplying the field of the incoming packet that is to be compared with entries in the filter group e.g. source MAC address . The developer may also create an additional mask for the supplied field e.g. to examine only source IP network by prefix bytes . Multiple filter groups may be created to simultaneously examine different fields of the same incoming packet. For example a group A may compare the source address of an incoming packet with its respective entries while a group B compares a destination address of an incoming packet with its respective entries.

Once the MPONM API has identified a particular MPONM upon which the group is to be created the MPONM API determines which of the packet filtering resources of the identified MPONM are available for allocation to the group i.e. allocated to store patterns associated with the group block . In one embodiment the MPONM API identifies an available filtering resource based upon the resource s ability to store up to a number of patterns equivalent to MaxEntries . The identified filter resource is then initialized through e.g. automatic population of unique entries as described further below block . Once a filtering resource has been allocated and initialized a data structure corresponding to the identified filtering resource is instantiated block and a group handle Gnum implicitly identifying the allocated resource is returned to the requesting network application by the MPONM API block . In one embodiment the group handle is a numeric identifier that is unique across all packet filtering groups. Accordingly an MPONM API function call designed to create a group to examine the destination address of an Ethernet packet mask certain nybbles using mask 0xffdf and allow a maximum of 256 entries might be formed as CreateGroup thisMpm PF MAC DA 0xffdf 256 gnum .

In addition to providing a function to create a packet filtering group the MPONM API further includes a function to delete a previously created group. In one embodiment the DeleteGroup function takes as parameters the module handle as well as the handle assigned to the group during the group creation phase.

As alluded to above when a group is created its corresponding search tables are automatically populated with unique entries. In one embodiment the uniqueness of the entries is maintained by the MPONM API throughout its operation. In one embodiment search table entries are unique with respect to the ingress packet field s e.g. indicated during group creation against which patterns are to be compared.

When a group is initially created there are no patterns associated with the group by default. After a group is created pattern entries may be added to the group using one or more function calls to the MPONM API of the present invention.

In accordance with one embodiment of the invention rules are used to allow pass divert or drop actions to be applied to ingress packets. The pass action allows a packet to pass through to a system interface the divert action causes a packet to be sent to a diversion FIFO where it can be read by the networking application through e.g. a control interface via the MPONM API and the drop action causes the packet to be dropped by the networking apparatus. In one embodiment up to seven prioritized rules in addition to a default rule may be created at any one time with each prioritized rule being designated by a unique priority. In one embodiment if multiple rules have been created the action taken by the packet filter is determined by the highest priority rule that evaluates to true. If no rules evaluate to true the default rule determines the disposition of the packet.

The default rule specifies an action to be taken if an incoming packet does not match any of the prioritized rules i.e. they all evaluate to false . In one embodiment the default rule is set through a separate MPONM API function call the operational flow of which is similar to that of that includes as parameters a handle implicitly identifying an MPONM containing the filter being configured in addition to a default result e.g. pass drop divert to be assigned to the rule. For example an MPONM API function call designed to create a default rule associated with a drop action might be formed as DefaultRuleSet thisMpm PF DROP .

Additionally a previously created packet filtering rule may be deleted by the MPONM API by way of a DeleteRule function. The default rule may not be deleted but may be changed with the DefaultRuleSet function. In one embodiment the DeleteRule function takes as parameters the module handle and the priority assigned to the rule to be deleted.

In accordance with one embodiment of the invention the presence or absence of a match in a group can be used as a Boolean condition in each rule. When each rule is created it is designated as an AND OR NAND or NOR rule. This Boolean operator is applied to all groups that have been added to the rule. For example if group A group B and group C denote groups that have been added to an OR rule with normal polarity the rule will be true if group A group B group C evaluates to true i.e. a match exists within at least one of these groups .

In addition to including a function to add a group to a rule the MPONM API further includes a function to delete a group from a rule. In one embodiment the DelGrpFromRule function takes as parameters the module handle the rule involved e.g. given by its priority and the handle of the group to be deleted from the indicated rule. In one embodiment this function may be called repeatedly in order to delete more than one group from a previously created rule.

In addition to the various packet filter configuration functions described above the MPONM API further includes various accessor functions designed to extract the state of the packet filter. In one embodiment these accessor functions iterate through active groups iterate through an active group s entries extract the pattern of the group s entry extract group parameters iterate through active rules extract rule parameters iterate through a rule s entries extract the parameters of the group handle associated with a rule obtain an action associated with the default rule obtain the number of entries that exist within a group determine if a group handle is valid and so forth.

Thus it can be seen from the above descriptions a novel highly flexible MPONM API equipped to streamline and improve the ease of network applications in accessing controlling or otherwise interacting with function block of multi protocol network processors of MPONM has been described. While the present invention has been described in terms of the above described embodiments those skilled in the art will recognize that the invention is not limited to the embodiments described. The present invention can be practiced with modification and alteration within the spirit and scope of the appended claims. Thus the description is to be regarded as illustrative instead of restrictive on the present invention.

