---

title: Method and apparatus for data processing
abstract: A method and system can include multiple data handling stages for manipulating tracked information associated with content distributed to users and/or computers, such as static objects, media objects, and/or software objects, for example. The content can be distributed as widget instances and the associated tracked information can be received over a network. The information received can be associated with a session corresponding to each widget instance and/or with multiple identifiers, such as widget, user, content, session, content aggregation point, processor, and/or placement identifiers, for example. Data handling processes, including sorting, storing, filtering, combining, queuing, and/or authenticating, for example, can be performed during the data handling stages. The processed information can be used to determine modifications to a behavior associated with widgets and/or widget containers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08266274&OS=08266274&RS=08266274
owner: Clearspring Technologies, Inc.
number: 08266274
owner_city: McLean
owner_country: US
publication_date: 20080306
---
This application claims priority to the commonly owned U.S. Provisional Application Ser. No. 60 893 330 entitled Method and Apparatus for Data Processing filed Mar. 6 2007 and U.S. Provisional Application Ser. No. 60 977 544 entitled Methods and Apparatus for Widget Sharing Between Content Aggregation Points filed Oct. 4 2007 both of which are incorporated herein by reference in their entireties.

The disclosed method and apparatus relate generally to the processing of information received via a network and more particularly to the collection and manipulation of information related to content distributed over networks.

The world wide web is a platform that has been used to exchange various forms of content including videos text music etc. Often this content is distributed to users and or computers in an ad hoc fashion for example using e mail or as files embedded in a web page. Recently primitive forms of viral distribution and or replication of content have been developed that allow users to more easily spread content to other users than previously known ad hoc methods. Although these primitive methods are more convenient than distributing content in an ad hoc fashion they have many shortcomings. For example they do not provide for the ability to easily add services related to the content and services if any exist cannot be dynamically modified. The spreading of content using ad hoc methods and or primitive forms of viral spreading cannot be tracked as a service in a useful and efficient way. Moreover limitations in the ability to track spreading content and to efficiently process any information that can be tracked also limits the ability to dynamically modify behavior associated with the content. Content also cannot be readily shared with users of different platforms e.g. personal digital assistant to personal computer .

Thus a need exists for efficiently collecting and manipulating information related to content distributed to users and or computers.

A method includes multiple data handling stages for manipulating tracked information associated with content that has been distributed to users and or computers such as static objects media objects and or software objects for example. The content can be distributed as widget instances and the associated tracked information can be received over a network. The information received can be associated with a session corresponding to each widget instance and or with multiple identifiers such as widget user content session content aggregation point processor and or placement identifiers for example. Data handling processes including sorting storing filtering combining queuing and or authenticating for example can be performed during the data handling stages. The processed information can be used to determine modifications to a behavior associated with widgets and or widget containers.

A widget container also can be referred to as a container is a procedural software framework that contains a widget and or contains at least one service module that can be associated with the widget. As a procedural software framework the widget container can be a series of instructions that are executable or interpretable by for example a computer processor. The widget and or service module is contained in the widget container when a widget and or service module is either referenced in a widget container or actually integrated into the procedural software framework of the widget container. The widget and or service module when being contained in the widget container can be referred to as being wrapped or containerized in the widget container.

The widget container can be a portable framework that can be embedded in e.g. referenced using an embed or object tag and or accessed from using for example a processor readable vehicle e.g. webpage and or a content aggregation point. A content aggregation point can be for example managed by e.g. hosted at served from and or executed at the network entity and can be for example a desktop a start page a wireless application protocol WAP gallery a gallery a webpage a processor readable vehicle a portal and or a directory. The widget can be any type of object such as a static data object e.g. a text based object a media object e.g. a video an mp3 or an image and or a software object e.g. a javascript applet a rich media object that can be contained e.g. integrated or referenced in the widget container. In many embodiments the widget and or the service module or references to the widget and or service module can be referred to as components of the widget container.

The service module or reference to the service module contained in the widget container can be a pre defined and or customizable e.g. user defined function related to a variety of functions e.g. tracking placing related to the widget container and or its components. The service module and or widget can be wrapped in the container for example at the time that the widget container is first generated after the widget container has been generated and or dynamically when the widget container is being served. The widget container can be produced using a widget generation engine that can be implemented in hardware and or software. In some embodiments the widget generation engine can be controlled using for example a user interface. In some embodiments the widget container generation engine can be included in a widget container host and or a widget container creation device. In some embodiments the widget container can be dynamically modified using dynamic injection i.e. injecting data into the widget container just before when the widget container is served .

In some embodiments the functions typically associated with the widget container and or the functions typically associated with the service module can be invoked by a widget. In some embodiments these functions can be invoked by a widget that is not contained in a widget container. For example in some embodiments these functions can be invoked at a server by a widget via for example an application programming interface API . In some embodiments these functions can be stand alone applications that can be triggered to execute by a widget that may not be contained in a widget container. In some embodiments the functions associated with the widget container and or the functions associated with the service module can be included in and or executed at a widget. In some embodiments these functions can be referred to as kernel functions and the widget can be referred to as a kernel containing widget.

The widget container or the widget which can be configured to invoke a kernel can be sent from a host to a processing device such as for example a computer or mobile phone when a reference to the widget container or to the widget is accessed from for example a webpage a WAP page a WAP gallery etc. The widget container or the widget can be executed on various platforms and instances of references to the widget container or to the widget can be included in and or spread to a variety of processor readable vehicles e.g. web browser that can be read using various processing devices. Also metadata can be associated with the widget container or the widget and or associated with a component of the widget container or with a component of the widget so that the widget container or the widget and or the component of the widget container or the component of the widget can be for example dynamically customized and or tracked. More details related to placement of a widget container and or platform adaptation of a widget are set forth in co pending application Ser. No. 11 682 626 Method and Apparatus for Widget and Widget Container Platform Adaptation and Distribution which is incorporated herein by reference in its entirety.

After a widget and or widget container which can contain the widget is sent to a processing device tracking information e.g. widget type user information placement information session information etc. that is collected before during or after the widget and or widget container are executed at the processing device can be sent from the widget to a computing entity e.g. set of servers . The computing entity can be configured to collect such tracking information associated with multiple widgets and or widget containers. The widgets and or widget containers can be for example instances of widgets and or widget containers that have been virally spread. The tracking information can be used to for example dynamically modify the behavior of widgets and or widget containers that have been distributed and or are currently executing. The tracking information can also be used to for example modify the behavior of subsequently shared instances of widgets and or widget containers. The sharing of an instance of a widget can be triggered by a sharing request. In some embodiments the sharing request can be a widget precursor. The tracking information can be collected and or transmitted using a tracking kernel.

The tracking information can be processed using various systems such as those shown in and using various algorithms such as those shown in . illustrate mechanisms methods and apparatus for sharing widgets from which tracking information can be collected. In some embodiments the processing can be performed at one or more stages e.g. a primary processing stage and a secondary processing stage a receiving stage a processing stage and a modifying stage . The stages can be associated with a data handling module and or one or more computing entities. The processing can include for example ordering receiving queuing coalescing sorting parsing buffering authenticating associating with domain buckets filtering and so forth.

In this written description and the appended claims the singular forms a an and the include plural referents unless the context clearly dictates otherwise. Thus for example the term an identifier is intended to mean a single identifier or a combination of identifiers.

The processors and or can include software based modules e.g. set of instructions executable at a processor software code and or hardware based modules e.g. circuit system processor application specific integrated circuit ASIC field programmable gate array FPGA for handling i.e. receiving processing manipulating or modifying tracking information. The memories and or can include a machine readable storage medium such as an integrated circuit IC memory for example that can be configured to store data at various stages of handling. The data storage mediums . . . . . . and . . . can correspond to for example databases for storing collecting and or organizing information associated with the tracked information received from distributed instances of widgets. The data storage mediums . . . . . . and . . . can also correspond to for example databases e.g. remote database distributed database relational database having additional information that can be used when processing the tracked information or tracking information such as for example third party data. The additional information can be for example metadata such as user defined information associated with a user profile associated with a widget or a particular instance of a widget. The additional information can be a subset of tracking information. In some embodiments the additional information can be collected asynchronously from the tracking information e.g. in between tracking information packet bursts .

A service module not shown included in the widget container and or included in the kernel can be configured to transmit or communicate tracking information associated with the instance of widget and respectively to at least a specified portion of the servers . . . via the network A. In this regard the service module included in the widget container and or included in the kernel can be configured before the associated widget is loaded at the time the widget is loaded when the widget is rendered at the request of the widget and or dynamically after the widget is loaded.

The tracking information can include various types of information such as but not limited to widget information such as widget type e.g. video player image user information e.g. username user behavior sex of user content information such as the type of content in the widget e.g. personal video shared video placement information e.g. sharing lineage or parentage session information e.g. widget session activity session identifier content aggregation point information e.g. webpage characteristics browser browser type and processor information related to a processor type e.g. Intel Motorola ARM .

Each type of tracking information can be associated with a variety of identifiers. For example widget information can be associated with a widget identifier user information can be associated with a user identifier content information can be associated with a content identifier placement information can be associated with a placement identifier session information can be associated with a session identifier content aggregation point information can be associated with a content aggregation point identifier and processor information can be associated with a processor identifier. Each of these identifiers can indicate a category or sub category of the corresponding tracking information. The tracking information can correspond to usage behavior performance characteristics and or activities associated with the instances of the widgets and or the processing devices. One or more of the identifiers can be associated with a group of tracking information transmitted to for example the servers . . . at for example a specified interval of time.

The network A can be any type of network such as a local area network LAN a wide area network WAN and or a metropolitan area network MAN implemented as a wired and or wireless network in a variety of environments such as for example an office complex or a campus. In some instances the network A can include more than one network that collectively provides a path for the tracking information to be transmitted and or communicated from processing devices e.g. the processing devices and to at least a portion of the servers . . . .

In some embodiments the servers . . . can be configured to perform a first portion of handling the tracking information the servers . . . can be configured to perform a second portion of the handling of tracking information and the servers . . . can be configured to perform a third portion of handling the tracking information. In this regard the servers can be referred to as computing entities or computing devices that may perform one or more digital computations or operations related to processes for handling tracking information.

In some embodiments the output of the processes performed by the servers . . . can be sent to and received by the servers . . . . Similarly the output of the processes performed by the servers . . . can be sent to and received by the servers . . . . In some embodiments only a subset or a portion of the servers . . . the servers . . . and the servers . . . can be used for one or more portions of the handling of the tracking information. For example handling the tracking information can be performed by a subset or a portion of the servers . . . and the servers . . . . In this regard a communication path not shown can exist between the servers . . . and the servers . . . that does not include the servers . . . for example.

In another aspect of the example shown in the widget container and the kernel can be configured to communicate tracking information to a specified subset or portion of the servers . . . . This can be referred as session slaving or as a master slave relationship. For example in some embodiments the widget container and the kernel can be configured to communicate only with a pre determined subset of the servers . . . . The widget container and the kernel can be configured to communicate with the pre determined subset based on a mapping. In some embodiments a mapping can be provided e.g. defined that identifies the servers . . . with which instances of a widget widget containers and or kernels can communicate. Similarly each of the servers . . . may be configured to communicate only with a pre determined subset of the servers . . . and each of the servers . . . may be configured to communicate only with a pre determined subset of the servers . . . . Again a mapping can be provided that indicates which servers can communicate with which other servers.

The server resources can be configured to operate as one or more virtual servers . . . for example. Server virtualization can simplify the interface between users and server resources particularly when the server resources include multiple individual physical servers processors and operating systems. A server administrator can use a software application to divide one physical server into multiple isolated virtual environments. The virtual environments can be referred to as virtual private servers partitions guests instances containers or emulations. Server virtualization can be achieved by using a virtual machine model a paravirtual machine model or a virtualization at the operating system OS layer.

The virtual servers . . . can be configured to perform operations and or processes related to handling tracking information received from instances of widgets via the network B. In this regard the virtual servers . . . can be organized in various configurations. For example a first portion of the virtual servers . . . can be configured to perform a first portion of the handling of tracking information a second portion of the virtual servers . . . can be configured to perform a second portion of the handling of tracking information and a third portion of the virtual servers . . . can be configured to perform a third portion of the handling of tracking information. As described in session slaving can be supported such that each of the virtual servers . . . can be configured to communicate with a pre determined subset e.g. mapping of the virtual servers . . . .

The tracked information or tracking information received at the data handling module can be associated with multiple sessions one session for each of the instances of widgets and in the processing devices and respectively. For example an active or current session for the instance of widget in the widget container can include tracking information associated with the instance of widget . The current session for the instance of widget can be identified using for example a widget identifier. The information collected and associated with the active session of the instance of widget can include widget information user information session information placement information content information information regarding the content aggregation point e.g. webpage information regarding the processor readable vehicle e.g. browser and or information associated with a processor in the processing device e.g. Intel processor . The information collected and associated with the active session for the instance of widget can be associated with widget identifiers user identifiers session identifiers placement identifiers content identifiers content aggregation point identifiers and or processor identifiers. The data handling module can receive tracking information associated with the instance of widget and with the instance of widget by having corresponding active widget sessions.

An active session associated with an instance of a widget can remain active until for example a predetermined time is reached after a last occurrence of an activity associated with the instance of the widget. An activity timer can be used to determine when an instance of a widget has been inactive for longer than a predetermined threshold time. When the inactivity period is longer than that specified by the threshold time the current session can become inactive e.g. expire or can be terminated. In some embodiments a new session e.g. a session with a different identifier can be established when the activity associated with the instance of the widget later resumes when the instance of the widget is abnormally terminated when the instance of the widget is reloaded or when a new instance of the widget is loaded. In some embodiments when the widget is terminated an indicator that the session has been terminated can be received at for example a server resource.

Other events that can trigger cause or result in the termination of an active widget session are but need not be limited to the closing of a content aggregation point into which the instance of the widget has been loaded a predetermined time is reached e.g. expired timer after the instance of the widget is loaded into the content aggregation point or a signal is sent from the widget container or kernel associated with the instance of the widget to terminate the session.

While the example shown in depicts a data handling module receiving tracking information from single instances of widgets in processing devices and other embodiments can include instances where the data handling module receives tracking information from multiple processing devices and or from multiple instances of widgets in a single processing device not shown .

As shown in the data handling module can receive tracking information associated with instances of widgets and in processing devices and widget containers or kernels not shown respectively via a network D. The tracking information is received in the receiving stage . The output of the receiving stage can be sent to and received by the processing stage . Similarly the output of the processing stage can be sent to and received by the modifying stage . In some embodiments the receiving stage the processing stage and or the modifying stage can be pipelined processing stages in which case some amount of buffering may be provided between stages.

In one embodiment the first stage of the data handling module the receiving stage can be performed by for example at least a portion of the servers . . . described in the system of . The second stage of the data handling module the processing stage and the third stage of the data handling module the modifying stage can be performed by for example at least a portion of the servers . . . and the servers . . . respectively. The servers associated with the data handling module can be referred to collectively as tracking servers for example. The sharing module can be performed by at least one separate server. In another example at least a portion of the sharing module can be performed by the servers . . . .

In some embodiments the receiving stage the processing stage and the modifying stage can be performed by a subset of the servers shown in for example . The sharing module can be performed by at least one separate server or by a subset of the servers shown in for example .

In the embodiments described above the additional information can be provided to each of the receiving stage the processing stage and or the modifying stage by storing the content or information in the data storage mediums . . . . . . and . . . for example.

In some embodiments the receiving stage the processing stage and the modifying stage can be performed by virtual servers such as the virtual servers . . . configured within the server resources . In one example the sharing module can be performed by at least one separate server. In another example at least a portion of the sharing module can be performed by a subset of the virtual servers . . . . The additional information can be provided to each of the receiving stage the processing stage and or the modifying stage by storing the content or information in the data storage mediums . . . for example.

In some embodiments the functions associated with the receiving stage the functions associated with the processing stage and or the functions associated with the modifying stage can be combined into one or more stages and or separated into one or more stages within the data handling module or a separate module not shown . For example some of the functions associated with the processing stage can be included in and performed at the receiving stage as pre processing operations. In some embodiments the functions associated with the modifying stage can be included in and performed at the processing stage . In some embodiments the functions associated with the processing stage can be divided into several processing stages not shown that can execute in parallel and or serially. Furthermore the functions associated with each of the stages and can be implemented at a single server or at multiple servers.

After operations have been performed at the processing stage the processed data can be used at the modifying stage to determine the manner in which behavior associated with currently distributed and or subsequently distributed instances of widgets is to be modified. For example the modifying stage can be configured to use the processed data from the processing stage to trigger a modification of a behavior or an update of a behavior associated with the widget in the processing device . In other words tracked information collected from a first instance of a widget being executed at a processing device can be used to modify a behavior of a second instance of the widget the same widget at a different processing device or the same processing device. In some embodiments tracked information collected from an instance of a first widget being executed at a processing device can be used to modify a behavior of an instance of a second widget a different widget at a different processing device or the same processing device.

In some embodiments an indicator or signal can be sent from the modifying stage to for example processing device to trigger a change in the widget while the widget is being executed rendered at the processing device . In some embodiments the indicator or signal can include information that is injected into the widget and or processing device to trigger modification of a behavior associated with the widget .

In another example the modifying information produced at the modifying stage can be communicated e.g. sent pushed to the sharing module which can then trigger e.g. via an indicator signal a modification or an update of a behavior associated with an instance of widget shared with the processing device .

In some embodiments an indicator or a signal sent from the modifying stage can be sent to a widget server not shown . The indicator or signal can trigger e.g. trigger via an instruction encoded within the indicator or signal the behavior of the widget to be modified at the widget server before the widget is delivered to the processing device .

In some embodiments data defined at the modifying stage based on tracking information processed at the processing stage can be sent to for example processing device . The data defined at the modifying stage can be used to by the processing device to implementation a behavior modification of the widget . In other words the widget can invoke a function based on the data received from the modifying stage to implement a behavior modification.

Modifying the behavior associated with instances of widgets can include but need not be limited to modifying the content usage or placement characteristics and or operation of associated widget containers or kernels. Behavior modification can also include performance optimization of specified characteristics associated with specified widget instances e.g. targeted advertisement based on usage . Moreover the shared instance of widget at processing device can be configured to send e.g. communicate tracking information to the receiving stage of the data handling module . In this regard tracking information can be continuously received and processed at specified time intervals and or randomly which can result in a continuous update or modification of behavior associated with instances of widgets at other processing devices e.g. processing device . In some embodiments the data handling module can be configured to pull the tracking information from widgets e.g. via a tracking information request .

In some embodiments an indicator or signal can be sent from the modifying stage to for example a widget server not shown to trigger the widget server to send a different widget not shown to processing device than widget . In some embodiments the widget server can be configured with intelligence to serve a particular widget based on the indicator or signal defined by the modifying stage . The different widget can be selected based on the tracking information as it is processed by the data handling module . In other words a different widget can be delivered into the processing device based on the analysis at the data handling module of the tracking information. In some embodiments the indicator or signal can be a reference to a widget that is different than widget in which case a different widget would be request by sent to and executed by processing device .

In some embodiments a widget that is an advertisement or contains an advertisement can be dynamically modified. In other words the behavior of the widget advertisement can be dynamically modified. A shared instance of an advertisement can be dynamically modified for example from an advertisement with a white vehicle model to an advertisement with a blue vehicle model. This behavior modification can be triggered while the advertisement is currently being displayed. Another example can be to change the content of a video player widget with a video that corresponds to the demographics of the viewer and or user e.g. update music videos to those appropriate to the viewer s demographics . In yet another example an instance of a different widget can be shared and loaded onto the same content aggregation point of an already distributed displayed instance of a widget based on correlations between the two widgets that resulted from the processing of tracking information e.g. a video player playing a basketball game highlight added to same webpage having a widget displaying the basketball league s current standings . The modification can occur before the instance of the widget is loaded at the time the instance of the widget is loaded when the instance of the widget is rendered at the request of the instance of the widget or dynamically after the instance of the widget is loaded.

In this example the behavior modification may not result in modifications to the behavior associated with the instance of widget at the processing device . The behavior of the current instance of widget at the processing device and of the shared instance of widget at the processing device however can be modified as a result of the processing performed at the data handling module .

In this example after processing of received tracking information the modifying stage can update a behavior associated with the current instance of the widget in the processing device . The behavior associated with the current instance of the widget can be modified at the request of the instance of the widget or dynamically after the instance of the widget is loaded. The sharing module can be configured to trigger sharing of an instance of a widget to the processing device and an instance of the widget with the processing device . The behavior associated with shared instances of widgets and can be modified at various times. For example the behavior associated with the shared instances of widgets and can be modified before the instance of the widget is loaded at the time the instance of the widget is loaded when the instance of the widget is rendered at the request of the instance of the widget or dynamically after the instance of the widget is loaded. Moreover once distributed the shared instances of widgets and can communicate tracking information to the receiving stage of the data handling module .

The tracking information used to determine whether a particular widget should be sent to a processing device for execution can vary. For example in some embodiments tracking information associated with a specific user e.g. related to a particular user profile can be used to determine that a specific widget e.g. a specific advertisement related widget should be delivered to a content aggregation point accessed by the specific user. The tracking information associated with the specific user can be associated with multiple instances of widgets that may be related to the content aggregation point and or different content aggregation points. In other words the tracking information can be collected from instances of widgets virally spread from various other content aggregation points unrelated to the content aggregation point currently being accessed by the specific user. The determination e.g. recommendation that the specific widget should be delivered to a content aggregation point can be performed e.g. using the stages in the data handling module in response to an indicator that the specific user has accessed the content aggregation point. The specific widget can be delivered to a location on the content aggregation point reserved for execution e.g. display of the widget. In some embodiments the specific widget can be delivered to the location on the content aggregation point in lieu of a default widget.

Although not shown in in some embodiments an indicator or a signal sent from the modifying stage can be sent to a widget server not shown to trigger sending of widget rather than another widget such as widget or a default widget . In some embodiments the widget server can be configured with intelligence to serve a particular widget such as widget rather than based on the indicator or signal defined by the modifying stage . The particular widget can be selected based on the tracking information as it is processed by the data handling module .

While the examples described in describe collecting and processing tracking information from instances of a few types of widgets to modify the behavior associated with currently distributed and or subsequently shared instances of widgets it is understood that the operation s described can also apply to receiving and or processing tracking information from multiple instances of multiple types of widgets and modifying the behavior associated with currently distributed and or subsequently shared instances of multiple types of widgets. In this regard the historical trends projections correlations and or statistical calculations determined at the processing stage can be related to instances of more than one type of widget.

For example tracking information associated with a first widget at a first processing device and a second widget at a second processing device can be used to modify a behavior of a third widget at a third processing device. In some embodiments the first widget and the second widget can be different instances of the same widget virally spread from a widget at a content aggregation point. In some embodiments the first and second widget can be different widgets of for example the same type e.g. both car advertisements . In some embodiments the third widget can be a widget virally spread from the first widget or the second widget. In some embodiments the third widget can be a widget of the same type as the first widget and or the second widget e.g. all sports related widgets . In some embodiments the third widget may have been sent to its respective processing device before the first widget and or the second widget have been created and or executed e.g. rendered displayed .

The receiving stage can be configured to receive tracking information from multiple instances of widgets such as those described in connection with . The receiving stage can also receive third party data from for example the additional information described in connection with . The third party data can include for example information used for fraud detection source or information validation and or for spamming e.g. indiscriminately sent unsolicited bulk messages protection. The processing stage can be configured to receive the output of the receiving stage and or third party data . The third party data can include for example demographic and or behavioral information e.g. rendering time information user triggered interactions with a widget . Similarly the modifying stage can be configured to receive a portion of the output of the processing stage and or third party data . The third party data can include for example advertisement information for targeted optimization. The output of the modifying stage can be communicated to a sharing module e.g. a sharing server a modifying process e.g. a third party modifying server or to instances of widgets. In some instances a portion of the output of the processing stage can be used to for example generate a report.

Also shown in is a connecting section E between the receiving stage and the processing stage and a connecting section F between the processing stage and the modifying stage . These sections are illustrative of how in some embodiments at least a portion of the processes or operations that may be associated with one stage can be performed by another stage. For example in some implementations it may be desirable to perform an operation at the processing stage rather than at the receiving stage . Similarly in some implementations it may be desirable to perform a process at the processing state rather than at the modifying stage . In other embodiments however each stage is a distinct and separate stage and the output of one distinct stage is an input to the next distinct stage. In other words the stages can be implemented as a processing pipelining.

The processing stage can include but need not be limited to an analysis process a coalesce process a queue process a filter process a sort process a store process an authenticate process and a reporting process . Each of the processes in the processing stage can correspond to for example a software based and or hardware based module.

The modifying stage can include but need not be limited to a determine process a coalesce process a queue process a filter process a sort process a store process and an authenticate process . Each of the processes in the modifying stage can correspond to for example a software based and or hardware based module. In some embodiments one or more of the processes of the receiving stage the processing stage and the modifying stage can be performed by a one or more software based and or hardware based modules.

The processes in each of the receiving stage the processing stage and the modifying stage can operate on information based on for example one or more identifiers. For example widget identifiers user identifiers placement identifiers content identifiers session identifiers processor identifiers and or content aggregation point identifiers can be used to perform the processes in the various stages of the data handling module.

At the receiving stage the authenticate process can be configured to validate a session associated with an instance of a widget. The receive process can be configured to receive tracking information from multiple instances of widgets. The receive process can receive for example packets that can contain a header e.g. routing information and a payload e.g. tracking information . The receive process can be configured to remove the header and pre process the tracking information in the payload of the packet. The coalesce process can be configured to collect and or combine tracking information associated with a session of an instance of a widget. In this regard tracking information obtained from received packets and associated with one or more identifiers related to the instance of a widget can be coalesced into a single packet for example. The single coalesced packet can be completed and can be ready for further processing after the session associated with the instance of the widget terminates.

The queue process can be configured to queue received tracking information e.g. packets in a manner that results in an effective processing of the received information. The filtering process can be configured to filter augment or remove specified received information. For example the filtering process can be used to allow valid information to proceed for further processing. The filtering process can remove from further processing any received information that is not from a valid source information that itself is not valid e.g. fraudulent information or information that is received from an invalid session for example. In this regard the filtering process can use information received from for example the third party data . In some embodiments the filter process can augment for example tracking information. For example tracking information received at the filter process can be augmented by combining several categories of the tracking information into new tracking information.

The sort process can be configured to sort received information according to one or more identifiers. For example the sort process can be used to map the tracking information associated with an instance of a widget to a computing entity e.g. a server . In some embodiments the tracking information can be sent to the computing entity based on the mapping. The sorting can be based on a widget identifier e.g. server X processes information associated with widget Y but can also be based on other identifiers such as for example content identifiers e.g. server X processes information associated with video content . The store process can be configured to store tracking information before any pre processing during pre processing and or after pre processing. In some embodiments the store process can be configured to store tracking information in any of multiple types of data structures.

The coalesce processes and can be substantially similar in operation to the coalesce process but are configured to operate at the processing stage and the modifying stage respectively. Similarly other processes at the processing stage and the modifying stage such as the queue processes and the filter processes and the sort processes and the store processes and and the authenticate processes and can be substantially similar in operation to their corresponding processes in the receiving stage .

In the processing stage the analysis process can be configured to determine historical trends projections correlations and or statistical calculations related to instances of widgets by processing e.g. using statistical algorithms the tracked information received. The reporting process can be configured to collect at least a portion of the processed information including some of the determined trends projections and or correlations for example and present them in an organized manner. In this regard multiple reports can be generated from the same processed information based on the reporting parameters being considered. The reporting parameters can include for example time parameters user profile parameters widget related parameters e.g. widget identifier widget type indicator destination parameters e.g. destination address and so forth.

At the modifying stage the determine process can be configured to further process the results or output produced by the processing stage . The determine process can be configured to determine or establish whether a behavior s associated with currently distributed and or subsequently shared instances of a widget s is to be modified and or the manner by which the modification is to occur. In some embodiments the determine process can be configured to modify or update a behavior associated with an instance of a widget can communicate with a sharing module e.g. a sharing server configured to modify or update instances of widgets and or can communicate with a separate and distinct modification process or operation e.g. a separate server configured to modify instances of widgets.

In another example illustrates a widget based data structure that can include widget information e.g. widget type video image or categories sports related. music related associated with multiple instances of multiple widgets for example. In this example the widget based data structure has a next level of resolution that can include information associated with widget categories . . . where category can correspond to a widget category and category can correspond to a widget category K. A next level of resolution can include information associated with sub categories . . . corresponding to category and sub categories . . . corresponding to category . A further level of resolution can include information associated with widgets Wdgt . . . corresponding to sub category widgets . . . corresponding to sub category widgets . . . corresponding to sub category and widgets . . . corresponding to sub category .

In another example illustrates a content based data structure that can include content information e.g. content type or categories associated with multiple instances of multiple widgets for example. In this example the content based data structure has a next level of resolution that can include information associated with content categories . . . where category can correspond to a content category and category can correspond to a content category K. A next level of resolution can include information associated with sub categories . . . corresponding to category and sub categories . . . corresponding to category . A further level of resolution can include information associated with individual content Cnt . . . corresponding to sub category content . . . corresponding to sub category content . . . corresponding to sub category and content . . . corresponding to sub category .

In another example illustrates a user based data structure that can include user information e.g. user name user preferences sex of the user age of the user location of the user associated with multiple instances of multiple widgets for example. In this example the user based data structure has a next level of resolution that can include information associated with user categories . . . where category can correspond to a user category and category can correspond to a user category K. A next level of resolution can include information associated with sub categories . . . corresponding to category and sub categories . . . corresponding to category . A further level of resolution can include information associated with individual users . . . corresponding to sub category users . . . corresponding to sub category users . . . corresponding to sub category and users . . . corresponding to sub category .

Other hierarchical data structures can also be implemented for efficient handling of tracking information. Such additional hierarchical data structures can include session based data structures placement based data structures and or content aggregation point based data structures for example. The hierarchical data structures can be combined and or divided to create different hierarchical data structure categories that can be used to process e.g. parse tracking information. For example the user based data structure shown in can be used in conjunction with the content based data structure shown in to process incoming tracking information.

At the sorted data can be stored in one or many data structures such as the hierarchical data structures described in for example. At the stored data can be processed based on a secondary filter criteria such as a second identifier for example. The second identifier can include one or more widget identifiers session identifiers user identifiers content identifiers placement identifiers processor identifiers and or content aggregation point identifiers. The processing in can be used to associate the processed data with one or more folder like buckets to store the data in an effective manner.

At the pre processed tracking information can be further processed by for example the processing stage described in . The processing at can include operations related to the coalesce process the queue process the filter process the sort process the store process and or the authenticate process . In some instances the processing at can include operations related to the reporting process . The processing stage can be configured to use third party data in its operations.

At the processed tracking information can be analyzed by for example the analysis process in the processing stage . The analysis process can include determining for example historical trends projections correlations and or statistical calculations related to the instances of widgets being tracked.

At before end at the analyzed information can be used by for example the modify process in the modifying stage to determine whether to modify the behavior associated with instances of widgets and or modify the behaviors associated with instances of widgets. The modification can include determining changes to the behavior associated with instances of widgets and or their associated widget containers or kernels. The modifying stage can be configured to use third party data in its determinations. Moreover the determinations that result at can be communicated to a sharing module e.g. a sharing server configured to modify the behavior associated with shared instances of widgets and or their corresponding widget containers or kernels.

The widget sharing host is configured to send and or receive signals e.g. instructions data to facilitate sharing of the widget . In this embodiment the widget sharing host is configured facilitate sharing of widget e.g. instance of widget from content aggregation point of network entity to content aggregation point of network entity and from content aggregation point of network entity to content aggregation point of network entity in that order.

Instances of the widget are served to each of the content aggregation points and from a widget server separate from the widget sharing host . Because sharing of the widget is triggered through the widget sharing host the widget e.g. instances of the widget can be shared without direct communication between the network entities and or and or content aggregation points and or . Signals related to sharing of the widget from content aggregation point to content aggregation point and from content aggregation point to content aggregation point are shown in order as lines through .

As shown in at least a portion of an instance of the widget is sent from the widget server to the network entity line for execution within the content aggregation point . After at least a portion of an instance of the widget is received at the content aggregation point of network entity sharing of the widget from the content aggregation point to the content aggregation point is triggered by a sharing signal defined at and sent from network entity to the widget sharing host line . The sharing signal can be defined at a sharing service module associated with network entity and or associated with widget .

In some embodiments a portion of the widget can be executed e.g. displayed at the content aggregation point of network entity before the sharing signal line is sent from the network entity . In some embodiments a sharing signal can be sent before the widget is received e.g. after widget precursor received . In some embodiments the sharing signal can originate at the network entity e.g. at content aggregation point of network entity and or can be triggered by the network entity any time before after or during execution of widget .

In response to the sharing signal line the widget sharing host is configured to send a widget precursor line to the content aggregation point of network entity . The widget precursor can include one or more references that can be accessed at network entity and or used by network entity to request an instance of the widget from widget server line . An instance of the widget can be sent to the content aggregation point of network entity from the widget server line in response to the request line .

In some embodiments the widget precursor can include an instruction and or can be a message including one or more references e.g. a widget reference a widget container reference . In some embodiments a widget precursor can include a reference to another widget precursor. In some embodiments the widget precursor can be a widget container that includes a reference to the widget or a webpage or other type of vehicle that includes a reference to the widget . The widget can be contained in a widget container when a widget and or service module is either referenced in the widget container or integrated into the procedural software framework of the widget container. When being contained in the widget container the widget can be referred to as being wrapped or containerized in the widget container. As a procedural software framework the widget container can be a series of instructions that are executable or interpretable by for example a computer processor. In some embodiments the widget can be executed within the widget container after the widget container is received at and executed within for example content aggregation point . More details related to widget container hosting and generation are set forth in co pending application Ser. No. 11 537 362 Method and Apparatus for Widget Container Hosting and Generation which is incorporated herein by reference in its entirety.

In some embodiments a widget identifier a capability indicator and or a user preference that can be used by the widget sharing host to define the widget precursor line . In other words the widget precursor can be dynamically defined based on the widget identifier the capability indicator and or the user preference. For example a widget identifier and or user preference associated with widget and included in the sharing signal line can be used by the widget sharing host to define the widget precursor line . The widget identifier and or user preference associated with widget can be used to define a reference and or instruction in the widget precursor line sent to the network entity so that network entity can request an instance of widget having a particular configuration. In some embodiments a capability indicator and or user preference received at the widget sharing host from network entity the destination network entity can be used to define the widget precursor line .

In some embodiments a placement identifier can be defined at the widget sharing host and associated with an instance of the widget being placed at the content aggregation point of network entity . The widget is placed at the content aggregation point when a reference to the widget or a reference to a widget container that contains the widget is for example associated with the content aggregation point . In some embodiments the placement identifier can be defined in response to the sharing signal line . In some embodiments when the instance of the widget is for example executed within the content aggregation point and or otherwise associated with the content aggregation point a placement identifier can be defined and stored at the widget container host . In some embodiments the placement identifier can be stored at the network entity .

The placement identifier included in the sharing signal can be used to create parentage associated with the widget . For example part of the parentage of widget can be defined by associating the placement identifier associated with placement of the widget at the content aggregation point of network entity with a placement identifier of a placement of the widget at the content aggregation point of network entity . In other words the placement identifier can be used to determine parentage of the widget as it is shared between the network entities. More details related to placement identifiers and widget parentage are set forth in co pending application Ser. No. 11 537 375 Method and Apparatus for Widget Container Widget Tracking and Metadata Manipulation which is incorporated herein by reference in its entirety.

After at least a portion of an instance of the widget is received at the content aggregation point of network entity line sharing of an instance of the widget with the content aggregation point of network entity can be triggered at network entity and performed using the same method described above. In other words the widget can be subsequently shared after at least a portion of the widget has been received at the network entity . A sharing signal line can be defined at network entity and sent to the widget sharing host . In response to the sharing signal line the widget sharing host can send a widget precursor line to the content aggregation point of network entity . The information and or instructions included in the widget precursor line can be used to request line an instance of widget . In response to the request widget server can send the instance of widget for execution within the content aggregation point of network entity .

In some embodiments a widget container that is served as a widget precursor can contain one or more service modules. For example a widget container that is served to for example network entity as a widget precursor line that includes a reference to widget can contain one or more service modules. In some embodiments the service module included in the widget container can be a pre defined function. For example the service module can be a metadata searching retrieval module a polling categorizing module a widget container deployment module e.g. using a placement service module a transaction service module e.g. service module for facilitating a web purchase service module used for signing a user up for a web service etc. a security module e.g. security firewall module and or a widget container tracking module. The service module can also be a referral service module e.g. a service used to refer a viewer to a widget container an advertisement service module e.g. a service module that includes an advertisement or a directory service module e.g. a service module used for searching in a directory .

After the widget has been placed at e.g. linked at a content aggregation point such as content aggregation point the widget can be executed at the content aggregation point when requested. For example in response to an instruction included in a widget precursor such as the widget precursor shown at line a reference to the widget can be included in the content aggregation point and configured so that the widget is requested when the reference is accessed. In some embodiments the widget container is a portable framework that can be referenced in e.g. embedded in referenced using an embed or object tag and or accessed from using a content aggregation point e.g. web page mobile content vehicle .

In some embodiments a reference to widget can be included in a widget container that has been placed at the content aggregation point e.g. a reference to the widget container included at the content aggregation point . The widget container can include one or more service modules including for example a sharing service module that can be used to share the widget . In some embodiments the widget container and widget can be served from separate entities. For example the widget container can be served from widget sharing host when requested at for example network entity and widget can be served from the widget server after a reference to the widget has been accessed at the widget container. In some embodiments the content aggregation point such as a webpage can be served from yet a different entity. In some embodiments the widget container can be dynamically served and modified based on metadata associated with the widget and or widget container. In some embodiments a widget that is not contained in a widget container can be configured to invoke various functions associated with service modules such as those listed above via an API.

In some embodiments the widget sharing host can be configured to control the sharing e.g. distribution of widgets based on a content rules. More details related to the control of widget sharing based on content rules are set forth in co pending application Ser. No. 11 682 639 Method and Apparatus for Widget and Widget Container Distribution Control Based on Content Rules which is incorporated herein by reference in its entirety.

In some embodiments the widget sharing host is not in communication with for example network entity during a time period between sending of the widget precursor line and receipt of the sharing signal line . In some embodiments during this time period only tracking data associated with the widget is transmitted from the network entity . In some embodiments during this time period only data related to a service module not shown associated with the widget is transmitted from the network entity . In some embodiments the functionality of the widget sharing host can be included in e.g. distributed within a set of widget sharing host .

As shown in at least a portion of an instance of a widget is received at a source content aggregation point of a source network entity at . When the portion of the widget instance is received the portion of the widget instance can be executed at the source content aggregation point. For example in some embodiments the portion of the widget instance can be displayed.

After at least a portion of the widget instance has been received at a share module associated with the widget is executed at . The share module can be a share module included in a widget container containing the widget. In some embodiments a function associated with the share module can be invoked via an API associated with the share module. In some embodiments the share module can be included in a content aggregation point e.g. webpage or a mobile content vehicle e.g. a WAP page .

A widget identifier associated with the widget is obtained and sent to a widget sharing host in a sharing signal at . The widget identifier can be obtained using the share module and sent to the widget sharing host in a sharing signal defined using the share module. In some embodiments the widget identifier can be associated with a set of widgets that includes more than one configuration e.g. formats protocols of a single widget. One or more configurations of the single widget from the set of widgets can be associated with a platform of a network entity. For example a first widget can have a configuration that is compatible with a particular platform of a mobile phone and a second widget can have a configuration that is compatible with a different platform. The first widget and the second widget can be associated with a single widget identifier because the first widget and the second widget have substantially the same content despite having different configurations.

In some embodiments the sharing signal can be generated by a sharing module associated with the widget. In some embodiments the sharing module can be referred to as a placement module. For example the sharing module can be included in e.g. integrated within a widget container containing the widget. In some embodiments the sharing signal can be defined based on a sharing module included in the content aggregation point or trigger via a link included in a content aggregation point.

In some embodiments the sharing signal can include an indicator of a sharing target such as a particular content aggregation point or destination network entity. In some embodiments the sharing target can be an address associated with a content aggregation point or an address associated with an entity such as a destination network entity. In some embodiments the sharing target can be for example a telephone number associated with a mobile device a handle associated with a user of a service or a username.

A placement identifier for association with a placement of the widget at a destination content aggregation point of a destination network entity is defined at . The placement identifier can be defined at the widget container host and can be for example a globally unique identifier. In some embodiments the placement identifier associated with placement of the widget at the destination content aggregation point can be associated with a placement identifier of placement of the widget at the source content aggregation point to define parentage of the widget. In some embodiments the placement identifier can be defined at for example a share module rather than at the widget sharing host.

In some embodiments the sharing signal can include other information in addition to that described above. For example the sharing signal can include metadata associated with a widget e.g. user preferences . The metadata can be defined at a source network entity.

A first widget precursor can be defined and sent to the destination network entity at . In some embodiments the first widget precursor can be defined at and sent from the widget sharing host. In some embodiments a link associated with the first widget precursor can be aliased at for example a domain name service DNS server. For example if the first widget precursor is an SMS message a link associated with the SMS message can be aliased at for example a domain name service DNS server. In some embodiments the widget sharing host can be configured to trigger a separate network entity to define and send the first widget precursor to the destination network entity. In some embodiments the proxy device can be configured to modify any portion of the SMS message e.g. text portion link within the SMS message .

In some embodiments the first widget precursor can include the placement identifier and the widget identifier. If the destination network entity is a handheld mobile device the first widget precursor can be a text based message such as short message service SMS message that includes the placement identifier and the widget identifier. In some embodiments the widget sharing host can trigger an SMS proxy device to define and send the SMS message to the destination network entity. In some embodiments a widget precursor sent to a handheld mobile device can be referred to as a mobile widget precursor.

A user preference and or a capability indicator is received from the destination content aggregation point in response to the first widget precursor at . The capability indicator can be an indicator of a capability associated with the destination content aggregation point and or the destination network entity. In some embodiments the capability indicator can be an indicator of the platform of and or resources available at the destination network entity. In some embodiments the capability indicator can be for example an indicator of a capability of an application configured to process a widget and or a widget container associated with the widget. The application can be for example a web browser or a mobile content processing application e.g. WAP browser . In some embodiments a user preference can be received from the source network entity in for example a sharing signal.

A second widget precursor that is associated with a widget reference is determined and sent based on the capability indicator the user preference and or the widget identifier at . For example a widget reference to a widget that is compatible with a particular destination content aggregation point and or destination network entity can be determined based on the capability indicator user preference and or the widget identifier. In some embodiments a link associated with the second widget precursor can be aliased at for example a domain name service DNS server. In some embodiments a service module associated with the widget can be selected based on the capability indicator user preference and or the widget identifier.

In some embodiments the second widget precursor can be for example a widget container a webpage and or a WAP page that includes the widget reference. In some embodiments the second widget precursor can be a reference to a different widget precursor e.g. a reference to a widget container that includes a link to the widget .

If the second widget precursor is for example a WAP page or a webpage the widget reference can be included in the WAP page or the webpage as a link. In some embodiments the widget reference can be configured such that the widget reference e.g. link can be accessed in response to a user triggered interaction with the widget reference at the destination network entity.

If the second widget precursor is a widget container or a reference to a widget container the widget reference can be contained e.g. integrated into in the widget container or included in the widget container as a link that can be accessed in response to a use triggered interaction at the destination network entity. In some embodiments the link can be dynamically included in the widget container when the widget container is generated in response to a reference to the widget being accessed from a content aggregation point. In some embodiments the widget sharing host can trigger a determination of and or sending of the second widget precursor.

The widget reference associated with the second widget precursor is accessed at the destination content aggregation point at . When the widget reference is accessed a request for an instance of the widget can be sent to a widget server. In some embodiments the widget reference can be configured so that the widget reference is automatically accessed at the destination content aggregation point. For example the widget reference can be included within a portion of software associated with the second widget precursor. When the software of the second widget precursor is executed the widget reference can be accessed. In some embodiments if the second widget precursor is a reference to for example a widget container that includes the widget reference the widget container can be requested received first and the widget reference can subsequently be accessed from the widget container.

An instance of the widget is received at the destination network entity at in response to the widget reference being accessed at . The instance of the widget can be sent from a widget server in response to a request received from the destination network entity. The instance of the widget can be receive at the destination content aggregation point.

At least a portion of the widget is executed at the destination content aggregation point of the destination network entity at . For example in some embodiments the widget can be displayed at the destination content aggregation point. The portion of the widget can be executed in response to a user triggered interaction.

In some embodiments an instance of the widget can be shared with a different content aggregation point. For example as shown in the destination content aggregation point can function as a source content aggregation point at and can share the widget with another content aggregation point.

In some embodiments only one widget precursor can be sent rather than two widget precursors. For example if it is determined based on a sharing signal that the destination network entity is a particular type of device e.g. determine that destination network entity is a mobile phone because sharing signal indicates destination based on a phone number . In this scenario a single widget precursor that is a mobile content vehicle that includes a reference to a widget can be sent to the destination network entity. In some embodiments if the widget precursor is a widget e.g. WAP page the widget precursor can be sent without additional linking to a second widget precursor or an additional widget.

In some embodiments the steps described in can be performed in a different order and or at different locations than specified in the figure. For example the user preference can be received before a placement identifier is defined. For example the widget sharing host can trigger a separate entity to perform functions associated with the widget sharing host.

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. For example the module for handling tracking information from multiple instances of widgets described herein can include various combinations and or sub combinations of the components and or features of the different embodiments described. Although described with reference to use with multiple physical or virtual servers it should be understood that the method for handling tracking information associated with instances of widgets can be used with other computing devices or computing entities. Embodiments of the module for handling tracking information can also include processes different from those described herein. For example the module for handling tracking information can be configured to collect process analyze modify and or organize third party data before use.

Some embodiments include a processor and a related processor readable medium having instructions or computer code thereon for performing various processor implemented operations. Such processors can be implemented as hardware modules such as embedded microprocessors microprocessors as part of a computer system Application Specific Integrated Circuits ASICs and Programmable Logic Devices PLDs . Such processors can also be implemented as one or more software modules in programming languages as Java C C assembly a hardware description language or any other suitable programming language.

A processor according to some embodiments includes media and computer code also can be referred to as code specially designed and constructed for the specific purpose or purposes. Examples of processor readable media include but are not limited to magnetic storage media such as hard disks floppy disks and magnetic tape optical storage media such as Compact Disc Digital Video Discs CD DVDs Compact Disc Read Only Memories CD ROMs and holographic devices magneto optical storage media such as optical disks and read only memory ROM and random access memory RAM devices. Examples of computer code include but are not limited to micro code or micro instructions machine instructions such as produced by a compiler and files containing higher level instructions that are executed by a computer using an interpreter. For example an embodiment may be implemented using Java C or other object oriented programming language and development tools. Additional examples of computer code include but are not limited to control signals encrypted code and compressed code.

