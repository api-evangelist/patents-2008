---

title: Systems and methods for GSLB remote service monitoring
abstract: The present invention provides improvements to the integration between a metric exchange protocol and a monitoring mechanism supporting load balancing by a Global Server Load Balancing (GSLB) appliance in a GSLB hierarchy of appliances, using a method for triggering a monitor on a remote service. The method includes receiving, by a first appliance, metrics of a second appliance via a metric exchange connection between the first and second appliances. The first appliance includes a GSLB service and identifies a service provided via the second appliance as a remote service for GSLB. The first appliance may identify via the metrics that a state of the service is up, and determine that the metric exchange connection is down. Responsive to the determination, the first appliance may trigger a monitor to monitor the status of the service. Further, the first appliance may obtain via the monitor a second status of the service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08171124&OS=08171124&RS=08171124
owner: Citrix Systems, Inc.
number: 08171124
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20081125
---
The present application generally relates to data communication networks. In particular the present appliance relates to systems and methods for triggering a monitor for monitoring a remote service in a global server load balancing GSLB environment.

A corporate or enterprise may deploy various services across a network to serve users from many areas. A user may use a client machine to request to access a service such as a web server provided by the enterprise. The enterprise in order to improve the access to this service may deploy multiple servers at various geographical locations in order to expedite the access and meet the demand of users. Similarly the enterprise may provide a plurality of server farms positioned at a variety of sites and including any number of servers capable of processing the client s request. The enterprise may use a load balancer to manage network traffic across these servers minimizing the network congestion and improving the service provided. Similarly in a global load balancing system the enterprise may also use a global server load balancer GSLB to manage access to each of the load balancing appliances at different sites and further help in evenly balancing the network traffic across the enterprise servers.

Global load balancing systems may be supported by metric exchange protocols and monitoring mechanisms to communicate load balancing metrics between load balancing appliances. A metric exchange protocol and a monitoring mechanism may operate in parallel to supplement and or backup each other. However there may be significant overheads from increased network traffic when a metric exchange protocol operates in parallel with a monitoring mechanism. Moreover in a global load balancing system a site failure flagged by a metric exchange protocol or a monitoring mechanism may trigger non optimal load balancing operations instead of leveraging on or extending from available monitoring capabilities between the metric exchange protocol and the monitoring mechanism.

A load balancing system typically monitors the status of a plurality of remote and or local services to determine load balancing operations. The present disclosure provides improvements to load balancing by improving integration between a metric exchange protocol and a monitoring mechanism to support load balancing monitoring functions. By configuring a load balancing service to detect a status of the metric exchange protocol in conjunction with service status a monitoring mechanism can be dynamically triggered to monitor and or validate the status of a service. For example if the metric exchange protocol does not appear to operate correctly and or the service status may not be correct monitoring operations can be triggered.

In one aspect a method for triggering a monitor on a remote service of a Global Server Load Balancing GSLB appliance in a GSLB hierarchy of appliances includes receiving by a first appliance metrics of a second appliance via a metric exchange connection between the first appliance and the second appliance. The first appliance includes a GSLB service and identifies a service provided via the second appliance as a remote service for GSLB. The first appliance may identify via the metrics that a state of the service provided via the second appliance is up. The first appliance may also determine that the metric exchange connection is down. Responsive to the determination the first appliance may trigger a monitor to monitor the status of the service provided via the second appliance. Further the first appliance may obtain via the monitor a second status of the service

Responsive to the determination that the metric exchange connection is down the first appliance enables a monitor bound to a service. In one embodiment responsive to obtaining the second status of the service the first appliance may determine via the monitor that the second state of the service is up. In another embodiment responsive to obtaining the second status of the service the first appliance may determine via the monitor that the second state of the service is down. In some embodiments responsive to identifying via the metrics that the state of the service provided via the second appliance is up the first appliance may determine that the metric exchange connection is up and that the second appliance identifies a state as down and an effective state as down. In other embodiments the first appliance may determine that the metric exchange connection is up and that the second appliance identifies a state as down and an effective state as up. The first appliance may determine that the metric exchange connection is up and that the second appliance identifies a state of the service provided via the second appliance as down. The first appliance may determine that that an effective state of the service provided via the second appliance is identified as down. The first appliance may determine that an effective state of the service provided via the second appliance is identified as up.

In some embodiments responsive to triggering a monitor to monitor the status of the service provided via the second appliance the first appliance may determine that the second state of the service is down. In other embodiments responsive to triggering a monitor to monitor the status of the service provided via the second appliance the first appliance may determine that a second state of the service is up. In some embodiments responsive to receiving metrics of a second appliance via a metric exchange connection between the first appliance and the second appliance the first appliance may identify via the metrics of the second appliance that a state of the service is up if one or more servers associated with the service is running. In other embodiments responsive to receiving metrics of a second appliance via a metric exchange connection between the first appliance and the second appliance the first appliance may identify via metrics of the second appliance that an effective state of the service is down if a threshold of the service has been exceeded.

In another aspect a method for triggering a monitor on a remote service of a Global Server Load Balancing GSLB appliance in a GSLB hierarchy of appliances includes receiving by a first appliance metrics of a second appliance via a metric exchange connection between the first appliance and the second appliance. The first appliance includes a GSLB service and identifies a service provided via the second appliance as a remote service for GSLB. The first appliance may identify that the metric exchange connection is up. The first appliance may determine that a state of the service of the second appliance is down and that the effective state of the service is down the state indicating whether at least one server of the service is up the effective state indicating whether the service has exceeded a threshold. Responsive to the determination the first appliance may trigger a monitor to monitor the status of the service provided via the second appliance. Further the first appliance may obtain via the monitor a second status of the service.

In one embodiment responsive to identifying that the metric exchange connection is up the first appliance may determine that the metric exchange connection is down. In another embodiment responsive to identifying that the metric exchange connection is up the first appliance may determine that the metric exchange connection is up and that the second appliance identifies a state as down and an effective state as up. In some embodiments responsive to identifying that the metric exchange connection is up the first appliance may determine via metrics of the second appliance that the state of the service is up if one or more servers associated with the service is running. Further responsive to identifying that the metric exchange connection is up the first appliance may determine via metrics of the second appliance that an effective state of the service is up if a threshold of the service has not been exceeded.

In some embodiments responsive to the determination that the state of the service of the second appliance is down and that the effective state of the service is down the first appliance may enable the monitor bound to the service. Responsive to the metric exchange connection being down the first appliance may trigger the monitor. Responsive to triggering the monitor the first appliance may determine that the second state of the service is up. In some embodiments responsive to obtaining the second state of the service the first appliance may determine via the monitor that the second state of the service is up. Responsive to obtaining the second state of the service the first appliance may determine via the monitor that the second state of the service is down. In one embodiment the first appliance identifies a monitor bound to the service provided via the second appliance.

The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements.

For purposes of reading the description of the various embodiments of the present invention below the following descriptions of the sections of the specification and their respective contents may be helpful 

Prior to discussing the specifics of embodiments of the systems and methods of an appliance and or client it may be helpful to discuss the network and computing environments in which such embodiments may be deployed. Referring now to an embodiment of a network environment is depicted. In brief overview the network environment comprises one or more clients also generally referred to as local machine s or client s in communication with one or more servers also generally referred to as server s or remote machine s via one or more networks generally referred to as network . In some embodiments a client communicates with a server via an appliance .

Although shows a network and a network between the clients and the servers the clients and the servers may be on the same network . The networks and can be the same type of network or different types of networks. The network and or the network can be a local area network LAN such as a company Intranet a metropolitan area network MAN or a wide area network WAN such as the Internet or the World Wide Web. In one embodiment network may be a private network and network may be a public network. In some embodiments network may be a private network and network a public network. In another embodiment networks and may both be private networks. In some embodiments clients may be located at a branch office of a corporate enterprise communicating via a WAN connection over the network to the servers located at a corporate data center.

The network and or be any type and or form of network and may include any of the following a point to point network a broadcast network a wide area network a local area network a telecommunications network a data communication network a computer network an ATM Asynchronous Transfer Mode network a SONET Synchronous Optical Network network a SDH Synchronous Digital Hierarchy network a wireless network and a wireline network. In some embodiments the network may comprise a wireless link such as an infrared channel or satellite band. The topology of the network and or may be a bus star or ring network topology. The network and or and network topology may be of any such network or network topology as known to those ordinarily skilled in the art capable of supporting the operations described herein.

As shown in the appliance which also may be referred to as an interface unit or gateway is shown between the networks and . In some embodiments the appliance may be located on network . For example a branch office of a corporate enterprise may deploy an appliance at the branch office. In other embodiments the appliance may be located on network . For example an appliance may be located at a corporate data center. In yet another embodiment a plurality of appliances may be deployed on network . In some embodiments a plurality of appliances may be deployed on network . In one embodiment a first appliance communicates with a second appliance . In other embodiments the appliance could be a part of any client or server on the same or different network as the client . One or more appliances may be located at any point in the network or network communications path between a client and a server .

In some embodiments the appliance comprises any of the network devices manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. referred to as Citrix NetScaler devices. In other embodiments the appliance includes any of the product embodiments referred to as WebAccelerator and BigIP manufactured by F5 Networks Inc. of Seattle Wash. In another embodiment the appliance includes any of the DX acceleration device platforms and or the SSL VPN series of devices such as SA 700 SA 2000 SA 4000 and SA 6000 devices manufactured by Juniper Networks Inc. of Sunnyvale Calif. In yet another embodiment the appliance includes any application acceleration and or security related appliances and or software manufactured by Cisco Systems Inc. of San Jose Calif. such as the Cisco ACE Application Control Engine Module service software and network modules and Cisco AVS Series Application Velocity System.

In one embodiment the system may include multiple logically grouped servers . In these embodiments the logical group of servers may be referred to as a server farm . In some of these embodiments the serves may be geographically dispersed. In some cases a farm may be administered as a single entity. In other embodiments the server farm comprises a plurality of server farms . In one embodiment the server farm executes one or more applications on behalf of one or more clients .

The servers within each farm can be heterogeneous. One or more of the servers can operate according to one type of operating system platform e.g. WINDOWS NT manufactured by Microsoft Corp. of Redmond Wash. while one or more of the other servers can operate on according to another type of operating system platform e.g. Unix or Linux . The servers of each farm do not need to be physically proximate to another server in the same farm . Thus the group of servers logically grouped as a farm may be interconnected using a wide area network WAN connection or medium area network MAN connection. For example a farm may include servers physically located in different continents or different regions of a continent country state city campus or room. Data transmission speeds between servers in the farm can be increased if the servers are connected using a local area network LAN connection or some form of direct connection.

Servers may be referred to as a file server application server web server proxy server or gateway server. In some embodiments a server may have the capacity to function as either an application server or as a master application server. In one embodiment a server may include an Active Directory. The clients may also be referred to as client nodes or endpoints. In some embodiments a client has the capacity to function as both a client node seeking access to applications on a server and as an application server providing access to hosted applications for other clients 

In some embodiments a client communicates with a server . In one embodiment the client communicates directly with one of the servers in a farm . In another embodiment the client executes a program neighborhood application to communicate with a server in a farm . In still another embodiment the server provides the functionality of a master node. In some embodiments the client communicates with the server in the farm through a network . Over the network the client can for example request execution of various applications hosted by the servers in the farm and receive output of the results of the application execution for display. In some embodiments only the master node provides the functionality required to identify and provide address information associated with a server hosting a requested application.

In one embodiment the server provides functionality of a web server. In another embodiment the server receives requests from the client forwards the requests to a second server and responds to the request by the client with a response to the request from the server . In still another embodiment the server acquires an enumeration of applications available to the client and address information associated with a server hosting an application identified by the enumeration of applications. In yet another embodiment the server presents the response to the request to the client using a web interface. In one embodiment the client communicates directly with the server to access the identified application. In another embodiment the client receives application output data such as display data generated by an execution of the identified application on the server .

Referring now to an embodiment of a network environment deploying multiple appliances is depicted. A first appliance may be deployed on a first network and a second appliance on a second network . For example a corporate enterprise may deploy a first appliance at a branch office and a second appliance at a data center. In another embodiment the first appliance and second appliance are deployed on the same network or network . For example a first appliance may be deployed for a first server farm and a second appliance may be deployed for a second server farm . In another example a first appliance may be deployed at a first branch office while the second appliance is deployed at a second branch office . In some embodiments the first appliance and second appliance work in cooperation or in conjunction with each other to accelerate network traffic or the delivery of application and data between a client and a server

Referring now to another embodiment of a network environment deploying the appliance with one or more other types of appliances such as between one or more WAN optimization appliance is depicted. For example a first WAN optimization appliance is shown between networks and and s second WAN optimization appliance may be deployed between the appliance and one or more servers . By way of example a corporate enterprise may deploy a first WAN optimization appliance at a branch office and a second WAN optimization appliance at a data center. In some embodiments the appliance may be located on network . In other embodiments the appliance may be located on network . In some embodiments the appliance may be located on network or network . In one embodiment the appliance and are on the same network. In another embodiment the appliance and are on different networks. In another example a first WAN optimization appliance may be deployed for a first server farm and a second WAN optimization appliance for a second server farm 

In one embodiment the appliance is a device for accelerating optimizing or otherwise improving the performance operation or quality of service of any type and form of network traffic such as traffic to and or from a WAN connection. In some embodiments the appliance is a performance enhancing proxy. In other embodiments the appliance is any type and form of WAN optimization or acceleration device sometimes also referred to as a WAN optimization controller. In one embodiment the appliance is any of the product embodiments referred to as WANScaler manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. In other embodiments the appliance includes any of the product embodiments referred to as BIG IP link controller and WANjet manufactured by F5 Networks Inc. of Seattle Wash. In another embodiment the appliance includes any of the WX and WXC WAN acceleration device platforms manufactured by Juniper Networks Inc. of Sunnyvale Calif. In some embodiments the appliance includes any of the steelhead line of WAN optimization appliances manufactured by Riverbed Technology of San Francisco Calif. In other embodiments the appliance includes any of the WAN related devices manufactured by Expand Networks Inc. of Roseland N.J. In one embodiment the appliance includes any of the WAN related appliances manufactured by Packeteer Inc. of Cupertino Calif. such as the PacketShaper iShared and SkyX product embodiments provided by Packeteer. In yet another embodiment the appliance includes any WAN related appliances and or software manufactured by Cisco Systems Inc. of San Jose Calif. such as the Cisco Wide Area Network Application Services software and network modules and Wide Area Network engine appliances.

In one embodiment the appliance provides application and data acceleration services for branch office or remote offices. In one embodiment the appliance includes optimization of Wide Area File Services WAFS . In another embodiment the appliance accelerates the delivery of files such as via the Common Internet File System CIFS protocol. In other embodiments the appliance provides caching in memory and or storage to accelerate delivery of applications and data. In one embodiment the appliance provides compression of network traffic at any level of the network stack or at any protocol or network layer. In another embodiment the appliance provides transport layer protocol optimizations flow control performance enhancements or modifications and or management to accelerate delivery of applications and data over a WAN connection. For example in one embodiment the appliance provides Transport Control Protocol TCP optimizations. In other embodiments the appliance provides optimizations flow control performance enhancements or modifications and or management for any session or application layer protocol.

In another embodiment the appliance encoded any type and form of data or information into custom or standard TCP and or IP header fields or option fields of network packet to announce presence functionality or capability to another appliance . In another embodiment an appliance may communicate with another appliance using data encoded in both TCP and or IP header fields or options. For example the appliance may use TCP option s or IP header fields or options to communicate one or more parameters to be used by the appliances in performing functionality such as WAN acceleration or for working in conjunction with each other.

In some embodiments the appliance preserves any of the information encoded in TCP and or IP header and or option fields communicated between appliances and . For example the appliance may terminate a transport layer connection traversing the appliance such as a transport layer connection from between a client and a server traversing appliances and . In one embodiment the appliance identifies and preserves any encoded information in a transport layer packet transmitted by a first appliance via a first transport layer connection and communicates a transport layer packet with the encoded information to a second appliance via a second transport layer connection.

Referring now to a network environment for delivering and or operating a computing environment on a client is depicted. In some embodiments a server includes an application delivery system for delivering a computing environment or an application and or data file to one or more clients . In brief overview a client is in communication with a server via network and appliance . For example the client may reside in a remote office of a company e.g. a branch office and the server may reside at a corporate data center. The client comprises a client agent and a computing environment . The computing environment may execute or operate an application that accesses processes or uses a data file. The computing environment application and or data file may be delivered via the appliance and or the server .

In some embodiments the appliance accelerates delivery of a computing environment or any portion thereof to a client . In one embodiment the appliance accelerates the delivery of the computing environment by the application delivery system . For example the embodiments described herein may be used to accelerate delivery of a streaming application and data file processable by the application from a central corporate data center to a remote user location such as a branch office of the company. In another embodiment the appliance accelerates transport layer traffic between a client and a server . The appliance may provide acceleration techniques for accelerating any transport layer payload from a server to a client such as 1 transport layer connection pooling 2 transport layer connection multiplexing 3 transport control protocol buffering 4 compression and 5 caching. In some embodiments the appliance provides load balancing of servers in responding to requests from clients . In other embodiments the appliance acts as a proxy or access server to provide access to the one or more servers . In another embodiment the appliance provides a secure virtual private network connection from a first network of the client to the second network of the server such as an SSL VPN connection. It yet other embodiments the appliance provides application firewall security control and management of the connection and communications between a client and a server .

In some embodiments the application delivery management system provides application delivery techniques to deliver a computing environment to a desktop of a user remote or otherwise based on a plurality of execution methods and based on any authentication and authorization policies applied via a policy engine . With these techniques a remote user may obtain a computing environment and access to server stored applications and data files from any network connected device . In one embodiment the application delivery system may reside or execute on a server . In another embodiment the application delivery system may reside or execute on a plurality of servers . In some embodiments the application delivery system may execute in a server farm . In one embodiment the server executing the application delivery system may also store or provide the application and data file. In another embodiment a first set of one or more servers may execute the application delivery system and a different server may store or provide the application and data file. In some embodiments each of the application delivery system the application and data file may reside or be located on different servers. In yet another embodiment any portion of the application delivery system may reside execute or be stored on or distributed to the appliance or a plurality of appliances.

The client may include a computing environment for executing an application that uses or processes a data file. The client via networks and appliance may request an application and data file from the server . In one embodiment the appliance may forward a request from the client to the server . For example the client may not have the application and data file stored or accessible locally. In response to the request the application delivery system and or server may deliver the application and data file to the client . For example in one embodiment the server may transmit the application as an application stream to operate in computing environment on client .

In some embodiments the application delivery system comprises any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application delivery system may deliver one or more applications to clients or users via a remote display protocol or otherwise via remote based or server based computing. In another embodiment the application delivery system may deliver one or more applications to clients or users via steaming of the application.

In one embodiment the application delivery system includes a policy engine for controlling and managing the access to selection of application execution methods and the delivery of applications. In some embodiments the policy engine determines the one or more applications a user or client may access. In another embodiment the policy engine determines how the application should be delivered to the user or client e.g. the method of execution. In some embodiments the application delivery system provides a plurality of delivery techniques from which to select a method of application execution such as a server based computing streaming or delivering the application locally to the client for local execution.

In one embodiment a client requests execution of an application program and the application delivery system comprising a server selects a method of executing the application program. In some embodiments the server receives credentials from the client . In another embodiment the server receives a request for an enumeration of available applications from the client . In one embodiment in response to the request or receipt of credentials the application delivery system enumerates a plurality of application programs available to the client . The application delivery system receives a request to execute an enumerated application. The application delivery system selects one of a predetermined number of methods for executing the enumerated application for example responsive to a policy of a policy engine. The application delivery system may select a method of execution of the application enabling the client to receive application output data generated by execution of the application program on a server . The application delivery system may select a method of execution of the application enabling the local machine to execute the application program locally after retrieving a plurality of application files comprising the application. In yet another embodiment the application delivery system may select a method of execution of the application to stream the application via the network to the client .

A client may execute operate or otherwise provide an application which can be any type and or form of software program or executable instructions such as any type and or form of web browser web based client client server application a thin client computing client an ActiveX control or a Java applet or any other type and or form of executable instructions capable of executing on client . In some embodiments the application may be a server based or a remote based application executed on behalf of the client on a server . In one embodiments the server may display output to the client using any thin client or remote display protocol such as the Independent Computing Architecture ICA protocol manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. or the Remote Desktop Protocol RDP manufactured by the Microsoft Corporation of Redmond Wash. The application can use any type of protocol and it can be for example an HTTP client an FTP client an Oscar client or a Telnet client. In other embodiments the application comprises any type of software related to VoIP communications such as a soft IP telephone. In further embodiments the application comprises any application related to real time data communications such as applications for streaming video and or audio.

In some embodiments the server or a server farm may be running one or more applications such as an application providing a thin client computing or remote display presentation application. In one embodiment the server or server farm executes as an application any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application is an ICA client developed by Citrix Systems Inc. of Fort Lauderdale Fla. In other embodiments the application includes a Remote Desktop RDP client developed by Microsoft Corporation of Redmond Wash. Also the server may run an application which for example may be an application server providing email services such as Microsoft Exchange manufactured by the Microsoft Corporation of Redmond Wash. a web or Internet server or a desktop sharing server or a collaboration server. In some embodiments any of the applications may comprise any type of hosted service or products such as GoToMeeting provided by Citrix Online Division Inc. of Santa Barbara Calif. WebEx provided by WebEx Inc. of Santa Clara Calif. or Microsoft Office Live Meeting provided by Microsoft Corporation of Redmond Wash.

Still referring to an embodiment of the network environment may include a monitoring server A. The monitoring server A may include any type and form performance monitoring service . The performance monitoring service may include monitoring measurement and or management software and or hardware including data collection aggregation analysis management and reporting. In one embodiment the performance monitoring service includes one or more monitoring agents . The monitoring agent includes any software hardware or combination thereof for performing monitoring measurement and data collection activities on a device such as a client server or an appliance . In some embodiments the monitoring agent includes any type and form of script such as Visual Basic script or Javascript. In one embodiment the monitoring agent executes transparently to any application and or user of the device. In some embodiments the monitoring agent is installed and operated unobtrusively to the application or client. In yet another embodiment the monitoring agent is installed and operated without any instrumentation for the application or device.

In some embodiments the monitoring agent monitors measures and collects data on a predetermined frequency. In other embodiments the monitoring agent monitors measures and collects data based upon detection of any type and form of event. For example the monitoring agent may collect data upon detection of a request for a web page or receipt of an HTTP response. In another example the monitoring agent may collect data upon detection of any user input events such as a mouse click. The monitoring agent may report or provide any monitored measured or collected data to the monitoring service . In one embodiment the monitoring agent transmits information to the monitoring service according to a schedule or a predetermined frequency. In another embodiment the monitoring agent transmits information to the monitoring service upon detection of an event.

In some embodiments the monitoring service and or monitoring agent performs monitoring and performance measurement of any network resource or network infrastructure element such as a client server server farm appliance appliance or network connection. In one embodiment the monitoring service and or monitoring agent performs monitoring and performance measurement of any transport layer connection such as a TCP or UDP connection. In another embodiment the monitoring service and or monitoring agent monitors and measures network latency. In yet one embodiment the monitoring service and or monitoring agent monitors and measures bandwidth utilization.

In other embodiments the monitoring service and or monitoring agent monitors and measures end user response times. In some embodiments the monitoring service performs monitoring and performance measurement of an application. In another embodiment the monitoring service and or monitoring agent performs monitoring and performance measurement of any session or connection to the application. In one embodiment the monitoring service and or monitoring agent monitors and measures performance of a browser. In another embodiment the monitoring service and or monitoring agent monitors and measures performance of HTTP based transactions. In some embodiments the monitoring service and or monitoring agent monitors and measures performance of a Voice over IP VoIP application or session. In other embodiments the monitoring service and or monitoring agent monitors and measures performance of a remote display protocol application such as an ICA client or RDP client. In yet another embodiment the monitoring service and or monitoring agent monitors and measures performance of any type and form of streaming media. In still a further embodiment the monitoring service and or monitoring agent monitors and measures performance of a hosted application or a Software As A Service SaaS delivery model.

In some embodiments the monitoring service and or monitoring agent performs monitoring and performance measurement of one or more transactions requests or responses related to application. In other embodiments the monitoring service and or monitoring agent monitors and measures any portion of an application layer stack such as any .NET or J2EE calls. In one embodiment the monitoring service and or monitoring agent monitors and measures database or SQL transactions. In yet another embodiment the monitoring service and or monitoring agent monitors and measures any method function or application programming interface API call.

In one embodiment the monitoring service and or monitoring agent performs monitoring and performance measurement of a delivery of application and or data from a server to a client via one or more appliances such as appliance and or appliance . In some embodiments the monitoring service and or monitoring agent monitors and measures performance of delivery of a virtualized application. In other embodiments the monitoring service and or monitoring agent monitors and measures performance of delivery of a streaming application. In another embodiment the monitoring service and or monitoring agent monitors and measures performance of delivery of a desktop application to a client and or the execution of the desktop application on the client. In another embodiment the monitoring service and or monitoring agent monitors and measures performance of a client server application.

In one embodiment the monitoring service and or monitoring agent is designed and constructed to provide application performance management for the application delivery system . For example the monitoring service and or monitoring agent may monitor measure and manage the performance of the delivery of applications via the Citrix Presentation Server. In this example the monitoring service and or monitoring agent monitors individual ICA sessions. The monitoring service and or monitoring agent may measure the total and per session system resource usage as well as application and networking performance. The monitoring service and or monitoring agent may identify the active servers for a given user and or user session. In some embodiments the monitoring service and or monitoring agent monitors back end connections between the application delivery system and an application and or database server. The monitoring service and or monitoring agent may measure network latency delay and volume per user session or ICA session.

In some embodiments the monitoring service and or monitoring agent measures and monitors memory usage for the application delivery system such as total memory usage per user session and or per process. In other embodiments the monitoring service and or monitoring agent measures and monitors CPU usage the application delivery system such as total CPU usage per user session and or per process. In another embodiments the monitoring service and or monitoring agent measures and monitors the time required to log in to an application a server or the application delivery system such as Citrix Presentation Server. In one embodiment the monitoring service and or monitoring agent measures and monitors the duration a user is logged into an application a server or the application delivery system . In some embodiments the monitoring service and or monitoring agent measures and monitors active and inactive session counts for an application server or application delivery system session. In yet another embodiment the monitoring service and or monitoring agent measures and monitors user session latency.

In yet further embodiments the monitoring service and or monitoring agent measures and monitors measures and monitors any type and form of server metrics. In one embodiment the monitoring service and or monitoring agent measures and monitors metrics related to system memory CPU usage and disk storage. In another embodiment the monitoring service and or monitoring agent measures and monitors metrics related to page faults such as page faults per second. In other embodiments the monitoring service and or monitoring agent measures and monitors round trip time metrics. In yet another embodiment the monitoring service and or monitoring agent measures and monitors metrics related to application crashes errors and or hangs.

In some embodiments the monitoring service and monitoring agent includes any of the product embodiments referred to as EdgeSight manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. In another embodiment the performance monitoring service and or monitoring agent includes any portion of the product embodiments referred to as the TrueView product suite manufactured by the Symphoniq Corporation of Palo Alto Calif. In one embodiment the performance monitoring service and or monitoring agent includes any portion of the product embodiments referred to as the TeaLeaf CX product suite manufactured by the TeaLeaf Technology Inc. of San Francisco Calif. In other embodiments the performance monitoring service and or monitoring agent includes any portion of the business service management products such as the BMC Performance Manager and Patrol products manufactured by BMC Software Inc. of Houston Tex.

The client server and appliance may be deployed as and or executed on any type and form of computing device such as a computer network device or appliance capable of communicating on any type and form of network and performing the operations described herein. depict block diagrams of a computing device useful for practicing an embodiment of the client server or appliance . As shown in each computing device includes a central processing unit and a main memory unit . As shown in a computing device may include a visual display device a keyboard and or a pointing device such as a mouse. Each computing device may also include additional optional elements such as one or more input output devices generally referred to using reference numeral and a cache memory in communication with the central processing unit .

The central processing unit is any logic circuitry that responds to and processes instructions fetched from the main memory unit . In many embodiments the central processing unit is provided by a microprocessor unit such as those manufactured by Intel Corporation of Mountain View Calif. those manufactured by Motorola Corporation of Schaumburg Ill. those manufactured by Transmeta Corporation of Santa Clara Calif. the RS 6000 processor those manufactured by International Business Machines of White Plains N.Y. or those manufactured by Advanced Micro Devices of Sunnyvale Calif. The computing device may be based on any of these processors or any other processor capable of operating as described herein.

Main memory unit may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor such as Static random access memory SRAM Burst SRAM or SynchBurst SRAM BSRAM Dynamic random access memory DRAM Fast Page Mode DRAM FPM DRAM Enhanced DRAM EDRAM Extended Data Output RAM EDO RAM Extended Data Output DRAM EDO DRAM Burst Extended Data Output DRAM BEDO DRAM Enhanced DRAM EDRAM synchronous DRAM SDRAM JEDEC SRAM PC100 SDRAM Double Data Rate SDRAM DDR SDRAM Enhanced SDRAM ESDRAM SyncLink DRAM SLDRAM Direct Rambus DRAM DRDRAM or Ferroelectric RAM FRAM . The main memory may be based on any of the above described memory chips or any other available memory chips capable of operating as described herein. In the embodiment shown in the processor communicates with main memory via a system bus described in more detail below . depicts an embodiment of a computing device in which the processor communicates directly with main memory via a memory port . For example in the main memory may be DRDRAM.

The computing device may support any suitable installation device such as a floppy disk drive for receiving floppy disks such as 3.5 inch 5.25 inch disks or ZIP disks a CD ROM drive a CD R RW drive a DVD ROM drive tape drives of various formats USB device hard drive or any other device suitable for installing software and programs such as any client agent or portion thereof. The computing device may further comprise a storage device such as one or more hard disk drives or redundant arrays of independent disks for storing an operating system and other related software and for storing application software programs such as any program related to the client agent . Optionally any of the installation devices could also be used as the storage device . Additionally the operating system and the software can be run from a bootable medium for example a bootable CD such as KNOPPIX a bootable CD for GNU Linux that is available as a GNU Linux distribution from knoppix.net.

Furthermore the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56 kb X.25 broadband connections e.g. ISDN Frame Relay ATM wireless connections or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein.

A wide variety of I O devices may be present in the computing device . Input devices include keyboards mice trackpads trackballs microphones and drawing tablets. Output devices include video displays speakers inkjet printers laser printers and dye sublimation printers. The I O devices may be controlled by an I O controller as shown in . The I O controller may control one or more I O devices such as a keyboard and a pointing device e.g. a mouse or optical pen. Furthermore an I O device may also provide storage and or an installation medium for the computing device . In still other embodiments the computing device may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry Inc. of Los Alamitos Calif.

In some embodiments the computing device may comprise or be connected to multiple display devices which each may be of the same or different type and or form. As such any of the I O devices and or the I O controller may comprise any type and or form of suitable hardware software or combination of hardware and software to support enable or provide for the connection and use of multiple display devices by the computing device . For example the computing device may include any type and or form of video adapter video card driver and or library to interface communicate connect or otherwise use the display devices . In one embodiment a video adapter may comprise multiple connectors to interface to multiple display devices . In other embodiments the computing device may include multiple video adapters with each video adapter connected to one or more of the display devices . In some embodiments any portion of the operating system of the computing device may be configured for using multiple displays . In other embodiments one or more of the display devices may be provided by one or more other computing devices such as computing devices and connected to the computing device for example via a network. These embodiments may include any type of software designed and constructed to use another computer s display device as a second display device for the computing device . One ordinarily skilled in the art will recognize and appreciate the various ways and embodiments that a computing device may be configured to have multiple display devices 

In further embodiments an I O device may be a bridge between the system bus and an external communication bus such as a USB bus an Apple Desktop Bus an RS 232 serial connection a SCSI bus a FireWire bus a FireWire 800 bus an Ethernet bus an AppleTalk bus a Gigabit Ethernet bus an Asynchronous Transfer Mode bus a HIPPI bus a Super HIPPI bus a SerialPlus bus a SCI LAMP bus a FibreChannel bus or a Serial Attached small computer system interface bus.

A computing device of the sort depicted in typically operate under the control of operating systems which control scheduling of tasks and access to system resources. The computing device can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include WINDOWS 3.x WINDOWS 95 WINDOWS 98 WINDOWS 2000 WINDOWS NT 3.51 WINDOWS NT 4.0 WINDOWS CE and WINDOWS XP all of which are manufactured by Microsoft Corporation of Redmond Wash. MacOS manufactured by Apple Computer of Cupertino Calif. OS 2 manufactured by International Business Machines of Armonk N.Y. and Linux a freely available operating system distributed by Caldera Corp. of Salt Lake City Utah or any type and or form of a Unix operating system among others.

In other embodiments the computing device may have different processors operating systems and input devices consistent with the device. For example in one embodiment the computer is a Treo 180 270 1060 600 or 650 smart phone manufactured by Palm Inc. In this embodiment the Treo smart phone is operated under the control of the PalmOS operating system and includes a stylus input device as well as a five way navigator device. Moreover the computing device can be any workstation desktop computer laptop or notebook computer server handheld computer mobile telephone any other computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

Hardware layer provides the hardware elements upon which programs and services within kernel space and user space are executed. Hardware layer also provides the structures and elements which allow programs and services within kernel space and user space to communicate data both internally and externally with respect to appliance . As shown in the hardware layer includes a processing unit for executing software programs and services a memory for storing software and data network ports for transmitting and receiving data over a network and an encryption processor for performing functions related to Secure Sockets Layer processing of data transmitted and received over the network. In some embodiments the central processing unit may perform the functions of the encryption processor in a single processor. Additionally the hardware layer may comprise multiple processors for each of the processing unit and the encryption processor . The processor may include any of the processors described above in connection with . In some embodiments the central processing unit may perform the functions of the encryption processor in a single processor. Additionally the hardware layer may comprise multiple processors for each of the processing unit and the encryption processor . For example in one embodiment the appliance comprises a first processor and a second processor . In other embodiments the processor or comprises a multi core processor.

Although the hardware layer of appliance is generally illustrated with an encryption processor processor may be a processor for performing functions related to any encryption protocol such as the Secure Socket Layer SSL or Transport Layer Security TLS protocol. In some embodiments the processor may be a general purpose processor GPP and in further embodiments may be have executable instructions for performing processing of any security related protocol.

Although the hardware layer of appliance is illustrated with certain elements in the hardware portions or components of appliance may comprise any type and form of elements hardware or software of a computing device such as the computing device illustrated and discussed herein in conjunction with . In some embodiments the appliance may comprise a server gateway router switch bridge or other type of computing or network device and have any hardware and or software elements associated therewith.

The operating system of appliance allocates manages or otherwise segregates the available system memory into kernel space and user space . In example software architecture the operating system may be any type and or form of UNIX operating system although the invention is not so limited. As such the appliance can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any network operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or network devices or any other operating system capable of running on the appliance and performing the operations described herein.

The kernel space is reserved for running the kernel including any device drivers kernel extensions or other kernel related software. As known to those skilled in the art the kernel is the core of the operating system and provides access control and management of resources and hardware related elements of the application . In accordance with an embodiment of the appliance the kernel space also includes a number of network services or processes working in conjunction with a cache manager sometimes also referred to as the integrated cache the benefits of which are described in detail further herein. Additionally the embodiment of the kernel will depend on the embodiment of the operating system installed configured or otherwise used by the device .

In one embodiment the device comprises one network stack such as a TCP IP based stack for communicating with the client and or the server . In one embodiment the network stack is used to communicate with a first network such as network and a second network . In some embodiments the device terminates a first transport layer connection such as a TCP connection of a client and establishes a second transport layer connection to a server for use by the client e.g. the second transport layer connection is terminated at the appliance and the server . The first and second transport layer connections may be established via a single network stack . In other embodiments the device may comprise multiple network stacks for example and and the first transport layer connection may be established or terminated at one network stack and the second transport layer connection on the second network stack . For example one network stack may be for receiving and transmitting network packet on a first network and another network stack for receiving and transmitting network packets on a second network. In one embodiment the network stack comprises a buffer for queuing one or more network packets for transmission by the appliance .

As shown in the kernel space includes the cache manager a high speed layer integrated packet engine an encryption engine a policy engine and multi protocol compression logic . Running these components or processes and in kernel space or kernel mode instead of the user space improves the performance of each of these components alone and in combination. Kernel operation means that these components or processes and run in the core address space of the operating system of the device . For example running the encryption engine in kernel mode improves encryption performance by moving encryption and decryption operations to the kernel thereby reducing the number of transitions between the memory space or a kernel thread in kernel mode and the memory space or a thread in user mode. For example data obtained in kernel mode may not need to be passed or copied to a process or thread running in user mode such as from a kernel level data structure to a user level data structure. In another aspect the number of context switches between kernel mode and user mode are also reduced. Additionally synchronization of and communications between any of the components or processes and can be performed more efficiently in the kernel space .

In some embodiments any portion of the components and may run or operate in the kernel space while other portions of these components and may run or operate in user space . In one embodiment the appliance uses a kernel level data structure providing access to any portion of one or more network packets for example a network packet comprising a request from a client or a response from a server . In some embodiments the kernel level data structure may be obtained by the packet engine via a transport layer driver interface or filter to the network stack . The kernel level data structure may comprise any interface and or data accessible via the kernel space related to the network stack network traffic or packets received or transmitted by the network stack . In other embodiments the kernel level data structure may be used by any of the components or processes and to perform the desired operation of the component or process. In one embodiment a component and is running in kernel mode when using the kernel level data structure while in another embodiment the component and is running in user mode when using the kernel level data structure. In some embodiments the kernel level data structure may be copied or passed to a second kernel level data structure or any desired user level data structure.

The cache manager may comprise software hardware or any combination of software and hardware to provide cache access control and management of any type and form of content such as objects or dynamically generated objects served by the originating servers . The data objects or content processed and stored by the cache manager may comprise data in any format such as a markup language or communicated via any protocol. In some embodiments the cache manager duplicates original data stored elsewhere or data previously computed generated or transmitted in which the original data may require longer access time to fetch compute or otherwise obtain relative to reading a cache memory element. Once the data is stored in the cache memory element future use can be made by accessing the cached copy rather than refetching or recomputing the original data thereby reducing the access time. In some embodiments the cache memory element may comprise a data object in memory of device . In other embodiments the cache memory element may comprise memory having a faster access time than memory . In another embodiment the cache memory element may comprise any type and form of storage element of the device such as a portion of a hard disk. In some embodiments the processing unit may provide cache memory for use by the cache manager . In yet further embodiments the cache manager may use any portion and combination of memory storage or the processing unit for caching data objects and other content.

Furthermore the cache manager includes any logic functions rules or operations to perform any embodiments of the techniques of the appliance described herein. For example the cache manager includes logic or functionality to invalidate objects based on the expiration of an invalidation time period or upon receipt of an invalidation command from a client or server . In some embodiments the cache manager may operate as a program service process or task executing in the kernel space and in other embodiments in the user space . In one embodiment a first portion of the cache manager executes in the user space while a second portion executes in the kernel space . In some embodiments the cache manager can comprise any type of general purpose processor GPP or any other type of integrated circuit such as a Field Programmable Gate Array FPGA Programmable Logic Device PLD or Application Specific Integrated Circuit ASIC .

The policy engine may include for example an intelligent statistical engine or other programmable application s . In one embodiment the policy engine provides a configuration mechanism to allow a user to identify specify define or configure a caching policy. Policy engine in some embodiments also has access to memory to support data structures such as lookup tables or hash tables to enable user selected caching policy decisions. In other embodiments the policy engine may comprise any logic rules functions or operations to determine and provide access control and management of objects data or content being cached by the appliance in addition to access control and management of security network traffic network access compression or any other function or operation performed by the appliance . Further examples of specific caching policies are further described herein.

In some embodiments the policy engine may provide a configuration mechanism to allow a user to identify specify define or configure policies directing behavior of any other components or functionality of an appliance including without limitation the components described in such as vServers VPN functions Intranet IP functions switching functions DNS functions acceleration functions application firewall functions and monitoring agents . In other embodiments the policy engine may check evaluate implement or otherwise act in response to any configured policies and may also direct the operation of one or more appliance functions in response to a policy.

The encryption engine comprises any logic business rules functions or operations for handling the processing of any security related protocol such as SSL or TLS or any function related thereto. For example the encryption engine encrypts and decrypts network packets or any portion thereof communicated via the appliance . The encryption engine may also setup or establish SSL or TLS connections on behalf of the client server or appliance . As such the encryption engine provides offloading and acceleration of SSL processing. In one embodiment the encryption engine uses a tunneling protocol to provide a virtual private network between a client and a server . In some embodiments the encryption engine is in communication with the Encryption processor . In other embodiments the encryption engine comprises executable instructions running on the Encryption processor .

The multi protocol compression engine comprises any logic business rules function or operations for compressing one or more protocols of a network packet such as any of the protocols used by the network stack of the device . In one embodiment multi protocol compression engine compresses bi directionally between clients and servers any TCP IP based protocol including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. In other embodiments multi protocol compression engine provides compression of Hypertext Markup Language HTML based protocols and in some embodiments provides compression of any markup languages such as the Extensible Markup Language XML . In one embodiment the multi protocol compression engine provides compression of any high performance protocol such as any protocol designed for appliance to appliance communications. In another embodiment the multi protocol compression engine compresses any payload of or any communication using a modified transport control protocol such as Transaction TCP T TCP TCP with selection acknowledgements TCP SACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol.

As such the multi protocol compression engine accelerates performance for users accessing applications via desktop clients e.g. Microsoft Outlook and non Web thin clients such as any client launched by popular enterprise applications like Oracle SAP and Siebel and even mobile clients such as the Pocket PC. In some embodiments the multi protocol compression engine by executing in the kernel mode and integrating with packet processing engine accessing the network stack is able to compress any of the protocols carried by the TCP IP protocol such as any application layer protocol.

High speed layer integrated packet engine also generally referred to as a packet processing engine or packet engine is responsible for managing the kernel level processing of packets received and transmitted by appliance via network ports . The high speed layer integrated packet engine may comprise a buffer for queuing one or more network packets during processing such as for receipt of a network packet or transmission of a network packer. Additionally the high speed layer integrated packet engine is in communication with one or more network stacks to send and receive network packets via network ports . The high speed layer integrated packet engine works in conjunction with encryption engine cache manager policy engine and multi protocol compression logic . In particular encryption engine is configured to perform SSL processing of packets policy engine is configured to perform functions related to traffic management such as request level content switching and request level cache redirection and multi protocol compression logic is configured to perform functions related to compression and decompression of data.

The high speed layer integrated packet engine includes a packet processing timer . In one embodiment the packet processing timer provides one or more time intervals to trigger the processing of incoming i.e. received or outgoing i.e. transmitted network packets. In some embodiments the high speed layer integrated packet engine processes network packets responsive to the timer . The packet processing timer provides any type and form of signal to the packet engine to notify trigger or communicate a time related event interval or occurrence. In many embodiments the packet processing timer operates in the order of milliseconds such as for example 100 ms 50 ms or 25 ms. For example in some embodiments the packet processing timer provides time intervals or otherwise causes a network packet to be processed by the high speed layer integrated packet engine at a 10 ms time interval while in other embodiments at a 5 ms time interval and still yet in further embodiments as short as a 3 2 or 1 ms time interval. The high speed layer integrated packet engine may be interfaced integrated or in communication with the encryption engine cache manager policy engine and multi protocol compression engine during operation. As such any of the logic functions or operations of the encryption engine cache manager policy engine and multi protocol compression logic may be performed responsive to the packet processing timer and or the packet engine . Therefore any of the logic functions or operations of the encryption engine cache manager policy engine and multi protocol compression logic may be performed at the granularity of time intervals provided via the packet processing timer for example at a time interval of less than or equal to 10 ms. For example in one embodiment the cache manager may perform invalidation of any cached objects responsive to the high speed layer integrated packet engine and or the packet processing timer . In another embodiment the expiry or invalidation time of a cached object can be set to the same order of granularity as the time interval of the packet processing timer such as at every ms.

In contrast to kernel space user space is the memory area or portion of the operating system used by user mode applications or programs otherwise running in user mode. A user mode application may not access kernel space directly and uses service calls in order to access kernel services. As shown in user space of appliance includes a graphical user interface GUI a command line interface CLI shell services health monitoring program and daemon services . GUI and CLI provide a means by which a system administrator or other user can interact with and control the operation of appliance such as via the operating system of the appliance and either is user space or kernel space . The GUI may be any type and form of graphical user interface and may be presented via text graphical or otherwise by any type of program or application such as a browser. The CLI may be any type and form of command line or text based interface such as a command line provided by the operating system. For example the CLI may comprise a shell which is a tool to enable users to interact with the operating system. In some embodiments the CLI may be provided via a bash csh tcsh or ksh type shell. The shell services comprises the programs services tasks processes or executable instructions to support interaction with the appliance or operating system by a user via the GUI and or CLI .

Health monitoring program is used to monitor check report and ensure that network systems are functioning properly and that users are receiving requested content over a network. Health monitoring program comprises one or more programs services tasks processes or executable instructions to provide logic rules functions or operations for monitoring any activity of the appliance . In some embodiments the health monitoring program intercepts and inspects any network traffic passed via the appliance . In other embodiments the health monitoring program interfaces by any suitable means and or mechanisms with one or more of the following the encryption engine cache manager policy engine multi protocol compression logic packet engine daemon services and shell services . As such the health monitoring program may call any application programming interface API to determine a state status or health of any portion of the appliance . For example the health monitoring program may ping or send a status inquiry on a periodic basis to check if a program process service or task is active and currently running. In another example the health monitoring program may check any status error or history logs provided by any program process service or task to determine any condition status or error with any portion of the appliance .

Daemon services are programs that run continuously or in the background and handle periodic service requests received by appliance . In some embodiments a daemon service may forward the requests to other programs or processes such as another daemon service as appropriate. As known to those skilled in the art a daemon service may run unattended to perform continuous or periodic system wide functions such as network control or to perform any desired task. In some embodiments one or more daemon services run in the user space while in other embodiments one or more daemon services run in the kernel space.

Referring now to another embodiment of the appliance is depicted. In brief overview the appliance provides one or more of the following services functionality or operations SSL VPN connectivity switching load balancing Domain Name Service resolution acceleration and an application firewall for communications between one or more clients and one or more servers . Each of the servers may provide one or more network related services referred to as services . For example a server may provide an http service . The appliance comprises one or more virtual servers or virtual internet protocol servers referred to as a vServer VIP server or just VIP also referred herein as vServer . The vServer receives intercepts or otherwise processes communications between a client and a server in accordance with the configuration and operations of the appliance .

The vServer may comprise software hardware or any combination of software and hardware. The vServer may comprise any type and form of program service task process or executable instructions operating in user mode kernel mode or any combination thereof in the appliance . The vServer includes any logic functions rules or operations to perform any embodiments of the techniques described herein such as SSL VPN switching load balancing Domain Name Service resolution acceleration and an application firewall . In some embodiments the vServer establishes a connection to a service of a server . The service may comprise any program application process task or set of executable instructions capable of connecting to and communicating to the appliance client or vServer . For example the service may comprise a web server http server ftp email or database server. In some embodiments the service is a daemon process or network driver for listening receiving and or sending communications for an application such as email database or an enterprise application. In some embodiments the service may communicate on a specific IP address or IP address and port.

In some embodiments the vServer applies one or more policies of the policy engine to network communications between the client and server . In one embodiment the policies are associated with a VServer . In another embodiment the policies are based on a user or a group of users. In yet another embodiment a policy is global and applies to one or more vServers and any user or group of users communicating via the appliance . In some embodiments the policies of the policy engine have conditions upon which the policy is applied based on any content of the communication such as internet protocol address port protocol type header or fields in a packet or the context of the communication such as user group of the user vServer transport layer connection and or identification or attributes of the client or server .

In other embodiments the appliance communicates or interfaces with the policy engine to determine authentication and or authorization of a remote user or a remote client to access the computing environment application and or data file from a server . In another embodiment the appliance communicates or interfaces with the policy engine to determine authentication and or authorization of a remote user or a remote client to have the application delivery system deliver one or more of the computing environment application and or data file. In yet another embodiment the appliance establishes a VPN or SSL VPN connection based on the policy engine s authentication and or authorization of a remote user or a remote client In one embodiment the appliance controls the flow of network traffic and communication sessions based on policies of the policy engine . For example the appliance may control the access to a computing environment application or data file based on the policy engine .

In some embodiments the vServer establishes a transport layer connection such as a TCP or UDP connection with a client via the client agent . In one embodiment the vServer listens for and receives communications from the client . In other embodiments the vServer establishes a transport layer connection such as a TCP or UDP connection with a client server . In one embodiment the vServer establishes the transport layer connection to an internet protocol address and port of a server running on the server . In another embodiment the vServer associates a first transport layer connection to a client with a second transport layer connection to the server . In some embodiments a vServer establishes a pool of transport layer connections to a server and multiplexes client requests via the pooled transport layer connections.

In some embodiments the appliance provides a SSL VPN connection between a client and a server . For example a client on a first network requests to establish a connection to a server on a second network . In some embodiments the second network is not routable from the first network . In other embodiments the client is on a public network and the server is on a private network such as a corporate network. In one embodiment the client agent intercepts communications of the client on the first network encrypts the communications and transmits the communications via a first transport layer connection to the appliance . The appliance associates the first transport layer connection on the first network to a second transport layer connection to the server on the second network . The appliance receives the intercepted communication from the client agent decrypts the communications and transmits the communication to the server on the second network via the second transport layer connection. The second transport layer connection may be a pooled transport layer connection. As such the appliance provides an end to end secure transport layer connection for the client between the two networks .

In one embodiment the appliance hosts an intranet internet protocol or intranetIP address of the client on the virtual private network . The client has a local network identifier such as an internet protocol IP address and or host name on the first network . When connected to the second network via the appliance the appliance establishes assigns or otherwise provides an IntranetIP which is network identifier such as IP address and or host name for the client on the second network . The appliance listens for and receives on the second or private network for any communications directed towards the client using the client s established IntranetIP . In one embodiment the appliance acts as or on behalf of the client on the second private network . For example in another embodiment a vServer listens for and responds to communications to the IntranetIP of the client . In some embodiments if a computing device on the second network transmits a request the appliance processes the request as if it were the client . For example the appliance may respond to a ping to the client s IntranetIP . In another example the appliance may establish a connection such as a TCP or UDP connection with computing device on the second network requesting a connection with the client s IntranetIP .

In some embodiments the appliance provides one or more of the following acceleration techniques to communications between the client and server 1 compression 2 decompression 3 Transmission Control Protocol pooling 4 Transmission Control Protocol multiplexing 5 Transmission Control Protocol buffering and 6 caching. In one embodiment the appliance relieves servers of much of the processing load caused by repeatedly opening and closing transport layers connections to clients by opening one or more transport layer connections with each server and maintaining these connections to allow repeated data accesses by clients via the Internet. This technique is referred to herein as connection pooling .

In some embodiments in order to seamlessly splice communications from a client to a server via a pooled transport layer connection the appliance translates or multiplexes communications by modifying sequence number and acknowledgment numbers at the transport layer protocol level. This is referred to as connection multiplexing . In some embodiments no application layer protocol interaction is required. For example in the case of an in bound packet that is a packet received from a client the source network address of the packet is changed to that of an output port of appliance and the destination network address is changed to that of the intended server. In the case of an outbound packet that is one received from a server the source network address is changed from that of the server to that of an output port of appliance and the destination address is changed from that of appliance to that of the requesting client . The sequence numbers and acknowledgment numbers of the packet are also translated to sequence numbers and acknowledgement expected by the client on the appliance s transport layer connection to the client . In some embodiments the packet checksum of the transport layer protocol is recalculated to account for these translations.

In another embodiment the appliance provides switching or load balancing functionality for communications between the client and server . In some embodiments the appliance distributes traffic and directs client requests to a server based on layer or application layer request data. In one embodiment although the network layer or layer of the network packet identifies a destination server the appliance determines the server to distribute the network packet by application information and data carried as payload of the transport layer packet. In one embodiment the health monitoring programs of the appliance monitor the health of servers to determine the server for which to distribute a client s request. In some embodiments if the appliance detects a server is not available or has a load over a predetermined threshold the appliance can direct or distribute client requests to another server .

In some embodiments the appliance acts as a Domain Name Service DNS resolver or otherwise provides resolution of a DNS request from clients . In some embodiments the appliance intercepts a DNS request transmitted by the client . In one embodiment the appliance responds to a client s DNS request with an IP address of or hosted by the appliance . In this embodiment the client transmits network communication for the domain name to the appliance . In another embodiment the appliance responds to a client s DNS request with an IP address of or hosted by a second appliance . In some embodiments the appliance responds to a client s DNS request with an IP address of a server determined by the appliance .

In yet another embodiment the appliance provides application firewall functionality for communications between the client and server . In one embodiment the policy engine provides rules for detecting and blocking illegitimate requests. In some embodiments the application firewall protects against denial of service DoS attacks. In other embodiments the appliance inspects the content of intercepted requests to identify and block application based attacks. In some embodiments the rules policy engine comprises one or more application firewall or security control policies for providing protections against various classes and types of web or Internet based vulnerabilities such as one or more of the following 1 buffer overflow 2 CGI BIN parameter manipulation 3 form hidden field manipulation 4 forceful browsing 5 cookie or session poisoning 6 broken access control list ACLs or weak passwords 7 cross site scripting XSS 8 command injection 9 SQL injection 10 error triggering sensitive information leak 11 insecure use of cryptography 12 server misconfiguration 13 back doors and debug options 14 website defacement 15 platform or operating systems vulnerabilities and 16 zero day exploits. In an embodiment the application firewall provides HTML form field protection in the form of inspecting or analyzing the network communication for one or more of the following 1 required fields are returned 2 no added field allowed 3 read only and hidden field enforcement 4 drop down list and radio button field conformance and 5 form field max length enforcement. In some embodiments the application firewall ensures cookies are not modified. In other embodiments the application firewall protects against forceful browsing by enforcing legal URLs.

In still yet other embodiments the application firewall protects any confidential information contained in the network communication. The application firewall may inspect or analyze any network communication in accordance with the rules or polices of the engine to identify any confidential information in any field of the network packet. In some embodiments the application firewall identifies in the network communication one or more occurrences of a credit card number password social security number name patient code contact information and age. The encoded portion of the network communication may comprise these occurrences or the confidential information. Based on these occurrences in one embodiment the application firewall may take a policy action on the network communication such as prevent transmission of the network communication. In another embodiment the application firewall may rewrite remove or otherwise mask such identified occurrence or confidential information.

Still referring to the appliance may include a performance monitoring agent as discussed above in conjunction with . In one embodiment the appliance receives the monitoring agent from the monitoring service or monitoring server as depicted in . In some embodiments the appliance stores the monitoring agent in storage such as disk for delivery to any client or server in communication with the appliance . For example in one embodiment the appliance transmits the monitoring agent to a client upon receiving a request to establish a transport layer connection. In other embodiments the appliance transmits the monitoring agent upon establishing the transport layer connection with the client . In another embodiment the appliance transmits the monitoring agent to the client upon intercepting or detecting a request for a web page. In yet another embodiment the appliance transmits the monitoring agent to a client or a server in response to a request from the monitoring server . In one embodiment the appliance transmits the monitoring agent to a second appliance or appliance .

In other embodiments the appliance executes the monitoring agent . In one embodiment the monitoring agent measures and monitors the performance of any application program process service task or thread executing on the appliance . For example the monitoring agent may monitor and measure performance and operation of vServers A N. In another embodiment the monitoring agent measures and monitors the performance of any transport layer connections of the appliance . In some embodiments the monitoring agent measures and monitors the performance of any user sessions traversing the appliance . In one embodiment the monitoring agent measures and monitors the performance of any virtual private network connections and or sessions traversing the appliance such an SSL VPN session. In still further embodiments the monitoring agent measures and monitors the memory CPU and disk usage and performance of the appliance . In yet another embodiment the monitoring agent measures and monitors the performance of any acceleration technique performed by the appliance such as SSL offloading connection pooling and multiplexing caching and compression. In some embodiments the monitoring agent measures and monitors the performance of any load balancing and or content switching performed by the appliance . In other embodiments the monitoring agent measures and monitors the performance of application firewall protection and processing performed by the appliance .

Referring now to an embodiment of the client agent is depicted. The client includes a client agent for establishing and exchanging communications with the appliance and or server via a network . In brief overview the client operates on computing device having an operating system with a kernel mode and a user mode and a network stack with one or more layers . The client may have installed and or execute one or more applications. In some embodiments one or more applications may communicate via the network stack to a network . One of the applications such as a web browser may also include a first program . For example the first program may be used in some embodiments to install and or execute the client agent or any portion thereof. The client agent includes an interception mechanism or interceptor for intercepting network communications from the network stack from the one or more applications.

The network stack of the client may comprise any type and form of software or hardware or any combinations thereof for providing connectivity to and communications with a network. In one embodiment the network stack comprises a software implementation for a network protocol suite. The network stack may comprise one or more network layers such as any networks layers of the Open Systems Interconnection OSI communications model as those skilled in the art recognize and appreciate. As such the network stack may comprise any type and form of protocols for any of the following layers of the OSI model 1 physical link layer 2 data link layer 3 network layer 4 transport layer 5 session layer 6 presentation layer and 7 application layer. In one embodiment the network stack may comprise a transport control protocol TCP over the network layer protocol of the internet protocol IP generally referred to as TCP IP. In some embodiments the TCP IP protocol may be carried over the Ethernet protocol which may comprise any of the family of IEEE wide area network WAN or local area network LAN protocols such as those protocols covered by the IEEE 802.3. In some embodiments the network stack comprises any type and form of a wireless protocol such as IEEE 802.11 and or mobile internet protocol.

In view of a TCP IP based network any TCP IP based protocol may be used including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. In another embodiment the network stack comprises any type and form of transport control protocol such as a modified transport control protocol for example a Transaction TCP T TCP TCP with selection acknowledgements TCP SACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol. In other embodiments any type and form of user datagram protocol UDP such as UDP over IP may be used by the network stack such as for voice communications or real time data communications.

Furthermore the network stack may include one or more network drivers supporting the one or more layers such as a TCP driver or a network layer driver. The network drivers may be included as part of the operating system of the computing device or as part of any network interface cards or other network access components of the computing device . In some embodiments any of the network drivers of the network stack may be customized modified or adapted to provide a custom or modified portion of the network stack in support of any of the techniques described herein. In other embodiments the acceleration program is designed and constructed to operate with or work in conjunction with the network stack installed or otherwise provided by the operating system of the client .

The network stack comprises any type and form of interfaces for receiving obtaining providing or otherwise accessing any information and data related to network communications of the client . In one embodiment an interface to the network stack comprises an application programming interface API . The interface may also comprise any function call hooking or filtering mechanism event or call back mechanism or any type of interfacing technique. The network stack via the interface may receive or provide any type and form of data structure such as an object related to functionality or operation of the network stack . For example the data structure may comprise information and data related to a network packet or one or more network packets. In some embodiments the data structure comprises a portion of the network packet processed at a protocol layer of the network stack such as a network packet of the transport layer. In some embodiments the data structure comprises a kernel level data structure while in other embodiments the data structure comprises a user mode data structure. A kernel level data structure may comprise a data structure obtained or related to a portion of the network stack operating in kernel mode or a network driver or other software running in kernel mode or any data structure obtained or received by a service process task thread or other executable instructions running or operating in kernel mode of the operating system.

Additionally some portions of the network stack may execute or operate in kernel mode for example the data link or network layer while other portions execute or operate in user mode such as an application layer of the network stack . For example a first portion of the network stack may provide user mode access to the network stack to an application while a second portion of the network stack provides access to a network. In some embodiments a first portion of the network stack may comprise one or more upper layers of the network stack such as any of layers . In other embodiments a second portion of the network stack comprises one or more lower layers such as any of layers . Each of the first portion and second portion of the network stack may comprise any portion of the network stack at any one or more network layers in user mode kernel mode or combinations thereof or at any portion of a network layer or interface point to a network layer or any portion of or interface point to the user mode and kernel mode .

The interceptor may comprise software hardware or any combination of software and hardware. In one embodiment the interceptor intercept a network communication at any point in the network stack and redirects or transmits the network communication to a destination desired managed or controlled by the interceptor or client agent . For example the interceptor may intercept a network communication of a network stack of a first network and transmit the network communication to the appliance for transmission on a second network . In some embodiments the interceptor comprises any type interceptor comprises a driver such as a network driver constructed and designed to interface and work with the network stack . In some embodiments the client agent and or interceptor operates at one or more layers of the network stack such as at the transport layer. In one embodiment the interceptor comprises a filter driver hooking mechanism or any form and type of suitable network driver interface that interfaces to the transport layer of the network stack such as via the transport driver interface TDI . In some embodiments the interceptor interfaces to a first protocol layer such as the transport layer and another protocol layer such as any layer above the transport protocol layer for example an application protocol layer. In one embodiment the interceptor may comprise a driver complying with the Network Driver Interface Specification NDIS or a NDIS driver. In another embodiment the interceptor may comprise a min filter or a mini port driver. In one embodiment the interceptor or portion thereof operates in kernel mode . In another embodiment the interceptor or portion thereof operates in user mode . In some embodiments a portion of the interceptor operates in kernel mode while another portion of the interceptor operates in user mode . In other embodiments the client agent operates in user mode but interfaces via the interceptor to a kernel mode driver process service task or portion of the operating system such as to obtain a kernel level data structure . In further embodiments the interceptor is a user mode application or program such as application.

In one embodiment the interceptor intercepts any transport layer connection requests. In these embodiments the interceptor execute transport layer application programming interface API calls to set the destination information such as destination IP address and or port to a desired location for the location. In this manner the interceptor intercepts and redirects the transport layer connection to a IP address and port controlled or managed by the interceptor or client agent . In one embodiment the interceptor sets the destination information for the connection to a local IP address and port of the client on which the client agent is listening. For example the client agent may comprise a proxy service listening on a local IP address and port for redirected transport layer communications. In some embodiments the client agent then communicates the redirected transport layer communication to the appliance .

In some embodiments the interceptor intercepts a Domain Name Service DNS request. In one embodiment the client agent and or interceptor resolves the DNS request. In another embodiment the interceptor transmits the intercepted DNS request to the appliance for DNS resolution. In one embodiment the appliance resolves the DNS request and communicates the DNS response to the client agent . In some embodiments the appliance resolves the DNS request via another appliance or a DNS server .

In yet another embodiment the client agent may comprise two agents and . In one embodiment a first agent may comprise an interceptor operating at the network layer of the network stack . In some embodiments the first agent intercepts network layer requests such as Internet Control Message Protocol ICMP requests e.g. ping and traceroute . In other embodiments the second agent may operate at the transport layer and intercept transport layer communications. In some embodiments the first agent intercepts communications at one layer of the network stack and interfaces with or communicates the intercepted communication to the second agent .

The client agent and or interceptor may operate at or interface with a protocol layer in a manner transparent to any other protocol layer of the network stack . For example in one embodiment the interceptor operates or interfaces with the transport layer of the network stack transparently to any protocol layer below the transport layer such as the network layer and any protocol layer above the transport layer such as the session presentation or application layer protocols. This allows the other protocol layers of the network stack to operate as desired and without modification for using the interceptor . As such the client agent and or interceptor can interface with the transport layer to secure optimize accelerate route or load balance any communications provided via any protocol carried by the transport layer such as any application layer protocol over TCP IP.

Furthermore the client agent and or interceptor may operate at or interface with the network stack in a manner transparent to any application a user of the client and any other computing device such as a server in communications with the client . The client agent and or interceptor may be installed and or executed on the client in a manner without modification of an application. In some embodiments the user of the client or a computing device in communications with the client are not aware of the existence execution or operation of the client agent and or interceptor . As such in some embodiments the client agent and or interceptor is installed executed and or operated transparently to an application user of the client another computing device such as a server or any of the protocol layers above and or below the protocol layer interfaced to by the interceptor .

The client agent includes an acceleration program a streaming client a collection agent and or monitoring agent . In one embodiment the client agent comprises an Independent Computing Architecture ICA client or any portion thereof developed by Citrix Systems Inc. of Fort Lauderdale Fla. and is also referred to as an ICA client. In some embodiments the client comprises an application streaming client for streaming an application from a server to a client . In some embodiments the client agent comprises an acceleration program for accelerating communications between client and server . In another embodiment the client agent includes a collection agent for performing end point detection scanning and collecting end point information for the appliance and or server .

In some embodiments the acceleration program comprises a client side acceleration program for performing one or more acceleration techniques to accelerate enhance or otherwise improve a client s communications with and or access to a server such as accessing an application provided by a server . The logic functions and or operations of the executable instructions of the acceleration program may perform one or more of the following acceleration techniques 1 multi protocol compression 2 transport control protocol pooling 3 transport control protocol multiplexing 4 transport control protocol buffering and 5 caching via a cache manager. Additionally the acceleration program may perform encryption and or decryption of any communications received and or transmitted by the client . In some embodiments the acceleration program performs one or more of the acceleration techniques in an integrated manner or fashion. Additionally the acceleration program can perform compression on any of the protocols or multiple protocols carried as a payload of a network packet of the transport layer protocol. The streaming client comprises an application program process service task or executable instructions for receiving and executing a streamed application from a server . A server may stream one or more application data files to the streaming client for playing executing or otherwise causing to be executed the application on the client . In some embodiments the server transmits a set of compressed or packaged application data files to the streaming client . In some embodiments the plurality of application files are compressed and stored on a file server within an archive file such as a CAB ZIP SIT TAR JAR or other archives In one embodiment the server decompresses unpackages or unarchives the application files and transmits the files to the client . In another embodiment the client decompresses unpackages or unarchives the application files. The streaming client dynamically installs the application or portion thereof and executes the application. In one embodiment the streaming client may be an executable program. In some embodiments the streaming client may be able to launch another executable program.

The collection agent comprises an application program process service task or executable instructions for identifying obtaining and or collecting information about the client . In some embodiments the appliance transmits the collection agent to the client or client agent . The collection agent may be configured according to one or more policies of the policy engine of the appliance. In other embodiments the collection agent transmits collected information on the client to the appliance . In one embodiment the policy engine of the appliance uses the collected information to determine and provide access authentication and authorization control of the client s connection to a network .

In one embodiment the collection agent comprises an end point detection and scanning mechanism which identifies and determines one or more attributes or characteristics of the client. For example the collection agent may identify and determine any one or more of the following client side attributes 1 the operating system and or a version of an operating system 2 a service pack of the operating system 3 a running service 4 a running process and 5 a file. The collection agent may also identify and determine the presence or versions of any one or more of the following on the client 1 antivirus software 2 personal firewall software 3 anti spam software and 4 internet security software. The policy engine may have one or more policies based on any one or more of the attributes or characteristics of the client or client side attributes.

In some embodiments the client agent includes a monitoring agent as discussed in conjunction with . The monitoring agent may be any type and form of script such as Visual Basic or Java script. In one embodiment the monitoring agent monitors and measures performance of any portion of the client agent . For example in some embodiments the monitoring agent monitors and measures performance of the acceleration program . In another embodiment the monitoring agent monitors and measures performance of the streaming client . In other embodiments the monitoring agent monitors and measures performance of the collection agent . In still another embodiment the monitoring agent monitors and measures performance of the interceptor . In some embodiments the monitoring agent monitors and measures any resource of the client such as memory CPU and disk.

The monitoring agent may monitor and measure performance of any application of the client. In one embodiment the monitoring agent monitors and measures performance of a browser on the client . In some embodiments the monitoring agent monitors and measures performance of any application delivered via the client agent . In other embodiments the monitoring agent measures and monitors end user response times for an application such as web based or HTTP response times. The monitoring agent may monitor and measure performance of an ICA or RDP client. In another embodiment the monitoring agent measures and monitors metrics for a user session or application session. In some embodiments monitoring agent measures and monitors an ICA or RDP session. In one embodiment the monitoring agent measures and monitors the performance of the appliance in accelerating delivery of an application and or data to the client .

In some embodiments and still referring to a first program may be used to install and or execute the client agent or portion thereof such as the interceptor automatically silently transparently or otherwise. In one embodiment the first program comprises a plugin component such an ActiveX control or Java control or script that is loaded into and executed by an application. For example the first program comprises an ActiveX control loaded and run by a web browser application such as in the memory space or context of the application. In another embodiment the first program comprises a set of executable instructions loaded into and run by the application such as a browser. In one embodiment the first program comprises a designed and constructed program to install the client agent . In some embodiments the first program obtains downloads or receives the client agent via the network from another computing device. In another embodiment the first program is an installer program or a plug and play manager for installing programs such as network drivers on the operating system of the client .

D. Load Balancing with Metrics Selected by a User from Appliance Determined Metrics and or Metrics Collected From A Device via a Network Management Protocol

Referring now to systems and methods are depicted for load balancing based on metrics determined by the appliance and or metrics collected by the appliance from a device or service via a network management protocol such as a Simple Network Management Protocol SNMP . The appliance provides a load monitor to monitor the load of one or more services . In one embodiment a user may configure one or more load monitors based on metrics selected from a custom metric table which includes metrics or objects obtains via a network management protocol query. In another embodiment a user may configure one or more load monitors based on metrics or parameters collected by the appliance. In some embodiments the user configures one or more load monitors based on metrics selected from the custom metric table and the appliance collected metrics. In response to the user s selection the appliance determines the load of the one or more services and load balances client requests to the services using any type of load balancing technique.

Referring now to an embodiment of an appliance for load balancing one or more services is depicted. In brief overview an appliance has one or more virtual servers or vServers A N configured to provide load balancing to one or more services deployed on or provided by one or more servers . A vServer A is associated with configured to or bound to a service A or a group of services A N. The appliance has one or more load monitors A N to monitor a status operation and or performance of the services A N. A load monitor is associated with configured to or bound to a service A or a group of services A N. The load monitors A B provide information to the vServers A N to determine which of the services A N should receive a request received by a vServer . A load monitor and or vServer may use appliance collected metrics and or device provided metrics to determine a load across a plurality of services A N and to load balancing incoming client requests. The appliance also includes a configuration interface to receive information identifying user selected or user defined metrics to be used by the load monitors and or vServers for load balancing the plurality of services A N.

The appliance may include any type and form of load monitor A N also referred to as monitoring agent for monitoring any operational or performance characteristic or metric of a service server or device . A load monitor may include software hardware or any combination of software and hardware. The load monitor may include any application program script service daemon process task thread or set of executable instructions. In one embodiment the load monitor operates or executes in kernel space of the appliance . In another embodiment the load monitor operates or executes in user or application space of the appliance . In some embodiments a first portion of the load monitor operates in kernel space while a second portion of the load monitor operates in application layer or space of the appliance .

In one embodiment the load monitor communicates with a service once. In some embodiments the load monitor monitors or communicates with a service on a predetermined frequency such as every 1 msec or 1 sec. A user may configure or specify the predetermined frequency via the configuration interface . In other cases another appliance or system may configure or specify the predetermined frequency via the configuration interface . In yet another embodiment the load monitor monitors or communicates with a service responsive to one or more events such as receipt of a request response or a network packet. In one embodiment a load monitor monitors or communicates with a service responsive to one or more policies of a policy engine.

In some embodiments a load monitor may use a request reply messaging mechanism or protocol with the service or server . In other embodiments a load monitor may have a custom or proprietary exchange protocol for communicating with a service server or device. In one embodiment a load monitor may use the protocol of the service to monitor or communicate with the service . As such in some embodiments the load monitor uses the HTTP protocol to monitor or communicate with a web service A or an FTP protocol for an FTP server B. In yet other embodiments the load monitor uses a TCP or ICMP protocol for monitoring a service . In some embodiments the load monitor uses a network management protocol to monitor or query a status or metric of a service server or device. In one embodiment the load monitor uses a Simple Network Management Protocol SNMP . In another embodiment the load monitor uses a common management information protocol CIMP .

In some embodiments a single load monitor monitors a plurality of services A N or servers A B. In other embodiments a plurality of load monitors A N monitor a single service A or server A. In still other embodiments multiple load monitors may each monitor a plurality of services A N or servers A N. In one embodiment multiple load monitors may each monitor a service . In yet another embodiment a load monitor A may monitor one or more other load monitors B N.

In some embodiments the one or more load monitors are associated with one or more services . In one embodiment a user specifies or configures a load monitor for one or more service via the configuration interface . For example a user via the configuration interface may issue a command to bind the monitor to a service . In other embodiments the load monitor is associated with a vServer . In one embodiment a user specifies or configures via the configuration interface a load monitor for a vServer . In yet another embodiment a use specifies or configures via the configuration interface a vServer for one or more services A N. For example a user may bind a vServer to a service .

In some embodiments the one or more load monitors may monitor an appliance vServer network service client server device or any other network resource. In one embodiment a user specifies a type of network service to associate with the one or more monitoring agents . In another embodiment a user customizes a monitoring agent. For example a user may implement or otherwise provide a script for monitoring a service. In still another embodiment a generic monitoring agent is used. In some embodiments a monitor agent is configurable to use a predetermined monitor script or status message based on a type of protocol or type of service

In yet another embodiment the one or more monitoring agents determine the response time of the one or more network services for responding to a request of one of the following types ping transport control protocol tcp tcp extended content verification hypertext transfer protocol http http extended content verification hypertext transfer protocol secure https https extended content verification user datagram protocol domain name service and file transfer protocol. In some embodiment a monitoring agent checks for predetermined status codes in responses from the service . In other embodiments the monitoring agent checks for predetermined string patters in response from the service .

In some embodiments the one or more load monitors or monitoring agents are protocol specific agents. For example an agent may determine availability for a network service of a particular protocol type. In some embodiments a monitoring agent determines a response time of a server or network service to a TCP request. In one of these embodiments the agent uses a TCP ICMP echo request command to send a datagram to the network service receive a datagram from the network service in response and determine a response time based on the roundtrip time of the datagram. In another of these embodiments the monitoring agent verifies that the response from the network service included expected content. In one embodiment the monitoring agent verifies that the response did not include an error.

In other embodiments a monitoring agent determines availability of a network service to a UDP request. In one of these embodiments the agent uses a UDP echo command to send a datagram to the network service receive a datagram from the network service in response and determine a response time based on the roundtrip time of the datagram. In another of these embodiments the monitoring agent verifies that the response from the network service included expected content and did not contain errors.

In still other embodiments the monitoring agent determines availability of a network service to an FTP request. In one of these embodiments the monitoring agent sends an FTP command such as a get command or a put command to the network service and determines a time needed by the network service to respond to the command. In another of these embodiments the monitoring agent verifies that the response from the network service included expected content such as contents of a file requested by a get command and did not contain errors.

In yet other embodiments the monitoring agent determines availability of a network service to an HTTP request. In one of these embodiments the monitoring agent sends an HTTP command such as a get request for a uniform resource locator URL or a file to the network service and determines a time needed by the network service to respond to the request. In another of these embodiments the monitoring agent verifies that the response from the network service included expected content such as the content of a web page identified by a URL. In some embodiment the monitor agent checks for a predetermined status code. In other embodiments the monitoring agent checks for a predetermine string pattern in an HTTP response.

In further embodiments the monitoring agent determines availability of a network service to a DNS request. In one of these embodiments the monitoring agent sends a DNS request such as a dnsquery or nslookup for a known network address to the server or network service and determines a time needed by the server or network service to respond to the request. In another of these embodiments the monitoring agent verifies that the response from the network service included expected content such as the domain name of a computing device associated with the known network address. In one embodiment monitoring agent verifies the response did not have an error.

In some embodiments the appliance via a monitoring agent identifies and collects metrics based on network traffic and information traversing the appliance or otherwise referred to as appliance collected parameters or metrics. The appliance or agent may store the appliance collected metrics in any type and form of data storage mechanism in memory and or disk storage. In one embodiment the appliance stores the metrics in a table. In another embodiment the appliance stores the metrics in a database. In yet another embodiment the appliance stores the metrics in an object or data structure. In still other embodiments the appliance stores appliance collected metrics in multiple tables and or data storage mechanisms. In one embodiments the appliance collected metrics may be arranged or organized in any manner in the multiple tables.

In some embodiments the monitoring agent determines one or more metrics from network packets received and transmitted by the appliance. In one embodiment the monitoring agent determines a number and or type of connections to one or more services or server . In another embodiment the monitoring agent determines a number of packets transmitted to a service or server . In other embodiments the monitoring agents determines a number of packets received from or transmitted by a service or server . In some embodiments the monitoring agent determines a response time from a service or service. In one embodiments the monitoring agent determines an average response time. In another embodiment the monitoring agent determines a number or percentage of loss packets. In other embodiments the monitoring agent determines a number of errors received from a service or server.

In some embodiments the monitoring agent determines a bandwidth of a connection to a service or a server . In one embodiment the monitoring agent determines the bandwidth of a connection based on a response time and or packet loss. In another embodiment the monitoring agent determines the bandwidth of a connection based on a number of bytes transferred or communicated to and or form a service or server . In one embodiment the monitoring agent determines the bandwidth based on a number of bytes received from a service or server over a predetermined time period such as per second. In another embodiment the monitoring agent determines the bandwidth based on a number of bytes transmitted to a service or server over a predetermined time period. In some embodiments the monitoring agent determines the bandwidth based on a number of bytes transmitted to and received from a service or server over a predetermined time period.

In some embodiments the appliance via a monitoring agent identifies and collects metrics provided by a service server or device. These metrics may also be referred to as custom metrics or a custom metric table. The appliance or agent may store the service or device collected metrics in any type and form of data storage mechanism in memory and or disk storage. In one embodiment the appliance stores the metrics in a table. In another embodiment the appliance stores the metrics in a database. In yet another embodiment the appliance stores the metrics in an object or data structure. In some embodiments the appliance stores the metrics in the same data storage mechanism as the appliance collected metrics . In other embodiments the appliance stores the metrics in a different storage mechanism as the appliance collected metrics . In still other embodiments the appliance stores device provided metrics in multiple tables and or data storage mechanisms. In one embodiments the device provided metrics may be arranged or organized in any manner in the multiple tables. For example the appliance may maintain a metrics table for each service device or application.

In one embodiment the load monitor uses a network management protocol such as SNMP to query a server or device for one or more objects identifiers and data for the objects of the object identifiers. By way of example only and not in any way limiting the load monitor uses an SNMP architecture to provide management information bases MIBs which specify management data of a device or device subsystem such as a service using a hierarchical namespace containing object identifiers A N for managed objects. In some embodiments a MIB is a collection of information that is organized hierarchically. MIBs may be accessed using a network management protocol such as SNMP. An MIB includes managed objects identified by object identifiers A N. In one embodiment a managed object sometimes called a MIB object an object or a MIB is one of any number of characteristics or metrics of a managed device appliance or system. In some embodiments a managed objects includes one or more object instances which correspond to or referred to as variables.

In one embodiment the MIB hierarchy may be depicted as a tree with a nameless root the levels of which are assigned by different organizations. In some embodiments the top level MIB object IDs may belong to different standards organizations while lower level object IDs are allocated by associated organizations. The MIB and or objects A N may be arranged constructed or organized for management across any of layers of the OSI reference model. In some embodiments the MIB and or objects A N provide managed data and information on applications such as databases email and web services. Furthermore the MIB and or objects A N may define for any area specific or appliance specification information and operations such as for any type of service server or device load balanced or managed by the appliance .

In the example embodiment of SNMP the SNMP communication model is based on a manager and an agent with a data of management information and management objects A N. In one embodiment the manager provides an interface between appliance and the managed system. The agent provides the interface between the manager and the device system application component element or resource being managed. As illustrated in the appliance may include a manager which requests and obtains object identifiers and values from an agent such as the agent on a server . In the example of SNMP a manager communicates a GET or GET NEXT message to request information for a specific object. The agent in response to the manger s request issues a GET RESPONSE message to the manager with the information requested or an error message. The manager may transmit a SET message to request a change to a value of a specific variable or object . The agent may issue a TRAP message to inform the manager of an event such as an alarm or error on a service .

Although generally described in an embodiment of an SNMP network management protocol the appliance and or load monitor may use any type and form of network management protocol and communication model to obtain identifiers and values of information such as objects or variables from another device for a managed system sub system or service . For example the appliance may use any of the following protocols and or communication models Remote monitoring RMON AgentX Simple Gateway Monitoring Protocol SGMP Common management information protocol CMIP Common management information service CMIS or CMIP over TCP IP CMOT .

Furthermore although a MIB is generally described in reference to a manager agent communication model for an example network management protocol such as SNMP the MIB may include any type and form of data storage of object identifiers variables parameters or other identifiers of metrics. The MIB may be either protocol dependent or protocol independent. For example the MIB may comprise a table of metrics for a device or service that can be queried via any type and form of API.

The managed objects or variables provided via the network management protocol may provide any type and form of metrics or operational characteristics of the service server or device to be used by the appliance for load balancing or any other function of the appliance . In one embodiment the device provided metrics may include any of the metrics collected by the appliance as described above. In another embodiment the device provided metrics may include any type and form of information on any resource usage of the managed device service or system. In one embodiment the metrics include CPU memory and or disk usage of the device and or service . In other embodiments the metrics may include information on a number of connections sessions or clients of the service . In some embodiments the metrics include any information on any thresholds of the service or server such as a threshold identifying a maximum number of sessions or clients. In yet another embodiment the metrics include any information on a type of protocol of the service . In other embodiments the metrics include any information on any alarms or errors of the service .

In some embodiments each load monitor includes the appliance collected metrics . For example the metric table may be implicitly bound to each monitor by default. In other embodiments a user associates or binds a custom metric table to a monitor . In yet another embodiment a user associates or binds a custom metric table and appliance collected table to a monitor . In yet other embodiments a user may associate or bind any combination of one or more appliance collected metric tables and custom metric tables to one or more load monitors .

In some embodiments a user via the configuration interface may configure or specify for a load monitor one or more object identifiers A N to obtain values for and store in the metrics . For example the user may specify a user defined metric . In other embodiments the appliance or load monitor obtains a list of one or more object identifiers A N from a device such as server or service . In yet another embodiment the appliance includes one or more metric tables with predetermined OIDS A N for a known device. For example the appliance may include a metric table for any one or more of the following appliances or devices 1 any version of the NetScaler device manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. 2 any of the appliances such as BIGIP or WebAccelerator manufactured by F5 Networks Inc. of Seattle Wash. 3 any of the AppDirector or AppXcel devices manufactured by Radware Ltd of Mahwah N.J. 4 any application acceleration and or security related appliances and or software manufactured by Cisco Systems Inc. of San Jose Calif.

The appliance vServer and or load monitor computes calculates or otherwise determines a load for each service based on any of the metrics from the appliance collected metrics and or device provided metrics . The appliance may use a weight A N and a threshold A N for each of the metrics used in the determination of the load . In one embodiment the appliance establishes a weight and or a threshold . In other embodiments a user establishes a weight and or a threshold . For example in some cases if a user does not specify a weight for a plurality of metrics the appliance equally weights each metric. In one example embodiment the appliance determines the load for each service as follows Sum weight of metric established ceiling value of metric obtained value of metric established ceiling value of metric Sum weights 

In some embodiments a metric value may be based on a range of 0 100 or absolute range. In other embodiments a metric value may not be based on a range of 0 100 or is otherwise relative to the type of metric and possible range of values. For example a metric identifying a number of connections may have a ceiling or predetermined maximum value of 10 000. In one of these embodiments the appliance establishes a ceiling value or predetermined upper limit for the metric value. In another of these embodiments a user via the configuration interface establishes a ceiling value or predetermined upper limit for the metric value. In further embodiments the established ceiling value may comprise a value less than the actual maximum value for the metric or upper limit of the range value. For example a user may specify or configure a relative range value based on a desired operational or performance range of a metric.

In some embodiments if a metric of a service exceeds a user or appliance provided threshold the service may be excluded from the load determination or otherwise from a load balancing decision. In other embodiments if all the metrics of a service exceeds their corresponding thresholds the service may be excluded from the load determination or otherwise from a load balancing decisions. In yet another embodiment even if a service exceeds the threshold s for one or more of the metrics the service may be considered in the load determination or otherwise for load selection. In some cases a client session may be identified as persistent or sticky to a vServer or service . In these cases if a request for the client s sessions is received by the appliance the appliance may provide the request to a vServer or service although a metric for the vServer or service has been exceeded.

In still other embodiments if a threshold of a metric of a service or virtual server has been exceeded the appliance may in response to the threshold being exceeded redirect the client making the request to another resource. In one embodiment the appliance may transmit a URL to the client comprising the address of a server or service such that the client may bypass the appliance and access the server or service directly. In one embodiment the appliance may transmit a URL to the client comprising the address of a second appliance or another device. In still another embodiment the appliance may redirect the client request to a second appliance device service or server on behalf of the client.

In some embodiments if a threshold of a metric of a service or virtual server has been exceeded the appliance may in response to the threshold being exceeded direct a client request to a second virtual server or service. In one embodiment a second virtual server may be a backup to a primary virtual server. Upon detection of the threshold being exceeded the appliance may spillover requests and connections to a second virtual server.

Although the load is generally discussed in view of the above equation the appliance may use any type and form of load calculation weighted or not weighted. In some embodiments the appliance determines the load using an average of metric values. In other embodiments the appliance determines the load using any derivative value of a metric. In another embodiment the appliance determines the load using any statistical measure of a metric. In still another embodiment the appliance determines the load using any function or computation of a metric. In yet other embodiments the appliance may determine a load for each metric. In these embodiments the appliance may aggregate compare or otherwise compute an load based on any type and form of aggregation of a metric s contribution to a load of a service.

In some embodiments a user configures multiple monitors for a service . In these embodiments the load on the service is a sum of the load of all the monitors. In one embodiment the sum of the load from multiple monitors is weighted. The appliance may assign a monitoring a weight. A weight may comprise an integer decimal or any other numeric indicator. In some embodiments a user may configure via the configuration interface the weight corresponding to a monitor . In some embodiments all monitors may be assigned equal weight. In other embodiments a plurality of monitors may each be assigned different weights. The weights may be assigned to the monitors based on any criteria indicating relative importance including without limitation the appliance or user determination of the relative importance or value of the monitor in view of the service reliability of the monitoring mechanism and the frequency of monitoring.

In one embodiment a monitoring agent may be assigned a weight based on the relative importance of the service monitored by the appliance. For example if most user requests in an environment are HTTP requests a monitoring agent monitoring HTTP availability of a server might be assigned a weight of 10 while a monitoring agent monitoring FTP availability of a server might be assigned a weight of 3. Or for example if an administrator placed a high priority on UDP applications a monitoring agent monitoring UDP availability of a server may be assigned a weight of 20 while a DNS monitoring agent may be assigned a weight of 5.

In some embodiments an appliance may compute a sum of the weights of the monitoring agents currently reporting a network service as operational. For example if five monitoring agents each assigned a weight of 30 are monitoring a network service and three of the five monitoring agents report the network service as available the appliance may determine the sum of the monitoring agents currently reporting the network service as operational to be 90. Or for example if only two monitoring agents one with a weight of 20 and the other with a weight of 40 are reporting a server as available the appliance may compute the sum of the monitoring agents currently reporting a server as operational to be 60.

The appliance also includes a configuration interface providing any type and form of interface mechanism for a user application or system to communicate with the appliance . In one embodiment the configuration interface includes a command line interface B. In another embodiment the configuration interface includes a graphical user interface A. In some embodiments the configuration interface includes an application programming interface API or development toolkit for an application program or script to communicate with the appliance .

In some embodiments the appliance displays the configuration interface via a display of the appliance. In other embodiments a configuration terminal or device connects to or communicates with the appliance and displays the configuration interface . For example the configuration device or terminal may connect to the appliance via a port and IP address of the appliance . The appliance may provide a web service listening on the port and IP address to serve a page to the user. The served page may provide a user interface for configuring the appliance . In other embodiments the configuration terminal may connect and communicate with the appliance via any type and form of connection including a monitor port serial port or USB connection.

Via the configuration interface the appliance may receive information identifying user selected metrics to use in determining the load for one or more services. In one embodiment the user identifies or selects a metric from a plurality of appliance collected metrics . In another embodiment the user identifies or selects a metric from a plurality of device provided metrics . In some embodiments the user selects one or more metrics from the appliance collected metrics and one or more metrics from the device provided metrics . The appliance may also receive via the configuration interface information identifying a user s selection or designation of a weight for a metric. For example a user may provide a value of a weight for a metric. In some embodiments the appliance receives information identifying a user provided value for a threshold .

In operation the appliance may use user selected metrics and user provided weights and thresholds for determining the load . In another embodiment the appliance may use any appliance established metrics from the appliance collected metrics for determining the load. In one embodiment a user establishes a weight and or a threshold for an appliance provided metric. So although the metric may not be user selected in some embodiments the user may control or configure the weights and or thresholds for the metrics . In other embodiments the appliance may use any combination of user selected metrics and appliance established metrics for determining the load. In another embodiment the appliance may use any combination of user provided weights and or thresholds and appliance provided weights and or thresholds for any metric used for determining the load .

Referring now to an embodiment of steps of a method for load balancing one or more services is depicted. In some embodiments the appliance may load balance one or more services using appliance collected metrics and device provided metrics . In other embodiments the appliance load balances one or more services based on user selected metrics weights and or thresholds. In brief overview at step of method multiple metrics are identified for load balancing a plurality of services A N by the appliance . At step in some embodiment the appliance receives user defined metrics to collect or monitor for a service . At step the appliance receives user selected metrics from the set of identified metrics. The user may also identify weights and or thresholds for the metric. At step the appliance determines a load for each of the services based on the user selected metric information. At step the appliance receives a client request to access a service. At step based on the load determination the appliance determines a service from the plurality of services to transmit or forward the client request. At step the appliance transmits the client s request to the appliance selected service.

In further details at step the appliance identifies metrics to collect and monitor for load balancing one or more services A N. In one embodiment the appliance provides or identifies one or more appliance collected metrics . For example a table may identify metrics collected by the appliance . In another embodiment the appliance provides one or more predetermined tables of device provided metrics such as for an appliance of Citrix F5 Cisco or Radware. In other embodiments the appliances identifies one or more metrics to collect via a network management protocol in an object or variable database such as an MIB for SNMP. In one embodiment the appliance provides a preconfigured or preinstalled MIB for a predetermined device or service such as an application.

In some embodiments the appliance queries a device or service to determine available metrics to collect and or monitor. For example in one embodiment the appliance queries a device or service for available object identifiers A N. In another embodiment the appliance uses a network management protocol such as SNMP to query for the identification of objects in a MIB . In yet another embodiment a user via the configuration interface identifies one or more object identifiers A N to collect and or monitor from a device or service such as an application.

In some embodiments at step a user specifies or defines a metric for the appliance to collect and or monitor for a service . For example the user may specify via the configuration interface an object identifier in a MIB . In other embodiments a user may configure or implement a load monitor to collect and or monitor a user defined or specified metric. In yet another embodiment a user such as a network administrator may configure specify or implement one or more object identifiers in a MIB deployed on a server . In some embodiments the user may implement an application program script service or other set of executable instructions to collect metrics on the server and store values for the metrics in the MIB on the server . For example the user may execute a program or script to monitor metrics of a service on the server and update the MIB with the collected values. The manager on the appliance may query the agent on the server for information and or values of the metrics stored in the server s MIB for the service .

At step the appliance receives information identifying a selection by a user of one or more metrics identified via the appliance. In some embodiments a user via the configuration interface selects one or more metrics provided via the appliance to use for load balancing a server . In one embodiment the appliance provides for selection by the user via the configuration interface any one or more of the appliance collected metrics or device provided metrics . A user may configure the appliance via a command line interface B or graphical user interface A to use one or more user selected metrics for determining a load or otherwise for load balancing services A N by the appliance .

In one embodiment the appliance receives information identifying that the user selected one or more appliance collected metrics . In another embodiment the appliance receives information identifying that the user selected one or more device provided metrics . In yet another embodiment the appliance receives information identifying that the user selected one or more appliance collected metrics and one or more device provided metrics .

Furthermore via the configuration interface the appliance may receive information identifying a user s designation or establishment of a weight for a metric. In one embodiment the appliance receives a user s identification of a weight for a user selected metric . In another embodiment the appliance receives a user s identification of a weight for an appliance established metric . In other embodiments the appliance may receive information identifying a user s designation or establishment of a threshold for a metric. In one embodiment the appliance receives a user s identification of a threshold for a user selected metric . In another embodiment the appliance receives a user s identification of a threshold for an appliance established metric .

At step the appliance determines a load for each of the one or more services. In one embodiment a load monitor collects and or monitors one or more of the user selected metrics for a service. In another embodiment the load monitor collects and or monitors appliance collected metrics . In some embodiments a load monitor collects metrics via a network management protocol such as SNMP. In yet another embodiment multiple load monitors A N collect and or monitor metrics for a service . In one embodiment although a user selected one or more metrics for collecting and or monitoring a service the appliance collects and monitors any one or more appliance established metrics such as number of connections response time bandwidth and number of packets for the service .

In some embodiments a vServer determines the load for each service via metric information collected and monitored by a load monitor . In another embodiment the load monitor determines the load for the service being monitored. The appliance and or load monitor may determine the load using a user selected metric weighted by a user designated weight . In some embodiments the appliance and or load monitor determines the load using a plurality of user selected metrics weighted by user designated weights . In yet another embodiment the appliance and or load monitor determines the load using a user selected metric and user identified weight and an appliance established metric and an appliance established weight . In further embodiments the appliance determines the load by summing a weighted load for each metric user and or appliance used for the service .

For the embodiment of multiple monitors A N per service the appliance may determine the load for the service by assigning a weight to each monitor and computing weighted load across all the monitors . In other embodiments the appliance and or load monitor determines a load for a service at a predetermined frequency such as every 1 msec. or every 1 sec.

In some embodiments a load monitor determines that a metric for a service has reached or exceed a threshold . In other embodiments a load monitor determines that a metric for a service is within a threshold . In one embodiment the load monitor uses an appliance established or provided threshold for a metric. In another embodiment the load monitor user a user specified or configured threshold .

At step the appliance receives a request from a client to access a service. In one embodiment a virtual server or vServer intercepts or otherwise receives a request from the client. In some embodiments the virtual server transparently intercepts the client s request to a service or server . In other embodiments a client transmits the request to the vServer . In another embodiment the vServer determines from the request that the request is for one or more services under management by the appliance . In one embodiment the vServer intercepts or receives the request via a SSL VPN connection between the client and the appliance .

At step the appliance determines which of the services to direct the client request based on determination of the load for each service . In one embodiment the vServer directs the request responsive to one or more load monitors . In some embodiments a vServer directs forwards or otherwise transmits the request to a service with the least or smallest load. In one embodiment the vServer directs forwards or otherwise transmits the request to a service with one of the lower determined loads. In some embodiments the vServer directs forwards or otherwise transmits the request to the service previously handling requests from the client . In one embodiment the vServer transmits the request to the previously used service if the load of the service is within a predetermined threshold. In some embodiments the vServer transmits the request to the first available service in a list with a determined load within a predetermined threshold.

In another embodiment a vServer directs forwards or otherwise transmits the request to a service using a round robin technique or weighted round robin. In yet another embodiment the vServer directs the request to a service based on one or more metrics such as appliance collected metrics or device provided metrics . For example in some embodiments the vServer directs the request to a service based on one or more of the following least response or round trip time least number of connections least number of packets and least bandwidth. In yet other embodiments the vServer directs the request to a service based on one or more device provided metrics such as CPU memory and disk resource usage. In another example the vServer directs the request to a service based on service resource usage on the server such as system resource usage by an application or session of the application.

In some embodiments a vServer may not direct a request to a service in which a metric for the service has exceeded a threshold such as a user configured threshold . In other embodiments a vServer may not direct to a request to a service if more than one threshold of the metrics for the service has been exceeded. In yet another embodiment a vServer may direct a request to a service if a metric threshold has been reached or exceeded. For example if one metric threshold of a plurality of thresholds has been exceeded then the vServer may still direct the request to the service if the other metric thresholds have not been reached.

In still other embodiments the appliance may determine from load monitoring that a metric of a first vServer A has reached a threshold . In response to the determination the appliance may spillover management of the services A N to a second virtual server or vServer B. In one embodiment the second virtual server B may be a backup server. In some embodiments the second virtual server B is established in response to detecting the first virtual server A has reached one or more thresholds. In another embodiment the second virtual server B may be established and running on the appliance .

At step the appliance transmits the client request to the service determined by the appliance at . In one embodiment the appliance transmits the client request in a manner transparent to the service such that the request appears to have been sent from the client instead of the appliance . For example the appliance may act as a transparent or intercepting proxy for the client . In other embodiments the appliance acts as a non transparent proxy and transmits the request to the service on the client s behalf. In some embodiment the vServer transmits the request to a service . In other embodiments a backup vServer transmits the request to the service. In yet other embodiments a second vServer transmits the request to the service.

Referring now to systems and methods for load balancing a plurality of heterogeneous devices are depicted. The appliance described herein may be deployed to load balance a plurality of services and load balancing devices. A first appliance may communicate with a second appliance A of the same type via a predetermined metric exchange protocol MEP . The first appliance obtains via the MEP protocol metrics to use for determining a load for the second appliance A. Other devices of a different type than the first appliance may be deployed in the network to perform local load balancing such as for a server farm. These devices may not communicate via the MEP protocol of the first appliance . Instead these other device may provide metrics via a network management protocol such as a Simple Network Management Protocol SNMP . Using the techniques described in conjunction with the first appliance obtains metrics from these heterogeneous devices via the network management protocol. With metrics obtains via the MEP protocol from devices of the same type and metrics obtained via a network management protocol from device of a different type the appliance may uses these combined metrics to determine a load across these heterogeneous devices and to direct request to one of the devices based on the load.

Referring now to an example embodiment of a network environment for load balancing heterogeneous devices including servers and local or other load balancing devices is depicted. In brief overview a network environment includes a plurality of different types of load balancing devices and servers. The appliance is configured as a global load balancing device to load balance the plurality of load balancing devices and servers. Each of the load balancing devices may perform local load balancing to one or more services A N. For example a first set of load balancing appliances A N of the same type may perform local load balancing of services or servers on a first network . These appliances A B may be of the same type of the global load balancing appliance . Or in some cases local load balancing appliance A N are designed and constructed to communicate metrics and other information via a metric exchange protocol . A second type of load balancing appliances A N may perform local load balancing for one or more services A N on a second network . These load balancing appliances A N may be of a different type than the first type of appliance A N and or the global load balancing appliance . The appliance A N may operate or execute one or more virtual servers or vServers A N. Appliance A N may not be designed to communicate via the MEP protocol of appliances N. Instead these appliances A N may provide metrics via a network management protocol such as SNMP. The global load balancing appliance may also perform load balancing for one or more services or servers such as a server farm . Each of the servers or services may be of a different type such as an HTTP service and an FTP service.

In view of the plurality of appliances servers and services may be deployed in a hierarchical fashion. The first appliance may be the global load balancing appliance at the top of the hierarchy to manage a plurality of other appliances A N A N and servers. In one case the appliance manages one or more servers or service A N directly. In another case the appliance manages one or more appliances A N A N which in turn manages one or more servers or services A N. An appliance managed by the first appliance may manage a second appliance which in turns manages one or more services or servers.

By way of example in view of various load balancing products the global load balancing appliance may be any of the product embodiments referred to as NetScaler manufactured by Citrix Systems Inc. The appliances A N may also be a NetScaler device configured to perform local load balancing of one or more services A N. As the appliances A N are of the same type as the global load balancing appliance these appliances are designed and constructed to communicate via a predetermine protocol or and or communication model referred to as metric exchange protocol. The appliance A N may be configured to provide metric information at a predetermined frequency to appliance . One or more of the appliances A N may comprise another type of load balancing device such as a BigIP load balancing device manufactured by F5 Networks Inc. Another one or more of the appliances A N may comprise a different type of load balancing device such as the AppDirector appliance manufactured by Radware LTD. In some cases one or more of the appliances A N may comprise a Cisco load balancing device. In other cases one or more of the appliances A N may comprise a Nortel load balancing device. Any one or more of these appliances A N may not be designed or constructed to communicate with appliance via the MEP protocol . Although the example is generally described above as Citrix NetScaler appliance providing global load balancing device any other type of load balancing device may be used.

Instead of using MEP each of these different appliances A N may provide metric information via a network management protocol such as SNMP. As illustrated in these appliances may include an agent for providing object identifiers A N via an MIB . Further to this example embodiment and as discussed in conjunction with the appliance using a manager agent communication model may query any of these appliances A N via a network management protocol to identify collect and monitor objects identified via the MIB . In some cases the appliance may use SNMP to communicate with one or more appliance A N. In other cases the appliance may use another type of network management protocol to communication another one or more of the appliances A N. In still another case the appliance may use a third type of network manager protocol to communicate with a further set of one or more appliances A N.

Appliances A N may be considered homogenous or the same type of appliance or device as appliance . In one embodiment the appliances A N is the same product family of the appliance . In another embodiment the appliance A N is a version of the same device of the appliance . In one case the appliances and A N are manufactured by the same company. In some embodiments the appliances A N and appliance are configured designed and constructed to communicating using a predetermined protocol and or communication model. In one embodiment the appliances A N and appliance are configured designed and constructed to use a proprietary or custom protocol and or communication model.

Appliances A N may be considered heterogonous or a different type of appliance or device as appliance . In one embodiment the appliances A N are manufactured by a different company than appliance . In some embodiments the appliances A N and appliance are not specifically designed to communicate using a predetermined protocol and or communication model. In one embodiment the appliances A N and appliance are not configured designed and constructed to use a proprietary or custom protocol and or communication model. In some cases appliances A N use a network management protocol instead of using a proprietary protocol for providing metrics to other devices applications or services.

Referring now to an embodiment of the appliance for identifying collecting and monitoring metrics obtained from heterogeneous network devices and servers with a plurality of protocols is depicted. The appliance may have one or more virtual servers A N configured constructed or designed to provide load balancing of the plurality of devices over one or more networks . The appliance may use one or more load monitors A N to monitor the load of each of the heterogeneous devices. In one embodiment the appliance monitors the load of appliances A N. The appliance and or load monitor uses the MEP protocol to obtain metrics from one or more of the appliances A N. In another embodiment the appliance monitors the load of appliance A N. In other embodiments the appliance monitors the load of one or more serves . In still another embodiment the appliance monitors the load among servers in a server farm . The appliance may use one or more network management protocols to obtain metrics from server server farm and appliances A N.

The appliance collects metrics via the MEP protocol and network management protocols from a wide variety of heterogeneous devices such as appliances A N and servers and homogenous devices A N. The appliance stores the metrics in a GSLB Global Server Load Balancing or global metrics table comprising any type and form of data storage element such as a file database object or data structure in memory and or on disk. The vServers and or load monitors use one or more of the metrics from the GSLB metrics to provide global load balancing of servers server farms virtual servers and load balancing devices.

The appliance may collect and monitor metrics obtained via a MEP protocol from one or more appliance A N and store them in a MEP based metrics table A N. In one embodiment the appliance uses a first type or first version of a MEP protocol to obtain metrics from a first appliance A and stores the metrics in a first table A. In another embodiment the appliance uses a second type or second version of a MEP protocol to obtain metrics from a second appliance N and stores the metrics in a second table N.

The appliance may collect and monitor metrics from appliances A N using any type and form of network management protocol NMP and store the metrics in a NMP based metrics table A N. In one embodiment the appliance uses a SNMP protocol and communication model to obtains metrics from a second type of appliance A and stores the metrics in a NMP based metric table A. In some embodiments the appliances uses a second type of network management protocol such as CIMP to obtain from a second or third type of appliance ON and stores the metrics in a NMP based metric table N. In some embodiments appliance A is a different type of appliance than appliance ON but both appliances support the same network management protocol for providing metrics.

The appliance may also collect and monitor metrics from a server and or server arm using any type and form of network management protocol NMP and store the metrics in a NMP based metrics table A N . In one embodiment the appliance uses the same network management protocol such as SNMP for obtaining metrics from a server as used for obtaining metrics from one of the appliances A N. In another embodiments the appliance uses a different type of network management protocol for obtaining metrics from the server than is used by the appliance for obtaining metrics from an appliance .

The appliance may store metrics for the GSLB metrics in a separate table for each device. For example the appliance may store metrics for a first appliance A in a first metrics table A and metrics from a second appliance A in a second metrics table A. The appliance may store metrics from a server in a server metrics tables A . In another embodiment the appliance stores metrics from a server farm to a metrics table N for the server farm.

The appliance may store metrics for the GSLB metrics in a separate table for each type of protocol. For example the appliance may store all MEP based metrics from a plurality of appliances A N in a first metrics table. In some embodiments the appliance stores a first type or version of MEP protocol based metrics in a first table A and a second type or version of an MEP protocol in a second table N. The appliance may store all SNMP based metrics from one or more appliances A N in a second metrics table. In another example the appliance may store metrics from a second type of network management protocol from one or more appliances A N to a third metrics table.

The GSLB metrics may comprise any type and form of data statistics status or information related to or associated with the operational and or performance characteristics of the appliance a server or server farm . The global metrics may comprise any type and form of data statistics status or information related to the network of the appliance and or server or server farm . The global metrics may comprise any type and form of data statistics status or information related to the services A N load balanced by the appliance A N A N. In some embodiments the global metrics comprises operational and or performance data on any client and or server connected to the appliance A N A N. In one embodiment the appliance A N A N determines operational and or performance information about any client or server it is connected to or servicing and creates metrics on these clients and or server . In this embodiment the appliance A N A N may provide these metrics to the global load balancing appliance .

In some embodiments the operational and or performance characteristic provides a metrics includes information on any of the following for an appliance or server 1 load 2 numbers and types of connections 3 resource usage 4 resource availability 5 number of requests outstanding 6 number of requests transmitted 7 number of clients servicing 8 response time information including average and historical response times 9 errors status performance or bandwidth of a connection and 10 number of sessions and states or status thereof. In another embodiment the metrics includes information on any IP or network layer information of the appliance A N A N or the connections of the appliance A N A N or of the clients and or servers serviced by the appliance A N A N. For example the information provided via metrics may include a routing table of the appliance A N A N for performing network address translation such as for an SSL VPN connection.

Via the configuration interface a user may select one or more metrics from the global metrics to use for load monitoring and determining the load . The appliance may receive information identifying a user selection of one or more metrics from the global metrics . The appliance may receive a user selection of one or more MEP based metrics of a first type of appliance. The appliance may receive a user selection of one or more NMP based metrics of a second type of appliance. The appliance may also receive a user selection of one or more NMP based metrics for any server or server farm. The user may select any combination of metrics from the global metrics to configure the appliance to perform load balancing of heterogeneous devices according to the user selected metrics.

In one embodiment the appliance uses appliance established metrics in combination with any one or more of the user selected metrics for load balancing. For example the appliance may collect and monitor the number of connections response time bandwidth and numbers of packets for any appliance or server and use these metrics with any user selected metrics for load balancing. Via the configuration interface and as also discussed in conjunction with the appliance may receive information from the user identifying designating or establishing weights and or thresholds for any appliance established metrics and or user selected metrics.

Referring now to an embodiment of steps of a method for performing global load balancing among heterogeneous devices is depicted. In brief overview at step the appliance identifies a plurality of metrics from heterogeneous devices to use for load balancing by the appliance. At step the appliance obtains metrics from one or more homogenous appliances A N or appliances of the same type as the first load balancing appliance . At step the appliance obtains metrics from heterogeneous devices such as appliances A N and or servers via a network management protocol such as SNMP. At step the appliance determines a load of one or more of the plurality of appliances servers and or service managed by the appliance based on the metrics collects at step and step . At step the appliance receives a client request to access a service. At step the appliance determines based on the load one of the appliances A N A N or one of the servers to which to direct the client request. At step the appliance transmits the request to the device appliance or service selected in accordance with the determined load.

In further details at step the appliance identifies metrics to collect and monitor for load balancing one or more appliances A N A N servers or services A N. In one embodiment the appliance provides or identifies one or more appliance collected metrics as described in conjunction with . For example a table may identify metrics collected by the appliance . In another embodiment the appliance provides one or more predetermined tables of appliance provided metrics or such as for an appliance of Citrix F5 Cisco or Radware. In other embodiments the appliances identifies one or more metrics to collect via a network management protocol in an object or variable database such as an MIB for SNMP. In one embodiment the appliance provides a preconfigured or preinstalled MIB for a predetermined appliance A N A N server or service .

In some embodiments the appliance queries an appliance A N A N server or service to determine available metrics to collect and or monitor. For example in one embodiment the appliance queries an appliance server or service for available object identifiers A N. In another embodiment the appliance uses a network management protocol such as SNMP to query for the identification of objects in a MIB . In yet another embodiment a user via the configuration interface identifies one or more object identifiers A N to collect and or monitor from a appliance A N A N server or service . In some embodiments the user via the configuration interface identifies one or more of the global metric to collect and or monitor from any one of the heterogeneous device under management.

At step the appliance collects and or monitors metrics A N from one or more appliances A N via a MEP protocol . In some embodiments the appliances A N are of the same type or homogenous with the appliance . In one embodiment the appliance collects and or monitors metrics established determined or otherwise selected by the appliance. In another embodiment the appliance collects and or monitors metrics established determined or otherwise selected by a user. In some embodiments the appliance uses a first type or version of the MEP protocol to collect metrics from a first appliance A and a second type or version of the MEP protocol to collect metrics from a second appliance N.

One or more load monitors or monitoring agents A N of the appliance may be configured constructed or implemented to identify collect and or monitor metrics via MEP protocol from one or more appliances A N. A first load monitor A may collect and monitor metric values from a first appliance A. A second load monitor N may collect and monitor metric values from a second appliance N. A third load monitor may collect and monitor metric values from the first and second appliances A N. A load monitor A N may collect and or monitor metrics on any type of schedule or predetermined frequency. In some embodiments the load monitor collects metrics responsive to the detection of an event.

At step the appliance collects and or monitors metrics A N from one or more appliances A N servers or a server farm any type and form of network management protocol. In some embodiments the appliances A N are a different type or heterogeneous with the appliance . In other embodiments one or more of the appliances A N are of a different type or heterogeneous with one or more of the other appliances A N. In one embodiment the appliance collects and or monitors metrics established determined or otherwise selected by the appliance. In another embodiment the appliance collects and or monitors metrics established determined or otherwise selected by a user. In some embodiments the appliance uses a first type or version of a network management protocol such as SNMP to collect metrics from a first appliance A and a second type or version of a network management protocol SNMP or CIMS to collect metrics from a second appliance N.

One or more load monitors or monitoring agents A N of the appliance may be configured constructed or implemented to identify collect and or monitor metrics via a network management protocol from one or more appliances A N. A first load monitor A may collect and monitor metric values from a first appliance A. A second load monitor N may collect and monitor metric values from a second appliance N. A third load monitor may collect and monitor metric values from a server or server farm . In other embodiments multiple monitors A N may collect and or monitor metrics from a plurality of appliances A N and or servers . A load monitor A N may collect and or monitor any of the metrics A N on any type of schedule or predetermined frequency. In some embodiments the load monitor collects metrics A N responsive to the detection of an event.

At step the appliance determines a load for each of the one or more appliances A N A N servers server farm or services. In some embodiments a vServer determines the load for each service via metric information collected and monitored by a load monitor . In another embodiment the load monitor determines the load for appliance server or service being monitored.

The appliance vServer and or load monitor may determine the load using a user selected metric weighted by a user designated weight . In some embodiments the appliance and or load monitor determines the load using a plurality of user selected metrics weighted by user designated weights . In yet another embodiment the appliance and or load monitor determines the load using a user selected metric and user identified weight and an appliance established metric and an appliance established weight . In further embodiments the appliance determines the load by summing a weighted load for each metric. For the embodiment of multiple monitors A N per service the appliance may determine the load for an appliance server or service by assigning a weight to each monitor and computing weighted load across all the monitors . In yet another embodiment the appliance may determine the load for an appliance server or service by assigning a weight to each of the appliance service or service.

In some embodiments a load monitor determines that a metric for an appliance server or service has reached or exceeded a threshold . In other embodiments a load monitor determines that a metric for an appliance server or service is within a threshold . In one embodiment the load monitor uses an appliance established or provided threshold for a metric . In another embodiment the load monitor uses a user specified or configured threshold .

At step the appliance receives a request from a client to access a service. In one embodiment a virtual server or vServer of the appliance intercepts or otherwise receives a request from the client. In some embodiments the virtual server transparently intercepts the client s request to a service or server . In other embodiments a client transmits the request to the vServer . In another embodiment the vServer determines from the request that the request is for one or more services under management by the appliance . In one embodiment the vServer intercepts or receives the request via a SSL VPN connection between the client and the appliance .

At step the appliance determines which of the appliances A N servers or services A N to direct the client request based on determination of the load for each of the appliances A N servers or services A N. In one embodiment the vServer directs the request responsive to one or more load monitors . In some embodiments a vServer directs forwards or otherwise transmits the request to an appliance A N A N server or service with the least or smallest load. In one embodiment the vServer directs forwards or otherwise transmits the request to an appliance A N A N server or service with one of the lower determined loads. In some embodiments the vServer directs forwards or otherwise transmits the request to the s an appliance A N A N server or service previously handling requests from the client . In one embodiment the vServer transmits the request to the previously used an appliance A N A N server or service if the load for the appliance A N A N server or service is within a predetermined threshold. In some embodiments the vServer transmits the request to the first available an appliance A N A N server or service in a list with a determined load within a predetermined threshold.

In another embodiment a vServer directs forwards or otherwise transmits the request to an appliance A N A N server or service using a round robin technique or weighted round robin. In yet another embodiment the vServer directs the request to an appliance A N A N server or service based on one or more metrics such as appliance collected metrics or device provided metrics . For example in some embodiments the vServer directs the request to an appliance A N A N server or service based on one or more of the following least response or round trip time least number of connections least number of packets and least used bandwidth. In yet other embodiments the vServer directs the request to an appliance A N A N server or service based on one or more device provided metrics such as CPU memory and disk resource usage. In another example the vServer directs the request to an appliance A N A N server or service based on resource usage on or of an appliance A N A N server or service.

In some embodiments a vServer may not direct a request to an appliance A N A N server or service in which a metric for the service has exceeded a threshold such as a user configured threshold . In other embodiments a vServer may not direct to a request to an appliance A N A N server or service if more than one threshold of the metrics for the appliance A N A N server or service has been exceeded. In yet another embodiment a vServer may direct a request to an appliance A N A N server or service even if a metric threshold has been reached or exceeded. For example if one metric threshold of a plurality of thresholds has been exceeded then the vServer may still direct the request to the appliance A N A N server or service if the other metric thresholds have not been reached.

In still other embodiments the appliance may determine from load monitoring that a metric of a first GSLB vServer A has reached a threshold . In response to the determination the appliance may spillover management of the appliances A N A N servers or services to a second GSLB virtual server or vServer B. In one embodiment the second virtual server B may be a backup GSLB server. In some embodiments the second GSLB virtual server B is established in response to detecting the first GSLB virtual server A has reached one or more thresholds. In another embodiment the second GSLB virtual server B may be established and running on the appliance .

At step the appliance transmits the client request to the appliance A N A N server or service identified by the appliance at . In one embodiment the appliance transmits the client request in a manner transparent to the appliance A N A N server or service such that the request appears to have been sent from the client instead of the appliance . For example the appliance may act as a transparent or intercepting proxy for the client . In other embodiments the appliance acts as a non transparent proxy and transmits the request to the appliance A N A N server or service on the client s behalf. In some embodiment the vServer transmits the request to the appliance A N A N server or service. In other embodiments a backup vServer transmits the request to the appliance A N A N server or service. In yet other embodiments a second vServer transmits the request to the appliance A N A N server or service

Although the systems and methods of are generally discussed in the context of global server load balancing these systems and methods may be used for local load balancing. The appliance may use metrics obtained from heterogeneous devices servers or services using a plurality of protocols to load balance one or more services or servers. Using the techniques described herein the appliance is configurable and flexible to obtain metrics from any network resource system sub system application service device etc using either a metric exchange protocol supported by the appliance and or a more general network management protocol supported by the network resource. Additionally the appliance is configurable to allow users to select any combination of available metrics from these heterogeneous network resources to perform load monitoring and load balancing of one or more services.

Referring now to an embodiment of a system for triggering a monitor in a GSLB appliance for monitoring a remote service is depicted. In brief overview the system includes a GSLB appliance in communication with an appliance bounded to a service provided by a server . The appliance includes a GSLB vserver bound to the remote service . In the remote service is bound to the appliance and is shown as a representation of the service provided via appliance . The service is in turn shown as a representation of a service provided by or executing on the server . The appliance also includes a MEP detector a monitor trigger that triggers a monitor for monitoring the remote service . The monitor trigger also includes a status evaluator .

In further details the appliances and may comprise any of the embodiments of the appliance and or the appliance described in connection with B A A and B. The appliances and may be configured for and deployed in any type or form of hierarchical load balancing topology. Any of the appliances may be deployed in any type and form of multi site and or multi appliance deployment. In some embodiments the appliances and are deployed in a hierarchical arrangement such as that of a GSLB system described in connection with . In one of these embodiments the appliance may be a GSLB appliance providing managing and or monitoring one or more services . The services can be any embodiment of the services described in connection with A and A. In some embodiments appliances and may in addition provide a load balancing service such as a local load balancing service or a GSLB service. Any of the appliances may provide any one or more services or functionality of any embodiments described in connection with . In some embodiments a GSLB vserver associated with the appliance may operate execute or provide the GSLB service. The GSLB vserver may comprise any embodiment of the vserver and or vserver described in connection with A A and B. In other embodiments the GSLB service operates or executes on one or a combination of the user space and kernel space of the appliance

The appliance may be in communication with one or more load balancing appliances in association with one or more sites logical grouping of machines and or server farms to provide global server load balancing. The appliance may be one of a plurality of load balancing appliances providing managing executing or implementing a load balancing service for a subset of the one or more sites logical grouping of machines and or server farms . In some embodiments the appliance may provide operate or execute one or more vservers . Each of the vservers associated with appliance may comprise any of the embodiments of the vserver and or vserver described in connection with A A and B. In some embodiments one of the vservers such as LB vserver may provide operate or execute the load balancing service for a group of machines or a server farm . In one embodiment the group of machines or the server farm includes the server . In other embodiments the load balancing service operates or executes on one or a combination of the user space and kernel space of the appliance

The service provided by or executing on the server may be represented conceptually in by the remote service in appliance and the service in appliance to indicate that the service is bound managed or supported by both appliances and . A service may be described as bound to a load balancing appliance vserver server device monitor or service when the bound service is monitored by managed by provided via and or initiated through any of these entities. In some embodiments a service may be bound to one or more entities. For example in one embodiment as shown in the service may be provided by the server and monitored remotely at appliance and therefore bound to appliance . The service may also be monitored at the GSLB appliance via appliance and is therefore bound to both GSLB appliance and appliance . The service may be any embodiment of the services described above in connection with A and A.

A service may be associated with a state. A state of a service can represent indicate or be identified or determined from one or more metrics conditions and or information associated with the service the server or the network environment in relation to the service and or the server . In some embodiments a state may be one of the metrics described above in connection with A and B. In other embodiments a state may be identified or determined from one or more metrics conditions other states and or other information. A state can be represented as a parameter data field or value such as a Boolean numeric string code or alphanumeric text string value. A state of a service may be identified monitored determined or updated by an appliance a server providing the service a vserver associated with the service a monitoring agent an SNMP agent a monitoring agent and or any other state or metric monitoring module.

A state of a service may be described or specified in the context of an appliance a server providing the service a vserver associated with the service a monitoring agent an SNMP agent a monitoring agent or any other state or metric monitoring module. Therefore the state of a service may be the same different or expressed in a different way when viewed or evaluated between the contexts of two entities. For example the state of a service may be unknown at an appliance but is known at an appliance due to a network disruption between appliance and appliance . In some embodiments a state may be representative of a plurality of services or a group or type of service. A group of services may for example represent one or more services bound to a load balancing LB vserver . For example the state of a service bound to a LB vserver may be unknown but reported as UP if the state of at least one other service bound to the LB vserver is determined to be UP.

The state of a service may be specified or updated by a user an executing program code or any device for example an appliance bound to the service . In some embodiments an entity bound to a service can update the state of the service . Further the state of a service may be calculated generated or evaluated by any combination of a user an executing program code or any device. The state of a service may be updated or evaluated upon a trigger which can be any event initiated by any combination of a user an executing program code or any device. The triggering event may be periodic scheduled ad hoc indeterministic or otherwise.

The state of a service may be updated by any entity the service is bounded to. In embodiments where a service is bounded to multiple entities each of the entities may update a state of the service for that entity. In some embodiments the state of a service may include any of the following UP DOWN OFS TROFS and TROFS DOWN and TR DN. For example in one embodiment the state of a service may be determined to be UP if the service is active and can be monitored. In another embodiment the state of a service may be determined to be UP from via metrics associated with the service . In some embodiments the state of a service is not UP unless the state of a load balancing server or vserver the service is bounded to is also UP. TROFS and TROFS DOWN may be referred to as administrative DOWN states in some embodiments and may be differentiated from DOWN states for example because a TROFS service may be disabled with a delay. Embodiments of available states of a service is described further below in Table 1.

A service can be associated with an effective state. The effective state may comprise any type and form of indicator or representation of a further detail or status information of an operation or performance of a service or vServer. For example while a state may indicate an operational status of the service as up the effective state may indicate further information about the operation or performance of the service in the up state such as an operational or performance characteristics. In some embodiments the effective state identifies whether or not any type and form of threshold has been reached. In many embodiments the effective state identifies any information on a load of or uses of resources by the service or vServer. In other embodiments the effective state indicates any information on bandwidth number of connections number of packets of the service or vServer. In some embodiments the effective state indicates any of the information as described in the embodiments of Table 1. In another embodiment the effective state indicate a cause error or reasons why a state of a server or vServer is down. In one embodiment an effective state may be equivalent to or substantially the same as the state of the service .

In some embodiments a service effective state is not affected by the availability of additional servers or vservers to provide the same type of service but a service state is affected. In some embodiments the effective state of a service is affected if a server or vserver providing the service exceeds a threshold limit for providing services. When threshold limits are exceeded a flag e.g. THRESH REACH may be set for example to affect the operation of a load balancing service or to effect a change in the effective state. In some embodiments an entity bound to a service can update the effective state of the service. The effective state of a service may or may not depend on the state of an entity e.g. a load balancing server or vserver bound to the service.

The state of a load balancing server or vserver may be any form or type of metric representation indicator value or parameter related to the load balancing server or vserver. In some embodiments the state of a load balancing server or vserver is analogous to the state of a service. The state of a load balancing server or vserver can include one or more of the following enabled disabled unknown UP and DOWN. For example in one embodiment the state of a vserver can be UP or DOWN only if the state is also enabled when a state of the vserver is disabled the state may not have any other value. In another embodiment UP represents an active vserver or server i.e. providing a service while DOWN represents an inactive vserver or server i.e. not providing a service . In some embodiments a server or vserver is disabled when it cannot provide a service a server or vserver is enabled when it can provide a service.

A GSLB appliance may evaluate any type or form of metrics to determine the state and or effective state of a service server or vserver. Metrics may be communicated between appliances and servers via any form and type of protocols described in connection with any embodiment of A and B such as MEP and SNMP. For example site metrics network metrics and persistence information may be communicated. In some embodiments a metric exchange connection is established across one or more networks to enable communication of metrics. In one of these embodiments MEP establishes one or more metric exchange connections . By way of illustration and not to be limiting in any way MEP is described as representative of a platform or protocol for communicating metrics. In some embodiments a mechanism for explicit monitoring may be used for determining metrics and or states and effective states of a remote service load balancing server or vserver . Explicit monitoring may be implemented in conjunction with or independent of MEP. In one embodiment a load balancing appliance may update the state of a remote service using the state as returned by MEP. In another embodiment a load balancing appliance may update the state of a remote service using explicit monitoring and ignoring MEP. In yet another embodiment a load balancing appliance may use both MEP and explicit monitoring to update the state of a remote service .

A state of a service may indicate whether at least one server of the service is up or available. A state of a service may indicate whether at least one vserver of the service is up or available. A state of a service may indicate whether at least one server and or vserver providing services of the same service type as the service is up or available. An effective state of a service may indicate whether the service has exceeded a threshold. An effective state of a service may indicate whether a group of services of the same service type as the service have exceeded a threshold. The threshold may be associated with a load balancing vserver a load balancing appliance a service type a service or a server or vserver providing the service . The threshold may also be specified in a policy and or configured by any user program code load balancing service and or device.

A state of a service e.g. remote service server vserver e.g. GSLB vserver and LB vserver or of MEP may be included in a corresponding status of the service server vserver or MEP. In some embodiments a status may include one or more states effective states and or any other type or form of information. In other embodiments a status is used interchangeably with state e.g. an UP status is equivalent to an UP state as applied in portions of this disclosure.

The table below shows embodiments of various states and effective states associated with a GSLB and or LB system and describes various scenarios conditions and or indicators for identifying and or determining values for each of the states and effective states. In some embodiments other scenarios conditions and or indicators may exist to evaluate to a certain state or effective state. In other embodiments a subset of the listed scenarios conditions and or indicators may be used to evaluate a state or an effective state.

Still Referring to the GSLB appliance may include an MEP detector . An MEP detector may comprise logic functions or operations to detect the state of a connection or otherwise the state of obtaining metrics and service information via a metric exchange connection. In some embodiments the state of MEP can include one or more of the following active UP enabled inactive DOWN and disabled. The state of MEP may be determined by any form of type of communications between the MEP detector and the network and or appliance . The MEP detector may be designed and constructed to generate receive and or process any type and form of command message or communication to evaluate the state of MEP. For example regular and or consistent metric exchange on the metric exchange connection may indicate that MEP is UP or operational. The MEP detector may also send requests and determine the state of MEP based on a response or absence of a response. Further the MEP detector may comprise any of the embodiments or components of the monitoring agent described in connection with and or the SNMP agent described in connection with and or the monitoring agent described in connection with . In some embodiments the MEP detector may receive an event message or communication any component of the appliance to identify a status of MEP. In some embodiments the MEP detector uses a monitoring agent to monitor the status of the metric exchange connection for any one or more appliances.

In further details an MEP detector may comprise software hardware or any combination of software and hardware. The detector may comprises an application program library script process task thread or any type and form of executable instructions. Although the MEP detector is illustrated as part of the appliance in some embodiments the MEP detector may be a separate engine component or module of the appliance or another device. In these embodiments the MEP detector may be in communication with or interface to the appliance

The appliance may include a monitor trigger to trigger a monitor such as the monitoring of a service. In some embodiments the monitor trigger triggers or executes an explicit monitoring responsive to any determination of state and effective state of a service or status state of the MEP connection. The monitor trigger may trigger initiate halt or terminate a monitor for monitoring a state of a remote service . A monitor may be an application or a module and may provide any type of form of interface such as a CLI GUI and or shell service described in connection with . A monitor may probe poll or communicate with network nodes such as appliance and server to obtain data such as information metrics or states associated with a remote service . In some embodiments a user may via an interface provided by the monitor control the collection of data and or monitor information representative of collected data. In some embodiments the monitor may comprise any of the embodiments or components of the load monitor described in connection with and or the performance monitoring service described in connection with .

The monitor trigger may comprise software hardware or any combination of software and hardware. The monitor trigger may comprise an application program library script process task thread or any type and form of executable instructions. Although the monitor trigger is illustrated as part of the appliance in some embodiments the monitor trigger may be a separate engine component or module of the appliance or another device. In these embodiments the monitor trigger may be in communication with or interface to the appliance

In some embodiments the monitor trigger may comprise any of the embodiments or components of the collection agent described in connection with and or monitoring agent described in connection with . The monitor trigger may include a status evaluator for probing receiving analyzing evaluating and or determining the state or status of a remote service . The status evaluator may comprise software hardware or any combination of software and hardware. Although the status evaluator is illustrated as part of the monitor trigger in some embodiments the status evaluator may be a separate engine component or module of the monitor trigger or another device. In these embodiments the status evaluator may be in communication with or interface to the monitor trigger .

The appliance such as via the monitor trigger may include any type and form of status evaluator . The status evaluator may determine a status of a monitor service and or metric exchange connection . The status evaluator may evaluate any state and or effective state information of a service. The status evaluator may evaluate any status information of the metric exchange connection as provided by the MEP detector . The status evaluator may evaluate any status of the metric exchange connection as provided by a monitor. The status evaluator may evaluate any state and or effective state information of the metric exchange connection and or service as provided by the MEP protocol and metric exchange connection .

In some embodiment the status evaluator may poll the appliance and or one or more servers for metrics status state and or other information. The status evaluator may perform polling via the metric exchange connection and or from a monitor . In other embodiments the status evaluator may intercept or receive metrics state and or other information from the metric exchange connection and or from the monitor . The status evaluator can process or evaluate any type or form of received metrics and information to determine the status of a remote service b and provide this to the GSLB service or the monitor trigger . In some embodiments the GSLB service using the status information in conjunction with information from the MEP detector may initiate any type or form of GSLB operation. In other embodiments the monitor trigger using the status information in conjunction with information from the MEP detector may perform any type or form of monitoring operations such as triggering the creation of a monitor and or triggering a monitor to perform monitoring operations.

The table below shows embodiments of the behavior of a GSLB system supported by one or both of MEP and a monitoring mechanism 

A user may configure the GSLB service with one of a plurality of operational modes features function and options hereafter generally referred to as mode s . For example in one mode one or both of the MEP and explicit monitoring may be enabled or disabled. A default mode may be pre configured for the GSLB service. A user program code and or device may change the mode or add additional options or features for example based on any prevailing or forecasted conditions. In some embodiments the mode and or any option or feature changes can be updated at any time including during status updates and load balancing operations.

A GSLB operation matrix such as Table may or may not include all features of the GSLB service. Additional options for configuring load balancing operations may be added or configured into the GSLB service. Additional features or options may also be included in one or more options and or policies. For example in one embodiment features to trigger the creation and or execution of a monitor and or command an existing or created monitor to perform monitoring operations may be provided or managed by one or more options. These options and other features of the GSLB operation matrix may be included in one or more policies such as a load balancing policy associated with a policy engine which may include any embodiment or component of policies and policy engine described in connection with . In some embodiments the options and features of the GSLB operation matrix are stored and accessed from a storage device residing on the appliance or in any networked device and may include any embodiment or component of storage and or main memory described in connection with .

In some embodiments options for triggering a monitor for monitoring a remote service in a load balancing environment hereafter generally referred to as trigger monitor options may include ALWAYS MEPDOWN MEPDOWN SVCDOWN and NEVER. In some embodiment the NEVER option may be disabled from the system or is simply not available. The ALWAYS option may operate to always trigger monitoring if an existing monitor is bound to a remote service. The MEPDOWN option may operate to trigger a monitor to a remote service if MEP state associated with a site corresponding to the remote service is detected as down. The MEPDOWN SVCDOWN option may operate to trigger a monitor to a remote service if MEP state associated with a site corresponding to the remote service is detected to be DOWN or detected as UP but reports a service state and an effective state of the remote service as DOWN. In some embodiments the NEVER option may operate such that monitors are never triggered and bound to the GSLB service. The GSLB service and trigger monitor options may rely on one or more existing metric exchange protocols and monitoring mechanisms to perform remote service monitoring. In some embodiments a monitor triggered by a trigger monitor option may operate substantially similar to monitors used in existing metric exchange protocols and monitoring.

In some embodiments special conditions under trigger monitor options are illustrated below in two cases 

When a service state is UP and the trigger monitor option is ALWAYS a monitor is always active and bound to the service. If the trigger monitor option is changed to MEPDOWN the monitor may report a failure at obtaining a service status. The failure may be from monitoring operations scheduled before the option was changed to MEPDOWN. A change to MEPDOWN can terminate monitoring operations if the state of MEP is up resulting in the failure. All other outstanding monitoring operations may be allowed to complete. The same special case may apply to a change to MEPDOWN SVCDOWN from ALWAYS.

The behavior to terminate monitoring operations in these scenarios may in some embodiments be changed to allow the scheduled monitoring operations to complete avoiding the failure.

When a service state is initially identified as UP and the trigger monitor option is MEPDOWN monitoring operations are initiated if the MEP state is detected as DOWN. While the monitoring operations are in progress the state of the remote service will be kept unchanged from the last state received from MEP instead of updating the service state as up. This can prevent triggering a load balancing operation until a validated service state is returned by the monitoring operations.

Similarly when the trigger monitor option is MEPDOWN SVCDOWN monitoring probes are triggered when the MEP state is UP and the state of a service is initially identified as DOWN. The service state will not be updated to DOWN until the monitoring operations returns a validated service state.

In some embodiments one or more features included in trigger monitor options may be combined into fewer options or into one or more modes of the GSLB service. In one embodiment the one or more features may be included in any of the GSLB modes to the extent that they do not conflict with the existing operation of each mode. In another embodiment a load balancing service using one or more of the following load balancing methods may support one or more trigger monitor options least connection least response time least bandwidth least packets RTT dynamic proximity source IP hash round robin and static proximity. In still another embodiment the methods of source IP hash round robin and static proximity may not support any of the trigger monitor options. In some embodiments one or more of these load balancing methods are available in the CITRIX NETSCALER GSLB solution manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla.

In some embodiments an option providing or managing specific load balancing operations e.g. trigger monitor options can be set on any associated entities such as a remote service b monitor server vserver b policy policy engine appliance b or load balancing service. For example in one embodiment an option is set on each remote service bound to a GSLB virtual internet protocol VIP address associated with the GSLB appliance . In another embodiment an option may be set on any GSLB entity or site such as the appliance such that all services bound to the site will inherit this option. For example in some embodiments a trigger monitor option can be set on a site using the following command line entry set gslb site triggerMonitor ALWAYS MEPDOWN MEPDOWN SVCDOWN In one of these embodiments one of the options for example ALWAYS can be set as a default option for a load balancing service. One or more sites may be configured with the default setting.

In some embodiments certain options may apply to remote services and not to local services. For example in one embodiment trigger monitor options may apply only to remote services because MEP and MEP states does not affect the monitoring of local services. Another reason may be because a monitor is automatically bound to all local services and do not have to be triggered. In some of these embodiments trigger monitor options can be set on local services for example to maintain common batch scripts for both local and remote services. For local services actions configured for trigger monitor options may be replaced with a no operation or NO OP. This may help to avoid triggering redundant or duplicate monitoring operations. Monitor trigger options may also be extended to any monitoring exchange protocols such as SNMP. For example in a SNMP environment supporting CITRIX NETSCALER the trigger monitor option is configured in a GSLB site table in a MIB.

Referring now to a flow diagram depicting an embodiment of steps of a method for triggering a monitor responsive to a status of MEP is shown. In brief overview at step a user configures a GSLB service provided by a first appliance for triggering a monitor to monitor a status of a service provided via a second appliance as a remote service for GSLB the first appliance identifying the service . At step the first appliance receives metrics of the second appliance via a metric exchange connection between the first appliance and the second appliance . At step the first appliance identifies via the metrics that a status of the service provided via the second appliance is up. At step the first appliance determines whether a status of the metric exchange connection is up or down. At step the first appliance receives metrics of the second appliance via a metric exchange connection between the first appliance and the second appliance . At step the first appliance identifies via the metrics that a status of the service provided via the second appliance is down. At step the first appliance identifies via the metrics that an effective status of the service provided via the second appliance is up or down. At step responsive to the determination the first appliance triggers a monitor to monitor the status of the service provided via the second appliance . At step the first appliance obtains a second status of the service via the monitor .

In further details of step a user configures a GSLB service provided by a first appliance . In some embodiments the service is configured for triggering a monitor to monitor a status of a service provided via a second appliance as a remote service for GSLB the first appliance identifying the service . In some embodiments a user program code and or device may configure the GSLB service. In other embodiments the GSLB service may be automatically configured when the appliance is initialized or may be pre configured. In one embodiment the service may be configured via one or more policies. In one embodiment the GSLB service may be configured with one of a plurality of options to control the triggering of a monitor to monitor a status of a service . In some embodiments one or more features from these options may be available through the GSLB service and no configuration step may be required. The GSLB may be configured to monitor and or load balance a plurality of sites deployed in any topology such as in a multi site and or multi appliance deployment.

In some embodiments as part of the configuration or independent of the configuration the first appliance identifies a service which may be a remote service hereafter generally sometimes referred to as service . In some embodiments the first appliance identifies the service via configuration of the service or vServer on the first appliance . In another embodiments the first appliance identifies the service via any site hierarchy configuration or GSLB configuration. In other embodiments the first appliance may identify the service via a communication with a second appliance . The first appliance may identify the service responsive to a load balancing policy associated with the GLSB service provided by the first appliance . Further the first appliance may identify the service via one or more metric exchange protocols and or monitoring mechanism. The one or more metric exchange protocols may establish one or more metric exchange connections between the first appliance and the second appliance . In one embodiment the first appliance may identify the service via communications with the second appliance using a metric exchange connection .

At step the first appliance receives metrics of the second appliance via a metric exchange connection between the first appliance and the second appliance . In some embodiments the first appliance receives metrics associated with one or more entities including the service the server providing the service the second appliance the load balancing LB vserver associated with the second appliance or any other component associated with the GSLB system. The first appliance may receive the metrics responsive to the operation of one or more metric exchange protocols and or monitoring mechanisms. The first appliance may receive the metrics via a receiver or network engine on the appliance . In some embodiments step may be repeated for example in a polling mode. In one of these embodiments step may be repeated until the occurrence of an event such as an event in the MEP detector .

In further details of step in one embodiment the first appliance identifies via the metrics that a state of the service provided via the second appliance is up. In some embodiments the first appliance identifies via a status evaluator the status of the service. The status of the service may include a state and an effective state of the service. The first appliance may identify via the metrics that the state of the service is up if one or more servers associated with or providing the service is running. The first appliance may identify via the metrics that the state of the service is up if one or more servers associated with or providing the service type of the service is running. The first appliance may also identify via the metrics that the state of the service bound to the GSLB vserver is up if the state of one or more services bound to the GSLB vserver is up. The first appliance may identify via the metrics that an effective state of the service is down if a threshold of the service has been exceeded. In some embodiments the state and effective state of the service may be identified or determined according to the conditions summarized in Table 1.

In one embodiment the status evaluator processes the received metrics alone or in combination with any other information or policy to evaluate or determine the status of the service. The first appliance may identify that the state of the service is up. The first appliance may identify that the state of the service is down unknown or some other value. In some embodiments step may be optional and can be skipped and or preceded by step . In some embodiments if the state of the service is up the operation of the GSLB service may proceed to step . If the state of the service is not up the operation of the GSLB service may proceed according to one or more policies configured options and or a GSLB operation matrix e.g. Table 2 .

In further details of step in one embodiment the first appliance determines a state of the metric exchange connection such as whether MEP is up or down. In some embodiments the first appliance determines via a MEP detector whether a state of the metric exchange connection is up down unknown or some other value. The MEP detector may determine the state via any means including initiating communications with the second appliance and or intercepting communications on the metric exchange connection. The MEP detector may determine the state by processing the received metrics alone or in combination with any other information or policy to evaluate or determine the state of the metric exchange connection . If the state of the metric exchange connection is neither up nor down the operation of the GSLB service may proceed according to one or more policies configured options and or a GSLB operation matrix e.g. Table 2 . In some embodiments if the state of the metric exchange connection is up the operation of the GSLB service may proceed to step . If the state of the metric exchange connection is down the operation of the GSLB service may proceed to step . In some embodiments the state of the metric exchange connection may change before proceeding to either step or .

In further details of step in one embodiment the first appliance receives metrics of the second appliance via the metric exchange connection between the first appliance and the second appliance . In some embodiments responsive to the MEP detector determining that the state of the metric exchange connection is up the first appliance may receive request and or accept metrics of the second appliance via the metric exchange connection between the first appliance and the second appliance . In some embodiments step is the same or substantially similar to step and may incorporates any of the embodiments described in connection with step . In one embodiment step is skipped if step is skipped.

In further details of step in one embodiment the first appliance identifies via the metrics that a state of the service provided via the second appliance is down. In some embodiments responsive to receiving metrics from the second appliance the first appliance may identify a status of the service provided via the second appliance . In some embodiments the first appliance identifies via the status evaluator the status of the service which may include a state and an effective state of the service. In one embodiment the status evaluator processes the received metrics alone or in combination with any other information or policy to evaluate or determine the status of the service. The first appliance may identify that the state of the service is down. The first appliance may identify that the state of the service is up unknown or some other value. In some embodiments if the state of the service is up the operation of the GSLB service may proceed to step . If the state of the service is not down the operation of the GSLB service may proceed according to one or more policies configured options and or a GSLB operation matrix e.g. Table 2 . In some embodiments the state and effective state of the service may be identified or determined according to any embodiments of the conditions described in Table 1.

In further details of step in one embodiment the first appliance identifies via the metrics the status of the service provided via the second appliance . In one embodiments the status is determined to be up or down via a state and or effective state. In some embodiments the first appliance identifies via the status evaluator the status of the service which may include a state and an effective state of the service . In one embodiment the status evaluator processes the received metrics alone or in combination with any other information or policy to evaluate or determine the effective status of the service. The first appliance may identify that the effective state of the service is up or down. The first appliance may identify that the effective state of the service is unknown or some other value. In one embodiment step may be optional and or skipped. In some embodiments the effective state of the service may be identified or determined by any component of the appliance according to any embodiments of the conditions described in Table 1. In some embodiments operation of the GSLB service may proceed to step if the effective state is identified to be down. In other embodiments the operation of the GSLB service may proceed according to one or more policies configured options and or a GSLB operation matrix e.g. Table 2 .

In further details of step in one embodiment the first appliance triggers a monitor to monitor the status of the service provided via the second appliance . In some embodiments responsive to the determination that the state of the metric exchange connection is down the first appliance triggers a monitor to monitor the status of the service provided via the second appliance . In other embodiments responsive to the determination that the state of the metric exchange connection is down and the identification that the state of the service is down the first appliance triggers a monitor to monitor the status of the service provided via the second appliance . In one of these embodiments responsive to the determination that the state of the metric exchange connection is down and the identification that the state of the service is down and the effective state of the service is up the first appliance triggers a monitor to monitor the status of the service provided via the second appliance . In another of these embodiments responsive to the determination that the state of the metric exchange connection is down and the identification that the state of the service is down and the effective state of the service is down the first appliance triggers a monitor to monitor the status of the service provided via the second appliance . In some embodiments the appliance triggers the monitor via a monitor trigger .

In some embodiments if a monitor already exists and is bound to the service the first appliance may not trigger another monitor. The first appliance may via the monitor trigger identify a monitor bound to the service. In one of these embodiments if a monitor already exists and is bound to the service operation of the GSLB service may proceed to step . The first appliance may via a monitor trigger identify a monitor bound to the service. The first appliance may bind the monitor to the service. In some embodiments the first appliance may enable the monitor bound to the service . In one embodiment responsive to the determination that the metric exchange connection is down the first appliance may enable the monitor bound to the service . In other embodiments the first appliance may use the established monitor to determine or confirm the status of the service.

At step the first appliance obtains a second status of the service via the monitor. In some embodiments the triggered or existing monitor may initiate a probe request or any form or type of communication to obtain a second status of the service. The second status may include a second state and or second effective state of the service. In some embodiments the monitor may probe the metric exchange connection for the second status or re establish the metric exchange connection to obtain the second status if the connection was disrupted. In one embodiment the first appliance determines that the second state is up. In another embodiment the first appliance determines that the second state is down. The first appliance may determine the second state via the monitor . Further the first appliance may determine the second effective state of the service via the monitor or otherwise as up down unknown or some other value.

In some embodiments the second appliance includes a status evaluator and identifies or determines the first and second statuses of the service. The first and second statuses of the service may include the first and second states and or effective states of the service. The second appliance may transmit via a transmitter the statuses of the service to the first appliance . In some embodiments of steps and the first appliance receives the statuses states and effective states of the service identified or determined by the second appliance

In one embodiment the method includes a first appliance receiving metrics of a second appliance via a metric exchange connection between the first appliance and the second appliance the first appliance comprising a GSLB service and identifying a service provided via the second appliance as a remote service for GSLB step identifying via the metrics that a state of the service provided via the second appliance is up step determining that the metric exchange connection is up and that the second appliance identifies a state as down and an effective state as down steps responsive to the determination triggering a monitor to monitor the status of the service provided via the second appliance step and obtaining via the monitor a second status of the service step . The method may include determining by the first appliance that the second state of the service is down.

In another embodiment the method includes a first appliance receiving metrics of a second appliance via a metric exchange connection between the first appliance and the second appliance the first appliance comprising a GSLB service and identifying a service provided via the second appliance as a remote service for GSLB step identifying via the metrics that a state of the service provided via the second appliance is up step determining that the metric exchange connection is up and that the second appliance identifies a state as down and an effective state as down step responsive to the determination triggering a monitor to monitor the status of the service provided via the second appliance step and obtaining via the monitor a second status of the service step . They method may include determining by the first appliance that the second state of the service is down.

In still another embodiment the method includes a first appliance receiving metrics of a second appliance via a metric exchange connection between the first appliance and the second appliance the first appliance comprising a GSLB service and identifying a service provided via the second appliance as a remote service for GSLB step identifying that the metric exchange connection is up step determining that the metric exchange connection is down step responsive to the determination triggering a monitor to monitor the status of the service provided via the second appliance step and obtaining via the monitor a second status of the service step .

In yet another embodiment the method includes a first appliance receiving metrics of a second appliance via a metric exchange connection between the first appliance and the second appliance the first appliance comprising a GSLB service and identifying a service provided via the second appliance as a remote service for GSLB step identifying that the metric exchange connection is up step determining that the metric exchange connection is up and that the second appliance identifies a state as down and an effective state as up steps responsive to the determination triggering a monitor to monitor the status of the service provided via the second appliance step and obtaining via the monitor a second status of the service step .

It should be understood that the systems described above may provide multiple ones of any or each of those components and these components may be provided on either a standalone machine or in some embodiments on multiple machines in a distributed system. In addition the systems and methods described above may be provided as one or more computer readable programs or executable instructions embodied on or in one or more articles of manufacture. The article of manufacture may be a floppy disk a hard disk a CD ROM a flash memory card a PROM a RAM a ROM or a magnetic tape. In general the computer readable programs may be implemented in any programming language such as LISP PERL C C C PROLOG or in any byte code language such as JAVA. The software programs or executable instructions may be stored on or in one or more articles of manufacture as object code.

While the invention has been particularly shown and described with reference to specific embodiments it should be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention as defined by the following claims.

