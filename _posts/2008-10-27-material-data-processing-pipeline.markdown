---

title: Material data processing pipeline
abstract: A method for generating a shader that is used by a rendering engine to render a visual representation of a computer model. A shader generation engine receives a set of surface data that describes a surface in view of various lighting conditions. The shader generation engine compresses the set of surface data to generate a compressed representation of the set of surface data based on a selected compression algorithm. The shader generation engine generates a shader based on the compressed representation that is configured to be implemented with a rendering engine, and generates a set of shader data based on the compressed representation that includes a set of material characteristics for coloring pixels of the visual representation. Advantageously, the shader generation process is simplified because different compression algorithm-rendering engine shader combinations can be generated without manually programming the shaders.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09342901&OS=09342901&RS=09342901
owner: AUTODESK, Inc.
number: 09342901
owner_city: San Rafael
owner_country: US
publication_date: 20081027
---
The present invention generally relates to the field of computer graphics. More specifically the invention relates to a material authoring pipeline.

The term computer aided design CAD refers to a broad variety of computer based tools used by architects engineers animators video game designers and other graphics and design professionals. CAD applications may be used to construct computer models or drawings representing virtually any imaginable two dimensional 2D or three dimensional 3D construct. Initially such a construct is defined in part by the regions making up the surface of that construct. A rendering application may be used to add detail to the construct by applying materials to various regions of the construct. Additionally computer models can be static or animated where time is a fourth dimension. For example rendering a motion blurred object is a four dimensional 4D rendering process.

The perceived realism of a rendered scene depends in part on the quality of the materials applied to constructs within the scene. Materials are typically generated using a program known in the art as a shader that transforms raw data into a computer representation. The raw data associated with materials is often generated by scanning surfaces using a material scanner. For example a sample of sandpaper may be scanned to gather raw data that could be used to generate a material resembling the actual texture of the sandpaper. Material scanners are often configured with a number of mobile light sources of variable intensity that illuminate the surface from many different angles and with a range of intensity. A number of mobile digital cameras may then record the response of the surface to the different configurations of lighting and intensity. The data output by a material scanner describes the response of the scanned surface to the variety of lighting conditions.

One drawback of this conventional approach is that materials based on the captured data are usually generated for use with only one rendering engine due to the complex programming involved. Additionally if a material is created that implements a first BxDF compression algorithm then there is no way to determine how the quality of the resultant material compares to a material that implements a second BxDF compression algorithm without explicitly programming both materials. These inherent limitations cause programming of materials using conventional techniques to be an inefficient and cumbersome endeavor.

Accordingly there remains a need in the art for an efficient way to generate shaders from scanner data.

Embodiments of the invention provide a method for generating a shader that is used by a rendering engine to render a visual representation of a computer model. A shader generation engine SGE receives a set of surface data that describes a surface in view of various lighting conditions. The shader generation engine compresses the set of surface data to generate a compressed representation of the set of surface data based on a selected compression algorithm. The shader generation engine generates a shader based on the compressed representation that is configured to be implemented with a rendering engine and generates a set of shader data based on the compressed representation that includes a set of material characteristics for coloring pixels of the visual representation.

Advantageously the shader generation process is simplified compared to prior art techniques. A shader generation engine is capable of generating different shaders for a particular surface according to a user selection of a compression algorithm and a user selection of a rendering engine allowing the user to compare the performance quality of shaders associated with different compression algorithm rendering engine combinations without manually programming the shaders.

Additionally the components illustrated in may be implemented as software applications that execute on a single computer system or on distributed systems communicating over computer networks such as local area networks or large wide area networks such as the Internet. For example a shader generation engine SGE may include a software program executing on a client computer system at one physical location communicating with a rendering engine at another physical location. Also in one embodiment the rendering application and the SGE may be provided as application program or programs stored on computer readable storage media such as a CD ROM DVD ROM flash memory module or other tangible storage media.

As shown material authoring pipeline includes without limitation SGE one or more representation specific shaders shader data associated with each representation specific shader one or more rendering engines and input file . Material authoring pipeline optionally includes a BxDF file and an encryption library . Input file is provided by a user and includes data that describes the response of a surface to a variety of lighting conditions referred to herein as surface data. The surface data stored within input file is gathered by scanning the surface with a material scanner as previously described in . Numerous material scanners are commercially available and each may generate surface data in a different format. In one embodiment the surface data may be converted by the user into a vendor specified format. The user may for example program a routine to convert the surface data into the vendor specified format or the user may configure the material scanner to output surface data directly to the vendor specified format. In one embodiment input file is an Extensible Markup Language XML file.

Input file is received by SGE and processed by a conversion library . Conversion library is configured to convert the surface data stored within input file to a material scanner neutral format for further processing. This format approximates the response of the surface as a bidirectional reflectance distribution function BRDF and a bidirectional transmittance distribution function BTDF . Referring back to the BRDF is shown to correspond to specular reflection and reflected scatter distribution whereas the BTDF is shown to correspond to specular transmission and transmitted scatter distribution . These distributions are collectively known as the BxDF. Referring again to input file is converted into BxDF data by conversion library .

In one embodiment BxDF file that includes BxDF data is directly provided by a user to SGE . A user may for example wish to hide proprietary surface data output by a material scanner. For example a user may create a computer program to convert the proprietary surface data into BxDF file . In such an embodiment input file is not input by the user and conversion library is bypassed altogether.

An I O library within SGE includes subroutines corresponding to a variety of compression algorithms that may be used to compress BxDF data . The compression algorithms implement different models and are provided as subroutines within the I O library . These models may include the Phong model the Blinn Phong model the Ward model the Cook Torrence Model the Ashikmin Model the Lafortune model the He model the Splines model the spherical harmonic model the spherical wavelets model the singular values decomposition model the normalized decomposition model the non negative matrix factorization model the harmonic factorization model and the importance sampling oriented factorization model among others. I O library receives a user selection of a compression algorithm and generates a compressed factored representation of BxDF data . In one embodiment the precision of the selected compression algorithm may also be specified by the user.

Compressed factored representation is stored within a representation that also includes a representation specific I O module . Representation specific I O module receives user input specifying a particular rendering engine and is configured to generate representation specific shader and associated shader data based on this selection. Representation specific shader is a software program that is executed by the selected rendering engine to generate a visual representation of the surface associated with the compressed factored representation . This visual representation may be output to a computer display.

Shader data is associated with representation specific shader and provides data used by representation specific shader and rendering engine to generate the pixels comprising the visual representation of the surface. In one embodiment shader data may be encrypted. Encryption library provides encryption information that may be used by the representation specific I O module and the I O library to encrypt the shader data .

Rendering engines may include software rendering engines such as Mental Ray or RenderMan hardware rendering engines that use OpenGL or DirectX application programming interfaces APIs or third party rendering engines such as Gelato. Rendering engines may be provided separately from SGE or vendor provided rendering engines may be provided with SGE . In one embodiment representation specific I O module may perform an optimization on compressed factored representation based on a user selection of rendering engine prior to generating representation specific shader and shader data .

Once representation specific shader and shader data are generated rendering engine may render a visual representation of the surface on a computer display. A user may then visually inspect the results. The user may also select a different compression algorithm or a different rendering engine with which another representation specific shader may be generated using SGE . The first representation specific shader and associated shader data may be saved and a second representation specific shader and associated shader data may then be generated based on a user selection of a second compression algorithm and or second rendering engine . The user may generate any number of representation specific shaders and associated shader data based on the BxDF data where the number may be equal to the number of compression algorithm subroutines in the I O library multiplied by the number of available rendering engines . Each combination may be used to render a different visual representation of the material described by BxDF data . The user may compare the results of rendering using one representation specific shader with the results of rendering using a different representation specific shader to determine which representation specific shader provides the better result without explicitly programming each representation specific shader from scratch.

In alternative embodiments a third party may generate the representation specific shader and the associated shader data based on a selection of a compression algorithm and a rendering engine . The representation specific shader and the associated shader data may then be shipped to a user and used to render a visual representation of the surface with the third party selected rendering engine . In still further embodiments multiple rendering engines may use the same shader data when rendering a scene. Software rendering engines may be configured to share the shader data and only implement the shaders using a specific renderer API.

A user may select any of the provided compression algorithms through N to compress the BxDF data and may select one of the rendering engines through M. Rendering engines through M may include Mental Ray RenderMan Maya or other rendering engines. Rendering engines through M may implement different rendering techniques such as ray tracing rasterization radiosity or ray casting and may be specifically designed to handle 2D images 3D images 3D animation and or 4D images such as motion blurred images among others.

Based on a user selection of one of the compression algorithms through N and one of the rendering engines through M SGE generates a representation specific shader . through N.M. In practice SGE also generates shader data not shown in associated with each representation specific shader . through N.M. Depending on the particular combination of compression algorithm and rendering engine selected by the user SGE generates a different representation specific shader for a particular set of BxDF data . As shown for N total compression algorithms and M total rendering engines N M different representation specific shaders are possible for a particular set of BxDF data . In one embodiment a representation specific shader generated for a particular rendering engine may be used by other rendering engines to produce a visual representation of a surface.

As one having ordinary skill in the art should understand a shader is a program associated with a rendering engine used by that rendering engine to colorize pixels to produce a desired appearance. For example a shader could be programmed for a rendering engine to colorize pixels associated with a concrete material surface while another shader could be programmed for that rendering engine to colorize pixels associated with a liquid material surface.

A user may generate some or all of the possible representation specific shaders through N.M corresponding to the different combinations of compression algorithms through N and rendering engines through M and may compare the effectiveness of each representation specific shader through N.M for rendering a given set of BxDF data with a particular rendering engine . For example some representation specific shaders through N.M may be better suited for 3D animation rendering while others may be better suited for static image rendering.

In one embodiment SGE may generate representation specific shader automatically in response to a user selection of one of the compression algorithms and one of the rendering engines . Importantly the user is not required to manually program the representation specific shader in a programming language such as C to observe the performance of a particular combination of compression algorithm and rendering engine . SGE allows a user to visually inspect the result of rendering using each representation specific shader generated for each combination of compression algorithm and rendering engine .

As shown the method begins at step where either a BxDF file or an input file is received by SGE . If a BxDF file is received then at step SGE loads the BxDF file into BxDF data and the method advances to step .

If the BxDF file is not received at step then at step SGE receives input file . At step conversion library converts the input file into BxDF format and stores the converted data in BxDF data . The method then advances to step . In one embodiment input file is an XML file and conversion library is an XML conversion library.

At step SGE receives a user selection of one of the compression algorithms through N. As previously described in compression algorithms through N are subroutines stored by I O library that implement different models that may be used to compress the BxDF data . In one embodiment a user may specify the accuracy of the selected compression algorithm . At step I O library executes the selected compression algorithm and generates the compressed factored representation . Compressed factored representation may occupy a smaller memory footprint than BxDF data and may approximate BxDF data .

At step SGE receives a user selection of one of the available rendering engines through M. A user may select the rendering engine based on for example the surface data represented by BxDF data or the type of rendering desired which may include 2D drawings 3D animations or computer simulations. At step representation specific I O module generates one of the representation specific shaders through N.M based on the data stored in compressed factored representation the compression algorithm used to generate compressed factored representation and the selected rendering engine .

At step representation specific I O module may generate encrypted shader data according to user specification. If the user wishes to encrypt shader data then at step representation specific I O module accesses encryption library via I O library and generates encrypted shader data based on the data stored in compressed factored representation the compression algorithm used to generate compressed factored representation and the selected rendering engine . A user may opt to encrypt shader data when for example input file or BxDF file includes proprietary data or proprietary data formats. In alternative embodiments the representation specific shader may also be encrypted using the encryption library .

If the user does not wish to encrypt shader data then at step representation specific I O module generates shader data based on the data stored in compressed factored representation the compression algorithm used to generate compressed factored representation and the selected rendering engine .

Once a representation specific shader and associated shader data have been generated via the method a visual representation of the surface described by either input file or BxDF file may be rendered using the selected rendering engine the representation specific shader and the associated shader data . The visual representation may then be output to a visual display.

In sum a shader generation engine SGE receives surface data that may be captured with a material scanner and converts the surface data into BxDF data. An I O library within the SGE converts the BxDF data into a compressed representation based on a user selection of a compression algorithm. A representation specific I O module receives the compressed representation and generates a shader and associated shader data based on a user selection of a rendering engine.

Advantageously the shader generation process is simplified compared to prior art techniques. The SGE is capable of generating different shaders for a particular set of surface data according to a user selection of a compression algorithm and a user selection of a rendering engine allowing the user to compare the performance quality of shaders associated with different compression algorithm rendering engine combinations without manually programming the shaders. Additionally the SGE may generate shaders and shader data based on artificially generated surface data. For example a user may provide surface data generated from a computer model of a material or may provide surface data produced by blending several sets of surface data together and modulating the combined surface data with texture data.

While the forgoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof. For example aspects of the present invention may be implemented in hardware or software or in a combination of hardware and software. One embodiment of the invention may be implemented as a program product for use with a computer system. The program s of the program product define functions of the embodiments including the methods described herein and can be contained on a variety of computer readable storage media. Illustrative computer readable storage media include but are not limited to i non writable storage media e.g. read only memory devices within a computer such as CD ROM disks readable by a CD ROM drive flash memory ROM chips or any type of solid state non volatile semiconductor memory on which information is permanently stored and ii writable storage media e.g. floppy disks within a diskette drive or hard disk drive or any type of solid state random access semiconductor memory on which alterable information is stored. Such computer readable storage media when carrying computer readable instructions that direct the functions of the present invention are embodiments of the present invention. Therefore the scope of the present invention is determined by the claims that follow.

