---

title: Form attachment metadata generation
abstract: Illustrative embodiments provide a computer implemented method, a data processing system, and a computer program product for form attachment metadata generation. In one illustrative embodiment, the computer implemented method receives a request to attach an attachment to a document, and calls an attachment metadata generator to extract metadata from the attachment to form extracted data. The computer implemented method further generates an extensible markup language fragment from the extracted data, and inserts the extensible markup language fragment into the document.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09251286&OS=09251286&RS=09251286
owner: International Business Machines Corporation
number: 09251286
owner_city: Armonk
owner_country: US
publication_date: 20080715
---
The present invention relates generally to an improved data processing system and more specifically to a computer implemented method an apparatus and a computer program product for form attachment metadata generation.

A typical use of forms in the workplace involves attachment of supporting documents such as images and productivity documents as enclosures. Digital signatures are often applied to the entire document including any attachments to provide a secure and tamper proof transaction record.

Currently there is no insight into the information about the attachments that are stored within a forms document. The lack of information regarding the attachments can be a significant issue when thousands or millions of forms are involved. Each of the stored forms may contain one or more attachments. The forms may be stored within data repositories such as a content manager or a data base manager product.

Currently the only means to obtain information that describes each attachment such as the information that may form attachment metadata is to write custom code in the application tier to programmatically extract each attachment upon form submission. The custom coding in the application tier is required to capture the attachment information prior to document storage into the data repository. Another choice may be to write a custom application to crawl through the repository subsequent to form submission sequentially extracting and processing the form attachments creating and establishing links between the extracted information and the identifiers and or other data within the form. An additional challenge with the crawl approach is the need to separately store the information into the database or repository. This methodology does not conform to a document centric architecture. As another option a user may manually open and inspect each form. The user would sequentially extract and examine each attachment with the associated program using appropriate tools such as an image viewer for image attachments for example. Previously valuable information has been locked away inside binary and proprietary attachments enclosed within the forms documents. Additionally to be considered valid extensible markup language XML these attachments are maintained in a gzip and base64encoded format adding additional layers of abstraction to the original data.

The software application gzip is used for file compression and refers to the GNU zip program. The program is a free replacement for a previously used compress program in Unix based operating systems. The encoding method base64encoded converts binary data into American Standard Code for Information Interchange ASCII text and vice versa and is one of the methods used by multipurpose Internet mail extensions MIME . Base64 divides each three bytes of the original data into four 6 bit units which it represents as four 7 bit ASCII characters. This typically increases the original file by about a third of the original size.

According to one embodiment of the present invention a computer implemented method for form attachment metadata generation is provided. The computer implemented method receives a request to attach an attachment to a document calls an attachment metadata generator and extracts metadata from the attachment to form extracted data. The computer implemented method further generates an extensible markup language fragment from the extracted data and inserts the extensible markup language fragment into the document.

In another illustrative embodiment a data processing system for form attachment metadata generation is provided. The data processing system comprising a bus a memory connected to the bus wherein the memory comprises computer executable instructions a communications unit connected to the bus a display connected to the bus a processor unit connected to the bus wherein the processor unit executes the computer executable instructions to direct the data processing system to receive a request to attach an attachment to a document call an attachment metadata generator extract metadata from the attachment to form extracted data generate an extensible markup language fragment from the extracted data and insert the extensible markup language fragment into the document.

In another illustrative embodiment a computer program product for form attachment metadata generation is provided. The computer program product comprises a computer readable recordable type medium tangibly embodying computer executable instructions thereon. The computer executable instructions comprise computer executable instructions for receiving a request to attach an attachment to a document computer executable instructions for calling an attachment metadata generator computer executable instructions for extracting metadata from the attachment to form extracted data computer executable instructions for generating an extensible markup language fragment from the extracted data and computer executable instructions for inserting the extensible markup language fragment into the document.

As will be appreciated by one skilled in the art the present invention may be embodied as a system method or computer program product. Accordingly the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium.

Any combination of one or more computer usable or computer readable medium s may be utilized. The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CDROM an optical storage device a transmission media such as those supporting the Internet or an intranet or a magnetic storage device. Note that the computer usable or computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory. In the context of this document a computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer usable medium may include a propagated data signal with the computer usable program code embodied therewith either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium including but not limited to wireless wire line optical fiber cable RF etc.

Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

The present invention is described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions.

These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer program instructions may also be stored in a computer readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

With reference now to the figures and in particular with reference to exemplary diagrams of data processing environments are provided in which illustrative embodiments may be implemented. It should be appreciated that are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environments may be made.

In the depicted example server and server connect to network along with storage unit . In addition clients and connect to network . Clients and may be for example personal computers or network computers. In the depicted example server provides data such as boot files operating system images and applications to clients and . Clients and are clients to server in this example. Network data processing system may include additional servers clients and other devices not shown.

In the depicted example network data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course network data processing system also may be implemented as a number of different types of networks such as for example an intranet a local area network LAN or a wide area network WAN . is intended as an example and not as an architectural limitation for the different illustrative embodiments.

Using system of an example of using an attachment manager may be provided. A user on client desires to attach a file to a document and place the combination in a storage location on server through network . The user invokes the processing of attachment manager when an attachment operation is commenced. The attachment process may be performed on client or server . The attachment must be accessible to the process. The attachment manager invokes an extractor to pull data describing the attachment from the attachment. The data pulled is then input to a generator to create an extensible markup language based output that describes the document attachment. The document the attachment and the generated output are filed with a digital signature as a package to complete the process.

With reference now to a block diagram of a data processing system is shown in which illustrative embodiments may be implemented. Data processing system is an example of a computer such as server or client in in which computer usable program code or instructions implementing the processes may be located for the illustrative embodiments. In this illustrative example data processing system includes communications fabric which provides communications between processor unit memory persistent storage communications unit input output I O unit and display .

Processor unit serves to execute instructions for software that may be loaded into memory . Processor unit may be a set of one or more processors or may be a multi processor core depending on the particular implementation. Further processor unit may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example processor unit may be a symmetric multi processor system containing multiple processors of the same type.

Memory and persistent storage are examples of storage devices. A storage device is any piece of hardware that is capable of storing information either on a temporary basis and or a permanent basis. Memory in these examples may be for example a random access memory or any other suitable volatile or non volatile storage device. Persistent storage may take various forms depending on the particular implementation. For example persistent storage may contain one or more components or devices. For example persistent storage may be a hard drive a flash memory a rewritable optical disk a rewritable magnetic tape or some combination of the above. The media used by persistent storage also may be removable. For example a removable hard drive may be used for persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit is a network interface card. Communications unit may provide communications through the use of either or both physical and wireless communications links.

Input output unit allows for input and output of data with other devices that may be connected to data processing system . For example input output unit may provide a connection for user input through a keyboard and mouse. Further input output unit may send output to a printer. Display provides a mechanism to display information to a user.

Instructions for the operating system and applications or programs are located on persistent storage . These instructions may be loaded into memory for execution by processor unit . The processes of the different embodiments may be performed by processor unit using computer implemented instructions which may be located in a memory such as memory . These instructions are referred to as program code computer usable program code or computer readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or tangible computer readable media such as memory or persistent storage .

Program code is located in a functional form on computer readable media that is selectively removable and may be loaded onto or transferred to data processing system for execution by processor unit . Program code and computer readable media form computer program product in these examples. In one example computer readable media may be in a tangible form such as for example an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage for transfer onto a storage device such as a hard drive that is part of persistent storage . In a tangible form computer readable media also may take the form of a persistent storage such as a hard drive a thumb drive or a flash memory that is connected to data processing system . The tangible form of computer readable media is also referred to as computer recordable storage media. In some instances computer recordable media may not be removable.

Alternatively program code may be transferred to data processing system from computer readable media through a communications link to communications unit and or through a connection to input output unit . The communications link and or the connection may be physical or wireless in the illustrative examples. The computer readable media also may take the form of non tangible media such as communications links or wireless transmissions containing the program code.

The different components illustrated for data processing system are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in can be varied from the illustrative examples shown. As one example a storage device in data processing system is any hardware apparatus that may store data. Memory persistent storage and computer readable media are examples of storage devices in a tangible form.

In another example a bus system may be used to implement communications fabric and may be comprised of one or more buses such as a system bus or an input output bus. Of course the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally a communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. Further a memory may be for example memory or a cache such as found in an interface and memory controller hub that may be present in communications fabric .

With reference to a block diagram of components of an attachment manager in accordance with illustrative embodiments is shown. Attachment management system depicts attachment manager comprising computes extractor generator decoder files file type identifier and error signal contained within memory . Memory is within system previously shown in .

Attachment manager provides a focal point for the capabilities of the various components within. Computes provides the logic or function of form controls or user interface components that deal with interactive data entry and display. For example a trigger computes may be defined to initiate an action on an event occurrence such as the in form logic to trigger the processing of an attachment based on a user event.

Extractor provides a capability to obtain specific data from a file or object being attached. An extractor may be specific to a file type or may be composed of selectable units such as decoder files each of which is file type specific. Extractor if implemented separately or decoder files have knowledge of the data structure of the attachment to facilitate the processing of the attachment. Decoder files implement a common programming interface to enable similar information to be passed in the call over the various decoders supported.

The decoder file selection is performed based on analysis provided by file type identifier . File type identifier provides a mapping of a file extension of the attachment file or object to a decoder file. Generator provides a capability to create output from the extracted information derived from extractor in an extensible markup language form.

In an alternative embodiment decoder files may be included with a software component such as extractor or attachment manager as a collection rather than as separate files. The set of modules in the collection provide the same capabilities of the separate files but in one offering or project. Therefore the decoder function may be a collection of class files or modules offered as a unit rather than individually as a matter of installation preference.

Should an error occur and need to be reflected to the caller error signal provides the capability to handle the error situation and notify the caller. Error signal typically handles an error caused by a file type not found or a decoder file not found situation. Notification may then be made to the caller whether a user or another component of the system using typical notification support from the user interface or call interface components.

With reference now to a block diagram of a form document model with attachments in accordance with illustrative embodiments is shown. Form document model with attachments comprises a layered structure in which form based information may be presented maintained and processed. Presentation layer comprises information necessary for the desired look and feel of the form presented to a user. Presentation layer typically comprises tagged information using a markup language needed for placement of data in a desired layout or style of form based information.

Business logic defines and codifies the business needs with respect to the forms data. For example the fields for collecting name and address information on the form may be used to provide data into a personnel database or a computation may be performed on rate and hours worked input values to provide a gross earnings component output.

Data instances provide the specification of the data structures in support of the form being processed. For example each field of the form would have a corresponding data definition provided to describe the type of data and placement within the data hierarchy of the form data.

File attachments provides a capability to describe various added documents or data that may be appended to the information captured by the form through input fields. The attachment type and size may vary depending upon the type of information to be collected in the form and the application. For example in an insurance claim application the report for a motor vehicle accident may be expected to append or attach photographs of the accident scene and vehicle. In a similar manner an expense claim form may have various attachments in the form of receipts.

Workplace Forms available from International Business Machines Corporation and XForms documents are examples of structured extensible markup language files. These files provide separation of user interface UI data model and application logic. The forms implementation typically results therefore in a document view comprising a four layer object having a presentation layer a business logic layer data instances layer and a file attachment layer as just described. The number of data instances in the data layer is extensible. The combination of data comprising the four layers provides a complete package of information regarding the form and supporting documentation of the attachment.

Using the just described four layer model of form document model with attachments in combination with elements of a high level data flow may be described. In an example the forms are self describing structured documents that can be designed to incorporate declarative logic. The logic can be triggered based on events within the form such as when entering or exiting a field modifying a value or property or enclosing an attachment within the form. Event flow typically begins when a user or automated process attaches a file to a form document. The completion of the attach event is detected. A call is made to an attachment metadata generation form application extension. The application extension may be embedded within the form or distributed with a forms viewer.

For example using the accident report scenario a user may select a check box incorporating a computes of embedded in a form to indicate the desire to add an attachment. The selection of the embedded function triggers an attach event that utilizes a forms application extension or perhaps an Internet form extension IFX from a local Java or C code library in the form of code library extensions . Code extensions library may be used to contain elements of attachment manager of . The function call interface is provided by the typical forms application programming interface and the call interface extensions are known as Internet form extensions. The event may also call an attachment metadata generation service implemented as a web service as an alternative implementation. The metadata generation service returns and stores the resulting extensible markup language fragment into the form data model within data instances .

This approach makes the form self describing with regards to an enclosed attachment. Document specific information is used in the generation of the metadata and is based on the type of document that is being attached. For example when handling image files which are often used as supporting documents for insurance claim forms or documentation an image file handler such as decoder files of is required. For example digital image files encode a range of information in an exchangeable image file format EXIF header. The data encoded in an exchangeable image file format header is different than information encoded in a video file or productivity document.

The forms application extension then ascertains the type of file enclosed the attachment type using file type identifier of and selects an appropriate decoder file based on the file type from decoder files of . The attachment containing document specific information is then read and processed by extractor of to extract the metadata describing the object. Extensible markup language fragment is then generated using the attachment metadata. The generated extensible markup language fragment comprising the attachment metadata is then written into the form data model.

For example when using an image file which is often used as a supporting document for insurance claim forms the digital image files usually encode a range of information in an EXIF header within the image file. Potential information that is contained in the file header and a candidate for extraction into the form data model includes attributes such as date and time of original data generation type of device image size values image description and many more elements. For more information on image file header composition refer to http www.exif.org for complete specifications.

The information encoded within other file types will be different however the concept is the same. The appropriate discrete decoder files will be used to generate metadata for each respective file type. Each of these decoder files will implement a common application programming interface. The interface enables other decoders to be used when available providing an extensible approach to support different file types as required or when additional or new decoders become available.

Since metadata is generated at the time the attachments are enclosed digital signatures are not invalidated. The described technique works well with a forms based document centric approach to e forms or electronic forms. The process also supports both online and disconnected operations.

With reference to an example of attachment metadata using a Worldwide Web Consortium compliant combination of extensible markup language and extensible markup language forms instance is shown. The extensible markup language forms model example provides one potential implementation of metadata extraction for one specific file type. What may have been previously encoded as a binary or proprietary data section of data within the form is now exposed in standards based extensible markup language. The generated information is shown in fragment . For example each enclosed attachment will be represented within a respective AttachmentMetaData tagged element within the extensible markup language forms model. The specific metadata for a given attachment will depend on the type of file and available information. The example metadata was generated based on an image file for a photo taken in Alaska. The file type information may be seen in the FileExtension section of element . In another section element depicts global positioning system information. The generated attachment information has been stored within data instances of form document model with attachments of .

With reference to a flowchart of an attachment management process in accordance with illustrative embodiments is shown. Attachment management process is an example of the use of attachment manager of .

Process starts step and determines if a file attachment is requested step . When a file attachment is requested a yes results. When there is no file attachment request a no results. When a no is obtained in step process loops back to repeat step . When a yes is obtained in step a call to an attachment metadata generator contained within code library extensions of is made step . The call is typically triggered by a form based event such as a user selecting the addition of an attachment as in attach event requested by embedded function from code library extensions of .

A determination is made as to whether a file type of the requested file attachment exists step . The file type identifier function may be used to identify and locate the file type of the object being attached. The file type extension is typically mapped to a corresponding decoder. In an illustrative embodiment using elements of again file type identifier is used to determine a file type and appropriate decoder files selection. When no file type is provided or recognized a no is obtained. When a supported file type is determined a yes result is obtained.

When a no is obtained in step error not supported signal is created step . Notify caller is performed step . Notification may be provided to a user or programmable service as required. Error handling and notification may typically be provided using the usual services of the code library and user interface being used. Custom coding is typically not required to address the usual tasks associated with files or file types not found. Process terminates thereafter step .

When a yes is obtained in step a determination is made as to a capability to obtain a decoder module step . The decoder module contains the decoder files. When a needed decoder module such as decoder files of is obtained a yes results. When a decoder module cannot be obtained a no results. When a no result is obtained in step an error not found signal is raised step . The error signal is forwarded by a notify caller operation as previously described in step .

When a yes is obtained in step extract metadata from the attachment is performed to pull the descriptive information for the attachment step . The extraction is performed using the decoder file specific to the file type of the attachment. Having extracted the needed information an operation to generate an extensible markup language fragment is performed to produce the information in a readily usable format step . For example the extensible markup language fragment may be of the type represented in fragment of and stored in data instances of .

Insert extensible markup language fragment into forms data then provides the placement of the desired information with the document and attachment to which the fragment refers step . A package such as package of thus created may also be digitally signed if required. Process terminates thereafter step .

An illustrative embodiment provides an externalized representation of the descriptive information of the attachment. Using the process just described descriptive information for an attachment may be extracted and processed into a standards based output format externalized from the attachment for other components to use. The output may then be used in queries regarding the content of the attachment allowing users to search for and retrieve information regarding the attachment.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any tangible apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

