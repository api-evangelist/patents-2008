---

title: Classifying and controlling encoding quality for textured, dark smooth and smooth video content
abstract: Techniques and tools for content classification and adaptive quantization are described. In an example implementation, a video encoding tool classifies blocks as textured, dark smooth or other smooth. The tool classifies a block as textured or non-textured by comparing the energy of AC coefficients for the block to a texture threshold, which can be set using a non-linear mapping of possible texture classification levels to possible texture thresholds. If a block is not textured, the tool further classifies the block as dark smooth or smooth depending on average intensity value for the block. Using the classification information and one or more control parameters to control bit allocation for dark smooth content relative to other smooth content, the tool encodes the video and outputs encoded video information. Example multi-pass approaches to setting the control parameters are also described.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08189933&OS=08189933&RS=08189933
owner: Microsoft Corporation
number: 08189933
owner_city: Redmond
owner_country: US
publication_date: 20080331
---
Engineers use compression also called coding or encoding to reduce the bit rate of digital video. Compression decreases the cost of storing and transmitting video by converting the video into a lower bit rate form. Decompression also called decoding reconstructs a version of the original video from the compressed form. A codec is an encoder decoder system.

In general video compression techniques include intra picture compression and inter picture compression. Intra picture compression techniques compress an individual picture without reference to other pictures that have been compressed and reconstructed. Inter picture compression techniques compress a picture with reference to preceding and or following picture s often called reference or anchor pictures that have already been compressed and reconstructed.

Most encoders use a frequency transform during intra picture compression and inter picture compression. For example the encoder splits a picture into non overlapping blocks of samples and applies a forward frequency transform to individual blocks. The frequency transform maps the sample values of a block to transform coefficients which are coefficients of basis functions that correspond to frequency components. In particular the lowest frequency coefficient called the DC coefficient indicates the average sample value for the block. The other coefficients called AC coefficients indicate patterns of changes in sample values of the block from gradual low frequency variations across the block to sharper high frequency variations within the block. In many encoding scenarios a relatively small number of frequency coefficients e.g. the DC coefficient and lower frequency AC coefficients capture much of the energy or signal content in the block. The encoder quantizes the transform coefficients resulting in a block of quantized transform coefficients. The encoder further encodes the quantized transform coefficients for example using entropy coding and outputs a bitstream of compressed video information.

In corresponding decoding a decoder reads the bitstream of compressed video information and performs operations to reconstruct the pictures that were encoded. When the encoding uses lossy compression e.g. in quantization the reconstructed pictures approximate the source pictures that were encoded but are not exactly the same. For example to reconstruct a version of the original 8 8 block of an intra compressed picture the decoder reconstructs quantized transform coefficients using entropy decoding. The decoder inverse quantizes the quantized transform coefficients of the block and applies an inverse frequency transform to the de quantized transform coefficients producing the reconstructed version of the original 8 8 block.

Inter picture compression techniques often use motion compensation to reduce bit rate by exploiting temporal redundancy in video. In general motion compensation is a process of producing predictions from reference picture s such as previously encoded decoded picture s using motion data. An encoder and decoder store previously coded decoded pictures in a picture store. The reference pictures in the picture store can then provide motion compensated predictor blocks for the blocks of a current picture being encoded. Often the encoder does not find a perfect match. For this reason the encoder computes the sample by sample differences between the current block and its motion compensated prediction to determine a residual also called error signal . The residual is frequency transformed quantized and entropy encoded. When reconstructing residuals a decoder and also the encoder reconstructs transform coefficients that were quantized and performs an inverse frequency transform. The decoder encoder performs motion compensation to compute motion compensated predictors and combines the predictors with the residuals.

According to one possible definition quantization is a term used for an approximating non reversible mapping function commonly used for lossy compression in which there is a specified set of possible output values and each member of the set of possible output values has an associated set of input values that result in the selection of that particular output value. A variety of quantization techniques have been developed including scalar or vector uniform or non uniform and adaptive or non adaptive quantization.

According to one possible definition a scalar quantizer is an approximating functional mapping x Q x of an input value x to a quantized value Q x sometimes called a reconstructed value. shows a staircase I O function for a scalar quantizer along with example reconstruction points for inverse quantization. The horizontal axis is a number line for an input variable x and the vertical axis indicates the corresponding quantized values Q x . The number line is partitioned by thresholds such as the threshold . Each value of x within a given range between a pair of adjacent thresholds is assigned the same quantized value Q x . For example each value of x within the range is assigned the same quantized value . At a threshold one of the two possible quantized values is assigned to an input x depending on the system. Overall the quantized values Q x exhibit a discontinuous staircase pattern. The placement of the thresholds on the number line may be uniformly spaced as shown in or non uniformly spaced.

A scalar quantizer can be decomposed into two distinct stages. The first stage is the classifier stage in which a classifier function mapping x A x maps an input x to a quantization index A x which is often integer valued. In essence the classifier segments an input number line or data set as in by thresholds such as the threshold .

In the second stage a reconstructor functional mapping k k maps each quantization index k to a reconstruction value k . In essence the reconstructor selects a value for reconstruction of each region determined by the classifier. The reconstructor functional mapping may be implemented for example using a lookup table. shows as open circles example reconstruction points according to a midpoint reconstruction rule. Overall the classifier relates to the reconstructor as follows Q x A x 1 .

In common usage the term quantization is often used to describe the classifier stage which is performed during encoding. The term inverse quantization is similarly used to describe the reconstructor stage whether performed during encoding or decoding.

A non uniform quantizer has threshold values that are not uniformly spaced for all classifier regions. According to one possible definition a dead zone plus uniform threshold quantizer DZ UTQ is a quantizer with uniformly spaced threshold values for all classifier regions except the one containing the zero input value which is called the dead zone DZ . In a general sense a DZ UTQ is a non uniform quantizer since the DZ size is different than the other classifier regions.

Quantization can affect the fidelity with which transform coefficients are encoded which in turn can affect bit rate. Coarser quantization tends to decrease fidelity to the original transform coefficients and produce more distortion as the coefficients are more coarsely approximated. Bit rate also decreases however when decreased complexity can be exploited with lossless compression e.g. entropy encoding . Conversely finer quantization tends to preserve fidelity and quality and produce less distortion but result in higher bit rates.

Some encoders adjust quantization between pictures and or within pictures to control where distortion is introduced. For a given bit rate quality level this allows an encoder to introduce more distortion where it will be less visible and or avoid introducing distortion where it would be more visible. The allocation of available bits among pictures and within pictures plays an important role in how distortion is introduced and how the user perceives the quality of the video.

Different encoders typically apply different quantization rules but there are some common principles. Quantization can produce visible artifacts that tend to be more artificial looking and visually distracting than simple loss of fine detail. For example the human visual system is more sensitive to distortion in relatively smooth content than to distortion in textured content. High texture levels tend to mask quality degradation and quantization artifacts. On the other hand in regions with lower texture levels distortion tends to be more visible. So in smooth regions distortion may create a visible line step or other flaw in the reconstructed image while the same amount of distortion may not create noticeable flaws in textured areas due to masking effects of surrounding detail.

Thus a common strategy is to allocate relatively more bits to smooth content and relatively fewer bits to textured content so that less distortion is introduced in smooth content at the expense of more distortion in the textured content where the distortion is not as perceptually noticeable . To identify textured content and non textured content various texture metrics and texture thresholds have been used. In some cases an encoder varies quantization depending on texture. This allows the encoder to coarsen quantization when doing so will not dramatically increase perceptibility of the distortion and use finer quantization in other situations.

Standards and product specifications that focus only on achieving interoperability will often specify reconstruction values for inverse quantization without specifying a classification rule for quantization. In other words some specifications may define the functional mapping k k for reconstruction without defining the functional mapping x A x for classification. This allows a decoder built to comply with the standard product to reconstruct information correctly. In contrast encoders are often given the freedom to change the classifier. For classification the thresholds can be defined so that certain input values will be mapped to more common and hence lower bit rate indices which makes the reconstruction values closer to optimal for some content. This also allows the encoder to adjust to expected distributions in values. For example an encoder may define the DZ threshold to be wider or narrower for a quantizer. Or more generally the encoder may define other thresholds according to which values are quantized so as to quantize values more aggressively.

The preceding adaptive quantization mechanisms help improve performance in many scenarios. In some scenarios however they fail to provide quantization control that is both usable and sufficiently fine grained. For example in some scenarios previous adaptive quantization mechanisms provide insufficient control over how content is classified as textured or non textured. As a result encoding of smooth areas introduces an unacceptable amount of distortion. Another problem is that in some scenarios previous adaptive quantization mechanisms provide insufficient control over bit allocation for different types of non textured content. Given the critical importance of video compression to digital video it is not surprising that video compression is a richly developed field. Whatever the benefits of previous video compression techniques however they do not have the advantages of the following techniques and tools.

In summary the present application is directed to techniques and tools for content classification and adaptive quantization. In some embodiments a video encoder classifies blocks of video pictures as textured dark smooth or smooth and adjusts quantization of the blocks depending on the classifications. This helps the encoder control how distortion is introduced in textured regions dark smooth regions and other smooth regions improving overall perceived quality.

According to a first aspect of the techniques and tools a tool such as an encoder classifies units such as blocks of a picture. For each of multiple units of a picture the tool assigns a classification to the unit based at least in part on the results of analyzing the content of the unit. The tool then uses the classifications to process the units. The classification for at least one of the units is a first classification type and the classification for at least one of the plural units is a second classification type indicating darker content than the first classification type. In an example implementation a video encoder classifies a block as textured or non textured by comparing the energy of AC coefficients for the block to a texture threshold. If the block is not textured the video encoder further classifies the block as dark smooth or smooth depending on average intensity value for the block. Using the block classifications and one or more control parameters to control bit allocation for dark smooth content relative to other smooth content the encoder encodes the blocks and outputs encoded video information.

According to a second aspect of the techniques and tools an encoding tool encodes units such as blocks of video pictures. The encoding tool sets one or more parameters to control bit allocation for a first classification type relative to a second classification type during encoding where the second classification type indicates darker content than the first classification type. The parameter s can include one or more target AC coefficient counts for the first classification type and one or more target AC coefficient counts for the second classification type. To set the parameter s the tool encodes in a first encoding pass the units using initial values for the parameter s then adjusts the values of the parameter s based at least in part upon results of the first pass encoding with the initial values. For example the tool changes the initial values depending upon target bit rate and resulting bit rate of the first pass encoding. The tool then encodes in a second encoding pass the units using the adjusted values and outputs the encoded units in a bit stream. The first pass encoding and second pass encoding can include classification of the blocks as textured dark smooth and other smooth and can use an adaptive user adjustable texture threshold.

According to third aspect of the techniques and tools an encoding tool includes a user interface module an encoding control module and one or more video encoding modules. The user interface module is adapted to receive user input that indicates a level of texture classification. The encoding control module is adapted to set a texture threshold based at least in part upon the level of texture classification using a non linear mapping of possible values of level of texture classification to the possible values of the texture threshold. The non linear mapping can embody finer gradations for simpler content such as animation content and coarser gradations for more complex content such as natural video so as to improve control over textured non textured threshold decisions. The video encoding module s can include a module adapted to set parameters to control bit allocation between textured content dark smooth content and other smooth content during the encoding.

The foregoing and other objects features and advantages of the invention will become more apparent from the following detailed description which proceeds with reference to the accompanying figures.

The present application relates to techniques and tools for improving quantization by controlling encoding quality of dark smooth video content relative to other smooth video content and textured video content. Certain types of quantization artifacts are particularly noticeable in dark areas that lack texture detail. By allocating relatively more bits to dark smooth areas overall perceived quality can be improved.

In some embodiments an encoding tool classifies blocks of video as smooth dark smooth or textured. The encoding tool allocates bits to blocks in the three different categories. For example the encoding tool changes macroblock quantization step sizes and or quantizer DZ size depending on block classifications. Then when the encoding tool introduces distortion to regulate bit rate it tends to introduce more distortion where it is expected to be less perceptible e.g. textured areas and introduce less distortion where it would likely be more perceptible e.g. dark smooth areas thereby helping to achieve a desired perceptual quality within a given bit rate constraint.

In some embodiments the encoding tool uses a rate control mechanism to help achieve the desired allocations during encoding. The encoding tool can use a two pass encoding process to help achieve the desired perceptual quality of compressed video via allocation of bits between smooth dark smooth and textured content. In the first pass the encoding tool encodes the video using initial settings for control parameters. The encoding tool then analyzes results of the first encoding pass so as to determine the desired settings for the control parameters for encoding in a second pass. In the second pass the encoding tool encodes the video using the desired settings for the control parameters.

Various alternatives to the implementations described herein are possible. Certain techniques described with reference to flowchart diagrams can be altered by changing the ordering of stages shown in the flowcharts by repeating or omitting certain stages etc. For example initial stages of classification e.g. obtaining frequency coefficients for a picture macroblock s or block s can be completed before later stages begin or operations for the different stages can be interleaved on a block by block macroblock by macroblock or other region by region basis.

The various techniques and tools described herein can be used in combination or independently. Different embodiments implement one or more of the described techniques and tools. Aside from uses in video compression the adaptive quantization techniques and tools can be used in image compression other compression or other areas. While many examples described herein involve quantization of AC coefficients for blocks by a video encoder alternatively the techniques and tools described herein are applied to quantization of AC coefficients for blocks in an image encoder.

Some of the techniques and tools described herein address one or more of the problems noted in the background. Typically a given technique tool does not solve all such problems. Rather in view of constraints and tradeoffs in encoding time resources and or quality the given technique tool improves encoding performance for a particular implementation or scenario.

With reference to the computing environment includes at least one processing unit and memory . In this most basic configuration is included within a dashed line. The processing unit executes computer executable instructions and may be a real or a virtual processor. In a multi processing system multiple processing units execute computer executable instructions to increase processing power. The memory may be volatile memory e.g. registers cache RAM non volatile memory e.g. ROM EEPROM flash memory etc. or some combination of the two. The memory stores software implementing an encoding tool that implements one or more of the described techniques for controlling encoding quality for textured dark smooth and other smooth video content.

A computing environment may have additional features. For example the computing environment includes storage one or more input devices one or more output devices and one or more communication connections . An interconnection mechanism not shown such as a bus controller or network interconnects the components of the computing environment . Typically operating system software not shown provides an operating environment for other software executing in the computing environment and coordinates activities of the components of the computing environment .

The storage may be removable or non removable and includes magnetic disks magnetic tapes or cassettes CD ROMs DVDs or any other medium which can be used to store information and which can be accessed within the computing environment . The storage stores instructions for the software implementing the encoding tool.

The input device s may be a touch input device such as a keyboard mouse pen or trackball a voice input device a scanning device or another device that provides input to the computing environment . For audio or video encoding the input device s may be a sound card video card TV tuner card or similar device that accepts audio or video input in analog or digital form or a CD ROM or CD RW that reads audio or video samples into the computing environment . The output device s may be a display printer speaker CD writer or another device that provides output from the computing environment .

The communication connection s enable communication over a communication medium to another computing entity. The communication medium conveys information such as computer executable instructions audio or video input or output or other data in a modulated data signal. A modulated data signal is a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media include wired or wireless techniques implemented with an electrical optical RF infrared acoustic or other carrier.

The techniques and tools can be described in the general context of computer readable media. Computer readable media are any available media that can be accessed within a computing environment. By way of example and not limitation with the computing environment computer readable media include memory storage communication media and combinations of any of the above.

The techniques and tools can be described in the general context of computer executable instructions such as those included in program modules being executed in a computing environment on a target real or virtual processor. Generally program modules include routines programs libraries objects classes components data structures etc. that perform particular tasks or implement particular abstract data types. The functionality of the program modules may be combined or split between program modules as desired in various embodiments. Computer executable instructions for program modules may be executed within a local or distributed computing environment.

For the sake of presentation the detailed description uses terms like classify and set to describe computer operations in a computing environment. These terms are high level abstractions for operations performed by a computer and should not be confused with acts performed by a human being. The actual computer operations corresponding to these terms vary depending on implementation.

The encoder processes video pictures. The term picture generally refers to source coded or reconstructed image data. For progressive video a picture is a progressive video frame. For interlaced video a picture may refer to an interlaced video frame the top field of the frame or the bottom field of the frame depending on the context. The encoder is block based and uses a 4 2 0 macroblock format for frames with each macroblock including four 8 8 luma blocks at times treated as one 16 16 macroblock and two 8 8 chroma blocks. For fields the same or a different macroblock organization and format may be used. The 8 8 blocks may be further sub divided at different stages e.g. at the frequency transform and entropy encoding stages. The encoder can perform operations on sets of samples of different size or configuration than 8 8 blocks and 16 16 macroblocks. Alternatively the encoder is object based or uses a different macroblock or block format.

Returning to the encoder system compresses predicted pictures and intra coded key pictures. For the sake of presentation shows a path for key pictures through the encoder system and a path for predicted pictures. Many of the components of the encoder system are used for compressing both key pictures and predicted pictures. The exact operations performed by those components can vary depending on the type of information being compressed.

A predicted picture e.g. progressive P frame or B frame interlaced P field or B field or interlaced P frame or B frame is represented in terms of prediction from one or more other pictures which are typically referred to as reference pictures or anchors . A prediction residual is the difference between predicted information and corresponding original information. In contrast a key picture e.g. progressive I frame interlaced I field or interlaced I frame is compressed without reference to other pictures.

If the current picture is a predicted picture a motion estimator estimates motion of macroblocks or other sets of samples of the current picture with respect to one or more reference pictures. The picture store buffers a reconstructed previous picture for use as a reference picture. When multiple reference pictures are used the multiple reference pictures can be from different temporal directions or the same temporal direction. The motion estimator outputs as side information motion information such as differential motion vector information.

The motion compensator applies reconstructed motion vectors to the reconstructed reference picture s when forming a motion compensated current picture . The difference if any between a block of the motion compensated current picture and corresponding block of the original current picture is the prediction residual for the block. During later reconstruction of the current picture reconstructed prediction residuals are added to the motion compensated current picture to obtain a reconstructed picture that is closer to the original current picture . In lossy compression however some information is still lost from the original current picture . Alternatively a motion estimator and motion compensator apply another type of motion estimation compensation.

A frequency transformer converts spatial domain video information into frequency domain i.e. spectral transform data. For block based video pictures the frequency transformer applies a DCT variant of DCT or other forward block transform to blocks of the samples or prediction residual data producing blocks of frequency transform coefficients. Alternatively the frequency transformer applies another conventional frequency transform such as a Fourier transform or uses wavelet or sub band analysis. The frequency transformer may apply an 8 8 8 4 4 8 4 4 or other size frequency transform.

A quantizer then quantizes the blocks of transform coefficients. The quantizer applies non uniform scalar quantization to the spectral data with a step size that varies on a picture by picture basis or other basis. The quantizer can also apply another type of quantization to the spectral data coefficients for example a uniform or adaptive quantization for at least some of the coefficients or directly quantizes spatial domain data in an encoder system that does not use frequency transformations. In described embodiments the quantizer in conjunction with other modules such as a rate controller controls encoding quality for textured dark smooth and other smooth video content by adjusting quantization step size and or DZ size.

When a reconstructed current picture is needed for subsequent motion estimation compensation an inverse quantizer performs inverse quantization on the quantized spectral data coefficients. An inverse frequency transformer performs an inverse frequency transform producing blocks of reconstructed prediction residuals for a predicted picture or samples for a key picture . If the current picture was a key picture the reconstructed key picture is taken as the reconstructed current picture not shown . If the current picture was a predicted picture the reconstructed prediction residuals are added to the motion compensated predictors to form the reconstructed current picture. One or both of the picture stores buffers the reconstructed current picture for use in subsequent motion compensated prediction.

The entropy coder compresses the output of the quantizer as well as certain side information e.g. motion information quantization step size . Typical entropy coding techniques include arithmetic coding differential coding Huffman coding run length coding LZ coding dictionary coding and combinations of the above. The entropy coder typically uses different coding techniques for different kinds of information and can choose from among multiple code tables within a particular coding technique.

The entropy coder provides compressed video information to the multiplexer MUX . The MUX may include a buffer and a buffer level indicator may be fed back to a controller. Before or after the MUX the compressed video information can be channel coded for transmission over the network.

A controller not shown receives inputs from various modules such as the motion estimator frequency transformer quantizer inverse quantizer entropy coder and buffer . The controller evaluates intermediate results during encoding for example setting quantization step sizes and performing rate distortion analysis. The controller works with modules such as the motion estimator frequency transformer quantizer and entropy coder to classify types of content and to set and change coding parameters during encoding. When an encoder evaluates different coding parameter choices during encoding the encoder may iteratively perform certain stages e.g. quantization and inverse quantization to evaluate different parameter settings. The encoder may set parameters at one stage before proceeding to the next stage. Or the encoder may jointly evaluate different coding parameters. The tree of coding parameter decisions to be evaluated and the timing of corresponding encoding depends on implementation.

The relationships shown between modules within the encoder indicate general flows of information in the encoder other relationships are not shown for the sake of simplicity. In particular usually does not show side information indicating the encoder settings modes tables etc. used for a video sequence picture macroblock block etc. Such side information once finalized is sent in the output bitstream typically after entropy encoding of the side information.

Particular embodiments of video encoders use a variation or supplemented version of the generalized encoder . Depending on implementation and the type of compression desired modules of the encoder can be added omitted split into multiple modules combined with other modules and or replaced with like modules. For example the controller can be split into multiple controller modules associated with different modules of the encoder. In alternative embodiments encoders with different modules and or other configurations of modules perform one or more of the described techniques.

The human visual system perceives distortion differently in textured picture content dark smooth picture content and other smooth picture content. Generally a given amount of distortion is more noticeable and distracting in non textured content than textured content. Among non textured content a given amount of distortion is usually more noticeable and distracting in dark smooth content than other smooth content. Classifying picture content as textured smooth or dark smooth facilitates allocation of available bits to the different categories of content so as to control the perceptibility of distortion when distortion is introduced.

In some embodiments a tool such as a video encoder classifies blocks of sample values in video pictures into three categories smooth dark smooth and textured. The texture of a block generally corresponds to amount of detail in the block. It can also relate to the amount of energy in different frequency coefficients for the block. A block with complex intricate detail has high texture and higher frequency AC coefficients for the block usually represent much of the energy for the block. In contrast a smooth block can include uniform or nearly uniform sample values or more generally content classified as non textured according to a texture metric in use. Smooth regions can include flat regions areas of constant or nearly constant color or gradient slope regions areas of color that vary at a constant or nearly constant rate across the region and smooth regions may be considered smooth even when interrupted by small areas of noise film grains or other color variations. A dark smooth block generally includes content classified as dark according to a dark content threshold or range in use.

An effective threshold between textured and smooth video content can vary depending on the type of content being encoded. For example a threshold that effectively separates textured content from non textured content in natural video may classify all blocks in animation video as non textured which hampers effective control of distortion in the animation video. In practice an effective smooth textured threshold for animation content is usually lower than an effective smooth textured threshold for natural video and the gradations between effectively different thresholds are finer for animation content.

In some embodiments a tool such as a video encoder distinguishes textured content from non textured content using a non linear scale of texture thresholds. The non linear scale embodies finer gradations of possible texture threshold values in some ranges and embodies coarser gradations of possible texture threshold values in other ranges which can help control encoding for different categories of content. Animation content usually includes relatively uniform regions of sample values whereas natural video usually includes subtle or complex variations in sample values. In many encoding scenarios coarse gradations of texture threshold values provide effective control over the smooth textured classification for natural video as different thresholds allow the user to designate slightly different proportions of content as textured. Such coarse gradations may be ineffective for animation content however if one threshold value results in the classification of most of the content as textured and the next threshold value results in the classification of most of the content as non textured with no way to classify an intermediate proportion of content as textured. Conversely threshold gradations that work effectively for animation content may be too fine for natural video such that large changes in threshold value fail to change the proportion of content classified as textured. Using a scale of texture thresholds with non linear gradations helps improve control of smooth textured threshold classification for different categories of video content.

First the tool gets a level of texture classification. For example the tool gets a level of texture classification specified by the user through a graphical user interface control of the tool. Using a slider bar or simple numerical scale the user can set different levels of texture classification in an intuitive way so as to control the proportion of content classified as textured versus non textured. In a typical configuration setting a lower level of texture classification results in more of the content being classified as textured and setting a higher level results in less of the content being classified as textured. Alternatively the tool gets the level of texture classification through an encoding wizard command line interface or other way or uses a default level of texture classification.

The tool then sets a texture threshold using a non linear mapping of possible values of the texture classification level to possible values of the texture threshold. According to an example non linear mapping lower levels of texture classification map to lower texture thresholds separated by finer gradations and higher levels map to higher texture thresholds separated by coarser gradations. As a result for relatively simple content such as animation content finer gradations at low texture thresholds provide for effective differentiation of proportions of textured versus non textured content. On the other hand for more complex content such as natural video the coarser gradations provide effective smooth textured differentiation at higher texture thresholds. Alternatively the non linear mapping embodies other and or additional rules. Generally the tool sets the texture threshold using a scale with non linear gradations between possible values of the texture threshold. The non linear gradations include finer gradations for some ranges and coarser gradations for other ranges as desired according to a particular implementation.

The tool classifies multiple units e.g. blocks of sample values using the texture threshold. For example for each of the multiple units the tool compares a texture metric to the texture threshold that was set. In an example implementation the texture metric for a block is the sum of squared AC coefficients for the block and the texture threshold is an AC energy threshold. Alternatively the texture metric measures sum of differences between intensity values of a block and their average value intensity variance e.g. using sums of difference between adjacent sample values or using an average gradient value or using a median gradient value and the threshold varies accordingly. For examples of alternative texture metrics see U.S. Patent Application Publication No. US 2007 0248164 A1 entitled QUANTIZATION ADJUSTMENT BASED ON TEXTURE LEVEL. Alternatively the tool uses another texture metric and corresponding texture threshold.

In the example implementation the tool classifies macroblocks as textured or non textured pending further differentiation as dark smooth or other smooth based on the classifications of their constituent blocks. A macroblock in 4 2 0 chroma sampling format includes four luma blocks and two chroma blocks. If any of the six blocks is classified as smooth non textured the macroblock is classified as smooth non textured. Alternatively the tool uses a different rule for classifying macroblocks such as a rule based on whether or not a majority of the blocks in a macroblock are classified as smooth.

Although shows the classifying immediately following the setting of the texture threshold the tool set the texture threshold on a session by session basis for encoding sessions. Alternatively the tool sets the texture threshold during real time encoding from picture to picture during offline studio editing and encoding or on some other basis. The tool can perform the classifying on a picture by picture basis or other basis.

For an example mapping the user of an encoding system selects a level l of texture classification which the encoding system maps to a texture threshold t according to the relation 4096 MAXLEVEL 2 . MAXLEVEL indicates the maximum allowable level of texture classification and N indicates a scaling factor. The values of MAXLEVEL and N depend on implementation. When N 1 the mapping of level l to threshold t is linear.

To speed up processing the encoding system can include a table that associates level values with threshold values. The following table shows an approximate non linear mapping of possible values of texture classification level l to possible values of texture threshold t when the scaling factor N is 1.5 and the maximum level value MAXLEVEL is 100.

Alternatively the tool distinguishes textured content from non textured content using another approach. For example the tool uses a static texture threshold or uses an adjustable texture threshold according to a scale with uniform gradations between possible values of the texture threshold.

In some embodiments a tool such as a video encoder distinguishes dark smooth content from other smooth content. This can help the tool control encoding quality of the dark smooth content relative to encoding quality of the other smooth content. Some types of distortion are more perceptible in dark smooth content than in other smooth content. Allocating bits in same way across all types of smooth content can result in perceptible distortion in dark smooth areas. Classifying picture content as smooth or dark smooth can facilitate allocation of available bits to the dark smooth content and other smooth content so as to balance or otherwise control the perceptibility of distortion when distortion is introduced.

First the tool gets a level of dark smooth content classification. For example the tool gets a default level of dark smooth content classification or gets a level of dark smooth content classification specified by a user through a graphical user interface control of the tool. If user control is desirable the user can set different levels of dark smooth content classification to control the proportion of content classified as dark smooth versus smooth. In a typical configuration setting a lower level results in less content being classified as dark smooth and setting a higher level results in more of the content being classified as dark smooth. Alternatively the tool gets the level of dark smooth content classification through an encoding wizard command line interface or other way.

The tool sets one or more ranges of dark smooth content values using the level of dark smooth content classification. Typically for a conservative level the range of dark smooth content values is smaller. Or for a more aggressive level of dark smooth content classification the range is larger and more content qualifies as dark smooth content.

The tool classifies multiple units e.g. blocks of sample values using the range s for dark smooth content classification. In the example implementation for each of the multiple units the tool compares a metric to one of the ranges that was set. The metric for a block is the average intensity value or DC coefficient value for the block and the range is a range of intensity values or DC coefficient values. For example for default designation of content as dark smooth content average luma intensity values between 16 and 40 indicate dark smooth content and average chroma sample values are between 120 and 136 indicate dark smooth content. Or for less aggressive designation of content as dark smooth content the ranges are 16 to 28 for luma and 124 to 132 for chroma. Alternatively the tool uses another darkness metric and corresponding ranges for dark smooth content.

In the example implementation the tool classifies a macroblock as smooth non textured whether it includes dark smooth content or other smooth content and uses other control parameters to regulate relative encoding quality of dark smooth content versus other smooth content. Alternatively the tool classifies macroblocks as smooth or dark smooth based on the classifications of their constituent blocks. According to one alternative rule if any of the blocks in a macroblock is classified as dark smooth the macroblock is classified as dark smooth. Or the tool uses a different rule for classifying macroblocks based on whether the macroblock includes more dark smooth blocks than other smooth blocks.

Although shows the classifying immediately following the setting of the dark smooth content ranges the tool can set the ranges on a session by session basis for encoding sessions or use default ranges. Alternatively the tool sets the ranges during real time encoding from picture to picture during offline studio editing and encoding automatically distinguishing areas of dark smooth content can simplify and dramatically speed up the process of removing perceptible encoding artifacts in dark smooth areas or on some other basis. The tool can perform the classifying on a picture by picture basis or other basis.

The tool measures the energy of the AC coefficients for the block and compares the measured AC energy to a texture threshold. In an example implementation the tool computes the sum of squares of the AC coefficients and compares the sum to a texture threshold. Alternatively the tool computes another measure of AC energy or uses another texture metric varying the texture threshold in use accordingly.

If the measured energy is above the texture threshold the tool classifies the block as textured. For blocks in a picture the tool uses a higher texture threshold for luma blocks than for chroma blocks since there is typically more AC energy in the luma plane than the chroma plane.

Otherwise the block is deemed smooth not textured and the tool checks whether the DC coefficient value of the block is within the range associated with dark smooth content. If so the tool classifies the block as dark smooth. Otherwise the tool classifies the block as just smooth. In the example implementation if a chroma block is not textured the tool classifies the chroma block as smooth or dark smooth depending on the DC coefficient values of the corresponding luma block s for the chroma block. If a majority of the corresponding luma blocks have DC coefficients in the dark smooth range the tool classifies the chroma block as dark smooth and otherwise the tool just classifies the chroma block as smooth. Alternatively the tool uses another rule to classify chroma blocks as smooth or dark smooth depending on luma block classifications. Or chroma blocks are individually classified and the tool checks DC coefficients of chroma blocks against dark smooth content ranges.

After the tool classifies the block the tool determines whether to continue by getting the next block. The encoder repeats the process on a block by block basis as shown macroblock by macroblock basis or other basis. Also for the sake of simplicity does not show how the technique interacts with other encoding processes such as frequency transformation entropy encoding and rate control.

In the example implementation the tool subsequently processes macroblocks or other areas of the picture using the block classifications. For example the tool classifies a macroblock as textured or non textured. If a macroblock is non textured the blocks of the macroblock can be further classified as smooth or dark smooth and thereby designated for special treatment in quantization. The tool uses other control parameters to process smooth blocks and dark smooth blocks differently within smooth non textured macroblocks. Alternatively the tool directly classifies macroblocks as textured dark smooth or smooth.

The tool can record results of the classification using a map that indicates texture levels or otherwise identifies textured units e.g. blocks macroblocks and non textured units e.g. blocks macroblocks . Later processes can then use the map. Alternatively later processes directly perform the classification.

In some embodiments an encoder adjusts encoding quality for textured dark smooth and other smooth video content. A goal of the bit allocation techniques and tools described herein is to introduce distortion where it is less perceptible when distortion has to be introduced during encoding to satisfy encoding constraints.

The encoder determines whether the unit being encoded is textured. If so the encoder quantizes the frequency coefficients of the unit using quantization for a textured unit. In an example implementation for a textured macroblock the encoder uses the quantization parameter QP value at picture level for the picture that includes the textured macroblock to quantize the frequency coefficients of the blocks of the macroblock. In doing so the encoder can adapt the DZ size depending on the amount of texture in the unit. Alternatively the encoder uses another approach to quantizing the textured unit. For example see U.S. Patent Application Publication No. US 2007 0248164 A1.

If the unit is non textured the encoder selectively quantizes the frequency coefficients of the unit using quantization for a dark smooth unit and or using quantization for a smooth unit. In the example implementation the encoder finds and uses a macroblock level QP value for a non textured macroblock to quantize the frequency coefficients of the blocks of the macroblock. On a block by block basis the encoder uses one or more control parameters such as the TACL TACC TACLD and TACCD parameters described below to regulate quantization of frequency coefficients in dark smooth blocks and smooth blocks. The encoder uses the macroblock level QP for quantization of the respective blocks adjusting DZ size from block to block. Alternatively the encoder uses another approach to quantizing the non textured unit. For example if a unit e.g. macroblock is classified as smooth or dark smooth the encoder determines whether the unit is classified as dark smooth. If so the encoder quantizes the frequency coefficients of the unit using a QP and DZ size adapted to the dark smooth unit. Otherwise the encoder quantizes the frequency coefficients of the unit using a QP and DZ size for a smooth unit.

The encoder repeats the technique on a unit by unit basis or on some other basis. The encoder can use macroblock level classifications for some decisions e.g. smooth or textured and use block level classifications for other decisions e.g. dark smooth or other smooth .

Before detailing exemplary ways for encoders to adjust encoding quality for textured dark smooth and other smooth video content this section describes quantization and inverse quantization rules in an example implementation.

In an example implementation a decoder or encoder during encoder side reconstruction uses either of two different inverse quantization modes also called reconstruction rules when reconstructing AC coefficients for a block. The decoder or encoder uses a uniform quantizer reconstruction rule or a non uniform quantizer reconstruction rule. The mode is specified for a picture and all blocks in the picture use the same mode. The value of QP can vary within a picture for some encoding settings and can take any integer value between 1 and 31 inclusive. The QP value is multiplied by a factor of 2 when used in inverse quantization. The quantization factor can also be modified by a half QP step but for the sake of simplicity this halfQP step quantization is typically not addressed in the following discussion. 

According to the uniform quantizer reconstruction rule the decoder or encoder reconstructs AC coefficients as follows 2 3 where C is the reconstructed inverse quantized AC coefficient and L is the quantized level for the coefficient. Reconstruction points appear as circles in .

The quantization rules used to convert the AC coefficients to quantized levels L are not specified by the reconstruction rule 3 . Rather quantization rules including placement of the quantization bin boundaries are defined by the encoder. Suppose the distribution of AC coefficient values was uniform. For the uniform quantizer reconstruction rule the corresponding quantization rule that would produce minimum distortion would be sign abs 2 4 where sign C 1 for C 0. The operation indicates integer division with rounding towards zero and abs C indicates the absolute value of C. For many real world encoding scenarios however the quantization rule shown in 4 does not provide optimal rate distortion performance. For one thing the distribution of values within quantization bins is typically not normal. Moreover the quantization rules do not account for differences in the perceptibility of distortion in different situations. Thus many encoders use different quantization rules which vary depending on implementation.

Example quantization bin boundaries appear as dashed lines in . Compared to theoretical uniform quantization bins which would appear at mid points between reconstruction points the boundaries shown in the top row of are slightly further away from the zero value point. In practice the quantization bin boundaries used during quantization need not have been at the positions shown in . In the lower two rows of the DZ is widened without changing the other quantization thresholds.

According to the non uniform quantizer reconstruction rule the decoder or encoder reconstructs non zero AC coefficients as follows 21 5 . Reconstruction points appear as circles in . In this mode even for default settings the quantization bin that includes the zero value reconstruction point the DZ is much wider than the others. For the non uniform quantizer reconstruction rule a simple corresponding quantization rule would be sign abs 2 6 .

Example quantization bin boundaries appear as dashed lines in . In the lower two rows of the DZ is widened without modifying the other quantization thresholds.

Alternatively the decoder encoder uses more fewer rules and or different rules during reconstruction and the encoder uses more fewer rules and or different rules during quantization. Generally the parameterization of quantization parameters quantization rules and reconstruction rules can vary from implementation to implementation.

In the example implementation an encoder selectively preserves AC coefficients that have the most energy in a smooth or dark smooth block so as to preserve encoding quality. The encoder selects a QP and DZ for the block such that N significant AC coefficients are preserved after quantization and inverse quantization where N is an integer greater than or equal to 1 and less than the total number of AC coefficients for the block. Often the preserved AC coefficients are coefficients for the lowest frequency AC basis functions of the transform which characterize gradual value changes horizontally and or vertically across a block. Preserving these AC coefficients tends to help perceived visual quality for the block especially for smooth regions with low variation. The encoder selects a QP that preserves the desired number of the top amplitude AC coefficients at acceptable quality. The N AC coefficients are preserved with a reasonable QP typically not QP 1 which might result in allocation of more bits than necessary for the N AC coefficients. There can be situations e.g. very flat blocks that lack N significant AC coefficients in which the target number of AC coefficients is not preserved. In general however the encoder preserves AC coefficients without being overly aggressive in spending bits with smaller QPs.

In some cases coefficients after the top N AC coefficients have values close to the NAC coefficient. The encoder can reduce bit rate by adjusting the DZ threshold used for the given QP to quantize coefficients after the top NAC coefficients to zero. In general DZ QP indicates a cut off threshold for quantizing an AC coefficient to zero when the value of QP is used for quantization. For example if the DZ range is 200 to 200 then a coefficient that is 197 would be quantized to L 0 and a coefficient that is 202 would be quantized to L 1.

In some encoders the default DZ threshold DZ QP for a given QP is predetermined and proportional to the QP. Instead of using predetermined DZ thresholds when preserving N AC coefficients the encoder can more aggressively set a DZ threshold. shows three different cut off thresholds for the uniform quantizer mode one at the default placement of 6 QP 5 one closer to the first reconstruction point and one after the first reconstruction point. shows three different cut off thresholds for the non uniform quantizer mode. In these examples increasing the size of the DZ does not push the other quantizer thresholds further away from zero it just results in more numbers close to zero being quantized to zero.

In the example implementation the encoder adaptively adjusts the DZ size of a quantizer so as to preserve the N most significant AC coefficients in a block which causes AC coefficients smaller than the Nlargest AC coefficient in absolute value to be quantized to zero even if they would otherwise be preserved using the normal DZ threshold for the selected QP. If the normal DZ threshold is 6 QP 5 for uniform quantization for example the encoder adjusts DZ threshold to be the absolute value of the Nmost significant AC coefficient. This helps the video encoder selectively reduce bit rate making bits available for use elsewhere in encoding.

In many cases given the adjustment of the DZ to limit encoding to the target number of coefficients a range of values of QP can provide acceptable performance. In the example shown in QP values of 4 5 7 or 8 could be used to encode the four most significant AC coefficients with suitable quality.

In the example implementation the encoder jointly determines the DZ threshold and QP as follows. The encoder sets the DZ size based upon the Nmost significant AC coefficient. The encoder then computes a quantization step size as int DZ 16 where int x returns the integer portion of the real number x and the division by 16 accounts for the fractional component of the 12.4 format for AC coefficient values. The quantization step size is parameterized as 2 QP and the encoder determines QP and potentially halfQP from the quantization step size.

For example the encoder sets the DZ QP to be equal to the absolute value of the Nlargest AC coefficient among the 63 AC coefficients for an 8 8 block. If N 2 and the 2largest AC coefficient in terms of absolute value is 643 the encoder sets the DZ range to be 643 to 643. The two most significant AC coefficients are quantized to non zero values and the rest of the AC coefficients for the block are quantized to zero. The encoder then computes the quantization step size as int 659 16 40 and determines that QP 20. If the Nlargest AC coefficient can be preserved using a value of QP that exceeds the allowable range the maximum value for QP can be used or the QP value used for the picture including the block can be used.

In the example implementation an encoder selectively preserves AC coefficients in dark smooth and smooth units so as to preserve encoding quality for the AC coefficients. For each macroblock with one or more smooth or dark smooth blocks the encoder selects a QP and DZ s such that there are at least N non zero quantized AC coefficients per block of the macroblock.

When selecting the N most significant AC coefficients per block the parameters that an encoder uses depend on implementation and can help control bit allocation between dark smooth blocks and other smooth blocks. In the example implementation the encoder uses a target number of AC coefficients for luma blocks of other smooth content TACL a target number of AC coefficients for chroma blocks of other smooth content TACC a target number of AC coefficients for luma blocks of dark smooth content TACLD and a target number of AC coefficients for chroma blocks of dark smooth content TACCD . Alternatively the encoder uses a different parameterization of target number s of AC coefficients for dark smooth blocks and other smooth blocks. For example N is the same for chroma blocks and luma blocks of the macroblock and N is the same for dark smooth blocks and other smooth blocks. Or N is different for chroma blocks and luma blocks but does not change depending on whether a block is dark smooth or other smooth. Or N is different for dark smooth blocks and other smooth blocks but does not change depending on whether a block is luma or chroma.

Depending on implementation an encoder can change TACL TACC TACLD and TACCD on a picture by picture basis or on some other basis using feedback from a rate controller and or user settings. The encoder can use a single target number of AC coefficients TAC for a picture with TACL TACC TACLD and TACCD in turn depending on the picture level value TAC. One possible configuration is TACL TAC TACC int TAC 2 TACLD TAC 2 and TACCD int TAC 2 2 . Other configurations use other relations between the control parameters.

First the encoder gets the Nmost significant AC coefficient for each dark smooth or other smooth block in the macroblock. The encoder can use a texture map or other record of block classifications or compute block classifications at this time. So if an encoder using TACL TACC TACLD and TACCD encodes a macroblock with two dark smooth luma blocks two other smooth luma blocks and two dark smooth chroma blocks the encoder uses the appropriate one of TACL TACLD or TACCD to get the Nmost significant AC coefficient value for each of the blocks in the macroblock where TACL TACLD and TACCD potentially yield different values of N.

The encoder then finds a value for QP for the macroblock. The encoder finds a value for QP that preserves the N most significant coefficients for each dark smooth or other smooth block in the macroblock. So if an encoder uses TACL TACC TACLD and TACCD the encoder finds a QP that satisfies the applicable one of TACL TACC TACLD and TACCD for every block in the macroblock depending on whether the respective blocks are dark smooth other smooth or textured and depending on whether the respective blocks are luma or chroma. For example the encoder determines the lowest amplitude NAC coefficient min Nth AC among the dark smooth blocks and other smooth blocks of the macroblock. If Y block1 AC TACLD Y block2 AC TACLD Y block3 AC TACL Y block4 AC TACL U block AC TACCD and V block AC TACCD represent the NAC coefficients for a set of dark smooth and other smooth blocks of a macroblocks respectively min Nth AC minimum Y block1 A C TACLD Y block2 AC TACLD Y block3 AC TACL Y block4 AC TA CL U block AC TACCD and V block AC TACCD . The encoder then determines a QP from min Nth AC using a mechanism described in the previous section. If a quantization step size based on QP preserves min Nth AC it also preserves the NAC coefficient for the respective other blocks in the macroblock. Thus the encoder finds a QP for the macroblock directly from the smallest of the NAC coefficients of any dark smooth blocks or smooth blocks in the macroblock.

Alternatively to find the QP for a macroblock the encoder compares min Nth AC with the default DZ QP for candidate values of QP. The encoder starts with the picture QP and decreases QP until a minimum QP for the quantizer is reached e.g. QP 1 or the condition min Nth AC DZ QP is satisfied for the default DZ QP . If the condition is satisfied the encoder sets the threshold QP for the macroblock to be the first QP i.e. highest qualifying QP that satisfies the condition.

Next the encoder quantizes the blocks of the macroblock using the QP for the macroblock. The encoder gets the next block to quantize in the macroblock and determines whether the block is textured or non textured. If the block is textured the encoder quantizes the block using the picture level QP and the default DZ threshold for QP. Alternatively the encoder adapts the DZ threshold used depending on the texture content of the textured block.

If the block is not textured the encoder quantizes the block using the macroblock level QP and adjusting the DZ threshold. In doing so the encoder can increase the DZ threshold for the block to quantize to zero any coefficients after the NAC coefficient in the block where N depends on TA CL TA CC TACLD or TACCD or is otherwise set by the encoder. The encoder then determines whether to continue by getting the next block in the macroblock or ending. Thus for each smooth or dark smooth block the encoder determines the DZ threshold that preserves target number of AC coefficients for example using the appropriate TAC parameter.

In the example implementation the encoder signal macroblock level QP values for non textured macroblocks using differential quantization relative to picture level QP values. The encoder quantizes textured blocks in a picture using the picture level QP value and it signals the picture level QP value and reconstruction rule for the picture as part of a picture header. For a non textured macroblock in a picture the encoder signals the macroblock level QP value for the macroblock as part of a macroblock header. The picture level reconstruction rule is used for the non textured macroblocks in the picture. The macroblock level QP value can be encoded as a difference e.g. a reduction in QP value relative to the applicable picture level QP value.

Alternatively the encoder uses another mechanism to signal quantization parameters for textured content and non textured content.

In some embodiments an encoder sets bit allocations for adjusting encoding quality of textured content dark smooth content and other smooth content using a multi pass approach. In an example implementation the encoder uses QP TACL TACC TACLD and TACCD as control parameters for bit allocations. Alternatively the encoder uses other control parameters.

In the example implementation an encoder sets bit allocations in peak bit rate constrained variable bit rate encoding scenarios. When encoding a video sequence the encoder sets an average bit rate target e.g. corresponding to an average network connection rate or average transmission rate a peak bit rate e.g. corresponding to a peak network connection rate or peak transmission rate and a buffer size e.g. corresponding to a notional encoder output buffer size or actual decoder input buffer size . The encoder controls encoding so that the resulting bit stream of compressed video information conforms to the average bit rate and the buffer level does not underflow. Stated differently the encoder controls encoding so that the total size of the encoded video indicated by the target bit rate x the duration of the video sequence matches a target size. The buffer level drops when the current bit rate exceeds the peak bit rate since the buffer is not replenished fast enough so the buffer size affects how long the peak bit rate can be exceeded. Alternatively an encoder sets bit allocations in other encoding scenarios.

First the encoder initializes bit allocations for textured video content versus dark video content versus other smooth video content. In the example implementation the encoder initializes QP TACL TACC TACLD and TACCD parameters to have initial values. TACL TACC TACLD and TACCD can all have different initial values or they can have the same initial value depending on how the encoder is implemented. To increase the encoding quality of dark smooth content relative to other smooth content the encoder can increase TACLD and TACCD relative to TACL and TACC respectively. 6 and 7 where x is an encoder setting possibly exposed to the user such as 1 2 3 etc. Another common approach is to have the luma control parameters vary relative to the chroma control parameters. 8 where y is an encoder setting possibly exposed to the user such as 1.5 2 2.5 etc. Alternatively the encoder establishes other relations between the control parameters. Although the encoder separately tracks TACL TACC TACLD and TACCD they can vary together. In one possible configuration the encoder sets QP 4 and TACL TACC TACLD TACCD 4 for the first pass encoding. Alternatively the encoder initializes other and or different control parameters.

Then the encoder encodes the video using the initialized bit allocations. In the example implementation the encoder encodes the video and keeps the values of the parameters QP TACL TACC TACLD and TACCD constant throughout first pass encoding. During the encoding the encoder classifies units of the video as textured dark smooth or smooth and the encoder tracks the bits used encoding textured content dark smooth content and other smooth content.

The encoder adjusts bit allocations for the textured video content versus dark video content versus other smooth video content. In the example implementation the encoder adjusts values of the QP TACL TACC TACLD and TACCD parameters depending on the results of the first pass of encoding. The encoder can adjust the control parameters in view of the actual bit counts from the first pass encoding and the target bit rate. In the example implementation the encoder compares the total actual size A of the first pass encoding results to the target size T for the encoding which is obtained by multiplying the target average bit rate by the time duration of the video sequence. The encoder computes the ratio of T to A R T A. The encoder uses the ratio R to scale bit allocations for textured dark smooth and other smooth content for second pass encoding.

For example if the target size T is 1 GB and the actual size A after the first pass is 2 GB then the ratio R 0.5. The encoder uses the ratio R to scale the control factors QP TACL TACC TACLD and TACCD. The encoder adjusts the control parameter QP under the assumption that texture bits scale inversely with QP. So for this example the encoder adjusts QP to be 4 0.5 8. For each frame the desired average number of texture bits allocated in the frame is half of the number that was produced in the frame for the first pass. The encoder adjusts the control parameters TACL TACC TACLD and TACCD under the assumption that smooth bits scale directly with the target number of coefficients. So for this example for each frame the encoder adjusts the number of smooth and dark smooth bits allocated to the frame to be half what was produced in the frame for the first pass. To achieve this allocation the encoder directly scales the control parameters TACL TACC TACLD and TACCD by the ratio R multiplying the initial value of each of the TAC parameters by 0.5. If the initial values of TACL TACC TACLD and TACCD are TACL 4 TACC 2 TACLD 6 and TACCD 4 the adjusted values are TACL 2 TACC 1 TACLD 3 and TACCD 2. Alternatively the encoder adjusts the control parameters using another approach for example changing control parameters on a picture by picture basis or some other basis.

The encoder then encodes the video using the adjusted bit allocations. In the example implementation the encoder uses the adjusted control parameters QP TACL TACC TACLD and TACCD to control macroblock level QP values for non textured macroblocks and to control DZ sizes for blocks of dark smooth or other smooth content. The encoder uses the same encoding tools for the first pass and second pass e.g. same transform same texture metrics same thresholds for textured non textured content and can reuse information such as classifications. Alternatively the encoder uses different encoding tools.

Alternatively the encoder uses the adjusted values of the QP TACL TACC TACLD and TACCD parameters as guidelines in the second pass encoding but varies QP as needed to meet target bit rate constraints or other encoding constraints during the second pass encoding. If the encoding constraints are not satisfied using the adjusted values of the QP TACL TACC TACLD and TACCD parameters the encoder incrementally increases or decreases the QP values used at picture level and or macroblock level for rate control.

After the second pass encoding the control parameters TACL TACC TACLD and TACCD can be fine tuned if desired to control bit allocations on a scene by scene frame by frame or other basis. The encoder then encodes the video using the fine tuned control parameters.

In the example implementation the encoder effectively controls bit allocation of textured dark smooth and other smooth content and can expose control of the bit allocation to a user. The encoder controls bits allocated to textured blocks by adjusting picture level QP values controls bits allocated to dark smooth blocks by adjusting TACLD and TACCD and controls bits allocated to smooth blocks by adjusting TACL and TACC. Roughly speaking encoding that uses a QP value of QPproduces Z times as many bits as encoding that uses a QP value of QP Z. So encoding using a QP value of 4 is expected to produces twice as many bits as encoding using a QP value of 8. Likewise encoding that uses a TAC value of TAC Z is expected to produce roughly Z times as many bits as encoding that uses a TAC value of TAC. So encoding using a TAC value of 4 is expected to produce twice as many bits as encoding using a TAC value of 2. Given these basic relations the encoder modulates bit allocation for textured smooth and dark smooth regions by adjusting the values of QP TACL TACC TACLD and TACCD.

Alternatively an encoder uses another approach to setting control parameters for adjusting encoding quality of textured content dark smooth content and other smooth content using a multi pass approach.

Although much of the preceding description focuses on block based video encoding applications the described techniques and tools have uses in areas other than video encoding. For example the described techniques and tools for content classification can be used for image encoding and other types of image processing.

Having described and illustrated the principles of our invention with reference to various embodiments it will be recognized that the various embodiments can be modified in arrangement and detail without departing from such principles. It should be understood that the programs processes or methods described herein are not related or limited to any particular type of computing environment unless indicated otherwise. Various types of general purpose or specialized computing environments may be used with or perform operations in accordance with the teachings described herein. Elements of embodiments shown in software may be implemented in hardware and vice versa.

In view of the many possible embodiments to which the principles of our invention may be applied we claim as our invention all such embodiments as may come within the scope and spirit of the following claims and equivalents thereto.

