---

title: System and method for accessing business process instances through mobile devices
abstract: A BPM system is described for modeling, management and execution of business processes. A process designer component is used to graphically design a business process, which includes a set of activities linked by transitions. The business process is stored and executed using one or more engines. A mobile device can be used to access the business process instance executing on the engine. The mobile work portal can be generated to render information for the process instance onto the mobile device. A process application programming interface can be used to access and manipulate the process instance from the mobile device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09646274&OS=09646274&RS=09646274
owner: ORACLE INTERNATIONAL CORPORATION
number: 09646274
owner_city: Redwood Shores
owner_country: US
publication_date: 20080922
---
The present application claims the benefit of U.S. Provisional Patent Application No. 61 027 762 entitled SYSTEM AND METHOD FOR ACCESSING BUSINESS PROCESS INSTANCES THROUGH MOBILE DEVICES by Eduardo Carlos Rubio et al. filed on Feb. 11 2008 which is incorporated herein by reference in its entirety.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The current invention relates generally to business process management software tools for design and execution and more particularly to accessing business process instances via WAP compliant mobile devices.

In a typical large scale organization the competitive pressures customer expectations and compliance with regulations drive the ever increasing need for the enterprise to become more agile flexible and dynamic when it comes to automated systems and information technology IT . To address these needs service oriented architectures SOA have recently surfaced and transformed how such organizations integrate and connect to information systems. For example SOA has come a long way in providing a unified way for applications to interact with each other and to expose functionality as services using industry standards. Today many enterprises are implementing SOA to reduce the costs of integration and to attain more rapid development cycles.

However SOA initiatives have been mostly focused on efficiency and adaptability in IT. In order to truly realize the business value of SOA a somewhat different approach is desirable one that is focused on the various business processes of an organization and one that allows IT to be seamlessly integrated into these business processes empowering collaboration between business and IT.

In recent years business process management BPM software systems have become more and more widely used among various organizations. For a typical business enterprise it is usually desirable to integrate all of its data and processes into a single and unified system. For example an organization may automate a business process by having a computer perform certain activities of the business such as receiving a sales order sending a notification to a client or reminding a human participant of work that needs to be performed.

While automation of such business processes has posed a number of difficulties software BPM systems have become ever increasingly important solutions to many organizations. By implementing software BPM suites enterprises are becoming more and more able to increase productivity performance profits and decrease inefficiency due to various factors. Nevertheless a multitude of inefficiencies and problems remain in the BPM software world. The lack of seamless access to the various processes from virtually any device and deficiencies in integration with such devices have surfaced as possible areas of improvement. In addition the lack of process intelligence able to support such functionality has been an issue. Applicants have identified the foregoing as well as other needs which currently exist in the art in coming to conceive the subject matter of the present disclosure.

The invention is illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. References to embodiments in this disclosure are not necessarily to the same embodiment and such references mean at least one. While specific implementations are discussed it is understood that this is done for illustrative purposes only. A person skilled in the relevant art will recognize that other components and configurations may be used without departing from the scope and spirit of the invention.

In the following description numerous specific details will be set forth to provide a thorough description of the invention. However it will be apparent to those skilled in the art that the invention may be practiced without these specific details. In other instances well known features have not been described in detail so as not to obscure the invention.

Although a diagram may depict components as logically separate such depiction is merely for illustrative purposes. It can be apparent to those skilled in the art that the components portrayed can be combined or divided into separate software firmware and or hardware components. For example one or more of the embodiments described herein can be implemented in a network accessible device or appliance. Furthermore it can also be apparent to those skilled in the art that such components regardless of how they are combined or divided can execute on the same computing device or can be distributed among different computing devices connected by one or more networks or other suitable communication means.

In accordance with embodiments there are provided systems and methods for accessing business process instances via mobile devices. The ability to access the process instance from a mobile device allows users to participate in business process systems through wireless devices in a timeline fashion. The users are able to interact with the BPM tasks via their mobile devices allowing access to some of the simpler interactive activity implementations. As an illustration users can receive notifications whenever new instances arrive to their inbox and access that new implementation from their cellular telephone. Given the fact that most cellular phones have more limited display capabilities than a personal computer the process instance task can be filtered based on views and the capabilities of the mobile device. A process application programming interface PAPI is provided to enable the mobile device to access and manipulate the process instance and various state information associated therewith.

In various embodiments the system described is a business process management BPM modeling and execution system. This BPM system can be used to integrate a plurality of heterogeneous applications within an enterprise into a single graphically defined process. Furthermore the BPM system can allow creation of new processes which can invoke these existing applications in order to reuse their functionality and prevent duplication of code.

In various embodiments the BPM system includes a process designer component that can be used to graphically draw a definition of a business process. The process can be comprised of activities linked by various transitions all of which can be graphically represented in the process definition.

At a high level the business process is designed to represent a specific set of business tasks and activities which must be executed in an organization to reach a well defined outcome. When this outcome is reached the process is deemed to be complete. Examples of such processes can include hiring a new employee processing a sales order reimbursing a business expense and other more complex processes according to the particular needs of the organization. In some cases it may not be possible to reach the main goal of the process. For example the shipping clerk may have to cancel a sales order because the product is out of stock. Therefore a business process allows different possible end conditions besides the principal objective of the process. Preferably it can allow more than one way to reach the main objective. For instance if the product is out of stock it may be possible to offer an equivalent alternative. In turn this offer may be accepted or rejected. A range of possibilities can thus be included in the process.

At a more detailed level the business process can be broken down into a set of logical steps called activities each of which can comprise one or more tasks. As an illustration an activity that notifies a client of an incomplete sales order may include the task of sending an electronic mail email message to the client. Each of these tasks and activities can be graphically represented in the business process definition. When activities are executed automatically by the system they are referred to as automatic activities. When human input is required they are referred to as interactive activities. As an illustration the following are the types of activities that can be included in the BPM system 

It should be noted that the above activities are provided purely for illustrational purposes and that the BPM system is not limited to this or any other specific list of activity types.

In various embodiments the activities of the business process are linked by transitions which bridge the activities and determine the order in which the activities will be performed and the basic workflow for the process. In other words the transition determines which path the process will follow from any given activity. As an illustration the BPM system can support the following transition types 

It should be noted that these are intended to be non limiting examples of transitions and other such transitions between activities are possible within the scope of the present embodiments.

In one embodiment all activities have at least an outgoing unconditional transition so there is always a way to continue the process. In most real world processes several activities also have outgoing conditional transitions. In this case the conditional transitions are evaluated first and the unconditional transition is taken only if the conditional transitions all evaluate to false. In programming terms the unconditional transition is like an else clause in an if then else construct. In one embodiment the business rule transitions are evaluated before conditional transitions so if a business rule transition and a conditional transition both evaluate to true the business transition is used. Due transitions can act separately. They can pull the instance from the activity as soon as a time condition is met. In this case all other outgoing transitions can be ignored.

In various embodiments each activity of the business process can belong to a role. Roles can then be assigned to participants who are the actual individual users who interact with the process. A given participant can have one role or multiple roles. The participants who can perform an activity are those who have been assigned the role that the activity belongs to. In certain embodiments the roles can be parametric i.e. they can take on different values at execution of the process instance and depending on that value at execution time the task can be assigned to a different person. For example depending on the dollar amount of the credit request the same activity of the process can be directed to a different approval manager according to that value. Similarly depending on the value of the geographical region where the request originated the activity task may be forwarded to a different person. The parametric role thus allows one business process definition and one activity to be executed by different roles depending on specific values which take place at runtime.

In various embodiments the BPM system further includes an execution console that manages the execution of process instances by the engines and a repository that maintains state data associated with each process instance e.g. persistent variables and decisions of the process . Furthermore the system can include an organizational settings module that populates the process with organization specific values upon instantiation.

Business process are thus designed with the process designer and executed with a BPM execution engine along with client applications management tools and other components to interact with it. All of these modules can be included within the BPM system. Additionally if a business process invokes web services reads from a custom database or uses Enterprise JavaBeans EJBs it may be necessary to ensure that these services are available in order to enable the application to work as expected.

In various embodiments the BPM system can be used to integrate a set of multiple heterogeneous applications both backend and front end applications into a single and seamless business process. New business processes can then be similarly created to invoke these existing applications. To achieve this integration adapters can be generated using technology specific discovery mechanisms. This approach enables integration with a wide range of common technologies including but not limited to Java libraries .NET assemblies COM DCOM components Web Services message queues Enterprise Java Beans EJBs CORBA objects relational databases and XML documents. In one embodiment the BPM system introspects or discovers the metadata from any application programming interface API to identify the business service and its incumbent data and then packages those elements as reusable components that are invoked from business processes when required. For example when a business process instance is executed one of its activities can invoke an application while another activity can invoke a completely different application one that is remotely located and built on a different technology platform from the first application.

When a business process is executed by an engine it forms a specific process instance. A business process instance is a specific item proceeding through the business process. Thus the process instance is the representation of a single enactment of a process or an activity within a process including its associated data. For example in a business process which handles purchases each instance will be an individual purchase order. There can be any number of instances traversing a business process as there can be any number of purchase orders going through a purchase order system. In one embodiment each instance represents a separate thread of execution of the process or activity and will have its own internal state and externally visible identity which may be used for example to record or retrieve audit data relating to the individual enactment such as a particular purchase order number as opposed to the general purchase order process. Instances can start at the Begin activity of the process and finish in the End activity. The path the instances take can depend entirely on the data of the instance and the external environment.

Each process instance can have a specific history and properties. In the case of a purchase order the instance would contain a customer name a list of items an amount due dates of delivery and payment and other relevant data. An instance can also have various status conditions. In the case of a purchase order it may be desirable to know if it has been approved if it has been paid for or if the requested products have been shipped. The process instance can also utilize different backend applications within the enterprise via the introspection discovery mechanism previously described. Thus each activity of the instance can invoke a different application within the enterprise.

Each instance has a beginning and end as defined in the business process. As the instance proceeds through the process it will be worked on by various participants or processed automatically by software. Thus when the process instance is executed activities and tasks are accessed by the various participants within the organization.

In one embodiment the process instance can be accessed from a wireless application protocol WAP compliant mobile device in order to execute a specific activity. Given the popularity of WAP a way for business process to participate in the business process is desirable. Thus in accordance with the present embodiments the participant in the business process is given access to the business process instance through the wireless device. The WAP compliant device can include a cellular phone a personal digital assistant PDA a watch or any other device with a central processing unit CPU that the user can carry.

A WAP enabled mobile work portal can be generated to render either WAP or compact hypertext markup language CHTML based on the browser supported by the mobile device. In one embodiment the mobile portal supports the execution of tasks of the process instance in which all its user interaction is made through the display component the input component or the Java Server Pages JSP component. The mobile work portal thus renders information associated with a particular process instance onto the mobile device such that the user can access and interact with the tasks of the business process instance. In one embodiment the mobile work portal has some dependence on the web work portal for processing business process instances in a standard manner.

In one embodiment the user is allowed to check pending instances process each instance execute global activities or receive notifications about new instances. Based on the user agent any of wireless markup language WML extensible hypertext markup language XHTML mobile profile MP or CHTML can be rendered to the mobile device.

In one embodiment the user is provided with an inbox of pending process instances. When a new instance arrives to the user s inbox a notification can be generated and transmitted to the user s mobile device. For example a WAP Push Message can be sent to the user. One possible schema is to associate to each user a new group of properties specifying different notification universal resource locators URLs such as Jabber hypertext transfer protocol HTTP and simple mail transfer protocol SMTP . Upon receiving the notification the user can process the instance by using the device. When processing selected instances the actions a user can perform include selecting unselecting an instance sending an instance aborting an instance suspending an instance resuming an instance backing an instance and executing its main task.

In certain embodiments due to the limited interface capabilities of the mobile device not all interactive components of the process instance may be implemented. In these embodiments there will be some process instances that will not be processed using the mobile work portal. While these instances may work fine under the standard web portal the user interface of the mobile device may not be able to render the complex or detailed interaction required by the instance.

In one embodiment the instances can be filtered according to whether their tasks can be executed using the particular interface of the mobile device. To accomplish this task metadata can be developed to provide information about selecting what kind of execution components can be executed in the limited implementation on the mobile device. This information can be used to filter only those instances that can be executed using the mobile work portal.

In various embodiments the PAPI interface is used to access the process instances and their data from the mobile device. This API is used to integrate the process engine to any third party application using either Java or Web Services programming logic. For example the BPM system can be linked to various collaborative applications. The APIs can also be used to build custom front ends that interact directly with the engine without using the BPM workspace.

As illustrated a business process management system can include a set of software components or modules that can be accessed via a network e.g. the internet by various users and . The network can include wired or wireless communication based radio frequency RF based satellite microwave or any other form of communication network where exchange of data is enabled between the components connected thereto.

In one embodiment the BPM system comprises the BPM Studio which provides the implementation environment for Information Technology IT and the process developers. The BPM Studio can use a shared process model for full round tripping. In one embodiment the Studio includes a forms builder Web Services integration and native API introspection for .NET COM Java and CORBA.

In various embodiments the BPM Studio includes a BPM Project view which is comprised of processes and the catalog . The catalog is used to define specify and contain the components or services that are called from a business process. These BPM components can include compiled software programs classes or routines that are stored by the catalog manager in a data repository . In one embodiment the catalog defines describes and organizes the software components.

In various embodiments the BPM system can additionally include an interface layer such as a graphical user interface GUI accessible via a website or portal for allowing a user to design manipulate execute and monitor the performance of various processes. Furthermore the system can include a security layer that enables user authentication and authorization of services to the system.

The BPM process designer component can be used to draw and design business process models by the users of the BPM system. Once the process is designed by using the process designer its definition file can be generated and stored on a local or remote computer. The designer can also publish the created business processes. Once the designed business process is published it can be stored into the data repository and can later be deployed to an execution engine for executing.

The execution console or manager can be used by various users of the system in order to manage any of the execution engines which have process instances executing thereon. In one embodiment the execution engines are used to deploy the published business processes execute tasks by the users and perform automatic business process activities and perform any other tasks needed by each activity of the process instance. The execution engines can manage the execution of each process instance. One example of such process instance is processing a specific sales order using a general business process for processing sales orders. The execution engine can retrieve and collect business process definitions from the repository manage the execution of a particular user interactive task or automatically execute the task if it is automated.

The mobile work portal can be used by users to access a deployed process instance on one of the engines. The portal can filter the instances which are not able to be performed on the mobile device that is being used by the participant. As an illustration if the activity includes watching complex graphic rendering or video and the user s mobile device interface does not support such features the process instance can be filtered out. Alternatively a simpler version of the interface can be rendered to the mobile device so that the participant can perform the task albeit limited.

The BPM server e.g. engine can maintain the state of each executing process instance in the repository . A repository can include a relational database management system RDBMS file storage content management systems as well as any other form of data storage systems. During the execution of the instance persistent variables can maintain the values for each activity task of the specific process instance. These variables can be stored in the repository and can be associated with the specific process instance.

In various embodiments persistent variables can include instance variables and argument variables. Instance variables can record values that may be passed from one activity of a business process to another activity within the same business process. As such instance variables maintain the state of the instance within the context of the business process. Argument variables on the other hand record values that may be passed from one business process or instance to another business process or instance.

In various embodiments the BPM system illustrated in can have a multitude of different users. As an illustration user may be a business designer person that uses the BPM system to design the various processes desired by an enterprise. Users can be employees of the enterprise which are responsible for executing the various activities of the business process instance. For example user can be a salesperson that receives a sales order verifies it for completeness and enters it into the system. User may be a supervisor who validates or otherwise resolves any exceptional situations that may occur. User can be an administrator of the BPM system responsible for monitoring and improving the performance of the business processes executing on the engines.

Each user or sets of users can be assigned to a particular role. In one embodiment a role is a job function in a process that has associated activities to be performed by a user or group. Users and or groups can be associated with process roles in the process administrator utility. A business process can include an abstract role that is used at design time to represent abstract user sets which will represent the persons in an organization responsible for performing the various activities of the process. Subsequently the abstract role can be matched to an organizational role based on values that correspond to the actual users of the organization. As such the organizational role can be parametric by being assigned a value that corresponds to user sets and can take on multiple values that correspond to different user sets. The use of abstract roles enables a business process to be designed once and deployed to several different organizations by specifying the organization specific users and other parameters via the organizational settings.

As illustrated a process can be designed by manipulating graphical icons of the interface screen . Custom colors and shapes can be used to designate the various activities tasks and transitions of the business process. In one embodiment a process includes a set of activities connected by one or more transitions . The set of activities can include a Begin activity and an End activity used to initiate and finish the execution of the business process respectively. Furthermore each activity can be fully automated or can require user intervention. In one embodiment fully automated activities can be illustrated as square shaped icons while those activities involving human intervention can be illustrated by circular shaped icons.

The sequence of activities can be coupled by transitions such as transition . The transitions can be used to indicate which activity or activities are to be initiated after the completion of the current activity. Either one multiple or no activities can be invoked after completion of each activity. In one embodiment the number and invocation of the next activities depends on the data evaluated and decisions made during the current activity.

The business process can be designed by using one or more roles . At design time these roles can be abstract roles so as to enable the use of the defined process with multiple organizations. At runtime the abstract roles can be matched to organizational roles with specific user sets filling each role. In one embodiment the activity is placed in a particular role column as illustrated in . The user that satisfies the role can be permitted or required to perform the various tasks of that activity. For example the users assigned to role can perform the tasks associated with activities and and users assigned to role can perform the tasks associated with activity .

As one illustration the business process can be comprised of a sequence of activities for processing a sales order. Each activity could comprise its own series of tasks. For example an activity that notifies a client of an incomplete sales order may include the task of sending a notification email message and a task of placing a telephone call to the customer. The activity of approving a sales order may include checking against a database whether the product is in stock.

It should be noted that the specific business process shown in is provided purely for illustrational purposes and is not intended to limit the invention. The BPM system can be used to design execute and monitor a wide variety of business processes ranging from very simple to highly sophisticated. Furthermore it should also be noted that the particular graphical symbols used to illustrate each activity or transition are also provided purely as examples and any alternative symbols could be used within the scope of the various embodiments described herein. In some scenarios the symbols could also be made configurable by a user or administrator of the system.

As illustrated in step the process definition can first be graphically constructed by using the process designer component of the BPM system. This definition can include a set of activities which are linked by various transitions. Each activity can be comprised of one or more tasks for carrying out the activity. Once the process definition is defined it can be persisted into a content repository as shown in step . In one embodiment the business process is published by compiling the activities tasks and transitions into modular software objects and storing them in the content repository. The published business process es can be reviewed tested and optimized prior to deploying them to an execution engine. When deploying the published process a particular engine can be selected and the process can be deployed and executed on the that engine. In alternative embodiments the publishing and deployment of processes can also be merged. Thus in step the process is executed on one or more engines in order to instantiate a process instance. The process instance represents a particular item going through the steps of the process.

In step a mobile work portal can be generated to render information associated with the process instance onto various mobile devices. Depending on which specific type of device is used the mobile portal can render CHTML WAP or other user interface technologies onto the device. In step the process instances can be filtered according to whether they can be executed on the mobile work portal using the mobile device. For example if the process instance requires complex graphics or display capabilities the instance can be filtered out and precluded from being accessed by the mobile device. On the other hand if the process instance merely requires input of data the mobile device can be used to execute the various tasks of the instance. Accordingly if the process instance is not filtered it can be accessed from the wireless device as shown in step . The accessing can utilize the PAPI interface. In one embodiment the PAPI interface can be used to access any step of the process instance and retrieve information regarding that step. PAPI can be used to program a user interface e.g. a WAP application to access the process from the cellular phone or another type of mobile device. As an example the WAP application can thus be executed on the mobile device and use the PAPI interface to make invocations to check if new instances have been received to the inbox.

As illustrated the mobile device can provide an interface for participants to authenticate themselves such as by entering a user name and password. In some embodiments the authentication can result in assigning the participant to a particular role s . The mobile device can also be provided with interfaces to view pending instances in the inbox create new process instances and execute pending instances by performing the particular tasks. It should be noted that while illustrates the rendering of XHTML to the mobile device interface the embodiments described herein are not limited to any particular implementation and that other such technologies are also possible.

As shown in step an inbox can be maintained for each participant in the business process. The inbox can store all pending and or recently executed process instances that belong to the role which the participant has been assigned to. Accordingly if the user belongs to a role that is responsible for performing a particular task within the process instance the process instance can be stored in the inbox assigned to that user.

In step a new process instance is deployed to the process engine. This can happen as a result of some external event or by having been set up by an administrator. The process instance can be delivered to the user s inbox based on whether the user belongs to a particular role. Since the role can be parametric the delivery to the inbox can also be affected by dynamic variables evaluated at runtime.

In step it can be determined whether the new process instance has been delivered to the inbox. If it has not the process continues in idle state maintaining the inbox of pending instances. If the process reaches the inbox a notification can be generated and transmitted to the user of the mobile device as shown in step . The notification can be a WAP push message or some another technique for informing the user that the state of the inbox has changed.

In step the mobile device can be used to access the process instance. PAPI interface can be used to perform this function. As an example PAPI interface can be used to initiate a case in the process query for the state of a given case execute a particular activity search for cases in a given step of the process and perform various other functions. Accordingly the user is allowed to check for pending instances process existing instances execute various global activities and receive notifications about new instances on his wireless device without having to connect to a personal computer.

Various embodiments previously described include a computer program product which is a storage medium media having instructions stored thereon in and which can be used to program a general purpose or specialized computing processor s device s to perform any of the features presented herein. The storage medium can include but is not limited to one or more of the following any type of physical media including floppy disks optical discs DVDs CD ROMs micro drives magneto optical disks holographic storage ROMs RAMs PRAMS EPROMs EEPROMs DRAMs VRAMs flash memory devices magnetic or optical cards nanosystems including molecular memory ICs paper or paper based media and any type of media or device suitable for storing instructions and or information.

Various embodiments include a computer program product that can be transmitted in whole or in parts and over one or more public and or private networks wherein the transmission includes instructions which can be used by one or more processors to perform any of the features presented herein. In various embodiments the transmission may include a plurality of separate transmissions.

Stored one or more of the computer readable medium media the present disclosure includes software for controlling both the hardware of general purpose specialized computer s and or processor s and for enabling the computer s and or processor s to interact with a human user or other mechanism utilizing the results of the present invention. Such software may include but is not limited to device drivers operating systems execution environments and containers virtual machines as well as user interfaces and applications.

The foregoing description of the preferred embodiments of the present invention has been provided for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations can be apparent to the practitioner skilled in the art. Embodiments were chosen and described in order to best explain the principles of the invention and its practical application thereby enabling others skilled in the relevant art to understand the invention. It is intended that the scope of the invention be defined by the following claims and their equivalents.

