---

title: Method, system, and program product for accessing required software to process a file
abstract: A system, method, and program product for accessing or retrieving on a computer network the required software to process a file is disclosed. It is determined, when accessing a file, whether or not software required to process this file is already installed on the user's computing device, depending upon the type of the file. If the required software is not installed on the user's device, the address of a server from which this software can be downloaded or accessed through the network is extracted and decoded from the filename of the accessed file. A browser or file transfer program is launched on the user's computing device and a request for the required software package is sent from the user's computing device to the server corresponding to the decoded address from which it is downloaded or accessed. The software is then unpacked, if necessary, and installed so as to process the accessed file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08060485&OS=08060485&RS=08060485
owner: International Business Machines Corporation
number: 08060485
owner_city: Armonk
owner_country: US
publication_date: 20080331
---
This application is a divisional of prior application Ser. No. 10 957 256 which was originally filed on Oct. 1 2004.

The present invention relates generally to network computing and to software accessed on demand in computer networks and more specifically to a method and system for locating and accessing the software to process a file.

The use of global distribution systems such as the Internet for distribution of digital assets like electronic documents music film pictures games and other content continues to grow. Digital assets are commonly distributed or accessed through networks as computer files.

When such files are accessed or retrieved through a network on a client computer the client may utilize or process the file with the appropriate software. The types of files are generally recognizable with the extensions at the end of the filenames. This information is used by the operating system to launch the right program when the user clicks on or selects the filename. For example file.txt represents a text file that can be opened with a text editor program. If a HyperText Markup Language hereinafter referred to as HTML document is accessed a client s web browser may parse the HTML document so as to display the document. Likewise if a word processing document is accessed the client may activate a word processor program to open the document. Alternatively if an image file is retrieved an image viewer or an image editor may be activated to process and display the image.

Based on the type of information or resource that is being accessed a client may need additional functionality. For example a video and sound clip file may require the capability to view the video and sound clip in a certain format. The added capabilities needed to process accessed files have to be installed on the client computer. Usually the added capabilities that are installed onto the client computer are referred to as plug ins or helper programs. Thus when additional capabilities are needed a plug in or a helper program is downloaded i.e. retrieved and installed on or added to the client computer.

Various data files are typically classified into specific data file types. Upon receiving or accessing a file the client will typically examine the file extension characterizing the file type to determine how to process the file e.g. launch an adapted application program to process the file. As described hereinabove the file processing may consist of launching an application that has been installed as a plug in for a browser.

When files are sent as attachments of e mails through networks these files must be encoded for transmission. The standard Internet protocol for sending attachments is based upon an encoding scheme called Multipurpose Internet Mail Extensions hereinafter referred to as MIME designed by the Internet Engineering Task Force. MIME is a specification for formatting non ASCII messages so that these messages may be sent over networks such as the Internet. MIME enables many browsers to display and output files that are not in an HTML format. In a similar manner e mail applications supporting MIME can send and receive files e.g. image audio and video files via the Internet mail system. MIME types typically identify a content type and allow a browser or server to select the correct type of viewer for a file. There are many predefined MIME types such as GIF graphics files and PostScript files.

One feature of MIME is that a sending e mail program inserts a field in outgoing messages identifying what type of files are contained within the encoded attachment. By looking at the information in the MIME header inserted by the sending program a program which receives the attachments can handle these attachments adequately. For example if the MIME header identifies an attachment as a spreadsheet e.g. MIME type application ms excel then the receiving e mail program can launch the appropriate spreadsheet program to open the attached file.

Two things need to be done to make sending and receiving MIME attachments work smoothly. First all users must agree on a common set of names for different attachment types. For example all e mail programs should identify Excel Excel is a Trademark of Microsoft Corp. spreadsheet attachments with the MIME type of application ms excel or text html for an attached HTML web page. Secondly users must initialize their e mail programs by associating programs with types of attachments. For instance when using Internet Explorer Internet Explorer is a Trademark of Microsoft Corp. as a web browser the e mail program must be informed of using Internet Explorer when receiving and processing an attachment of type text html .

When a user receives a file through a network and selects the file for processing e.g. by clicking on the icon of a file attached to a received e mail the user needs the corresponding software. As the number of different possible types of digital assets grows the number of different possible types of files and the corresponding resources that are required for processing these assets also grows. Further each different type of file may require a different application helper or plug in program to access process or display each individual file type. Since the resources needed for processing all possible types of files cannot be stored in advance on a client computer there is a need in the art for a user to be able to obtain access to specific resources from a network e.g. from the Internet network for processing specific types of files.

Adobe Acrobat Reader software Acrobat is a Trademark of Adobe Corp. or other software products able to process PDF files must be installed on a user s computer system also referred to hereinbelow as user s device for processing the attached file. When the user tries one of the options View . . . or Launch . . . the user s device attempts to locate the software adapted to process MIME file type PDF . If no such software is found the user receives error message for example Sorry an application to open this document cannot be found as illustrated.

Therefore when the software required for processing a file is not installed on the user s device the user faces several problems that are not trivial for most people e.g. those who are not expert in information technology and computing systems as follows 

Therefore there is a need in the art for a system and a method for providing easily on demand and transparently the required software to process an accessed or received file.

In a method for processing a file the file has a filename in which an address is encoded for software required to process the file. In other forms systems and program products are provided.

An aspect includes a computer system receiving a single filename of the file to be processed. The encoded address is encoded in a particular format that includes characters permitted for specifying a uniform resource locator. A second format excludes at least some characters permitted in the first format. The encoded address is encoded is in the second format. The computer system extracts the encoded address from the single filename. The single filename further includes a primary filename of the software which is required to process said file separated by at least one control character from the encoded address. The computer system decodes the encoded address by converting the encoded address extracted from the single filename into a decoded address formatted in the first format. The decoding also includes the computer system accessing said software required to process said file using the decoded address and processing said file using the accessed software.

According to the present invention the filename of a file that is accessed locally or through a computer network is used to encode the address or URL of an application or plug in that is adapted to process this file using a particular lexicography. The lexicography that is used is determined so as to avoid particular characters that may be forbidden by a given file system e.g. with Microsoft Windows operating system Windows is a Trademark of Microsoft Corp. and or to encode the addresses so as to reduce address sizes. Addresses to be encoded may be of any forms e.g. local addresses addresses in private networks or Internet addresses however for sake of illustration the examples given in the following description are based on URL type of addresses. The address of the required software or plug in may be encoded either when the file is transmitted from a server to a user system or when the file is locally saved or transmitted to another system.

As an illustration of the algorithm described hereinabove consider the case of a file based on Adobe PDF named authentication.pdf that a user would like to send to someone else as an e mail attachment using a lexicography table having predetermined characters and associated characters to encode the software address string into the filename wherein 

When the originator of the Adobe PDF document authentication.pdf attaches the document to an e mail an option such as Embedding software ADDR . . . may be selected to encode the URL of the software repository wherein the software required to process the PDF document can be accessed at 

It should be noted that for sake of illustration this encoding algorithm is purposely very simple. A preferred algorithm would comprise replacing a sequence of forbidden characters by single characters e.g. replacing by . In a similar manner some sets of characters may be replaced by more compact codes e.g. replacing http by H . Using such compression as described hereinabove serves to optimize encoding and reduce the size of an encoded software address.

When the attachment of the above mentioned e mail is selected to be processed a test is performed to determine whether or not the software application or plug in required to process this file is locally installed. To process e.g. read this file Adobe Acrobat Reader software must be installed on the user s device. If the software is not currently installed the software would need to be downloaded from a server i.e. a software repository on the Internet .

Using the same table of lexicographic transformations that has been used by the sender of the file the software address or URL is extracted and decoded from the filename. To that end certain symbols or groups of symbols of the encoded URL are replaced by symbols or characters that are compatible with URL conventions on the Internet as mentioned hereinabove to get the decoded and valid URL as follows 

As depicted in Web browser program is activated on user s device and extracted URL is copied in the Web browser address field. This decoded URL extracted from the filename of the attached or accessed file transmits a request through Internet network to at least one of a plurality of software application repository servers generally referred to as server through server in . In the given example the software application repository server is www.adobe.com and accessed file is the HTML download utility software page readstep2.html.

The requested download utility software is received and displayed on the user s device. In one example download utility software asks the user to specify a set of parameters or options such as language platform or operating system and connection speed. Those selections are used to determine which version of the software needs to be downloaded.

Using the parameters specified by the user with the download utility software the requested software is then downloaded from software application repository to the user s device where the software is installed once decompressed if required and launched to process the attached or accessed file. When the file has been processed the downloaded software may be deleted or stored depending upon operating system parameters or user needs.

While the present invention allows for encoding of the address of the software required to process a file additional information relative to the software may also be encoded such as the particular version of software needed for processing the file.

When the software address and the options are available the system accesses the referenced download utility software in step . The user may be asked to select other options or enter some parameters in steps and such as language as mentioned hereinabove. The required software is then downloaded in step installed in step and the file is processed in step . The process performed on the file varies according to the type of file and the software access conditions for example the connection speed the kind of software license and the like . Such a process may comprise for example displaying or editing the content of the file.

When the file is closed depending upon operating system parameters or user needs as mentioned hereinabove the software that has been installed can be removed automatically or upon user s request in steps and or can even be permanently stored on local disk if free distribution of the installed software is permitted.

If the required software is already installed on the client s device a test is done in step to determine whether or not options are encoded within the filename. If options are encoded within the filename the options are extracted and decoded in steps and as mentioned hereinabove and a new test is performed to check if for example there are options about the minimum version number required for processing the received file. If this is the case the indicated minimum required version number is compared with the version number of the already installed software in step . If as a result of this test a new version must be installed the required software is accessed and installed in the manner described in steps to hereinabove. In such a case the requested software is preferably stored on permanent storage on the user s device not being removed once the attached accessed or received file has been processed as suggested with dotted lines. Naturally depending upon operating system parameters or user needs the old version of the software may be removed.

In cases where a software address is not embedded within the filename in step or when the required software is already installed on the user s device in step or there are not options encoded as parameters within the filename in step the received file would be immediately processed using already installed software in step .

In the illustrative example described hereinabove the software required to process the attached accessed or received file is downloaded before being installed on the user s device with the aim of processing the file. However it must be understood that the software could be partially executed from a remote server without being locally installed on the user s device. This may be the case with a transcoding application e.g. when the format of a received document file must be converted to a format compatible with the user s device so as to enable the user to view the received document in the small display of a handheld computing device. In this case the file to be processed e.g. transcoded may be parsed or adapted on the server wherein the software is located and locally displayed on the user s device with a standard file viewer.

Therefore using the present invention the user automatically downloads the software package needed for processing an attached accessed or received file which presents several advantages to wit 

Naturally in order to satisfy local and specific requirements a person skilled in the art may apply to the solution described hereinabove modifications and alterations all of which however are included within the scope of protection of the invention as defined by the following claims.

