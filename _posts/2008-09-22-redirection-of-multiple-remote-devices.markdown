---

title: Redirection of multiple remote devices
abstract: Example embodiments of the present disclosure provide techniques for multiple audio device capture and playback during a remote desktop session. A custom device manager may instantiate proxy audio input and output devices on the server corresponding to each real device on the client computer. The proxy devices may redirect their respective audio input and output data to the physical device on the client. In an embodiment, multiple audio devices may be instantiated during a remote session, and multiple independent audio streams may be redirected to the selected device on the client computer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08645559&OS=08645559&RS=08645559
owner: Microsoft Corporation
number: 08645559
owner_city: Redmond
owner_country: US
publication_date: 20080922
---
Remote computing systems can enable users to access resources hosted by the remote computing systems. Servers on the remote computing systems can execute programs and transmit signals indicative of a user interface to clients that can connect by sending signals over a network conforming to a communication protocol such as the TCP IP protocol. Each connecting client may be provided a session i.e. an execution environment that includes a set of resources. Each client can transmit signals indicative of user input to the server and the server can apply the user input to the appropriate session. The clients may use protocols such as the Remote Desktop Protocol RDP to connect to a server resource.

It is becoming increasingly common to see multiple audio devices on a single client computer. With the rise of Voice Over Internet Protocol VOIP communications software users may have a set of speakers that they use for music and other audio and also a headset with a built in microphone or other devices. Desktop multimedia and communication applications can select an audio device to use which allows the user s music to play from the speakers while the headset is used for voice communications purposes. Some remote protocols may provide support for redirecting audio playback from the server to the client computer and also redirect recorded audio from the client computer to the server. In both cases however the audio capabilities are typically directed through a single device. This severely limits the richness available to audio applications and does not adequately support the multiple device scenario described above. Thus other techniques are needed in the art to solve the above described problems.

Methods and systems are disclosed for multiple audio device capture and playback during a remote terminal session. In various embodiments a custom device manager is disclosed that instantiates proxy audio input and output devices on the server corresponding to each real device on the client computer. The proxy devices may redirect their respective audio streams to the physical device on the client. When a client computer has multiple audio devices the devices will be made available during the remote session and may be used independently of each other.

Various aspects are disclosed herein for a mechanism to allow loading of a custom audio device manager and for instantiating a proxy device that may be used to redirect information about the client device such as the device name form factor etc. to the server. In an embodiment multiple audio devices may be instantiated during a remote session and multiple independent audio streams may be redirected to the selected device on the client computer. In further embodiments per device compression and buffering settings may be implemented.

In addition to the foregoing other aspects are described in the claims drawings and text forming a part of the present disclosure. It can be appreciated by one of skill in the art that one or more various aspects of the disclosure may include but are not limited to circuitry and or programming for effecting the herein referenced aspects of the present disclosure the circuitry and or programming can be virtually any combination of hardware software and or firmware configured to effect the herein referenced aspects depending upon the design choices of the system designer.

The foregoing is a summary and thus contains by necessity simplifications generalizations and omissions of detail. Those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting.

Certain specific details are set forth in the following description and figures to provide a thorough understanding of various embodiments of the invention. Certain well known details often associated with computing and software technology are not set forth in the following disclosure to avoid unnecessarily obscuring the various embodiments of the invention. Further those of ordinary skill in the relevant art will understand that they can practice other embodiments of the invention without one or more of the details described below. Finally while various methods are described with reference to steps and sequences in the following disclosure the description as such is for providing a clear implementation of embodiments of the invention and the steps and sequences of steps should not be taken as required to practice this invention.

It should be understood that the various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the invention or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers the computing device generally includes a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may implement or utilize the processes described in connection with the invention e.g. through the use of an application programming interface API reusable controls or the like. Such programs are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

A remote desktop system is a computer system that maintains applications that can be remotely executed by client computer systems. Input is entered at a client computer system and transferred over a network e.g. using protocols based on the International Telecommunications Union ITU T.120 family of protocols such as Remote Desktop Protocol RDP to an application on a terminal server. The application processes the input as if the input were entered at the terminal server. The application generates output in response to the received input and the output is transferred over the network to the client computer system. The client computer system presents the output data. Thus input is received and output presented at the client computer system while processing actually occurs at the terminal server. A session can include a shell and a user interface such as a desktop the subsystems that track mouse movement within the desktop the subsystems that translate a mouse click on an icon into commands that effectuate an instance of a program etc. In another example embodiment the session can include an application. In this example while an application is rendered a desktop environment may still be generated and hidden from the user. It should be understood that the foregoing discussion is exemplary and that the presently disclosed subject matter may be implemented in various client server environments and not limited to a particular terminal services product.

In most if not all remote desktop environments input data entered at a client computer system typically includes mouse and keyboard data representing commands to an application and output data generated by an application at the terminal server typically includes video data for display on a video output device. Many remote desktop environments also include functionality that extend to transfer other types of data.

Communications channels can be used to extend the RDP protocol by allowing plug ins to transfer data over an RDP connection. Many such extensions exist. Features such as printer redirection clipboard redirection port redirection etc. use communications channel technology. Thus in addition to input and output data there may be many communications channels that need to transfer data. Accordingly there may be occasional requests to transfer output data and one or more channel requests to transfer other data contending for available network bandwidth.

As discussed above clients may use a remote protocol such as Remote Desktop Protocol RDP to connect to a resource using terminal services. When a remote desktop client connects to a terminal server via a terminal server gateway the gateway may open a socket connection with the terminal server and redirect client traffic on the RDP port or a port dedicated to remote access services. The gateway may also perform certain gateway specific exchanges with the client using a terminal server gateway protocol transmitted over HTTPS.

A virtual machine monitor such as a hypervisor is a program that creates virtual machines each with virtualized hardware resources which may be backed by underlying physical hardware resources. illustrates a virtual machine environment with a plurality of virtual machines comprising a plurality of virtual processors and corresponding guest operating systems . The virtual machines are maintained by a virtualizing layer which may be comprised of a scheduler and other components not shown where the virtualizing layer virtualizes hardware for the plurality of virtual machines . The plurality of virtual processors can be the virtual counterparts of underlying hardware physical processors .

All of these variations for implementing the above mentioned partitions are just exemplary implementations and nothing herein should be interpreted as limiting the disclosure to any particular virtualization aspect.

Client and server operating systems typically allow a remote session to use one of the client computer s sound output devices. The audio device interfaces in the remote session is typically limited to supporting a single audio output depending on the client computer s capabilities and the configuration of the terminal server and client software. Similarly a server client configuration may support a single audio input. In various embodiments disclosed herein a remote session may use more than one of the client computer s sound input or output devices. In one embodiment an audio device manager is disclosed that executes on the terminal server software and may be configured to manage access to local and remote devices. The audio device manager thus allows an application running on the server to seamlessly provide audio outputs without determining whether the audio device is local or remote. The audio device manager manages the audio devices local to the server as well as managing the application s access to devices on a remote client computer that the application is servicing during a remote desktop session.

When a remote desktop session is initiated the audio device manager may request the client computer s audio capabilities such as requesting a list of audio inputs and outputs and corresponding metadata. It should be recognizable to those skilled in the art that audio devices are exemplary and the present disclosure may be embodied in scenarios involving multiple devices of a different category such as video and user interface devices.

In some embodiments an application programming interface API may be provided to enable applications to access the input output management mechanisms. For example the API may enable applications to access the audio device manager on the terminal server and query the available sound inputs and outputs. The audio device information may then enable the applications to make decisions for example regarding the playing and recording of audio. Such APIs may enable third party application providers to implement support for multiple remote audio devices using the standard interfaces implemented in the API. Applications executing in a remote session may then access the sound inputs and outputs available on the client computer and present these audio input and output devices through the standard APIs in a manner as similar as possible to the manner and form implemented on the client computer.

The API may be used to request information regarding the configuration of audio devices on the client computer and information about the devices such as whether the device is intended to be used for console communications or multimedia audio. Console audio may include items such as system sounds new mail sounds instant message notifications browser link clicks and the like. The requested information may then be used by multiple applications to transparently access and utilize the available devices as needed by the applications. For example the communications application may use the headset microphone for generating communications audio while the media player application may choose the desktop speakers plugged into the system. Furthermore display names and other programmatic or human readable descriptive information about the audio inputs and outputs may be made available to the server application.

The API may also enable implementation of a generic per device property store. Some of these properties in the property store may be pre defined and contain information such as a user friendly name for the device or the device s form factor. Some applications however may opt to store their own custom data with each device. Custom data may give the application the ability to save application specific configuration information with each device. For example an application may choose to exhibit different behavior when capturing data from an external microphone versus the microphone built into the client computer.

In various embodiments a number of high level functions may be provided in such a multiple remote audio device system. The functions may include but not be limited to audio device management device property redirection and multiple audio stream redirection. A device interface is generally an interface exposed via a communication channel exposing an entity on one end of a transport layer connection. An audio device may be a single tangible audio input or output on the client computer. Typically the device will be a speaker or a microphone.

An audio device manager may be a component in the operating system or audio system that allows applications to query the available audio input and output devices. The audio device manager provides access to local audio devices as well as those on the client computer. The audio device manager may present the local and remote audio devices to the applications such that the application is not aware whether a device is local or remote. In one embodiment of the present disclosure an audio device manager may be extended to interface to multiple remote audio devices by enabling the audio system to load a plurality of custom device managers for remote sessions. The custom device managers may provide the remote desktop server with information and control over what devices are available remotely and how to use the devices. The custom managers may further allow the redirection of audio output to the appropriate audio devices that are on the client computer.

In one embodiment when an application executing in the remote session submits a query for the available input and output audio devices the audio device manager may instantiate a custom device manager that may generate and transmit a request for a list of the remote client computer s audio devices. A stub device manager executing on the remote client computer may receive the request and query the requested information using an API executing on the client computer. The API may implement a client side standard audio device management interface for use by one or more stub device managers. Client devices may use the API to allow applications such as the stub device manager to query for information related to the devices. The stub device managers thus may use the API to discover the audio devices on the client computer. The information necessary to uniquely identify each audio device may be provided to the stub device manager. The information may then be encoded and transmitted over a communications channel to the requesting custom device manager. The custom device manager via the audio device manager may then return this list of devices to the requesting application.

Using such APIs applications may initiate queries such as reading and storing properties and activating interfaces to be used for playing and recording audio. In a further embodiment the audio device manager may instantiate one or more proxy devices for each device returned from the client computer. The proxy devices may appear to the application as a local resource but is actually a proxy for one of the remote audio devices on the remote client computer. Applications on the server may then use these proxy devices to perform operations as if the devices were locally resident. The proxy devices may redirect the application operations related to the remote devices to the client computer such that the remote application appears to be transparently using local devices. The data directed to proxy devices may be collected by the custom device manager which then identifies the corresponding device on the client computer to which the data should be redirected.

In an embodiment a stub device manager may be provided on the client computer. For example the remote access software executing on the client computer may include one or more stub device managers. The stub device manager may receive data from the custom device manager executing on the server over one or more communications channels. As discussed above the data may be transmitted by a custom manager instantiated for the remote session. The stub device manager may further instantiate one or more stub devices that correspond to each of the client side devices reported to the server. Each of these stub devices may further correspond to one of the proxy devices instantiated on the server.

In a further embodiment audio devices may have an associated property store that allows various data to be associated with the devices. The data may comprise various properties applicable to the audio device or may include data that may be used by the audio application. Examples may include the device s form factor e.g. speakers headphones etc. the audio formats supported by the device and an icon for the device. The device may also allow applications to push and store custom information with the device. For example a score may be associated with a device indicating a device priority. The priority may be used by the application in the event the application needs to choose one device over another.

The device properties may further be synchronized between the client computer and the server to provide a seamless redirected audio experience. Property synchronization may be accomplished by the proxy devices. In an embodiment when an application reads or sets a property on the audio device the proxy device may transmit the request via the audio device manager over the network to the corresponding stub device via the stub device manager on the client computer. The stub device may then perform the read or write operation as appropriate on the corresponding client device. The stub device may receive a property from the client device and transmit the result back to the server computer via the stub device manager .

When the audio device is local then the property information may be cached on the server. Some device specific properties may only be meaningful on a local machine. In such cases the proxy device may create an appropriate value for any requested or set properties and handle requests for the property without transmitting the request over the network to the client computer.

The server may redirect multiple independent audio streams to the respective device on the client computer. Applications using the proxy devices may activate a particular interface on the corresponding device on the client computer which may then be used to provide audio data for playback. An audio API executing on the server may accept audio streams from multiple applications and combine them into a single audio stream. The resulting combined audio stream by then be transmitted to the client device by directing the audio stream to the appropriate proxy device. Each proxy device may retain its own independent state information and thus the proxy devices may have different configurations. Each proxy device may open a separate channel to the client machine over which audio data may be transmitted.

In a further embodiment the custom device manager may determine the communication channel parameters such as bandwidth and latency on its respective channel and may then use this information to encode the audio data using an encoder suitably chosen as a function of the communication channel parameters. For example a device manager may determine that the bandwidth for a particular channel is low. If the application is providing a voice audio stream the manager may select a codec that provides greater compression and reduced data rate. The device may also be configured to use a fixed encoder under certain circumstances. Using a fixed encoder may improve the responsiveness of the audio stream. Because the device configuration is independent of the other devices each device may use its own encoding settings. For example a system sounds device may dynamically adjust its settings a multimedia device may use uncompressed audio for higher audio quality and a communications device may use a codec that is specially tuned for speech using a higher compression rate.

Referring to illustrated is an exemplary block diagram depicting various functions and components for redirecting audio input and output to multiple devices. A server in communication with a remote client computer over a remote terminal session may host at least one application that further generates audio playback targeted to a device on the client computer. An audio device manager may allow the application to query for the available audio input and output devices on the client computer. The audio device manager may notify the application of new devices or advise of any changes to the client computer s configuration if a list of devices has previously been provided.

The application may further load a custom device manager that may be available on the server for remote sessions and communicate to the audio device manager via a standard interface. The custom device manager may initiate communications with a particular audio device and allow redirecting audio input and output to the devices on the client computer when the devices are reported. When the application queries the available audio devices during a remote session the custom device manager may send a message to the client computer requesting a list of the client s audio devices. A stub device manager on the client computer may via a standard audio device management interface request information regarding the audio devices on the client computer. The client device manager may receive the requests for information via the standard interface. An audio device may be a single tangible sound input or output on the client computer. Typically the device will be a speaker or a microphone.

The client devices may via an API to allow the client device manager to query for information. Using the API the applications may initiate queries such as reading and storing properties and activating interfaces to be used for playing and recording audio. The client device manager may communicate with client devices to query and receive the requested information. The information necessary to uniquely identify each client device may then be encoded and transmitted over a communications channel to the audio device manager . The audio device manager may then return this list of client devices to the application .

The audio device manager may instantiate proxy devices for each client device returned from the client computer. Application may then use the proxy devices to perform operations as if the client devices were locally resident. The proxy devices may redirect the operations to the client computer via stub devices so the remote application appears to be transparently using the client devices .

The audio device manager may instantiate proxy devices for each client device returned from the client computer. Application may then use the proxy devices to perform operations as if the client devices were locally resident. The proxy devices may redirect the operations to the client computer via stub devices so the remote application appears to be transparently using the client devices .

Referring to illustrated is an exemplary flow diagram depicting reading and setting properties associated with client devices. As described above client devices may have a property store associated with them that allows arbitrary data to be associated with the devices. The data may comprise properties about the audio device or may include data used by the audio system. Examples include the device s form factor e.g. speakers headphones etc. the audio formats supported by the device and an icon for the device. The device may also allow applications to store custom information with the device. An application may generate a request to read a property on a client device. The proxy device may transmit the request to read a property over a communications channel to the stub device on the client computer. The stub device may then perform the read operation by sending the request to read a property to a client device . The client device may receive a property value from a local device and transmit property value to the stub device . The stub device may then transmit the property value over the communications channel to the proxy device . Finally the proxy device may then provide the property value to the application that originated the request.

An application may also generate a request to set a property on a client device. The proxy device may transmit the request to set a property over a communications channel to the stub device on the client computer. The stub device may then perform the set operation by sending the request to set a property to a client device .

Referring to illustrated is an exemplary flow diagram depicting redirecting audio input and output in a client server environment. A server providing a remote terminal session may redirect multiple independent audio streams to a target device on the client computer. One or more applications executing on the server may generate one or more audio streams represented as audio data . An audio mixer that may be resident on the server may accept audio streams from the one ore more applications and mix the audio streams into a single mixed audio stream . The mixed audio data may then be provided to proxy device . In such a fashion applications may activate a particular interface on a client device using the proxy devices which can be used to provide audio data for playback. Each proxy device may open a separate channel to the client computer over which mixed audio data may be transmitted.

The proxy device may transmit the mixed audio data over a communications channel to the stub device on the client computer. The stub device may then feed the mixed audio data to a corresponding client device where the mixed audio data may be played on the target audio device on the client computer.

The following are a series of flowcharts depicting implementations of processes. For ease of understanding the flowcharts are organized such that the initial flowcharts presents a high level overview and subsequent flowcharts provide further additions and or details.

Operation illustrates receiving a request from an application executing on a server for available input output devices. Operation illustrates transmitting a message to a client computer requesting the client computer s input output device information. The audio device manager may instantiate a custom device manager that may generate and transmit a request for a list of the remote client computer s audio devices. A stub device manager executing on the remote client computer may receive the request and query the requested information using an API executing on the client computer. The API may implement a client side standard audio device management interface for use by one or more stub device managers. Client devices may use the API to allow applications such as the stub device manager to query for information related to the devices. Operation illustrates requesting input output device information from a client computer. Operation illustrates the device information uniquely identifying input output device interfaces on the client computer. Operation illustrates associating a proxy device with at least one identified input output device and returning information regarding the associated proxy device to the application. The proxy devices may appear to the application as a local resource but actually they are proxies for one of the remote audio devices on the remote client computer. Applications on the server may then use these proxy devices to perform operations as if the devices were locally resident. Operation illustrates receiving from the application data directed to the associated proxy device. Operation illustrates redirecting the received data to the input output device associated with the proxy device. Operation illustrates that the proxy device transmits the received data to the identified input output device interface associated with the proxy device. A stub device manager on the client computer may instantiate one or more stub devices that correspond to each of the client side devices reported to the server. Each of these stub devices may further correspond to each of the proxy devices instantiated on the server.

Turning to operation illustrates the input output device information further comprises at least one property associated with a device. Operation illustrates synchronizing at least one property between the client computer and the server. Operation illustrates transmitting a request to a proxy device to read or set a property on an input output device on the client computer. The data may comprise various properties applicable to the audio device or may include data that may be used by the audio application. Examples may include the device s form factor e.g. speakers headphones etc. the audio formats supported by the device and an icon for the device. Operation illustrates that the proxy device transmitting the request over the communications channel to the client computer. Operation creating properties for each input output device and handling requests for properties for the input output device without communicating to the client computer. Some device specific properties may only be meaningful on a local machine. In such cases the proxy device may create an appropriate value for any requested or set properties and handle requests for the property without transmitting the request over the network to the client computer.

Operation illustrates that the application is an audio application. Operation illustrates redirecting a plurality of audio streams to an input output audio device on the client computer by combining audio streams destined for the audio device and transmitting the combined audio stream over a communications channel to the audio device. An audio API executing on the server may accept audio streams from multiple applications and combine them into a single audio stream. Operation illustrates measuring bandwidth and latency on the communications channel and selecting an audio encoder as a function of the bandwidth and latency. For example a device manager may determine that the bandwidth for a particular channel is low. If the application is providing a voice audio stream the manager may select a more lossy codec that provides greater compression. Operation illustrates configuring the associated proxy device to use a fixed audio format. Operation illustrates that each proxy device is independently configured. Because the device configuration is independent of the other devices each device may use its own encoding settings.

Operation illustrates receiving via a first API a request for available audio devices. Operation illustrates transmitting a request for the client computer s audio devices to a client device manager executing on the client computer. Operation illustrates that the client device manager communicates to the client computer s resources via a second API executing on the client computer. Client devices may use the API to allow applications such as the stub device manager to query for information related to the devices. The stub device managers thus may use the API to discover the audio devices on the client computer. Operation illustrates receiving from the client device manager information indicative of the specific audio devices on the client computer and a corresponding interface for each returned audio device.

Operation illustrates activating proxy devices corresponding to the received audio devices. The proxy devices may appear to the application a local resources but actually are proxies for one of the remote audio devices on the remote client computer. Applications on the server may then use these proxy devices to perform operations as if the devices were locally resident. Operation illustrates that the proxy devices enable redirection of audio input and output to the corresponding audio devices. Operation illustrates that each proxy device retains independent state and configuration information.

Operation illustrates redirecting a plurality of audio streams to a device on the client computer by combining audio streams targeted to the device. An audio API executing on the server may accept audio streams from multiple applications and combine them into a single audio stream. Operation illustrates transmitting the combined audio stream to the proxy device corresponding to the targeted device. Operation illustrates measuring bandwidth and latency on the communications channel. Operation illustrates the further operation of selecting an audio encoder as a function of the bandwidth and latency.

Operation illustrates receiving from the client computer a notification of device changes. A user on the client computer may add new audio devices or remove connected audio devices. The custom device manager on the server should be notified so that any application in communication with a removed audio device may reconfigure. Likewise newly added devices should be reported to the application so that the new device may be considered as an input output device. Operation illustrates activating proxy devices corresponding to new audio devices. Operation illustrates removing proxy devices corresponding to removed audio devices.

In a request for available input output audio devices is received from a server over a communications channel. In a request for input output audio device information is requested via an API. Operation illustrates that the device information uniquely identifies input output audio device interfaces.

Operation illustrates encoding and transmitting the list over the communications channel to the server. A proxy device is associated with at least one identified input output audio device. Operation illustrates that the proxy device comprises at least one interface for receiving redirected audio inputs and outputs from the server. The proxy device transmits the redirected audio inputs and outputs to the identified audio input output device interface associated with the proxy device.

Operation illustrates receiving at least one redirected audio stream over the communications channel. Operation illustrates that the redirected audio stream comprises combined audio streams from applications executing on the server and directed to one of the proxy devices. Each proxy device may open a separate channel to the client machine over which audio data may be transmitted. Operation illustrates combining the redirected audio stream with available audio data from an application executing locally on the client computer. For example a process operating on the client computer may request that a sound notification be provided on the speaker system. The speakers may also be playing audio data received from the remote server. The sound notification and remotely received audio may be combined to play simultaneously over the speakers. Operation illustrates directing the combined audio stream to an audio device associated with the directed proxy device.

Operation illustrates periodically checking for new and removed devices via the API. Operation illustrates transmitting to the server a notification of device configuration changes. A user on the client computer may add new audio devices or remove previously connected audio devices. The custom device manager on the server should be notified so that any application in communication with a removed audio device may reconfigure to use an alternate audio device if available. Likewise newly added devices should be reported to the application so that the new device may be considered as an alternative input output device. Operation illustrates registering with the API for notifications about new or removed devices. The local stub device manager may thus receive automatic notifications whenever a device interface is added or removed. Operation illustrates transmitting to the server a notification of device configuration changes.

As described above aspects of the invention may execute on a programmed computer. and the following discussion is intended to provide a brief description of a suitable computing environment in which the those aspects may be implemented. One skilled in the art can appreciate that the computer system of can in some embodiments effectuate the server and the client of . In these example embodiments the server and client can include some or all of the components described in and in some embodiments the server and client can each include circuitry configured to instantiate specific aspects of the present disclosure.

The term circuitry used through the disclosure can include specialized hardware components. In the same or other embodiments circuitry can include microprocessors configured to perform function s by firmware or switches. In the same or other example embodiments circuitry can include one or more general purpose processing units and or multi core processing units etc. that can be configured when software instructions that embody logic operable to perform function s are loaded into memory e.g. RAM and or virtual memory. In example embodiments where circuitry includes a combination of hardware and software an implementer may write source code embodying logic and the source code can be compiled into machine readable code that can be processed by the general purpose processing unit s .

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM including an operating system one or more application programs other program modules and program data . A user may enter commands and information into the computer through input devices such as a keyboard and pointing device . Other input devices not shown may include a microphone joystick game pad satellite disk scanner or the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to the system bus but may be connected by other interfaces such as a parallel port game port or universal serial bus USB . A display or other type of display device can also be connected to the system bus via an interface such as a video adapter . In addition to the display computers typically include other peripheral output devices not shown such as speakers and printers. The system of also includes a host adapter Small Computer System Interface SCSI bus and an external storage device connected to the SCSI bus .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be another computer a server a router a network PC a peer device or other common network node a virtual machine and typically can include many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in can include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer can be connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer can typically include a modem or other means for establishing communications over the wide area network such as the Internet. The modem which may be internal or external can be connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections shown are examples and other means of establishing a communications link between the computers may be used. Moreover while it is envisioned that numerous embodiments of the invention are particularly well suited for computer systems nothing in this document is intended to limit the disclosure to such embodiments.

The foregoing detailed description has set forth various embodiments of the systems and or processes via examples and or operational diagrams. Insofar as such block diagrams and or examples contain one or more functions and or operations it will be understood by those within the art that each function and or operation within such block diagrams or examples can be implemented individually and or collectively by a wide range of hardware software firmware or virtually any combination thereof.

While particular aspects and embodiments of the invention described herein have been shown and described it will be apparent to those skilled in the art that based upon the teachings herein changes and modifications may be made and therefore the appended claims are to encompass within their scope all such changes and modifications as are within the true spirit and scope of the inventions described herein.

