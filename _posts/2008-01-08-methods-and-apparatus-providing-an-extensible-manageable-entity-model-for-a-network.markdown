---

title: Methods and apparatus providing an extensible manageable entity model for a network
abstract: Deployment of new elements in a computer network can result in development of patch kits adapters, and other software and trigger corresponding regressive test efforts. In a storage area network, a method is disclosed for defining a general, extensible model of a manageable entity for use in management of the entity. The method includes obtaining a set of attribute values related to the manageable entity in relation to the storage area network. A deployment engine identifies corresponding entity categories within a storage area network entity model that contains attribute definitions that correspond to respective attribute values in the set of attribute values obtained from the manageable entity. The deployment engine assigns the respective attribute values of the manageable entity to the corresponding respective attribute definitions identified in the model. The deployment engine then determines if all attribute values of the manageable entity have been assigned. If unassigned attribute values remain, a classification processor defines new entity categories to contain new attribute definitions, and assigns the unassigned attributes value to the new attribute definitions contained in the new entity category.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07984074&OS=07984074&RS=07984074
owner: EMC Corporation
number: 07984074
owner_city: Hopkinton
owner_country: US
publication_date: 20080108
---
This Patent Application is a Divisional of U.S. patent application Ser. No. 10 335 546 filed on Dec. 31 2002 entitled METHODS AND APPARATUS PROVIDING AN EXTENSIBLE MANAGEABLE ENTITY MODEL FOR A NETWORK issued as U.S. Pat. No. 7 454 487 on Nov. 18 2008 the contents and teachings of which are hereby incorporated by reference in their entirety.

In a computer network a network manager or operator often requires the ability to add or modify new or existing network elements such as switches routers hubs servers disks and other devices. In addition the network operator may require the ability to replace add or upgrade new or existing software and firmware images that execute on or in conjunction with the network devices in the computer network. Often such modifications to network resources require that the network operator or another person develop additional drivers modules adapters configuration files and other hardware and software components to enable the new element to be deployed and managed correctly on the network. In a storage area network SAN conventional deployment of new elements such as storage area network devices or software applications additionally requires employment of linear or manual software development techniques to properly develop or create software modules that correspond to and that can manage the new elements. As an example suppose a network administrator purchases a new host computer system that includes a new operating system for deployment within a storage area network as a server. The network administrator will require the ability to manage this new host device in a remote capacity via use of a network management software application. To do so the conventional network management software application requires creation by the network manager or by a developer of the network management software application custom versions of source object and executable code deliverables to support management of the new host device.

In a typical conventional storage area network one or more storage arrays having very large amounts of data storage capacity are connected through connectivity devices such as switches to host computer systems that operate as servers of data to client computer systems that request the data from the storage arrays. The storage area network is thus a network that interconnects host connectivity and storage elements in a storage environment and ensures fault free and timely access to the data for client users via the host servers. In the storage area network a conventional storage area network management application is employed to monitor and control i.e. to manage the host connectivity and storage elements in the network. Management of the storage area network by the network management application allows optimal usage and throughput in the storage area network by identifying areas of contention reporting malfunctions providing access control and allocating ports and data flow paths between the host and storage devices in the storage area network.

The conventional network management application employs software components executing on within or in conjunction with the various elements in the storage environment to effect management of these elements within the storage area network. Typically a repository such as a database operates in conjunction with the network management application in order to map the elements e.g devices and software processes that comprise the storage area network environment into data structures that the network management application can use to manage the network elements. The repository typically includes respective element definitions for each manageable entity in the storage area network. Each element definition in the repository includes or defines information such as types and attributes characteristics and associated attribute values of the element relationships between that element and other elements as well as topology diagnostic and historical data concerning that storage area network element as it operates within the storage area network.

The network management application can access the repository to obtain for example the current state of an element in the storage area network such as the current performance of a host server computer system by querying its respective element definition. In addition the network management application can access an element definition in the repository in order to initiate communication with the device corresponding to that element definition to manage that device. In this manner the network management application manages the entities in the storage area network to monitor and control operation of the storage area network environment. Other software components such as agent components server components and repository components may operate on or in conjunction with certain elements in the storage area network and these other applications may be responsive management requests from the network management application.

Conventional mechanisms and techniques that provide the ability to manage elements within a storage area network environment suffer from a variety of deficiencies. In particular conventional deployment strategies used to integrate a new entity into a storage area network require creation and instantiation of management software components customized for that entity in order to monitor and control the deployed entity via the network management application. As an example in a conventional storage area network a network manager often adds upgrades or removes devices or software such as storage arrays connectivity devices operating systems hosts zoning control programs and or other hardware and software entities to and from the storage area network. Conventional deployment techniques of a new entity typically require for example creation of a local software component executing in conjunction with the network management application in order to manage that new entity as well as creation of an agent software component executing on or in conjunction with the newly deployed entity to communicate with the management application. These new software components must rely further on creation of a new set of element definitions for use by the repository component to store management and control and attribute information regarding the new entity within the repository.

Using conventional storage area network management techniques a storage area network operator or engineer must manually develop these new software components and data structures based upon the known characteristics of the new entity that is to be added to the storage area network. The operator then integrates the newly created software components and attribute and element definitions for the new entity into the existing storage area network by updating the repository and other affected components. After this task the storage area network management application can effectively communicate with the new entity to manage this entity remotely. Furthermore conventional mechanisms and techniques to deploy a new entity in a storage area network often require regressive testing of the affected entities to verify their correct operation and compatibility with the newly created software and data structures that are used to manage the entity. Such testing may trigger downtime of the storage area network.

To further illustrate such deficiencies using an example consider a typical example conventional deployment scenario in which the storage area network manager purchases a new entity such as a storage array and attempts to install the new storage array in the storage area network. A manufacturer of the storage array supplies along with the storage array itself a specification sheet or a configuration file that indicates specific attributes of that array. Such attributes can include for example a description of the physical characteristics of the storage array as well as software characteristics of the storage array such as a list of protocols that may be used to communicate with the storage array. Quite often since the new storage array is different than other storage arrays already installed with the storage area network the attributes of the new storage array will not correspond to the existing set of attribute and element definitions of the existing storage array entities. As a result the storage area network manager is unable to manage the new storage array using the current existing configuration of the network management application. The storage area network manager thus may contact technical support of the manufacturer of the new storage array and may discover that the storage array type is not yet manageable by the current version called the network management application in use by that storage area network installation.

In order for the conventional network management application to support management of the new entity that the network operator integrates into the storage area network the technical support organization of the network management application must obtained the attribute set of the new storage array. The storage area network manager must therefore wait for a new release of the network management application that accommodates management of the new entity.

The technical support or engineering group must map or create a set of new attribute definitions to accommodate management of the new entity. In other words the engineering group must develop new data structures and software components that are able to use the new attributes of the new entity for management of this new device. For the storage array example discussed above the technical support agency must develop new element definition data structures and software components for operation of agent software that executes on a host connected to the new storage array and for use by the network management application. The technical support group may further require the ability to update or modify the repository component to include the new attribute definitions developed for the storage array entity. Other components in communication with these entities may also be affected.

The engineering group then must assess and perform regressive testing of the modified components to ensure validity and proper operation. The engineering group then builds a patch or other installation kit from the modified components and emails or burns this new software release onto a CDROM or other suitable format and sends this to the storage area network manager at the customer site. The storage area network manager then installs the patch and deploys the new storage array entity on the storage area network which has been idle since delivery.

The conventional manual or linear deployment and management development cycle described above for the addition of a new entity into a storage area network environment therefore tends to result in cumbersome installations site specific patches and time consuming regressive testing. This is due in large part to the fact that data structures and other software components required to manage a newly created software entity or hardware device within a storage area network are crafted from scratch in conventional deployment situations. That is there is little if any automated reuse of software components and or preexisting data structures such as for example repository element definitions to maintain attribute values associated with newly developed storage area network entities. Even in development environments that use object oriented software development techniques conventional mechanisms for developing the software necessary to manage a newly created storage area network manageable resource do not automatically consider the reuse of existing resources. Accordingly even if a technical support person who has the task of developing new software modules for a newly created storage area network entity happens to remember that an existing set of data structures may closely resemble some of the attributes used by the new entity it is largely a manual effort to determine which data structures of an entire set of repository data structures may be effectively reused to hasten the deployment of management software for effective management of this new entity. In other words current network management application development processes require that developers of the network management application recreate completely new sets of data structures to represent a new entity that is released by a manufacturer for use within a storage area network environment. Accordingly effective time to market and downtime tends to be increased.

Embodiments of the invention significantly overcome the aforementioned deficiencies. In particular embodiments of the invention provide an extensible and hierarchical object model for modeling and storing information related to manageable resources such as host devices connectivity devices storage devices and software entities e.g. database programs logical volume managers operating systems or the like within a storage area network. Using this extensible and hierarchical object model as will be explained in more detail embodiments of the invention provide highly automated techniques and mechanisms for integrating new or different or upgraded manageable entities within a storage area network environment thus allowing more rapid deployment of management capabilities for such entities without the need extensive manual recreation of complete new sets of data structures and element definitions to represent the new entity as is done using the aforementioned conventional techniques for providing management of storage area network entities.

Generally embodiments of the invention are able to receive a set of attribute values or characteristics related to a manageable entity this to be deployed within a storage area network. Using this set of attribute values for this new entity embodiments of the invention are able to compare attribute values within this set to existing attribute definitions defined within the current inventory of existing entity categories e.g. managed objects defined in a repository of an existing storage area network object entity model. The result of this comparison identifies any currently existing storage area network object model entity categories that can effectively be used to represent attribute values of the new entity. Accordingly using this comparison technique embodiments of the invention can identify a set of managed object data structures taken from the existing set of hierarchical entity categories within an existing object model to be used to closely and in some cases exactly represent the new entity. Any attribute values to do not match existing attribute definitions within existing entity categories in the existing object model comprise a remainder list of unmatched or unassigned attribute values. For these unassigned attribute values embodiments of the invention allow the developer to define new entity categories containing entity definitions for the corresponding unassigned attribute values and then allow a developer to assign the unassigned attribute values to these newly defined entity categories. In this manner embodiments of the invention significantly alleviate the need for a software developer to attempt to create an entire set of data structures to represent a new manageable entity.

Embodiments of the invention further avoid a developer from attempting to manually identify any potentially existing data structures within an object model that might be able to be used for representation of a new entity. Such conventional attempts are human thought based and are highly cumbersome and prone to error. Instead embodiments of the invention provide an automated attribute value to attribute definition comparison process to identify any pre existing entity categories in a hierarchy that can be used to represent information related to componentry within the new entity. accordingly identification of object model definitions i.e. entity categories is automated along with attribute value assignments for those matching attributes values to add to be definitions and those matching entity categories. For those unassigned or non matching attribute values the developer can further utilize embodiments of the invention to define new entity categories containing new attribute definitions that correspond to the unassigned or unmatched attribute values that are left over after the comparison process is complete. Embodiments of the invention thus significantly reduce development time of network management capabilities for a storage area network resource. Moreover since the pre existing hierarchical storage area network object model can contain an extensive library of existing entity categories having associated attribute definitions for various levels of details of manageable resources in a storage area network it may be the case that the comparison process performed by embodiments of the invention completely matches all attribute values of the new entity to existing entity categories thus effectively eliminating development time for data structures to represent the new entity.

More specifically embodiments of the invention to provide mechanisms and techniques for defining manageable entities of a storage area network for use in management of a device corresponding to the defined mantle entities. One embodiment provides a method for defining a general adaptive extensible model of a manageable entity for use in management of the entity that expedites deployment of new manageable entities such as storage arrays connectivity devices hosts and databases into the storage area network. The method embodiment includes obtaining a set of attribute values related to the new manageable entity in relation to the storage area network. A deployment engine identifies corresponding entity categories within a storage area network entity model model that contains attribute definitions that correspond to respective attribute values in the set of attribute values obtained from the manageable entity. The deployment engine assigns the respective attribute values of the manageable entity to the corresponding respective attribute definitions contained within the corresponding entity categories identified in the network entity model. The deployment engine then determines if all attribute values of the manageable entity have been assigned to the modeled attribute definitions or if there is at least one unassigned attribute value in the set of attribute values related to the manageable entity. If unassigned attribute values remain a classification processor defines new entity categories to contain the new attribute definitions that correspond to the unassigned attribute values and assigns the unassigned attributes value to a corresponding one of the new attribute definitions contained in the new entity category.

In a particular configuration the categories of the entity model are arranged in hierarchical levels and the model is traversed by repeating the identifying and assigning in an iterative manner for entity categories at successive levels of the model. A classification processor is invoked for creating and storing new categories and attribute definitions for each of the unassigned attribute values.

The attribute values may be parsed from an element specification file corresponding to the manageable entity as attribute value pairs indicative of the attribute definition and corresponding attribute value. The attribute value pairs may further be indicative of the corresponding entity category.

For each new entity category a corresponding component is created or instantiated. The new entity categories may correspond to either hardware storage area network devices such as a storage array a host or a connectivity device or may be software entities such as operating systems volume managers file systems and zones. For each of the defined manageable entities in the storage area network entity model relations between categories and attribute definitions within the categories are defined by the entity model. The relations ensure neither consistency when new entities are added so that the existing model need not be upgraded nor any components corresponding to unchanged categories recompiled rebuilt or reconfigured. Therefore new entities are integrated by manipulating only the categories that are new or changed such that other unaffected categories and corresponding components and entities continue to operate without upgrade rebuild or other modifications.

In another particular configuration the entity model is adapted for deployment of a storage array. A category is designated to correspond to each type of storage array typically a particular model from a particular vendor. The deployment engine instantiates agent components to execute on the host for each storage array. The classification processor creates new categories for new types of storage arrays and new agent components are deployed to correspond to the new category.

In another particular configuration the entity model is adapted for deployment of a storage area network host. In this configuration the deployment engine identifies a set of host devices in communication with the host and identifies vendor specific attributes of the host devices. Employing the entity model the deployment engine identifies relations between the new host and the host devices. If a new entity category is defined the classification processor verifies the relations according to the entity model.

In another particular configuration the entity model is adapted for deployment of a database in a storage area network. The deployment engine identifies files on physical devices corresponding to each of the identified entity categories in the database. If there are new attributes the classification processor receives the new attributes and creates the corresponding entity categories. The deployment engine determines physical partitions extents and segments indicative of at least a portion of each of the identified files. The classification processor verifies relations between the physical partitions extents and segments for compliance with the entity model.

In this manner components corresponding to new entities are rapidly deployed in the storage area network if the new entities are adaptable to the storage area network entity model. In this scenario the deployment engine deploys instantiations of components corresponding to existing categories thereby minimizing or eliminating regressive testing. Further if additional attribute values are defined for the new entity the classification processor defines additional categories and only new components corresponding to the additional categories are developed.

Other embodiments of the invention include a computerized device such as a network management computerized device workstation or other computerized device configured to process all of the aforementioned method operations disclosed herein as embodiments of the invention to provide a network topology view and associated resource management operations. In such embodiments the computerized device includes a display a memory system a processor and an interconnection mechanism connecting the display the processor and the memory system. The memory system is encoded with an entity management application that when performed on the processor produces an entity management processes that operates as explained herein.

Other arrangements of embodiments of the invention that are disclosed herein include software programs to perform the method embodiment steps and operations summarized above and disclosed in detail below. More particularly a computer program product is disclosed that has a computer readable medium including computer program logic encoded thereon that when performed in a computerized device provides a entity manager that performs associated operations as explained herein. The computer program logic when executed on at least one processor with a computing system causes the processor to perform the operations e.g. the methods indicated herein as embodiments of the invention. Such arrangements of the invention are typically provided as software code and or other data structures arranged or encoded on a computer readable medium such as an optical medium e.g. CD ROM floppy or hard disk or other a medium such as firmware or microcode in one or more ROM or RAM or PROM chips or as an Application Specific Integrated Circuit ASIC or as downloadable software images in one or more modules shared libraries etc. The software or firmware or other such configurations can be installed onto a computerized device to cause one or more processors in the computerized device to perform the techniques explained herein as embodiments of the invention. Software processes that operate in a collection of computerized devices such as in a group of storage area network management servers can also provide the system of the invention.

It is to be understood that the system of the invention can be embodied strictly as a software program as software and hardware or as hardware alone. Example embodiments of the invention may be implemented within EMC s Control Center software application that provides management functionality for storage area network resources and in computerized devices that operate the Control Center software. Control Center is manufactured by EMC Corporation of Hopkinton Mass. USA.

Embodiments of the invention provide an extensible and hierarchical object model for modeling and storing information related to manageable resources such as host devices connectivity devices storage devices and software entities e.g. database programs logical volume managers operating systems or the like within a storage area network. Using this extensible and hierarchical object model as will be explained in more detail embodiments of the invention provide highly automated techniques and mechanisms for integrating new or different or upgraded manageable entities within a storage area network environment thus allowing more rapid deployment of management capabilities for such entities without the need extensive manual recreation of complete new sets of data structures and element definitions to represent the new entity as is done using the aforementioned conventional techniques for providing management of storage area network entities.

Generally embodiments of the invention are able to receive a set of attribute values or characteristics related to a manageable entity this to be deployed within a storage area network. Using this set of attribute values for this new entity embodiments of the invention are able to compare attribute values within this set to existing attribute definitions defined within the current inventory of existing entity categories e.g. managed objects defined in a repository of an existing storage area network object entity model. The result of this comparison identifies any currently existing storage area network object model entity categories that can effectively be used to represent attribute values of the new entity. Accordingly using this comparison technique embodiments of the invention can identify a set of managed object data structures taken from the existing set of hierarchical entity categories within an existing object model to be used to closely and in some cases exactly represent the new entity. Any attribute values to do not match existing attribute definitions within existing entity categories in the existing object model comprise a remainder list of unmatched or unassigned attribute values. For these unassigned attribute values embodiments of the invention allow the developer to define new entity categories containing entity definitions for the corresponding unassigned attribute values and then allow a developer to assign the unassigned attribute values to these newly defined entity categories. In this manner embodiments of the invention significantly alleviate the need for a software developer to attempt to create an entire set of data structures to represent a new manageable entity.

Embodiments of the invention further avoid a developer from attempting to manually identify any potentially existing data structures within an object model that might be able to be used for representation of a new entity. Such conventional attempts are human thought based and are highly cumbersome and prone to error. Instead embodiments of the invention provide an automated attribute value to attribute definition comparison process to identify any pre existing entity categories in a hierarchy that can be used to represent information related to componentry within the new entity. Accordingly identification of object model definitions i.e. entity categories is automated along with attribute value assignments for those matching attributes values to add to be definitions and those matching entity categories. For those unassigned or non matching attribute values the developer can further utilize embodiments of the invention to define new entity categories containing new attribute definitions that correspond to the unassigned or unmatched attribute values that are left over after the comparison process is complete. Embodiments of the invention thus significantly reduce development time of network management capabilities for a storage area network resource. Moreover since the pre existing hierarchical storage area network object model can contain an extensive library of existing entity categories having associated attribute definitions for various levels of details of manageable resources in a storage area network it may be the case that the comparison process performed by embodiments of the invention completely matches all attribute values of the new entity to existing entity categories thus effectively eliminating development time for data structures to represent the new entity.

As a brief example of operation of embodiments of the invention consider a scenario in which a manufacturer releases a new version or a new type of host computer system that contains a new operating system. Certain aspects or attributes of the new host computer system may be common to other pre existing host computer systems. As an example at the highest level the host computer system is just that a host and includes typical host attributes common to all host computer systems in a storage area network. Examples of common host attributes may be processor type amount of memory a number and type of data communications interfaces and so forth. In addition other attribute values associated with this new host computer system may describe new features of the host that do not exist on other hosts with the storage area network. As an example new attributes may be parameters describing the new operating system and its capabilities and characteristics that may be different from other operating systems of other i.e. currently existing and modeled host computer systems.

Now consider a vendor of a network management software application that learns of the creation of this new host computer system and desires to rapidly equip its storage area network management application with the ability to manage this host computer system remotely. Using embodiments of the invention the vendor of the network management application will have in its possession an existing object model that includes hierarchically defined entity categories having associated attribute definitions for the various types of components that currently are manageable within a storage area network. In particular the storage area network object model provided by embodiments of the invention may include for example top level entity categories that define hardware devices that may exist within a storage area network such as hosts storage devices connectivity devices and the like. One top level entity category may correspond to a generic host and may contain various attribute definitions that generically describe all hosts such as the host vendor name of the host a hostname for the host on the network the host serial number and possibly other generic attributes.

Furthermore within the object model provided by embodiments of the invention under the top level host entity category may be other entity categories that hierarchically related to the top level host entity category and that define specific attribute definitions associated with specific components that typically exist within host devices currently under management of the storage area network management software. As an example below the top level host entity category may be respective entity categories that define attribute definitions for such things as internal or coupled host devices e.g. disk drives local printers and the like software applications that execute on a host interface types that may exist within the host and so forth. The object model defined by embodiments of the invention provides a hierarchical breakdown of the various top level entities into many related sub entity categories at increasing levels of detail.

Accordingly to provide management capability to the newly released host entity the developer of the network management application can operate embodiments of the invention to obtain attribute values related to the new host entity. Embodiments of the invention can then identify corresponding entity categories within the existing storage area network entity object model that contain attribute definitions that correspond to respective attributes values in a set of attribute values for the new host entity. Embodiments of the invention can further assign the attribute values to the entry definitions for the matching entity categories. Any leftover attribute values that were not matched using the aforementioned processing describe those attributes of the new host entity that did not match the existing object model entity categories. As an example since the operating system of the host was new there may have been no existing entity category corresponding to this new type of operating system and there likewise may or may not be existing entity categories in the existing object model that define attribute definitions for certain aspects of the operating system. Embodiments of the invention can operate to determine these unassigned attribute values and can allow the user to define new entity categories containing new attribute definitions corresponding to the unassigned attribute values and can allow the user to assign the unassigned attribute values to the new attribute definitions. In this manner embodiments of the invention reduce the amount of effort required by the developer to create data structures required by the network management application to allow this application to manage the new host entity.

While the example provided above explains high level operation of an brief example embodiment of the invention with respect to the addition of a new host entity is to be understood that embodiments of the invention provide such object model matching techniques for many different types a storage area network entities such as hardware devices including hosts connectivity devices and storage devices and other devices such as logical volume managers database applications zoning software applications and so forth. Further details of operation of embodiments of the invention will not be described with respect to the Figures.

Generally in operation the deployment engine receives a set of attribute values shown by arrow from or for i.e. associated with a manageable entity to be deployed within a network such as a storage area network. A manageable entity can include hardware and or software elements that may be deployed and managed as resources in the storage area network as will be described further below. Examples of manageable entities include new or updated version of database software logical volume managers data storage systems host computer systems e.g. servers adapters connectivity devices e.g. fiber channel switches and the like. The entity model includes entity categories e.g. managed objects as will be explained each having attribute definitions and relations to other categories both described further below. Generally the entity model is a database model having managed object data structures i.e. entity categories that relate to each manageable entity within a storage area network. The repository stores the entity model . The deployment engine operates to receive the set of attribute values and can access the entity model . The deployment engine attempts to assign the attribute values to corresponding attribute definitions of existing entity categories e.g existing managed objects in the entity model . The deployment engine can also generates software interfaces for use by components e.g. software interfaces to managed objects corresponding to entity categories for use in deployment of the new devices on the storage area network .

Also according to embodiments of the invention the classification processor operates to receive any unassigned attribute values shown by arrow from the deployment engine . Unassigned attribute values are those attributes that did not have corresponding attribute definitions with existing entity categories within the entity model as determined by the deployment engine . The classification processor also has access to the entity model and the current instantiations of manageable entities from the repository database . The classification processor determines for each of the unassigned attribute values a category i.e. an existing or a new category and a new attribute definition to represent these unassigned attributes. A new attribute definition is created and the classification processor determines whether to store the new attribute definition in an existing category or to create a new category for this and possibly other unassigned attribute values. The classification processor then creates a new category if needed and stores the new attribute definition and corresponding attribute value i.e. the formerly unassigned attribute value within the entity model .

The classification processor updates the entity model with the new attribute definition and its corresponding category and writes an indication of the deployment of a new manageable entity into the repository shown by arrow . The classification processor then makes available software interfaces such as database query interfaces to the new entity categories in the entity model containing new attribute definitions reflecting the new manageable entity for management of this entity in the deployment network .

The network management application provides monitoring and control of the manageable entities such as by identifying areas of contention reporting malfunctions monitoring performance providing access control allocating ports storage and flow paths and so forth. A plurality of infrastructure servers N generally is in communication with the operator console and the connectivity devices N for gathering reporting and transmitting commands between the servers N and the operator console . A host gathers requests for data access to the storage arrays on behalf of users. It should be noted that the hosts storage arrays N connectivity devices N infrastructure servers N and operator console are shown as exemplary in number and a suitable quantity of such entities may be employed in alternate configurations depending on available resources.

A data repository stores the entity model the attribute values and corresponding attribute definitions of the manageable entities defined in the storage area network . As indicated these attributes are arranged in entity categories and are indicative of the type characteristics and relationships of the manageable entities. Note that the repository stores the data specific to the manageable entities that operate within the storage area network and does not typically store user accessible data stored on the storage arrays for access via the host and end user applications executing on the host. In other words the repository is used to store a persistent version of the entity model such as in a database and is used for management purposes of the manageable entities .

A manageable entity typically has one or more management components e.g. software or hardware executing on it or in conjunction with the entity . A management component is a discrete software or hardware object such as a management agent which interacts with the manageable entity for the purpose of managing that entity from the network management application . A management component may be a process started by an executable file such as a Java script or applet a data file written or read by a process or other objects or agents or an application programming interface to operate a remote management program. Typically a management component can access using software interfaces the various entity category existing within the entity model . Management components such as agent use the software interfaces provided by embodiments of the invention to perform various operations concerned with interaction with another manageable entities and with the network management application .

As an example agent components executing on the host may use software interfaces to gather information about attributes and categories for population of data structures within the repository . Server components executing on the infrastructure servers gather information pertaining to throughput and access at a connectivity device or gather information about the storage devices and may use the software interfaces to store this data into managed object data structures create by embodiments of this invention. The storage device may also operate management components of their own as well that may use software interfaces to store and access management data in the repository. Database components may operate in the repository and may use software interfaces to define and enforce relationships between categories of the entity model . Embodiments of the invention are able to produce entity model interface definitions for use by various management components to allow the components to access database objects such as tables that are created based on operation of embodiments of the invention.

By way of example suppose a new storage array is to be added to the storage area network . In this invention the deployment engine receives a set of attribute values concerning or related to the storage array . The attribute values for the new storage array indicate certain attribute value properties of the new storage array paired for example with attribute value names e.g. name value pairs . As a specific example an attribute value appearing as Disk Count 80 may indicate how many disks 80 in this example are in this new storage array. Other attribute values name value pairs may indicate the storage array vendor serial number its volume management techniques configuration and potentially many other details. In this example each attribute value is actually a name Disk Count followed by a corresponding value 80 for that name.

Directing attention to the entity model in this model includes a top level category for storage area network elements used to store attribute values common to all storage area network elements such as hosts storage arrays and connectivity devices and further includes a sub category or subtype for storage array . The storage array category further includes subtype categories corresponding to vendor specific types of storage arrays N. In a particular arrangement the storage array subtypes include Symmetrix CLARiiON or Celerra storage arrays that correspond to different types of storage array manufactured by EMC Corporation of Hopkinton Mass. Alternatively other sub categories corresponding to storage arrays made by other vendors are defined in the entity model enabling deployment of a heterogeneous mix of storage arrays in the same storage area network under the same network management application .

Further each storage area network element defined in the entity model can have one or more adapters defined by the adapter category . An adapter in a device can have one or more physical ports that may be defined by the physical ports category as shown by the fan out symbol leading into the categories and . Each port category includes in this example a front end category to maintain attribute values related to front end adapter connections to a host. The front end category can have sub categories and corresponding to categories indicative of the transport medium employed such as optic fiber or SCSI Small Computer System Interface . All categories in the entity model include attribute definitions to which attribute values may be assigned that are related to this category.

Attribute definitions within each entity category in the entity model contain names of attributes e.g. Disk Count but no associated values. In operation of embodiments of the invention the deployment engine matches the name portion of the attribute values of the new storage array and all of its sub components such as its disks adapters and the like to each of the identified categories and and so forth as will be described in further detail below with respect to in order to defined which existing categories in the entity model can be used to represent this new storage array by determining which categories have attribute definitions that match the name portion of the attribute values. The corresponding values portion of each attribute value is then assigned to each matching attribute definition thus populating a data structure in the form of an entity category that can be used to store management data concerning this new manageable entity. That is the deployment engine generates repository data structures such as tables files and the like to represent the newly added storage system and further produces component interfaces for each identified category corresponding to the new storage array manageable entity to allow management components such as agents to access these management data structures. Generally then the software interfaces shown in represent embodiments of the invention that are able to categorize the set of attributes for a manageable entity into new or existing entity categories within the entity model and are then able to produce software interfaces such as entity object database query interfaces database table access interface or any other type of application programming interfaces required to access the various attribute values of the newly classified entity objects for that new manageable entity .

In another particular arrangement the manageable entity is a new host such as a server operating in a storage area network. Continuing to refer to the deployment engine identifies the storage area network element category to represent some of the attribute values associated with this new server host such as a vendor name or host identification e.g. IP or network address based in this example embodiment on matching attribute names for this host to attribute definitions in the existing entity categories in the entity model . The deployment engine further traverses the model further to identify other matching categories such as the host category and associates other attribute values for this host to attribute definitions defined in the host category such as memory capacity number of processors and the like. Each host may include includes one or more peripherals such as disks that the host devices category can represent each of which is of a particular vendor device type A N shown exemplary as Windows A Unix B and MVS C. These attribute values are matched to other attribute definitions in entity model .

Each host is further associated with at least one file system and volume group . Each volume group represents a logical storage entity that may span several physical volumes including equipment from several different vendors. Accordingly each volume group includes one or more logical volumes representing physical storage entities such as disks files extents and segments which represent a physical partitioning of the included devices in each of the logical volumes.

This process continues until no attribute values are left to match to attribute definitions or there are no matching attributes definitions for certain attribute values. It should be noted that the host devices category can contain attribute definitions for attribute values relating to such things as the physical disks contained with the host such as disk drives. It is also to be understood that the example entity model shown in does not include all entity categories due to drawing space limitations. below further illustrates a representative superset of available categories. As an example under each vendor category there may be vendor specific categories for such things as operating systems vendor specific software and the like.

The deployment engine in a further configuration applies a database instance e.g. a new database program to be deployed in the storage area network to the entity model using the techniques explained herein in order to model a new database for management with a storage area network. To do so the deployment engine identifies a manageable entity of category DB instance within the host category of the storage area network element category. Each DB instance includes one or more logical groups residing in one or more files . Each DB instance also corresponds to one or more schema each including one or more DB objects as will be described further below with respect to . In this manner all sub categories within the database category hierarchy of the entity model that contain matching attribute definitions can be used to define data structures for use in the repository to represent this new manageable database entity. This example thus illustrates how the DB instance category and related subcategories therefore provide a general model adaptable to a variety of DB vendors as will be described further below with respect to .

Returning attention now to another alternate configuration allows modeling and deployment of a zone entity within a storage area network. A zone may includes a set of storage arrays and connectivity devices . Though not illustrated in this example a zone may include host devices or as well. A zone category represents a manageable entity employed to define access control and groups of users that are designated to access a particular subset of the available storage arrays . For example in a university environment students may be afforded access on one set of storage arrays category and connectivity devices category for academic use yet denied access to an administrative server or servers for administrative use such as grading and transcripts. The zone is employed to define a group of faculty which have access to the administrative zone.

Referring again to the entity model defines an extensible and adaptive framework in which to deploy new manageable entities into a storage area network or other computer network under management of a common network management application . The deployment process may be automated manual or a combination of automatic and manual operations. Typically software interfaces are produced from the deployment engine and classification processor wherein a component represents a discrete deployable software unit as described above.

The entity model therefore reduces deployment time through component reuse because components corresponding to existing categories generally will integrate seamlessly into the storage area network and mitigate regressive test effort requirements. A heterogeneous storage area network entity arrangement may be built and extended since the added entities conform to existing categories represented by the model or can be added with only the addition of device specific categories and attributes to the model . In this manner deployment of manageable entities according to the model achieves improved time to market results for new manageable entities such as storage arrays hosts and databases.

Further the entity model disclosed herein may be adapted for other applications in which a configuration baseline or other predetermined parameter structure is enforced. It will be apparent to those skilled in the art that a manageable entity may be in particular arrangements hardware software firmware middleware or other medium and that the entity model includes categories and attributes that may be applied to a heterogeneous set of such manageable entities. By defining categories applicable generally to types of entities and by defining attributes within the categories that define entity specific characteristics for each manageable entity the entity model operates to define an adaptive and extensible deployment and modification template.

The unassigned attributes are employed to generate new attribute value categories to include the new attribute values. Alternatively the new attribute values may be appended to existing categories. The categories including the assigned attribute categories and the new attribute value categories result in production of software interfaces used for deployment on the manageable entities. The software interfaces in are deployed as agent components on the host e.g. interfaces used by agent software to access the managed objects modeled by the invention server components on the infrastructure servers and repository servers on the repository . The entity model also receives the new modeled software interface categories created for the new attributes to enable updates to the model to reflect the new attributes for subsequent entity deployment.

In step referring to and the deployment engine obtains a set of attribute values related to the manageable entity in the storage area network.

In step the deployment engine identifies corresponding entity categories within the storage area network entity model that contain attribute definitions corresponding to respective attribute values in the set of attribute values .

In step the deployment engine assigns the respective attribute values in the set of attribute values to the corresponding respective attribute definitions contained within the identified corresponding entity categories. Therefore the deployment engine attempts to match each attribute value of the new manageable entity to an existing attribute in the model .

In step the deployment engine then determines if there are any attribute values remaining unassigned in the set of attribute values related to the manageable entity .

If there are unassigned attributes as determined by the check performed at step then the classification processor receives the unassigned attributes.

In step the classification processor defines new entity categories containing the new attribute definitions that correspond to the unassigned attribute values. The classification processor is operable to traverse the model and determine an appropriate relation for the new entity category and associated attributes such as by matching attribute value name to attribute names defined in attribute definitions. Alternatively the new attributes may be appended to a category to yield a new category based on the existing category if many attributes of a new device match but some do not match exactly but share a common naming scheme.

Next in step the classification processor then assigns the unassigned attribute value to the corresponding new attribute definition contained in the new entity category.

In step the classification processor deploys components corresponding to the new categories and attributes.

Next in step continuing from step above in either case the deployment engine then deploys components corresponding to existing entity categories for the new manageable entity onto the deployment storage area network .

Within the redundancy category attribute definitions are created for No. Boards and Active Board and assigned values 2 and 1 respectively and within the security category attribute definitions are created for Encrypt Method and No. Bits and assigned RSA Public Key and 1024 respectively.

In step referring to the deployment engine obtains a set of attribute values related to the storage array in the storage area network.

In step The deployment engine identifies corresponding entity categories within the storage area network entity model that contain attribute definitions that correspond to respective attribute values in the set of attribute values.

In step the deployment engine assigns the respective attribute values to the corresponding respective attribute definitions contained within the identified entity categories.

In step the deployment engine then determines if there are any unassigned attribute values in the set of attribute values related to the storage array and performs a check accordingly as shown at step .

In step if there are unassigned attribute values the classification processor defines new entity categories containing the new attribute definitions that correspond to the unassigned attribute value and then assigns the unassigned attribute value to the corresponding new attribute definitions as disclosed at step .

In step in either case of step a set of agent components corresponding to the identified and the new entity categories for the new storage array is deployed in the host.

Next a check is performed as shown at step to determine if a new entity category was defined. If a new entity category was defined in at least one of the host data repositories and servers then in step the deployment engine deploys components corresponding to the defined entity category.

In step if no new entity categories were defined then only a new agent component is deployed on the host because the new storage array conforms to the entity model and existing server and database components are employed for operations with the new component.

In step corresponding entity categories are identified within the storage area network entity model .

Next in step the deployment engine assigns the respective attribute values to the corresponding respective attribute definitions.

In step the deployment engine then determines if there are any unassigned attribute values in the set of attribute values related to the host and performs a check accordingly as shown at step .

In step if there are unassigned attribute values the classification processor defines new entity categories containing the new attribute definitions that correspond to the unassigned attribute value and assigns the unassigned attribute value to the corresponding new attribute definitions as disclosed at step .

In either case of step whether new attribute definitions were created or not in step the deployment engine identifies a set of host devices in communication with the host.

Employing the entity model in step the deployment engine identifies relations between the host and the host devices which may be of heterogeneous device types N

In step a check is performed to determine if new entity categories were defined and if so the relations are verified according to the model to ensure adherence to the model as depicted at step .

In step referring to the deployment engine obtains a set of attribute values related to the database .

Next in step the deployment engine assigns the respective attribute values to the corresponding attribute definitions.

In step the deployment engine then determines if there are any unassigned attribute values in the set of attribute values related to the database as depicted at step and performs a check accordingly as shown at step .

In step if there are unassigned attribute values the classification processor defines new entity categories containing the new attribute definitions that correspond to the unassigned attribute values.

In step the classification processor assigns the unassigned attribute values to the corresponding new attribute definitions.

In step the deployment engine employing the existing and new categories identifies files on physical devices corresponding to each of the identified entity categories and the new entity categories.

In step the deployment engine determines physical partitions extents and segments indicative of at least a portion of each of the identified files.

Finally in step the classification processor verifies the relations between the physical partitions extents and segments as defined by the model and entity categories logical group file schema and DB object .

The model extensions shown in are extensions to the model shown in the configuration illustrated in . In particular configurations the model may be employed in more general or more specific manner to suit the categories and attributes that are to be employed to deploy a particular device. In a smaller scope system a general model may not need to employ all the categories and attributes shown to be a workable representation of expected attributes of deployable entities. In a more complex configuration that expects a multitude of different manageable entities each requiring a robust set of available categories and attributes a more detailed model is applicable having appropriate categories and attributes to receive the possible attribute values from the expected manageable entities. The entity model as disclosed and claimed herein is intended to be a workable model adaptable to a broad range of deployment environments and accordingly the model is not intended to be limited except as described in the claims.

The entity model therefore defines a known database instance structure indicative of files extents and segments on a physical device disk or CDROM . Conformance to this entity model ensures that new entities will respond appropriately to the network management application with respect to logical volumes logical devices and other access formats that may differ between devices and vendors. In this manner a heterogeneous arrangement of databases is enabled in communication with a common host and the model is extensible to additional databases that conform to the existing or created categories.

Those skilled in the art should readily appreciate that the programs defining manageable entity deployment as defined herein are deliverable to a processing device in many forms including but not limited to a information permanently stored on non writeable storage media such as ROM devices b information alterably stored on writeable storage media such as floppy disks magnetic tapes CDs RAM devices and other magnetic and optical media or c information conveyed to a computer through communication media for example using baseband signaling or broadband signaling techniques as in an electronic network such as the Internet or telephone modem lines. The operations and methods may be implemented in a software executable object or as a set of instructions embedded in a carrier wave. Alternatively the operations and methods may be embodied in whole or in part using hardware components such as Application Specific Integrated Circuits ASICs state machines controllers or other hardware components or devices or a combination of hardware software and firmware components.

While the system and method for defining manageable entities has been particularly shown and described with references to embodiments thereof it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the scope of the invention encompassed by the appended claims. Accordingly the present invention is not intended to be limited except by the following claims.

