---

title: Method and system for mounting logical unit numbers (LUNS) of snapshots
abstract: A computer system and method for caching configuration information for use in mounting and/or unmounting snapshot LUNs of a network-based storage system are disclosed. During a first request to mount a snapshot LUN, a discovery operation is performed at a host system to discover various configuration information used in mounting and unmounting various LUNs of a storage system to a host system. The configuration information is used to process the first request and then the configuration information is cached. During a subsequent request to mount a second snapshot LUN, the cached configuration information can be used to mount the second snapshot LUN, thereby avoiding a second discovery operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08312231&OS=08312231&RS=08312231
owner: NetApp, Inc.
number: 08312231
owner_city: Sunnyvale
owner_country: US
publication_date: 20081104
---
The present application relates generally to data storage systems and more specifically to a system and method for caching at a host system configuration information for use in mounting and or unmounting Logical Unit Numbers LUNs of snapshots on a network based storage system.

Despite the vast improvement in the overall performance and reliability of storage devices e.g. disk drives or flash memory drive it is imperative that enterprises have disaster recovery systems and procedures in place. To that end many enterprises are relying on the backup capabilities of network based disk arrays e.g. network attached storage NAS and storage area network SAN systems referred to herein simply as network based storage systems. One feature of network based storage systems that is particularly useful to enterprises is a type of backup procedure commonly referred to as a snapshot a copy of a set of files directories or data blocks as they were at a particular point in the time.

Many server applications such as Oracle database and Microsoft Exchange and SQL Server are able to utilize snapshots as a mechanism for backing up data. A typical backup procedure for one of these server applications involves two distinct phases a backup phase and a verification phase. Referring to the backup phase involves generating the actual snapshot from an existing volume at the network based storage system . For instance a server application executing on the host system requests that a backup e.g. snapshot be generated for a particular database for example F databases db1. In this case db1 is the name of a database located on the volume and disk assigned to drive letter F and in the directory databases . When drive letter F is mapped to a Logical Unit Number LUN of a network based storage system a storage management application executing on the host system initiates a snapshot operation by communicating one or more commands or instructions to the storage system directing the storage system to initiate the snapshot operation and generate the snapshot at the storage system .

After the snapshot has been generated the host based server application performs a verification process to ensure that the snapshot operation captured the proper data and that no data corruption has occurred. However in order for the server application executing at the host system to read and verify the snapshot data the mount and unmount logic of the host system must first mount the snapshot to the host system . Because a snapshot may be associated with multiple LUNs the verification process may require that the host system consecutively mount one LUN after another until each LUN of the snapshot has been mounted verified and unmounted.

Mounting a LUN of a snapshot to the host system requires that the storage management application at the host system perform a discovery operation to map the host based snapshot reference e.g. H snapshots sn1 to a storage system based reference e.g. a LUN path corresponding to a LUN of the snapshot. For example the discovery operation generally requires that the dynamic mapping logic of the mount logic on the host system identify the various resources available and in use at both the host system and the storage system . For example during the discovery operation dynamic mapping logic of the host system performs volume and disk enumeration procedures to analyze volume and disk objects at the host system for the purpose of identifying the various volumes and disks known to the host system and the alphabetical identifiers e.g. drive letter assignments such as C or D and or volume mount points and their corresponding physical or logical drives partitions or LUNs Logical Unit Numbers . The information resulting from the volume and disk enumeration operations is filtered to identify the specific mappings between host based references and any LUN information of the storage system that corresponds with the snapshot that is to be mounted to the host system . Once the discovery operation has completed the storage management application will mount a LUN of the snapshot that is being verified by generating a mapping of a host based reference e.g. a drive letter assignment or volume mount point to the LUN information e.g. LUN path identifying the location of the snapshot on the storage system.

Once a LUN of the snapshot has been mounted to the host system the server application reads and analyzes the snapshot data associated with that specific LUN to verify that the data have not been corrupted and the data represent a viable backup. When the verification process is completed the LUN of the snapshot is unmounted from the host system . If there are other LUNs associated with the snapshot the above described process is repeated until each LUN of the snapshot has been mounted verified and unmounted. If the server application at the host system has multiple snapshots to verify as is often the case with Oracle database Microsoft Exchange and SQL Server where each snapshot may represent a backup of a particular database the server application must go through the mounting and unmounting procedure for each LUN of each snapshot to be verified. Unfortunately for each mount request received the discovery process described above must be performed so that a LUN can be dynamically mapped to a host based resource at the time the mount request is received and processed. Consequently the time consuming discovery operation must be repeated each time a LUN of a snapshot is to be mounted. This causes an undesirable delay in the verification of a set of snapshots due to the time it takes to mount the LUNs corresponding with a snapshot.

Computer systems and methods for caching configuration information for use in mounting and or unmounting Logical Unit Numbers LUNs of a snapshot on a network based storage system are disclosed. In one embodiment of the invention a computer system includes a storage management application for servicing requests to mount and unmount LUNs of snapshots on a network based storage system. When processing an initial request to mount a LUN of a snapshot the storage management application performs a discovery operation to identify configuration information used when mounting LUNs of snapshots on the storage system. This configuration information is cached so that a subsequent request to mount a LUN of the same or a different snapshot can utilize the information from the cache rather than perform a second discovery operation to rediscover the configuration information. By utilizing the configuration information from the cache as opposed to dynamically discovering the configuration information a LUN of a snapshot can be mounted and unmounted rapidly. This allows a server application to quickly verify a number of snapshots.

In another aspect the storage management application includes cache policy enforcement logic. The cache policy enforcement logic ensures that the cached configuration information is not stale when used in the processing of a request to mount a LUN of a snapshot. For instance in one embodiment a time stamp may be associated with each cache entry and after a pre determined period of time a cache entry may be determined to be stale and therefore deleted or otherwise removed from the cache. Alternatively in one embodiment cache entries may be dynamically updated between mount operations. Other aspects of the invention will become apparent from the detailed description that follows.

Methods and systems for caching at a host system configuration information for use in mounting and or unmounting the LUNs of snapshots on a network based storage system are disclosed. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of example embodiments. It will be evident however to one skilled in the art that the present invention may be practiced without these specific details.

Consistent with one embodiment of the invention disclosed herein is a computer system having LUN mount and unmount logic that caches configuration information suitable for use in processing a request to mount to the computer system or unmount from the computer system the LUNs of snapshots on a network based storage system. The cached configuration information is particularly useful when a server application e.g. such as Oracle database Microsoft Exchange Server or SQL Server executing at the computer system performs consecutive snapshot verification operations to verify the viability of several database snapshots. A typical verification operation involves mounting a LUN verifying data associated with the LUN and then unmounting the LUN. For example during each snapshot verification operation the LUNs of a snapshot are consecutively mounted to the computer system so the server application can verify the snapshot data by reading and analyzing the snapshot data residing on the network based storage system. After the snapshot data are verified the LUN of the snapshot is unmounted from the computer system.

The configuration information required to mount LUNs of snapshots to the computer system is identified during a discovery operation that occurs for example when a request to mount a first LUN of a snapshot is processed. Alternatively the discovery operation may occur as a result of the mount logic receiving an explicit command to populate the cache with the configuration information. In any case by caching the configuration information discovered during the discovery operation a server application s subsequent request to mount a LUN of the same snapshot or a different snapshot can be processed utilizing the cached configuration information as opposed to dynamically discovering or determining the configuration information for each subsequent mount request. Because the configuration information is subject to change over time the cache has associated with it a cache policy that is enforced to prevent stale configuration information from being used to process a request to mount or unmount a LUN of a snapshot. Other aspects of the invention will become apparent from the description of the figures that follows.

As illustrated in the network based storage system is shown to include several physical disks that have been logically partitioned to form volumes such that each volume is addressable by one or more logical unit numbers or LUNs . Although the storage system in is shown to have five independent LUNs in various embodiments the storage system will have hundreds or even thousands of LUNs. Similarly the storage system is shown in to be connected to a single host system however in various alternative embodiments the storage system will be configured to service several host systems.

The network based storage system may be a network attached storage NAS system a storage area network SAN based system or a hybrid. Accordingly the storage system services clients such as the host system by communicating data via file based protocols e.g. network file system protocol NFS common internet file system or server message block protocol CIFS SMB or alternatively block based protocols e.g. small computer system interface SCSI or both. Accordingly the network includes routers controllers or other network nodes suitable for communicating file based or block based data between the host system and the storage system .

The host system may be a server a work station or some other computing system suitable for executing a host operating system and various applications as well as communicating data over a network to a storage system . In one embodiment the host system executes a variant of a Microsoft Windows operating system such as Windows NT Windows Server 2003 or Windows Server 2008. In an alternative embodiment the host system may implement a variant of the UNIX operating system.

Consistent with one embodiment the host system includes a storage management application which among other things facilitates the provisioning and configuration of storage at the storage system by a host administrator. In some embodiments the storage management application is tightly integrated with the host operating system . For instance the storage management application operates to enhance the functionality of the host operating system by operating as a system level service that can be accessed as a snap in via the host operating system s management console. Accordingly utilizing the interface of the management console a host administrator is able to create a volume on the storage system and direct the host system to mount the volume to the host system by assigning the volume an available alphabetical drive letter or volume mount point. In this case a volume mount point is a directory within the namespace of the host system s local file system.

In addition to being tightly integrated with the host operating system in one embodiment the storage management application or a portion thereof is tightly integrated with one or more specific server applications e.g. Oracle database Microsoft Exchange or SQL Server . For example the storage management application provides a common application programming interface API that can be accessed by a server application via function calls. Accordingly the host operating system or a server application directs an API function call to the storage management application to request that a snapshot be initiated or a LUN of a snapshot be mounted or unmounted and so on. As described in greater detail below one such API function call is a request to populate a cache with configuration information useful in mounting and unmounting the LUNs of snapshots. A request to populate a cache with configuration information indicates to the storage management application that it is to perform a discovery operation and populate the cache with configuration information that can be used when processing subsequent requests to mount LUNs of snapshots. The configuration information included in a cache entry of the cache includes for example a mapping of volume and disk objects specifying host based references e.g. drive letters and or volume mount points of the host system to LUN information e.g. LUN paths for LUNs of the network based storage system . In addition for each cache entry initiator information is specified indicating one or more protocols supported by an initiator available to the host system for communicating with the network based storage system . In this context an initiator is an available host adapter configured for use by the host to establish a session and communicate with a network based storage system e.g. a target . An initiator will utilize one of a variety of communication protocols to include Small Computer System Interface SCSI iSCSI Fibre Channel Protocol FCP HyperSCSI Serial Advanced Technology Attachment SATA and Infiniband.

When a server application is verifying a series of snapshots for each snapshot being verified the server application will consecutively mount verify and unmount the LUNs of the snapshot s . By specifying in a first request that the storage management application is to populate a cache with configuration information used in mounting and unmounting LUNs the storage management application is able to perform a discovery operation to identify the configuration information cache the configuration information and then utilize the cached configuration information when processing subsequent requests to mount LUNs of snapshots. Advantageously this improves the performance of a series of database verification operations because the cached configuration information can be used to mount and unmount LUNs as opposed to having the storage management application dynamically discover the configuration information e.g. via the discovery operation for each mount request that is received and processed.

As illustrated in the storage management application includes dynamic mapping logic a cache and cache policy enforcement logic . The dynamic mapping logic as the name suggests dynamically maps an object in the name space of the host s local file system with a volume or snapshot volume residing at the storage system . Accordingly when the mount and unmount logic receives a request to mount a LUN of a snapshot to the host system the dynamic mapping logic will identify the LUN path associated with the LUN of the snapshot to be mounted and map the LUN path to a drive letter or volume mount point. In order to do this however the dynamic mapping logic must perform a discovery operation to identify various configuration information used during the actual mounting of the LUNs. For instance the configuration information that is discovered during the discovery operation may include all of the existing drive letters and volume mount points that are currently mapped to local disks and or LUNs of a network based storage system. In addition the configuration information may include the LUN paths of various volumes or snapshots on one or more network based storage systems that are mapped to the host system. Finally the configuration information may also include initiator information such as the number and type of host adapters suitable for communicating with network based storage systems and the protocols those host adapters are configured to utilize when communicating with a network based storage system.

To identify the configuration information to be cached the dynamic mapping logic performs a series of resource enumeration operations. For instance the dynamic mapping logic performs a volume object enumeration operation to identify the disk objects that are associated with various volumes. Next the dynamic mapping logic performs a disk object enumeration operation to identify the disks known to the host system that are mapped to various LUNs of the storage system. Finally the dynamic mapping logic queries the storage system for LUN path information that is used in mapping the host based disk objects to the LUNs of the storage system . In some embodiments the exact nature and format of the configuration information will vary. In general however the configuration information can be characterized as information useful if not necessary in mounting or unmounting a LUN of a storage system to the host system.

In one embodiment of the invention the dynamic mapping logic caches or stores the configuration information obtained via the discovery operation in the cache or some other memory. For instance when processing a request to populate the cache any configuration information discovered is cached in the cache if that configuration information is useful in processing a request to mount or unmount a LUN of a snapshot. Accordingly when such a directive or command is received the mount logic will cache certain configuration information in the cache . This configuration information is used when the mount logic is processing subsequent requests to mount LUNs of snapshots thereby avoiding a second or subsequent discovery operation. For example by using configuration information in the cache the configuration information does not have to be dynamically discovered and mapped for each mount request.

In one embodiment each time a cache entry is written to the cache a time stamp is associated with the cache entry and written into the cache . The time stamp can be used in enforcing a cache policy. For instance in one embodiment a server application requests that a cache be populated with configuration information for a certain predetermined period of time. During this predetermined period of time the configuration information in the cache is considered to be valid and can therefore be used by the mount logic when processing a request to mount a LUN. However at the expiration of the predetermined time period the cache entries are considered to be invalid or stale and therefore are not to be used to process requests to mount or unmount a LUN. Accordingly the cache policy enforcement logic enforces a cache policy associated with the cache.

As illustrated in the cached configuration information includes information regarding the mapping of drive letter assignments to LUN paths. In addition cached configuration information includes volume mount points mapped to LUN paths. Although not expressly shown in a time stamp may be shown along with each cache entry to indicate the time that the particular entry was initially written to the cache. As described in greater detail below the time stamp is used by the cache policy enforcement logic to determine whether a particular cache entry is stale or not.

As illustrated in the configuration information includes initiator information indicating the various initiator protocols available to the host system for communicating with a particular target storage system. For example the initiator information is specified on a per cache entry basis such that each particular cache entry includes information about the initiator protocols used to communicate data between the host and the network based storage system. When a request to mount a snapshot is received the mount logic can determine whether the configuration information necessary for mounting a specific LUN of the snapshot is within the cache. If so the mount logic can utilize the configuration information from the cache to process the request and the dynamic mapping logic need not perform a timely discovery operation.

If the necessary configuration information is residing in the cache at method operation the storage management application determines whether the configuration information is stale or not. For example the cache policy enforcement logic analyzes a time stamp associated with the cache entry including the configuration information and depending upon the cache policy and when the cache entry was originally written to the cache the status of the cache entry e.g. stale or valid and thus the configuration information may be determined.

If not stale at method operation the configuration information is read from the cache and used to process the request to mount the LUN of the snapshot. Specifically the configuration information is used to map a host based reference such as a drive letter or volume mount point to a storage system based reference such as a LUN path specified in the configuration information. Once the LUN of the snapshot is mounted the data within the snapshot can be read analyzed and verified by an application executing at the host system. In one embodiment of the invention a snapshot is a read only copy of data and thus the host system cannot write to the snapshot or overwrite existing data of the snapshot. However in an alternative embodiment prior to mounting a snapshot may be converted to a volume clone which is writable. Accordingly once mounted the host system can read from and writed to the volume clone.

If the configuration information is determined not to be within the cache at method operation then at method operation the dynamic mapping logic of the storage management application performs a discovery operation to identify configuration information including drive letters and or volume mount points that are mapped to specific LUN paths of the storage system. For example in one embodiment the discovery operation includes performing one or more resource enumeration operations on both the host and storage system to ascertain how host based references are mapped to physical storage of the storage system. In addition the initiator information used to communicate data to and from certain LUNs is determined. At method operation the configuration information discovered during method operation is used to populate a cache. Although method operations and are shown as two separate steps occurring one after the other it will be appreciated that these two method operations may occur in an iterative form such that individual items of configuration information are discovered then written to the cache until all such configuration information has been discovered and written to the cache. In any case at method operation the configuration information is utilized to process the request to mount the LUN of the snapshot.

In an alternative embodiment prior to method operation a request to populate the cache with configuration information is received. In this case the storage management application performs the discovery operation as indicated in method operation and populates the cache in response to receiving the request to populate the cache. Accordingly a discovery operation may be the result of processing an explicit command to populate a cache or alternatively an operation for which a cache miss occurs with the cache when processing a request to mount a LUN.

Example computing system includes processor e.g. a central processing unit CPU a graphics processing unit GPU or both main memory and static memory which communicate with each other via bus . Computing system may further include video display unit e.g. a plasma display a liquid crystal display LCD or a cathode ray tube CRT . Computing system also includes alphanumeric input device e.g. a keyboard user interface UI navigation device e.g. a mouse drive unit which may be disk based or flash memory based signal generation device e.g. a speaker and network interface device .

Drive unit includes machine readable medium on which is stored one or more sets of instructions and data structures e.g. software such as storage system analytics module depicted in embodying or utilized by any one or more of the methodologies or functions described herein. Software e.g. computer code may also reside completely or at least partially within main memory and or within processor during execution thereof by computing system with main memory and processor also constituting machine readable tangible media. Software may further be transmitted or received over network via network interface device utilizing any one of a number of well known transfer protocols e.g. Hypertext Transfer Protocol HTTP .

While machine readable medium is shown in an example embodiment to be a single medium the term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches that store the one or more sets of instructions. The term machine readable medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present application or that is capable of storing encoding or carrying data structures utilized by or associated with such a set of instructions. The term machine readable medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media and carrier wave signals.

While the invention s is are described with reference to various implementations and exploitations it will be understood that these embodiments are illustrative and that the scope of the invention s is not limited to them. In general techniques modeling a storage environment at a specific time may be implemented with facilities consistent with any hardware system or hardware systems defined herein. Many variations modifications additions and improvements are possible.

Plural instances may be provided for components operations or structures described herein as a single instance. Finally boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the invention s . In general structures and functionality presented as separate components in the exemplary configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements fall within the scope of the invention s .

