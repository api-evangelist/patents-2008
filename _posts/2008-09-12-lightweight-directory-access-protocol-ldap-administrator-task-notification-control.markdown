---

title: Lightweight directory access protocol (LDAP) administrator task notification control
abstract: The illustrative embodiments provide for automatically and proactively retrieving administrative maintenance tasks or potential issues from a set of directory servers without direct intervention from an administrator. Responsive to an operation request being sent from a requesting application to the set of directory servers and an administrative maintenance control mechanism being active, an administrative maintenance control is automatically sent to the set of directory servers. Responsive to receiving the response to the administrative maintenance control, an end user application within the data processing system is notified that the at least one of the administrative maintenance tasks or the potential issues have been received.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08095502&OS=08095502&RS=08095502
owner: International Business Machines Corporation
number: 08095502
owner_city: Armonk
owner_country: US
publication_date: 20080912
---
The present application relates generally to an improved data processing apparatus and method and more specifically to an apparatus and method for lightweight directory access protocol LDAP administrator task notification control.

A directory server provides a centralized directory service for intranet network and extranet information. Directory servers integrate with existing systems and act as a centralized repository for the consolidation of employee customer supplier and partner information. Directory servers may be extended to manage user profiles and preferences as well as extranet user authentication.

Usually the front end of a directory server is a lightweight directory access protocol LDAP . LDAP provides a common language that client applications and servers use to communicate with one another. LDAP is a lightweight version of the directory access protocol DAP used by the International Organization for Standardization ISO X.500 standard. DAP developed at the University of Michigan gives any application access to the directory via an extensible and robust information framework but at an expensive administrative cost. DAP uses a communications layer Open Systems Interconnection OSI stack that is not the Internet standard Transmission Control Protocol Internet Protocol TCP IP protocol and has complicated directory naming conventions. The current version of LDAP is 3 LDAPv3 which is described by several Request for Comments RFCs RFCs 2251 through 2256 and others. There is currently a Lightweight Directory Access Protocol V3 Revision Working Group LDAPbis Internet Engineering Task Force IETF working group which is revising these old RFCs.

An LDAP directory server stores information in a tree like hierarchical structure and may be characterized by very fast read operations fairly static data hierarchical in nature use of a standard LDAP protocol and loosely coupled replication. LDAP preserves the best features of DAP while reducing administrative costs. LDAP uses an open directory access protocol running over TCP IP and uses simplified encoding methods. LDAP retains the X.500 standard data model and can support millions of entries for a modest investment in hardware and network infrastructure.

All servers require maintenance and in maintaining a directory server administrators must actively monitor the error log files of the directory server for maintenance related information. That is an administrator must directly request the error log files from the directory server and perform maintenance whether the error log identifies administrative maintenance tasks or potential issues. Directly requesting administrative maintenance tasks or potential issues from a directory server is not the most effective approach to communicate maintenance information with administrators.

In one illustrative embodiment a method in a data processing system is provided for automatically and proactively retrieving administrative maintenance tasks or potential issues from a set of directory servers without direct intervention from an administrator. The illustrative embodiments automatically send an administrative maintenance control to the set of directory servers in response to an operation request being sent from a requesting application to the set of directory servers and the administrative maintenance control mechanism being active. The illustrative embodiments receive a response from the set of directory servers. In the illustrative embodiments the response includes a response to the operation request and a response to the administrative maintenance control. In the illustrative embodiments the response to administrative maintenance control comprises at least one of the administrative maintenance tasks or the potential issues. The illustrative embodiments notify an end user application within the data processing system that the at least one of the administrative maintenance tasks or the potential issues have been received in response to receiving the response to the administrative maintenance control.

In other illustrative embodiments a computer program product comprising a computer useable or readable medium having a computer readable program is provided. The computer readable program when executed on a computing device causes the computing device to perform various ones and combinations of the operations outlined above with regard to the method illustrative embodiment.

In yet another illustrative embodiment a system apparatus is provided. The system apparatus may comprise one or more processors and a memory coupled to the one or more processors. The memory may comprise instructions which when executed by the one or more processors cause the one or more processors to perform various ones and combinations of the operations outlined above with regard to the method illustrative embodiment.

These and other features and advantages of the present invention will be described in or will become apparent to those of ordinary skill in the art in view of the following detailed description of the example embodiments of the present invention.

The illustrative embodiments provide a mechanism for a lightweight directory access protocol LDAP administrator task notification control that provides administrators with notification via the LDAP protocol about potential problems and required administrative tasks. Examples of maintenance tasks include DB2 password updates performance tuning of the database resource monitoring or the like.

As will be appreciated by one skilled in the art the present invention may be embodied as a system method or computer program product. Accordingly the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium.

Any combination of one or more computer usable or computer readable medium s may be utilized. The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CDROM an optical storage device a transmission media such as those supporting the Internet or an intranet or a magnetic storage device. Note that the computer usable or computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory. In the context of this document a computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer usable medium may include a propagated data signal with the computer usable program code embodied therewith either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable radio frequency RF etc.

Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

The illustrative embodiments are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to the illustrative embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

Thus the illustrative embodiments may be utilized in many different types of data processing environments including a distributed data processing environment a single data processing device or the like. In order to provide a context for the description of the specific elements and functionality of the illustrative embodiments are provided hereafter as example environments in which aspects of the illustrative embodiments may be implemented. While the description following will focus primarily on a single data processing device implementation of a lightweight directory access protocol LDAP administrator task notification mechanism this is only an example and is not intended to state or imply any limitation with regard to the features of the present invention. To the contrary the illustrative embodiments are intended to include distributed data processing environments and embodiments in which administrators are provided with notification via a LDAP protocol about potential problems and required administrative tasks.

With reference now to the figures and in particular with reference to example diagrams of data processing environments are provided in which illustrative embodiments of the present invention may be implemented. It should be appreciated that are only examples and are not intended to assert or imply any limitation with regard to the environments in which aspects or embodiments of the present invention may be implemented. Many modifications to the depicted environments may be made without departing from the spirit and scope of the present invention.

With reference now to the figures depicts a pictorial representation of an example distributed data processing system in which aspects of the illustrative embodiments may be implemented. Distributed data processing system may include a network of computers in which aspects of the illustrative embodiments may be implemented. The distributed data processing system contains at least one network which is the medium used to provide communication links between various devices and computers connected together within distributed data processing system . The network may include connections such as wire wireless communication links or fiber optic cables.

In the depicted example server and server are connected to network along with storage unit . In addition clients and are also connected to network . These clients and may be for example personal computers network computers or the like. In the depicted example server provides data such as boot files operating system images and applications to the clients and . Clients and are clients to server in the depicted example. Distributed data processing system may include additional servers clients and other devices not shown.

In the depicted example distributed data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course the distributed data processing system may also be implemented to include a number of different types of networks such as for example an intranet a local area network LAN a wide area network WAN or the like. As stated above is intended as an example not as an architectural limitation for different embodiments of the present invention and therefore the particular elements shown in should not be considered limiting with regard to the environments in which the illustrative embodiments of the present invention may be implemented.

With reference now to a block diagram of an example data processing system is shown in which aspects of the illustrative embodiments may be implemented. Data processing system is an example of a computer such as client in in which computer usable code or instructions implementing the processes for illustrative embodiments of the present invention may be located.

In the depicted example data processing system employs a hub architecture including north bridge and memory controller hub NB MCH and south bridge and input output I O controller hub SB ICH . Processing unit main memory and graphics processor are connected to NB MCH . Graphics processor may be connected to NB MCH through an accelerated graphics port AGP .

In the depicted example local area network LAN adapter connects to SB ICH . Audio adapter keyboard and mouse adapter modem read only memory ROM hard disk drive HDD CD ROM drive universal serial bus USB ports and other communication ports and PCI PCIe devices connect to SB ICH through bus and bus . PCI PCIe devices may include for example Ethernet adapters add in cards and PC cards for notebook computers. PCI uses a card bus controller while PCIe does not. ROM may be for example a flash basic input output system BIOS .

HDD and CD ROM drive connect to SB ICH through bus . HDD and CD ROM drive may use for example an integrated drive electronics IDE or serial advanced technology attachment SATA interface. Super I O SIO device may be connected to SB ICH .

An operating system runs on processing unit . The operating system coordinates and provides control of various components within the data processing system in . As a client the operating system may be a commercially available operating system such as Microsoft Windows XP Microsoft and Windows are trademarks of Microsoft Corporation in the United States other countries or both . An object oriented programming system such as the Java programming system may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system Java is a trademark of Sun Microsystems Inc. in the United States other countries or both .

As a server data processing system may be for example an IBM eServer System p computer system running the Advanced Interactive Executive AIX operating system or the LINUX operating system eServer System p and AIX are trademarks of International Business Machines Corporation in the United States other countries or both while LINUX is a trademark of Linus Torvalds in the United States other countries or both . Data processing system may be a symmetric multiprocessor SMP system including a plurality of processors in processing unit . Alternatively a single processor system may be employed.

Instructions for the operating system the object oriented programming system and applications or programs are located on storage devices such as HDD and may be loaded into main memory for execution by processing unit . The processes for illustrative embodiments of the present invention may be performed by processing unit using computer usable program code which may be located in a memory such as for example main memory ROM or in one or more peripheral devices and for example.

A bus system such as bus or bus as shown in may be comprised of one or more buses. Of course the bus system may be implemented using any type of communication fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. A communication unit such as modem or network adapter of may include one or more devices used to transmit and receive data. A memory may be for example main memory ROM or a cache such as found in NB MCH in .

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the illustrative embodiments may be applied to a multiprocessor data processing system other than the SMP system mentioned previously without departing from the spirit and scope of the present invention.

Moreover the data processing system may take the form of any of a number of different data processing systems including client computing devices server computing devices a tablet computer laptop computer telephone or other communication device a personal digital assistant PDA or the like. In some illustrative examples data processing system may be a portable computing device which is configured with flash memory to provide non volatile memory for storing operating system files and or user generated data for example. Essentially data processing system may be any known or later developed data processing system without architectural limitation.

The illustrative embodiments provide a mechanism for a lightweight directory access protocol LDAP administrator task notification control that provides administrators with notification via the LDAP protocol about potential problems and required administrative tasks. When an administrative account binds or otherwise connects to a directory server to perform an operation on a director server an administrative maintenance control is sent with the operation. The directory server identifies the administrative maintenance control and responds to the administrator with maintenance information about the directory server. The illustrative embodiments provide for sending the maintenance information to the administrator only if the received operation includes the administrative maintenance control. The response contains maintenance information which may be used by end user applications such as a Web admin tool application programming interface API or the like to provide pop up messages to the administrator and subsequently guide the administrator through tasks to address the maintenance issue.

In the overhead of operation request directory server maintenance module also sends administrative maintenance control . The following is an example of a standard protocol for an LDAP control that may be sent to directory server 

Administrative maintenance control may follow this format with an assigned object identifier OID . The OID is assigned to a specific value during product development. The criticality is generally false and octet string may not be needed on the request.

Maintenance error module monitors incoming operation request to directory server to detect administrative maintenance control that may be associated with operation request . If operation request includes administrative maintenance control maintenance error module automatically and proactively without direct intervention by the administrator retrieves error list from storage that includes administrative maintenance tasks and or potential issues that have been recorded for the particular one of directory server or . Then maintenance error module returns administrative maintenance tasks and or potential issues from error list to administrator maintenance application with response to the operation requested by the administrator. The following is an example of administrative maintenance tasks and or potential issues that may be returned to administrative maintenance application 

Directory server maintenance module retrieves administrative maintenance tasks and or potential issues from response and stores administrative maintenance tasks and or potential issues in storage as error list . Directory server maintenance module also notifies an end user applications such as a Web admin tool application programming interface API or the like on client so that an end user application may provide a notification to the administrator of administrative maintenance tasks and or potential issues . The end user application may notify the administrator of the administrative maintenance tasks and or potential issues by displaying the administrative maintenance tasks and or potential issues to the administrator through a graphical user interface. The end user application may then guide the administrator through addressing each of administrative maintenance tasks and or potential issues . As the administrator addresses each of administrative maintenance tasks and or potential issues the end user application may then update error list on client .

While the illustrative embodiments provide a means for automatically and proactively retrieving administrative maintenance tasks and or potential issues without the administrator directly requesting the error log files of directory servers and that administrator is still able to explicitly retrieve administrative maintenance tasks and potential issues from directory server or via an extended operation or an explicit cn maintenance search request.

The following is an example of an explicit extended operation that may be sent to directory server or 

The explicit extended operation may follow this format with an assigned OID. The OID is assigned to a specific value during product development. For this request there may be no need for the optional octet string so the LDAPOID may be all that is needed.

The explicit extended operation response may follow this format with an assigned OID. The OID is assigned to a specific value during product development. If administrative maintenance tasks and or potential issues were provided in an octect string the octet may look like the following 

As described previously the administrator may also explicitly retrieve administrative maintenance tasks and potential issues from directory server or via an explicit cn maintenance search request. The following is an example of an explicit cn maintenance search request that may be sent to directory server or 

An example of administrative maintenance tasks and or potential issues of an explicit cn maintenance search request may be 

Thus the illustrative embodiment provides for a lightweight directory access protocol LDAP administrator task notification control that provides administrators with notification via the LDAP protocol about potential problems and required administrative tasks. When an administrative account binds or otherwise connects to a directory server to perform an operation on a director server an administrative maintenance control is sent with the operation. The directory server identifies the administrative maintenance control and responds to the administrator with maintenance information about the directory server.

If at step the operation request is not for an explicit cn maintenance search or an explicit extended operation then the directory server maintenance module determines if the administrative maintenance control mechanism within the client data processing system is active step . If at step the administrative maintenance control mechanism is active then the directory server maintenance module automatically and proactively without direct intervention from the administrator sends in the overhead of the operation request an administrative maintenance control to the directory server via the I O controller step . The operating system of the client data processing system then waits to receive a response to the requested operation and the requested administrative maintenance tasks and or potential issues step . Once a response to the requested operation and the requested administrative maintenance tasks and or potential issues are received the operating system sends the response to the operation request to the requesting application step with the operation returning to step thereafter. In addition the directory server maintenance module stores the administrative maintenance tasks and or potential issues as a locally stored list of administrative maintenance tasks and or potential issues in a storage of the client step and sends a notification to an end user application within the client data processing system that administrative maintenance tasks and or potential issues exist step with the operation returning to step thereafter.

If at step the administrative maintenance control mechanism is not active then the I O controller within the client data processing system sends the operation request to the directory server without an administrative maintenance control step . The operating system of the client data processing system then waits to receive a response from the directory server step . Once the response is received then the operating system sends the response to the I O operation to the requesting application step with the operation returning to step thereafter.

If at step there is a selection of one of the administrative maintenance tasks and or potential issues then the end user application determines if the selected administrative maintenance task and or potential issue has been resolved by the administrator step . If at step the selected administrative maintenance task and or potential issue has not been resolved the operation returns to step . If at step the selected administrative maintenance task and or potential issue has been resolved then the end user application updates a locally stored list of the administrative maintenance task and or potential issue step . Then the end user application determines if there are any more administrative maintenance tasks and or potential issues to be addressed step . If at step there are more administrative maintenance tasks and or potential issues the operation returns to step . If at step there are no more administrative maintenance tasks and or potential issues the operation terminates.

If at step the operation request includes an administrative maintenance control or is one of an explicit cn maintenance search or an explicit extended operation then the maintenance error module retrieves the administrative maintenance tasks and or potential issues from the error log step and returns the administrative maintenance tasks and or potential issues to the requesting application on a client data processing system step with the operation returning to step thereafter. If at step the operation request does not includes an administrative maintenance control or is not one of an explicit cn maintenance search or an explicit extended operation then the operating system of the directory server executes the operation within the operation request step with the operation returning to step thereafter.

Thus the illustrative embodiments provide mechanisms for a lightweight directory access protocol LDAP administrator task notification control mechanism that provides administrators with notification via the LDAP protocol about potential problems and required administrative tasks. When an administrative account binds or otherwise connects to a directory server to perform an operation on a director server an administrative maintenance control is sent with the operation. The directory server identifies the administrative maintenance control and responds to the administrator with maintenance information about the directory server. The illustrative embodiments provide for sending the maintenance information to the administrator only if the received operation includes the administrative maintenance control. The response contains maintenance information which may be used by end user applications such as a Web admin tool application programming interface API or the like to provide pop up messages to the administrator and subsequently guide the administrator through tasks to address the maintenance issue.

As noted above it should be appreciated that the illustrative embodiments may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In one example embodiment the mechanisms of the illustrative embodiments are implemented in software or program code which includes but is not limited to firmware resident software microcode etc.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modems and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

