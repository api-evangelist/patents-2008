---

title: Application-configurable distributed hash table framework
abstract: A distributed hash table infrastructure is described that supports pluggable modules for various services. Transport providers, security providers, and other service providers may be swapped, providing flexibility in supporting various devices and networking configurations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08775817&OS=08775817&RS=08775817
owner: Microsoft Corporation
number: 08775817
owner_city: Redmond
owner_country: US
publication_date: 20080512
---
A hash table defines a mapping relationship between keys and their associated values. A Distributed Hash Table DHT implements the functionality of a hash table in a distributed fashion providing a remote lookup service from any participating node in the DHT to retrieve the value associated with a given key. DHTs are used to provide services including distributed file systems peer to peer file sharing cooperative web caching multicast domain name services and instant messaging for example.

DHT can implement large scale resource indexing and discovery services as well as distributed file systems. An application example is to use DHT in a distributed content lookup and retrieval system to store the network addresses of contents indexed by the hash of the contents. Or the DHT can be used to store the contents directly depending on the implementation.

DHT is the foundation of many Peer to peer network applications that emphasize the characteristics of decentralization scalability and fault tolerance. The semantic free nature of the key value mappings allows applications on top of DHT to define arbitrary relationship between keys index and values data . It also decouples the actual locations from any existing structure of the contents and services. This property makes it possible to achieve load balancing and avoid centralization even for services with hierarchical architecture.

The following presents a simplified summary of the disclosure in order to provide a basic understanding to the reader. This summary is not an extensive overview of the disclosure and it does not identify key critical elements of the invention or delineate the scope of the invention. Its sole purpose is to present some concepts disclosed herein in a simplified form as a prelude to the more detailed description that is presented later.

In accordance with one implementation presented herein a distributed hash table may be used to store in a distributed manner identified by numeric keys with application configurable pluggable modules such as bootstrapping mechanisms transports storage or secure routing protocol mechanisms. This allows for example a hash table to be distributed across disparate nodes allowing each node to have appropriate security and transport modules for its own operating environment. Distributed hash tables may be built using the Distributed Routing Tables DRT key based routing infrastructure which identifies the node which manages the storage of a data item based on its key.

Nodes may exist on various types of devices by providing techniques to permit plugging in appropriate service providers such as security or storage modules for each device. For example on some devices it may be desired to store hash table key value pairs in memory while on other devices on disk may be a preferred format. For another example a security module for a handheld computer may differ from one for a server.

Many of the attendant features will be more readily appreciated as the same becomes better understood by reference to the following detailed description considered in connection with the accompanying drawings.

Described herein are among other things examples of various technologies and techniques that allow an application configurable distributed hash table framework. Although the examples are described and illustrated herein as being implemented in a personal computer system the system described is provided as an example and not a limitation. As those skilled in the art will appreciate the present examples are suitable for application in a variety of different types of systems.

In the figures like reference numerals are used throughout several drawings to refer to similar components.

A hash table defines a mapping relationship between keys and their associated values. A DHT implements the hash table functionality in a distributed fashion providing a remote lookup service from any participating node in the DHT to retrieve the value associated with a given key. shows an example of a conceptual system architecture diagram of a DHT. A DHT consists of a set of nodes each stores a part of the overall hash table and a forwarding table not shown of other nodes to find the remaining part of the hash table. The forwarding tables collectively determine the topology also called a mesh or overlay of the DHT and in this example is a form of Key Based Routing KBR as opposed to the traditional address based routing in the Internet. In this example the contents of hash table are shown with keys and values. Distributed hash table is distributed across and stored on nodes and respectively. In this example the distribution is implemented on distributed routing table and is based on node IDs so that the key value pairs are each stored on the node id closest numerically to the key. Keys and are stored with their corresponding values on the node with ID because they are numerically closer to than to or . In other implementations other techniques for determining which node would store each key value pair may be used. One skilled in the art will recognize that IP address MAC address geographical location user name or any number or combination of different factors may be used.

The management interface of a DHT allows users and applications to insert or delete nodes and to update the table by adding removing or changing the key value pairs. Any operation on a record in the DHT can be divided into two phases. The first phase is to locate the root node of the key value through the underlying Key Based Routing or the overlay protocol DRT in this example. After the root node is found the second phase is to contact the root node of the record to perform the designated operation on the record. The root node lookup operation is performed within the DRT.

The querying node the initiator will consult its own DRT forwarding table obtain the next closest node to a given key and send the root node query to the next node. The next node will in turn look up its own DRT forwarding table and reply the query with the next closest node in the key space to the key of the query. The initiator then repeats the querying process iteratively until the root node of the key is reached. This lookup process can also be done recursively where each intermediate node queries its next closest node before replying or in a hop by hop fashion where each intermediate node forwards the query to the next closet node. The specifics of the lookup operations depend on the overlay technology.

Applications communicate with DHT via an application programming interface API . API provides the interface to add get or remove data from DHT . DHT core processing provides the functionality using various components such as migration replication security provider transport record processing and storage bootstrap and a key based routing provider . Each of these components rely on other components transport uses Winsock security provider interacts with KBR security provider and bootstrap depends on KBR bootstrap .

In this example certain components are configurable pluggable by a management application. This DHT will provide a pluggable interface to storage provider that provides the hash table key and value data storage. A pluggable security module providers protocols for the DHT is also provided for. Other core components include bootstrap and migration mechanisms to handle node join and leave a tunable replication policy module to increase fault tolerance at the DHT layer and provisioning for record integrity protection. Each of these components is pluggable allowing for the most appropriate technology for the specific node the nature of the DHT or any other relevant factors.

Transport provider implements a message transport service for DHT and determines the transport protocol used in communication between DHT nodes. By way of example but not limitation transport providers include TCP or UDP over IPv6 HTTP or RPC based transports. One skilled in the art will recognize that other types of transport provider may be used as well. The applications services or system administrators using the DHT may provision the IPsec or firewall policies if required. The security in transport provider may be independent from the Security provider of the DHT. Transport provider is a pluggable component in the DHT architecture and may be replaced by another transport provider with different features.

Replication module is used to provide copies of key value pairs across multiple nodes. A root node in DHT can replicate its local hash records to a set of nodes for both backup and performance enhancement such that one of the neighboring nodes can answer for the root node if necessary. The set of close neighboring nodes is usually the leaf set of the root node but can also be defined by some other metrics such as the closest N number of nodes if the underlying routing system does not support the notion of leaf set. Although the leaf set selection policy for replication will affect the resulting traffic needed to move and synchronize the data and degree of reliability measure.

Security provider authenticates and authorizes whether a node can join an existing DHT and whether it can perform DHT operations on the records stored in the DHT. For example security provider may restrict operations that may be performed on the DHT such as looking up or storing data. Security provider may optionally authenticate and or encrypt the content value or data portion of a record to provide integrity and confidentiality services. Examples of security provider functionality include some forms of password authentication PKI based certificate authentication etc. Security provider and the corresponding security credentials e.g. passwords certificates etc. of the DHT are provisioned by the application and will be used in both the DHT and DRT.

Record processing and storage module defines the operational semantics for processing and storing DHT records. It also allocates and manages record storage for the local hash table. Record processing and storage provider is a pluggable module in the design. The pluggable nature of the various modules is illustrated in .

The computing device can be any general or special purpose computer now known or to become known capable of performing the steps and or performing the functions described herein either in software hardware firmware or a combination thereof.

In its most basic configuration computing device typically includes at least one central processing unit CPU and memory . Depending on the exact configuration and type of computing device memory may be volatile such as RAM non volatile such as ROM flash memory etc. or some combination of the two. Additionally computing device may also have additional features functionality. For example computing device may include multiple CPU s. The described methods may be executed in any manner by any processing unit in computing device . For example the described process may be executed by both multiple CPU s in parallel.

Computing device may also include additional storage removable and or non removable including but not limited to magnetic or optical disks or tape. Such additional storage is illustrated in by storage . Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Memory and storage are all examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computing device . Any such computer storage media may be part of computing device .

Computing device may also contain communications device s that allow the device to communicate with other devices. Communications device s is an example of communication media. Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. The term computer readable media as used herein includes both computer storage media and communication media. The described methods may be encoded in any computer readable media in any form such as data computer executable instructions and the like.

Computing device may also have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. All these devices are well known in the art and need not be discussed at length.

Those skilled in the art will realize that storage devices utilized to store program instructions can be distributed across a network. For example a remote computer may store an example of the process described as software. A local or terminal computer may access the remote computer and download a part or all of the software to run the program. Alternatively the local computer may download pieces of the software as needed or execute some software instructions at the local terminal and some at the remote computer or computer network . Those skilled in the art will also realize that by utilizing conventional techniques known to those skilled in the art that all or a portion of the software instructions may be carried out by a dedicated circuit such as a DSP programmable logic array or the like.

