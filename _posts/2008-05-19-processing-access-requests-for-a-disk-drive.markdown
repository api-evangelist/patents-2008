---

title: Processing access requests for a disk drive
abstract: A computer implemented method, apparatus, and computer usable program code for managing access requests for access to a disk drive. A placement of a set of disk heads tracked and an expected time to process already queued access requests by the disk drive are tracked. In response to receiving the request to access the disk drive at a device driver, a determination is made as to whether the request can be completed within a specified amount of time associated with the request without sending the access request to the disk drive. The request is placed, by the device driver, in a queue for execution if a determination is made that the access request can be completed within the specified amount of time.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08104047&OS=08104047&RS=08104047
owner: International Business Machines Corporation
number: 08104047
owner_city: Armonk
owner_country: US
publication_date: 20080519
---
The present invention relates generally to an improved data processing system and more specifically to a method and apparatus for processing data. Still more particularly the present disclosure relates to a computer implemented method apparatus and computer usable program code for managing access requests for a disk drive.

Optimizing access to devices such as for example disk drives in a data processing system may increase the performance of the data processing system. Advances have been made in the optimization execution of access requests to a disk drive. These access requests include for example read requests and write requests. A device driver or controller for a disk drive may often process numerous access requests at any given point in time. These access requests may specify a set of physical disk blocks in a disk drive. A set as used herein refers to one or more items. For example a set of disk blocks refers to one or more disk blocks. The seek time settle time and rotational latency present in executing an access request may make processing a request inefficient at times.

Different techniques are currently present for processing these access requests. For example one technique may involve accessing disk blocks for an access request in the order in which the request specifies disk blocks. Another methodology may include processing access requests in the order in which the access requests were received from the operating system. These types of techniques for processing access requests may be inefficient. Therefore it would be advantageous to have an improved computer implemented method apparatus and computer usable program code for processing access requests for a disk drive.

The illustrative embodiments provide a computer implemented method apparatus and computer usable program code for managing access requests for access to a disk drive. A placement of a set of disk heads tracked and an expected time to process already queued access requests by the disk drive are tracked by a device driver. In response to receiving the request to access the disk drive at the a device driver a determination is made as to whether the request can be completed within a specified amount of time associated with the request without sending the access request to a disk drive controller for the disk drive. The request is placed by the device driver in a queue for execution if a determination is made that the access request can be completed within the specified amount of time.

As will be appreciated by one skilled in the art the present invention may be embodied as a system method or computer program product. Accordingly the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium.

Any combination of one or more computer usable or computer readable medium s may be utilized. The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CDROM an optical storage device a transmission media such as those supporting the Internet or an intranet or a magnetic storage device. Note that the computer usable or computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory. In the context of this document a computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer usable medium may include a propagated data signal with the computer usable program code embodied therewith either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc.

Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

The present invention is described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions.

These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer program instructions may also be stored in a computer readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Turning now to a diagram of a data processing system is depicted in accordance with an illustrative embodiment. Data processing system is an example of one physical device in which different advantageous embodiments may be implemented. The different advantageous embodiments may be implemented in other devices in which storage systems may be present. In this illustrative example data processing system includes communications fabric which provides communications between processor unit memory persistent storage communications unit input output I O unit and display .

Processor unit serves to execute instructions for software that may be loaded into memory . Processor unit may be a set of one or more processors or may be a multi processor core depending on the particular implementation. Further processor unit may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example processor unit may be a symmetric multi processor system containing multiple processors of the same type.

Memory and persistent storage are examples of storage devices. A storage device is any piece of hardware that is capable of storing information either on a temporary basis and or a permanent basis. Memory in these examples may be for example a random access memory or any other suitable volatile or non volatile storage device. Persistent storage may take various forms depending on the particular implementation. For example persistent storage may contain one or more components or devices. For example persistent storage may be a hard drive a flash memory a rewritable optical disk a rewritable magnetic tape or some combination of the above. The media used by persistent storage also may be removable. For example a removable hard drive may be used for persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit is a network interface card. Communications unit may provide communications through the use of either or both physical and wireless communications links.

Input output unit allows for input and output of data with other devices that may be connected to data processing system . For example input output unit may provide a connection for user input through a keyboard and mouse. Further input output unit may send output to a printer. Display provides a mechanism to display information to a user.

Instructions for the operating system and applications or programs are located on persistent storage . These instructions may be loaded into memory for execution by processor unit . The processes of the different embodiments may be performed by processor unit using computer implemented instructions which may be located in a memory such as memory . These instructions are referred to as program code computer usable program code or computer readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or tangible computer readable media such as memory or persistent storage .

Program code is located in a functional form on computer readable media that is selectively removable and may be loaded onto or transferred to data processing system for execution by processor unit . Program code and computer readable media form computer program product in these examples. In one example computer readable media may be in a tangible form such as for example an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage for transfer onto a storage device such as a hard drive that is part of persistent storage . In a tangible form computer readable media also may take the form of a persistent storage such as a hard drive a thumb drive or a flash memory that is connected to data processing system . The tangible form of computer readable media is also referred to as computer recordable storage media. In some instances computer readable media may not be removable.

Alternatively program code may be transferred to data processing system from computer readable media through a communications link to communications unit and or through a connection to input output unit . The communications link and or the connection may be physical or wireless in the illustrative examples. The computer readable media also may take the form of non tangible media such as communications links or wireless transmissions containing the program code.

The different components illustrated for data processing system are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in can be varied from the illustrative examples shown.

As one example a storage device in data processing system is any hardware apparatus that may store data. Memory persistent storage and computer readable media are examples of storage devices in a tangible form.

In another example a bus system may be used to implement communications fabric and may be comprised of one or more buses such as a system bus or an input output bus. Of course the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally a communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. Further a memory may be for example memory or a cache such as found in an interface and memory controller hub that may be present in communications fabric . The different illustrative embodiments recognize that current techniques may increase processing time and user resources by send all access requests to input output controller for processing. The different illustrative embodiments provide a computer implemented method apparatus and computer usable program code for processing access requests. The expected time to complete requests by a storage device such as a disk drive may be tracked. In response to receiving a request to access a disk drive at a device driver a determination may be made as to whether the request can be completed within the specified amount of time associated with the request without sending the request to the disk drive or a disk drive controller for the disk drive. The disk drive controller may be a local or remote controller for the disk drive. The device driver may place the request in the queue for execution if a determination is made that the request can be completed within the specified period of time. In this manner access requests may be preprocessed without actually sending the request to disk drive controller or the disk drive. Only requests that have been identified as being capable of being completed within the specified period of time are sent to the disk drive for processing.

With reference now to a block diagram illustrating components used to manage access requests is depicted in accordance with an illustrative embodiment. In this example operating system includes application programming interface system device driver preprocessor queue and status area .

Operating system manages computer resources and provides an interface to the resources. Operating system may be implemented using any currently available operating system. For example operating system may be implemented using a Windows Vista operating system a Unix operating system or an Advanced Interactive Executive AIX operating system. Windows Vista operating systems are available from Microsoft Corporation. Unix operating systems may be any operating system certified to the single Unix specification. AIX operating systems may be available from International Business Machines Corporation. Windows Vista is a trademark of Microsoft Corporation Unix is a registered trademark of the Open Group and AIX is a registered trademark of International Business Machines Corporation. Application programming interface system may be a set of application programming interfaces. A set as used herein refers to one or more items. For example a set of application programming interfaces is one or more application programming interfaces.

Disk drive includes input output controller queue and platters . Input output controller also may be referred to as a disk drive controller when used with a disk drive and may read and or write data on platters . In this illustrative example each platter in platters is divided into concentric circular tracks and is divided into sectors. The intersection of the circular tracks and the sectors on one side of the platter form disk blocks used to store the information that may be accessed by input output controller . A cylinder represents a collection of tracks aligned through a stack of platters within platters in disk drive . The number of cylinders in disk drive equals the number of tracks on a single platter within platters . Data may be written to and read from a surface of a platter in platters through a device drive head. Each platter has two sides with each side having a disk drive head for reading and writing data from one side of the platter. Input output controller controls the reading and writing of data. Disk drive is an example of a persistent storage that may be present in persistent storage in .

Application programming interface system may receive access request from application . In these examples access request takes the form of an input output I O request. This type of request may be for example a request to read data or write data to disk drive . An access request may be for example a read request or a write request to a device such as disk drive . Application may be any software component executing in the data processing system. Application may be for example a word processing program a data base application a spreadsheet program a virus scanning program or some other suitable software component.

Application programming interface system returns response in response receiving to access request from application . Response may include a result of the processing of access request . For example response may confirm that access request has been processed successfully or has failed.

In the illustrative example application programming interface system may call a function within device driver with response to receiving access request . In the different illustrative embodiments application programming interface system may call preprocessor . Preprocessor determines whether access request can be completed within a selected amount of time. Preprocessor is an operating system component that determines whether access requests can be can be completed within the specified amount of time associated with the access request without sending the access request to input output controller . If access request can be performed or completed within the selected amount of time access request is placed into access requests within queue . In these examples access requests in queue are requests that have not yet been sent to disk drive for processing.

Device driver sends access request from access requests to input controller for placement into access requests in queue . Queue also may be referred to as a request queue in these illustrative examples. In turn input output controller may select an access request from access request for execution. In these examples input output controller may select the access request based on a first in first out FIFO basis.

Input output controller returns response which may include the data responsive to access request . Alternatively response may include an error code if the request is not processed.

In the different advantageous embodiments preprocessor within device driver may determine whether an access request in access requests in queue can be completed within a selected amount of time without actually sending an access request to input output controller . This controller may be a local or remote controller for the disk drive. Also the determination is made without sending the access request the disk drive. Thus if preprocessor determines that access request cannot be completed in the selected amount of time the use of time and resources in the hard drive to receive and store the access request within queue may be avoided.

In these different advantageous embodiments preprocessor may predict the amount of time needed to complete access request . Completion of an access request may be the time needed to obtain the information responsive to access request . In these examples the amount of time needed to complete access request may be the amount of time that passes from placing access request in access requests until response is received. In another illustrative example the time to complete access request may be the time between when access request is sent to input output controller and when response is received. In yet another non limiting example an amount of time to complete and access request may be the time from when access request is received from application to the time response is returned to application .

In the different illustrative examples the prediction of the amount of time needed to complete an access request may be performed using the location of disk heads and identifying blocks from the different requests that have been queued for processing by disk drive . With this information preprocessor may predict the amount of time needed to perform each access request. One manner in which this prediction may be made is described in more detail in below.

In these examples already queued access requests for processing may include access requests in queue and access requests in queue . Preprocessor may predict the amount of time needed to complete access requests in queue . Further preprocessor also may predict the amount of time needed to complete access requests .

In other illustrative examples preprocessor may predict the time needed to complete access requests . The time needed to complete access requests may be predicted by input output controller and returned in status area for use by preprocessor .

In these different illustrative embodiments if preprocessor determines that access request cannot be completed within the selected amount of time access request may be discarded and response may be returned indicating that access request cannot be completed in the selected amount of time. In this situation application may resubmit an access request at a later time. In other embodiments preprocessor may return to a requester access request specifying a projected amount of time in which the access request can be completed wherein the projected amount of time is greater than the specified amount of time in the access request

Alternatively preprocessor in device driver may determine whether access request can be completed within the selected amount of time if access request is placed in a different order than normally used in queue . For example input output request may be placed into queue based on the first in first out FIFO order. With this type of queue ordering system preprocessor may determine whether placing access request in an earlier position within queue can result in completion of access request within the selected amount of time.

Further in making this analysis preprocessor also may take into account whether access requests within queue also require processing within a selected amount of time. For example some requests within access request may not require processing within a selected period of time. Also different access requests within access requests may have different amounts of time by which those requests should be completed.

In these examples the selected amount of time may be designated in a number of different ways. For example a selected amount of time may be designated based on some performance metric set for operating system . In this implementation the selected time may be designated for all access requests or some selected types of access requests. In other illustrative embodiments status area may designate the selected amount of time within access request .

In alternative embodiment access request may be received at a separate controller from a primary processor. This process may be for example another processor in processor unit in addition the primary processor. This controller can include the processes of preprocessor for managing access requests as described above. This controller is a separate controller from input output controller in these examples. In one example device driver with preprocessor may execute on this controller.

Turning now to a block diagram illustrating an access request is depicted in accordance with an illustrative embodiment. In this example access request is an example of access request in . As depicted access request includes identifier type of request disk blocks and time limit priority .

Identifier may be used to uniquely identify access request . Identifier may be used to return information corresponding to the access request to the requestor. Type of request may indicate whether access request is read request or a write request in these examples. Data location may include an identification of the virtual partition from which data is to be accessed. Further data also may include the amount of data to be accessed. The access request may be a set of access requests with different locations and sizes. The local volume manager in an operating system may use a map associating virtual partition to the actual physical locations on the disk drive to allocate disk space. The volume manager may use the map to convert access request into one that specifies the actual physical disk blocks for the disk drive. Time limit priority may indicate the amount of time for completing access request .

With reference now to a flowchart of a process for determining whether an access request can be processed within a selected amount of time is depicted in accordance with an illustrative embodiment. The process illustrated in may be implemented in a software component such as preprocessor in .

The process begins by waiting to receive an access request step . In response to receiving an access request the time threshold for the access request is identified step . This time threshold is the amount of time to complete the access request. In these examples the process may identify the time threshold from the access request. For example a time limit priority such as time limit priority in access request in may be examined. In other examples this time threshold may be one that is preset for all access requests. In other illustrative examples the time threshold may be set based on the type of request the type of application amount of resources available in the operating system or some other suitable criteria. This time threshold may differ for different requests depending on the particular implementation.

The process then determines whether the access request can be completed within the time threshold step . If the access request can be completed within the time threshold the process adds the access request to a queue step . In these examples the queue may be queue in operating system in . The process then adds the access request to a log or a data area that may contain the individual access request the expected time for each of the individual access requests the accumulated access times for a set of access requests and the placement of the heads at the completion of the individual access requests or the placement of heads at the completion of all the access request. step with the process then returning to step to wait for another access request to be received. This information may be used when a new request is made to reduce the overhead of calculating the time to process requests that are already queued. The information may also be used or updated when requests are reorder.

With reference to step if the access request cannot be completed within the time threshold an error is returned step with the process then returning to step as described above. In step this error may be returned to the application originating the access request. This error may be placed in a response such as response in .

With reference next to a flowchart of a process used to predict the amount of time needed to complete a request is depicted in accordance with an illustrative embodiment. The process illustrated in may be implemented in a software component such as preprocessor in .

The process begins by identifying the disk head placement step . This disk head placement may be identified by querying a controller in the storage device such as input output controller in . By identifying the disk head placement the process may track or predict the amount of time needed to process an access request that is received. As additional access requests are received the amount of time needed to track the access request may be predicted based on all of the pending access requests from the initial or identified disk head placement.

The process then selects an unprocessed access request from the queue step . In step an unprocessed access request may be selected based on the order in which the access request may be processed. Step may select the first access request to be processed from the queue in this example.

The process then predicts the amount of time needed to process the access request step . The process then adds the amount of time predicted to process the access request to a total time variable step . This variable contains the total amount of time predicted to process the access request. A determination is made as to whether an unprocessed access request is still present in the queue step . If an unprocessed access request is still present the process returns to step to select the unprocessed access request from the queue.

If additional unprocessed access requests are not present in the queue the process terminates. At this point the total time variable includes the time predicted to process all of the access requests present in the queue. In these examples this process may be performed for queue and queue by the preprocessor.

At some point in time the preprocessor function may request a current placement of the disk head. Updating this information may be needed from time to time because the execution and movement of disk heads may differ from what is predicted. In these examples the identification of the need placement may be made each time process is initiated. In some illustrative examples this process may be performed only for queue with the amount of time predicted to process access request being provided by input output controller . In some embodiments input output controller may update a data area to contain the information it is able to determine. This may be done using DMA to write to data area reserved for that purpose. The updates may be at specific frequencies which can be used to determine the accuracy of the data provided.

The data area may contain the individual access requests that the controller is currently processing the expected time for each of the individual access requests the accumulated access times for a set of access requests and the placement of the heads at the completion of the individual access requests or the placement of heads at the completion of all the access requests. In another embodiment the data area may contain a subset of the information it has available such as for example the current placement of the heads the expected time to complete the operation in process.

The information provided by the controller may be used along with the information previously gathered or logged to predict the time to process the new request. In another embodiment only statistical data may be used to determine the expected time to process a set of requests. The statistical data may include information such as request sizes sequential access random accesses and number of requests.

There are various ways to improve the accuracy of the predicted execution times. One way is to have a table that is provided by the manufacturer that identifies the seek settle time between any two tracks. Other tables could be developed by actual measurements for real accesses that include the complete time from when a request is issued from an application to when the application receives the acknowledgement that the access is completed. Other approaches include for example programmatic methodologies that have times for each step of the process and include detailed hardware knowledge such as the rotation speed the density of the data on the track skew between cylinders and other suitable parameters. There could also be contingencies added to allow for a maximum settle time.

With reference now to a flowchart of a process to predict a time needed to complete an access request is depicted in accordance with an illustrative embodiment. The process illustrated in is a more detailed illustration of step in . This process may be performed by a preprocessor and or input output controller for a disk drive depending on the particular implementation.

The process begins by receiving the access request for which a prediction of time to complete is needed step . The process identifies a set of input output sub requests from the access request step .

In these examples an input output sub request represents a request to read data or write data from a disk block within a group of adjacent disk blocks on the same cylinder. The data subject to an access request may be scattered through the different platters in a set of adjacent disk blocks that may be located along the same cylinder. In other words each input output sub request may be a request to read data or write data from a set of adjacent disk blocks along the same cylinder. In other words each input output sub request specifies a set of disk blocks that are configured next to each other without any gaps between the disk blocks on the same tract and the same side of a disk platter in these examples.

The process then identifies a set of execution sequences from the identified set of input out sub requests step . An execution sequence represents an order in which the identified set of input output sub requests may be performed to access the different disk blocks as specified in each input output sub request. The process then calculates the total estimated time to perform the set of input output sub requests for each identified execution sequence step . The process then selects an execution sequence from the set of execution sequences based on the estimates times step . In these examples the execution sequence selected may be the one having the shortest amount of time needed to complete. The process then returns the time for the selected execution sequence step with the process terminating thereafter.

With reference to a flowchart of processing an access request that cannot be completed in a selected amount of time is depicted in accordance with an illustrative embodiment. The process illustrated in provides an alternative process step to step in . Instead of returning an error immediately a determination as to whether a re ordering of requests in a queue may result in the access request being processed within the selected amount of time.

The process identifies the priority of the access request step . This priority may be one based on the identification of the application the type of request as set by the application or some other suitable criteria. The priority of the access requests in a queue are then identified step . A new order for the access requests in the queue including the access requests being evaluated is identified step . In identifying a new order for the access requests in the queue the access request being evaluated may be placed ahead of other requests in the queue based on the priority of the access request. This position of the access request is used to determine whether the request can be processed within the selected amount of time.

A determination is then made as to whether the access requests can be executed in the time threshold based on the new order of the access requests step . In step this determination may be made for all of the access requests that have a requirement for processing or completion within the selected amount of time. In some cases some access requests may not need to be competed within a selected amount of time. If all of the access requests can be executed within the time threshold based on the order the access request is added to the queue step . Step also re orders the queue as identified in step with the process terminating thereafter. If the access request cannot be executed in the time threshold the process terminates and an error may then be sent.

Thus the different illustrative embodiments provide a computer implemented method apparatus and computer usable program code for processing access requests. In the different illustrative embodiments placement of a set of disk heads and an expected time to process or to queue requests by the disk drive may be tracked. In response to receiving a request to access the disk drive at a device driver a determination may be made as to whether the request can be completed within the specified period of time associated with the request without sending the request to disk drive controller or the disk drive. The device driver may place the request in a queue for execution if a determination is made that the request can be completed within the specified period of time. The different illustrative embodiments allow for managing requests without actually sending requests to the disk drive. In this manner the time and resources used to send a request and process the request in a disk drive may be avoided when the request may not be executed.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures.

For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. For example the different illustrative examples are directed towards processes implemented with a hard disk drive in the form of a magnetic disk drive the different advantageous embodiments may be applied to other types of storage systems in which disk heads may be present.

For example the disk head may be a disk head for an optical disk drive system. Also the different illustrative embodiments also may be applied to other types of storage devices including solid state storage devices in which access times may be predicted. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any tangible apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

