---

title: Document analysis and retrieval
abstract: A computer program product including stored program code adapted to implement a method for document analysis and retrieval. A document that includes text is received from a host. Document keys associated with the text are generated. In first embodiments, a document taxonomy is provided. The taxonomy has categories and associated category keys. The category keys of each category are compared with the document keys to determine a distance between the document and each category as a measure of how close the document is to each category. A subset of the categories is returned to the host, wherein the subset of the categories reflects the determined distances. In second embodiments, a search string is created as a logical function of a subset of the document keys. The search string is submitted to a search engine. Links to related documents are received from the search engine and returned to the host.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08015206&OS=08015206&RS=08015206
owner: International Business Machines Corporation
number: 08015206
owner_city: Armonk
owner_country: US
publication_date: 20080711
---
This application is a continuation application claiming priority to Ser. No. 10 334 370 filed Dec. 30 2002 now U.S. Pat. No. 7 412 453 issued Aug. 12 2008.

The present invention relates generally to a method and system for document analysis and retrieval and more specifically to a method system and algorithm for determining categories and document links relating to a given document.

Analyzing a given document to determine categories and document links relating to the given document is a slow and inefficient process. Thus there is a need for an efficient method and system for analyzing documents to determine categories and document links relating to the given document.

In first embodiments the present invention provides a method for document analysis and retrieval comprising the steps of 

generating document keys associated with said text from analysis of said text each said document key selected from the group consisting of a keyword of said text and a keyphrase of said text 

providing a document taxonomy having categories each category having category keys each said category key selected from the group consisting of a keyword of said category and a keyphrase of said category 

comparing the category keys of each category with said document keys to make a determination of a distance between the document and each category as a measure of how close the document is to each category and

returning a subset of said categories to said host wherein said subset of said categories reflects said determination.

In second embodiments the present invention provides a method for document analysis and retrieval comprising the steps of 

generating document keys associated with said text from analysis of said text each said document key selected from the group consisting of a keyword of said text and a keyphrase of said text 

creating a search string said search string comprising a logical function of a subset of said document keys 

receiving links to related documents from said search engine said links being based on said search string and

The present invention provides an efficient method and system for analyzing documents to determine categories and document links relating to a given document.

In step the document is received from the host by a computing system that will subsequently process the text in steps . Step determines whether the text in the document is formatted i.e. whether the text appears in a non text format such as in a format that is specific to the host . If the text is not formatted then step is next executed. If the text is formatted then step extracts the text such that the text is separated from its non text format and step is next executed. Extracting the text leaves format parameters behind. For example in a HyperText Markup Language HTML document extracting the text leaves the HTML tags behind. There may be some generic formatting retained e.g. paragraph breaks but formatting specific to the host application is removed. The output of step is a text file. The text extraction may be performed by any method known to one of ordinary skill in the art. Additionally there are software products on the market e.g. Verify Key View filter that may be utilized to perform the text extraction.

Step tokenizes the text i.e. generates tokens from the text . A token is the text that appears between delimiters blanks periods commas etc. . The output of said tokenizing is a list of tokens such as inter alia in an array or vector of tokens.

Step removes stop words from the tokens. Stop words are generic words that have no substantive meaning in relation to the subject content in the document. Examples of stop words include a the he she . Stop words may be context dependent e.g. stop words for E mail and for instant message chat may be different since a word may have a meaning in one context but not in another context. Although shows step as being executed after step the stop words may alternatively be removed from the text prior to execution of the tokenizing of step .

Step generates by stemming the document keys of the document from the tokens. Stemming is a process that determines the normal form or root of each word or phrase in each token. For example changing has the root change . Alternative expressions for root words and root phrases are keywords and keyphrases respectively. Stemming algorithms are known in the art e.g. the Porter Stemming Algorithm and any such known stemming algorithm may be used to implement step . The document keys generated by step are said roots determined by said stemming. A document key is defined herein as a root word i.e. keyword or root phrase i.e. keyphrase in the document.

Step also generates weights associated with said document keys on a on to one basis. Generating the weights may comprise determining the frequency count of each document key in the document. The frequency count of a document key is the number of appearances of the document key in the document. The weight may be a linear function of the frequency count. For example the weight may be numerically equal to or proportional to the frequency count. Alternatively the weight may be a nonlinear function of the frequency count. For example the weight may be proportional to the frequency count raised to a power P wherein P 1 e.g. P 2 . The weights may also take into account the location of the document key in the document. For example words or phrases appearing at the beginning of the document or in the document title or in the document abstract etc. may have a higher weight than words or phrases located elsewhere in the document. The importance of the location of the document key in the document is context sensitive since relevance of different locations e.g. title abstract etc. may depends on the document itself on the type of document on the subject matter of the document etc.

Step also generates weights associated with said category keys on a on to one basis. Generating the weights may comprise determining the frequency count of each category key in the stored documents associated with the taxonomy. The frequency count of a category key is the number of appearances of the category key in the stored documents. The weight may be a linear function of the frequency count. For example the weight may be numerically equal to or proportional to the frequency count. Alternatively the weight may be a linear function of the frequency count. For example the weight may be proportional to the frequency count raised to a power P wherein P 1 e.g. P 2 . The weights may also take into account the location of the category key in the stored documents.

Step compares the category keys of each category with the document keys to make a determination of a distance D between the document or equivalently the document keys and each category as a measure of how close the document or equivalently the document keys is to each category. The distance between the document and each category may be computed as a dot product of a vector of the document keys and a vector of the category keys for each category as follows. Let a reference dictionary for the taxonomy encompass all categories of the taxonomy and all said categories of the taxonomy collectively comprise N category keys wherein N is a positive integer. Let Vrepresent a vector of order N of the document keys such that each element of Vis associated with a unique category key of the reference dictionary and each element of Vcontains 1 if there exists a document key of the document keys that matches the category key associated with the element of V or contains 0 otherwise. Let V I represent a vector of order N of the Icategory of the taxonomy such that each element of V I is associated with said unique category key of the reference dictionary and each element of V I contains 1 if there exists a category key of the Icategory that matches the category key associated with the element of V I or contains 0 otherwise. The distance D I between the document or equivalently the document keys and the Icategory of the taxonomy may be expressed as the dot product of Vand V I i.e. D V V I . Note that the dot product of two vectors is the summation over the product of corresponding elements of the two vectors as is conventionally understood in the art of mathematics of vectors. As an example if N 5 V 1 1 1 0 1 and V I 1 0 1 1 1 then D I 3.

The preceding distance D was computed independent of the document weights associated with the document keys and independent of the category weights associated with the category keys provided for each category in step . Recalling that a one 1 in Vdenotes the existence of a document key that matches a category key of the taxonomy dictionary Vcould be replaced by the weighted vector Wwherein the ones 1 in Vare replaced by their associated document weights. Recalling that a one 1 in V I denotes the existence of a category key of the Icategory that matches a category key of the taxonomy dictionary V I could be replaced by the weighted vector W I wherein the ones 1 in V I are replaced by their associated category weights. Then the distance D could be represented by various alternative dot products including W V I V W I and W W I .

As an example consider the houses taxonomy discussed supra. For this example let N 6 and the pertinent vectors have elements representing the sequentially ordered 6 category keys of the taxonomy houses dictionary colonial ranch and split level white blue and green . Assume that the document keys include document keys of only ranch white and blue with associated weights 2 3 and 1 respectively. Category of taxonomy houses are assumed to have category keys of colonial ranch and split level with associated category weights of 1 2 and 3 respectively in this example. Category of taxonomy houses are assumed to have category keys of white blue and green with associated category weights of 2 2 and 1 respectively in this example. Then the pertinent vectors are V 0 1 0 1 1 0 W 0 2 0 3 1 0 1 1 1 1 0 0 0 1 1 2 3 0 0 0 2 0 0 0 1 1 1 2 0 0 0 2 2 1 The various dot products for this example are 1 1 1 2 1 2 1 4 2 2 2 4 2 4 2 8 In this example if the weights are neglected then D 1 V V 1 1 and D 2 V V 2 2 so that the document is closer to category than to category by a factor of 2.

Step returns a subset of the categories to the host that provided the document such that the returned subset includes those categories that are closest to the document along with their associated distances from the document . The number of such categories returned may be based on any criteria such as a predetermined number of categories a predetermined percentage of the categories categories having a distance below a predetermined threshold distance etc. The returned categories may be returned in any form such as a file of categories a printout of the categories a display of the categories such that a user can use the categories to link to documents related to the categories etc.

Step submits the search string to a search engine or to multiple search engines. Step receives links to documents related to the document i.e. to the document keys from the search engine or from the multiple search engines. Since the search engine or multiple search engines utilized the search string for performing the search es the links received from the search engine or from the multiple search engines are based on the search string. Step returns the links to the host that provided the document . The returned links may be returned in any form such as a file of links a printout of the links a display of the links such that a user can use the links to link to the documents related to the document . Additionally the steps of may be may be re utilized by being applied to any found document previously determined from steps to be related to the document . Such re utilization of the steps of may be accomplished by applying steps of to said found document to generate the document keys in step followed by applying at least one of the following step sequences to the document keys associated with said found document the sequence of steps in FIG. and the sequence of steps in .

The first computing system comprises a host which is a source of the given document to be processed in accordance with the present invention. The host may be a local host or a remote host . The local host is local to the second computing system . The remote host is remote the second computing system .

The second computing system receives and processes the given document from the first computing system . The second computing system comprises an Information Management Application Programming Interfaces APIs which encapsulate three types of services text extraction text analysis and classification. The text extraction relates to step of and includes a text extraction API interfacing a text extraction adapter which is a text extraction tool. The text analysis relates to steps of and includes a text analysis API interfacing a text analysis adapter which is a set of text analysis tools associated with steps of . The classifiers relate to steps of and includes a classification API interfacing classifier adapters which implement steps of . The classifier adapters have access to taxonomy rules which may be stored in a database file table or tables etc. An example of a taxonomy rule of the taxonomy rule is a specification of the category keys of a category. See supra and accompanying text for a discussion of category keys of a category.

A Java API directly interfaces the local host to said text extraction text analysis and classification. The Java API indirectly interfaces the remote host to said text extraction text analysis and classification inasmuch as the Java API is wrapped in a Java Bean API which is wrapped in WebServices Definitions . Thus the WebServices Definitions serves as a direct interface with the remote host and allows the remote host to access the text extraction text analysis and classification through whatever Remote Procedure Call RPC mechanism is defined in the WebServices Definitions .

The third computing system comprises Search Facilities that relate to the search engine of steps of . The Search Facilities of the third computing system may comprise a local search engine or an external search engine . The local search engine is local to the first computing system e.g. an operating system that indexes files in a file system and has a search interface . The external search engine is external to the first computing system e.g. an Internet search engine .

Although the first computing system the second computing system and the third computing system are shown in as separate computer systems the first computing system and the second computing system may each be included within a first same computing system. Similarly the first computing system and the third computing system may each be included within a second same computing system. Additionally the first computing system the second computing system and the third computing system may each be included within a third same computing system.

While shows the computer system as a particular configuration of hardware and software any configuration of hardware and software as would be known to a person of ordinary skill in the art may be utilized for the purposes stated supra in conjunction with the particular computer system of . For example the memory devices and may be portions of a single memory device rather than separate memory devices.

While embodiments of the present invention have been described herein for purposes of illustration many modifications and changes will become apparent to those skilled in the art. Accordingly the appended claims are intended to encompass all such modifications and changes as fall within the true spirit and scope of this invention.

