---

title: Verification of software application authenticity
abstract: Various techniques are provided for verifying the authenticity of software applications. Such techniques are particularly useful for verifying the authenticity of software applications used in online transactions involving users, payment service providers, and/or merchants. In one example, a set of application identifiers associated with a plurality of authenticated software applications are maintained and a verification request is received comprising an application identifier associated with an unverified software application. A token is generated in response to the verification request if the application identifier is in the set of application identifiers. The generated token is passed to the unverified software application. A user token is received and processed to determine whether the unverified software application is one of the authenticated software applications. A verification request is sent based on the processing. Additional methods and systems are also provided.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08079082&OS=08079082&RS=08079082
owner: eBay, Inc.
number: 08079082
owner_city: San Jose
owner_country: US
publication_date: 20080630
---
The present invention generally relates to information security and more particularly to verifying the authenticity of software applications.

The security of information in networked computing environments is an important concern for many users and providers of confidential information. To prevent the misuse of confidential information various techniques have been developed to permit only authorized parties to access such information.

In one approach a party s identity is authenticated before the party is granted access to confidential information. In this approach a party may be prompted to enter a correct password code or other types of user credentials before being granted access to confidential information. However such an approach does not preclude a party from accidentally providing confidential information to other unauthorized parties. For example if a user of a client device inadvertently provides user credentials to an unauthorized party the user credentials may be subsequently abused by the unauthorized party to access the user s confidential information or perform tasks without the user s permission. As a result the security previously afforded by the user credentials will be compromised.

Such problems are particularly problematic in circumstances where a rogue software application has been installed on a device without a user s knowledge. For example the software application may request user credentials or other confidential information from the user or direct the user to a webpage for entering such information. Without the ability to independently verify the authenticity of the software application the user may inadvertently provide the user credentials or other confidential information to the software application or an affiliated webpage and thus compromise the security of such information.

Conventional software authentication tools also fail to adequately address such problems. For example in order to activate a software application for use a user may be required to provide a preapproved hardware or software key to unlock a software application for use. However such approaches are directed to determining whether a user is authorized to use a given software program. They are not directed to determining whether a software application is in fact a genuinely authentic software application which may be trusted by the user.

Accordingly there is a need for an improved approach to information security that permits users to verify the authenticity of a software application. Such an improved approach is especially important for users engaged in transactions performed in networked computing environments.

Various techniques are provided for verifying the authenticity of software applications. Such techniques are particularly useful for verifying the authenticity of software applications used in online transactions involving users payment service providers and or merchants.

In accordance with one embodiment of the invention a method of verifying authenticity of a software application includes maintaining a set of application identifiers associated with a plurality of authenticated software applications receiving a verification request comprising an application identifier associated with an unverified software application generating a token in response to the verification request if the application identifier is in the set of application identifiers passing the generated token to the unverified software application receiving a user token processing the user token to determine whether the unverified software application is one of the authenticated software applications and sending a verification response based on the processing.

In accordance with another embodiment of the invention a system includes one or more processors and one or more memories adapted to store a plurality of machine readable instructions which when executed by the one or more processors are adapted to cause the system to maintain a set of application identifiers associated with a plurality of authenticated software applications receive a verification request comprising an application identifier associated with an unverified software application generate a token in response to the verification request if the application identifier is in the set of application identifiers pass the generated token to the unverified software application receive a user token process the user token to determine whether the unverified software application is one of the authenticated software applications and send a verification response based on the processing.

In accordance with another embodiment of the invention a method of verifying authenticity of a software application includes generating a verification request comprising an application identifier associated with an unverified software application receiving a generated token in response to the verification request wherein the generated token is provided by a third party if the application identifier is in a set of application identifiers associated with a plurality of authenticated software applications approved by the third party and displaying the generated token to a user.

In accordance with another embodiment of the invention a system includes one or more processors and one or more memories adapted to store a plurality of machine readable instructions which when executed by the one or more processors are adapted to cause the system to generate a verification request comprising an application identifier associated with an unverified software application receive a generated token in response to the verification request wherein the generated token is provided by a third party if the application identifier is in a set of application identifiers associated with a plurality of authenticated software applications approved by the third party and display the generated token to a user.

These and other features and advantages of the present invention will be more readily apparent from the detailed description of the embodiments set forth below taken in conjunction with the accompanying drawings.

In accordance with various embodiments disclosed herein the authenticity of one or more software applications can be verified by confirming whether such applications are registered with a third party such as a payment service provider an application developer or other party. In one embodiment a user may initiate a verification process from a software application the authenticity of which has not yet been established. In this regard the software application may request a token from the third party. The software application displays a token to the user who may then provide the displayed token to the third party independently of the software application. In response the third party may determine whether the token provided by the user is a valid token and inform the user whether the software application is registered with the third party. Advantageously this approach permits the user to receive confirmation of the software application s authenticity from the third party in an out of band manner e.g. the verification response is received from the third party rather than the software application itself .

Referring now to the drawings wherein the showings are for purposes of illustrating embodiments of the present invention only and not for purposes of limiting the same illustrates a block diagram of a networked system configured to verify the authenticity of a software application in accordance with an embodiment of the invention. As shown system includes client devices and a merchant device an application developer device and a payment service provider device in communication over a network . further illustrates a user e.g. a person in communication with client devices and .

As further illustrated in client device client device merchant device application developer device and payment service provider device may each be implemented by one or more processors memories and other appropriate components for executing instructions such as program code and or data stored on one or more machine readable mediums to implement the various applications data and steps described herein. In various embodiments such instructions may be stored in one or more machine readable mediums such as memories or data storage devices internal to the devices external to the devices and or accessible by the devices over network .

Network may be implemented as a single network or a combination of multiple networks. For example in various embodiments network may include the Internet or one or more intranets landline networks wireless networks and or other appropriate types of networks.

Client device and client device may be implemented using any appropriate combination of hardware and or software configured for wired and or wireless communication over network . For example in one embodiment one or both of client devices and may be implemented as a personal computer of user in communication with the Internet. In other embodiments one or both of client devices and may be implemented as a wireless telephone personal digital assistant PDA notebook computer and or other types of computing devices.

As shown client device may include a plurality of software applications. Specifically client device may include an unverified software application a browser application and or other applications .

Application may be any software application that user may wish to verify is authentic in accordance with various embodiments described herein. For example in one embodiment application may be a software application downloaded by user to client device for example a copy of application further described herein . In another embodiment application may be a software application provided to client device by another party.

An application identifier associated with application may be used to identify application to payment service provider device . In one embodiment user may initiate a verification process in which application identifier is passed to payment service provider device as part of a process to determine whether application is a software application that has been registered with payment service provider device .

Browser application may be used for example to provide a convenient interface for user to browse information available over network . For example in one embodiment browser application may be implemented as a web browser configured to view webpages or other content available over the Internet.

Other applications denote any other software application that may be desired in particular embodiments to provide additional features to client device . For example in various embodiments such other applications may include security applications for implementing client side security features programmatic client applications for interfacing with appropriate application programming interfaces APIs over network or other types of applications. Client device may also include a device identifier to identify client device to payment service provider device and a user identifier to identify user payment service provider device .

As also shown in client device may also include a browser application and other applications . Browser application and other applications may be implemented for example in a similar fashion to browser application and other applications respectively of client device .

Merchant device may be associated for example with an online merchant offering various products and or services in exchange for payment to be received over network . For example in one embodiment merchant device may provide products and or services e.g. software applications software licenses software content or other products or services available for purchase by user over network using client device or client device .

Application developer device may be associated for example with a developer of a software application . For example in one embodiment a developer may register software application with payment service provider device as further described herein.

Payment service provider device may be associated for example with an online payment service provider which may provide payment on behalf of user to the operator of merchant device . In this regard payment service provider device includes a payment application which may be configured to interact with client devices and and merchant device over network to facilitate the purchase of products and or services by user from merchant device . In one embodiment payment service provider device may be provided by PayPal Inc.

Payment service provider device also maintains a plurality of user accounts each of which may include account information associated with individual users. For example in one embodiment account information may include private financial information of user such as account numbers passwords credit card information bank information or other information which may be used to facilitate online transactions by user . Advantageously payment application may be configured to interact with merchant device on behalf of user during a transaction without requiring user to provide account information to merchant device . In this regard payment application may be configured to authorize a transaction in response to user successfully logging in to payment service provider device . In one embodiment user may log in to payment service provider device by providing user credentials such as for example user identifier an electronic mail address a password a telephone number a personal identification number PIN a physical address and or other appropriate information.

Payment service provider device further includes a token generator application which may be used to generate a plurality of tokens in response to verification requests received by payment service provider device over network . For example token generator application may be implemented in accordance with various appropriate techniques for generating tokens from an initial seed value e.g. key . In various embodiments application identifier device identifier user identifier and or other information may be used as seed values from which tokens are generated. In one embodiment each of tokens is configured to expire following a limited time period e.g. three minutes or another appropriate time period after they are generated. In another embodiment each of tokens is configured to be processed only once in response to a verification request.

Tokens may be implemented using any appropriate letters numbers symbols or other content. For example in one embodiment each of tokens is implemented as a six digit code or number.

Payment service provider device also includes a token processing application which may be used to process tokens as well as user tokens received by payment service provider device as further described herein. Token processing application may also be used to generate verification responses based on such processing as further described herein.

In addition payment service provider device maintains a set of application identifiers associated with a plurality of authenticated software applications. In this regard each of application identifiers is associated with a software application that has been registered with payment service provider device .

If payment service provider device approves the request step then payment service provider device assigns an application identifier to the software application step and stores the newly assigned application identifier in the set of application identifiers maintained by payment service provider device step . Payment service provider device then provides the newly assigned application identifier to application developer device step which adds the application identifier to the software application step .

Accordingly following the process of software application will be registered with payment service provider device and authorized by payment service provider device to receive user credentials from user as discussed. The process of may be repeated for different software applications and or different developers to register a plurality of software applications with payment service provider device to populate the set of application identifiers . Other embodiments are also contemplated. For example in another embodiment software application may be registered with application developer device instead of or in addition to payment service provider device .

In step user accesses application . For example in one embodiment application may be a software application running on client device as illustrated in . However in other embodiments application may run on one or more remote servers and may be accessed by user through client device or .

In step application prompts user to perform a transaction e.g. a purchase or similar transaction using the services of payment service provider device . For example in one embodiment application may provide a user selectable link which when selected by user will direct user to a webpage that requests user credentials recognized by payment service provider device e.g. a webpage that purports to be associated with payment service provider device . In another embodiment application may provide a user interface that prompts user to provide such user credentials to application which passes the user credentials to payment service provider device through an API recognized by payment service provider device . However in either case user will not have an independent confirmation as to the authenticity of application during step . In this regard user will not know whether the prompt of step is in fact a legitimate request for user credentials or is a fraudulent request from a rogue software application.

Also in step application causes a verification interface to be displayed to user which when selected by user will initiate a process to verify the authenticity of application . In one embodiment application may be implemented to provide the verification interface. In another embodiment application may be implemented to instruct another application e.g. one of other applications to provide the verification interface.

User interface includes user selectable links which when selected by user purport to direct user to a webpage that requests user credentials recognized by payment service provider device in order to purchase various products or services. For example in the embodiment shown in application purports to be a map application that permits user to purchase a user license for the map application as well as additional map content by selecting various links . In this embodiment upon the user s selection of one of links application may direct user to a webpage e.g. by opening browser application into which user may enter user credentials recognized by payment service provider device .

Referring again to in step user initiates a verification process to determine whether application is an authenticated software application recognized by payment service provider device . For example in one embodiment step may be performed by user selecting verification button of . In another embodiment step may be performed by user selecting a link provided by application .

In step application sends a verification request including the application identifier associated with application to payment service provider device . In one embodiment the verification request is an inquiry to determine whether application is approved by payment service provider device to direct user to provide user credentials recognized by payment service provider device . The verification request may be sent for example in accordance with an API recognized by payment service provider device .

In step payment service provider device receives the verification request and determines whether the application identifier sent with the verification request is in the set of application identifiers maintained by payment service provider device . In this regard if the application identifier is found in the set of application identifiers then application will be recognized by payment service provider device as one of the software applications previously registered with payment service provider device through for example the process of . In this case the process of continues to step . Otherwise the process of may optionally continue to step .

In step token generator application generates one of tokens in response to the verification request sent in step in accordance with the various techniques described herein. Then in step payment service provider device passes the token generated in step to application .

In step application displays a token to user . For example in one embodiment step may be performed by application displaying a token in token window of . In the example illustrated in the token displayed in token window corresponds to a six digit number 123456. If application is indeed an authentic software application that has been registered with payment service provider device then the token displayed in step will correspond to the actual token passed to application in step and is therefore one of tokens maintained by payment service provider device . However if application is a rogue application then the token displayed in step is likely a fraudulent token which was not generated by token generator application and is not one of tokens maintained by payment service provider device .

In step user logs in to payment service provider device independently of application . In this step user will not log in to payment service provider device using a webpage link or other information provided by application in step . Rather user will log in to payment service provider device using a webpage link or other information trusted by user . For example in one embodiment user may use browser application of client device to access a webpage known to be associated with payment service provider device . In another embodiment user may use browser application of client device to access such a webpage.

To log in to payment service provider device in step user may provide appropriate user credentials recognized by payment service provider device . In this regard it is assumed that user either has an existing user account with payment service provider device or creates a user account during step .

After a successful log in is performed user provides the token previously displayed during step to payment service provider device step . For example in one embodiment a webpage provided by payment service provider device may provide an appropriate user interface to permit user to enter the token. The token entered by user in step is also referred to as a user token.

In step token processing application processes the user token received in step to determine whether application is one of the authenticated software applications associated with application identifiers . For example in one embodiment payment service provider device compares the user token provided in step and the generated token provided in step to determine whether application is an authenticated software application based on whether the user token matches the generated token. In another embodiment payment service provider device compares the user token provided in step to any of tokens to determine whether application is an authenticated software application based on whether the user token matches any of the tokens .

In one embodiment if the user token does not match the generated token or any of tokens then token processing application will determine that the user token is invalid. For example this may occur if the generated token has expired or if the user token was fraudulently provided by a rogue software application. In another embodiment if the user token matches the generated token or any of tokens then token processing application will determine that the user token is valid and application is recognized by payment service provider device .

In step token processing application generates and sends a verification response to inform user whether application is recognized by payment service provider device as an authentic software application that has been registered with payment service provider device . In one embodiment the verification response may be sent to the same device from which payment service provider device received the user token. For example if user provided the user token using browser application of client device or browser application of client device then the verification response may be sent back to browser application of client device or browser application of client device respectively. In such cases the verification response may be provided as a webpage. However other formats are also contemplated such a text messages electronic mail messages images and other appropriate formats.

Accordingly if the verification response of step indicates that application is recognized by payment service provider device then user will be informed that application is likely not a rogue software application. However if the verification response of step indicates that application is not recognized by payment service provider device then user will be informed that application may be a rogue software application. In either case user may make an informed choice regarding whether or not to perform one or more transactions prompted by application step .

In view of the present disclosure it will be appreciated that various techniques described herein may be used to authenticate software applications accessed by users. Although particular embodiments have been described in which an application is verified by a payment service provider the disclosed techniques may be used in any appropriate context in which the authentication of software applications is desired. For example in another embodiment an application may be verified by an application developer. In such an embodiment appropriate components of payment service provider device may be implemented in application developer device to permit application developer device to perform verification related steps of the method of previously described herein.

Where applicable various embodiments provided by the present disclosure can be implemented using hardware software or combinations of hardware and software. Also where applicable the various hardware components and or software components set forth herein can be combined into composite components comprising software hardware and or both without departing from the spirit of the present disclosure. Where applicable the various hardware components and or software components set forth herein can be separated into sub components comprising software hardware or both without departing from the spirit of the present disclosure. In addition where applicable it is contemplated that software components can be implemented as hardware components and vice versa.

Software in accordance with the present disclosure such as program code and or data can be stored on one or more machine readable mediums. It is also contemplated that software identified herein can be implemented using one or more general purpose or specific purpose computers and or computer systems networked and or otherwise. Where applicable the ordering of various steps described herein can be changed combined into composite steps and or separated into sub steps to provide features described herein.

The foregoing disclosure is not intended to limit the present invention to the precise forms or particular fields of use disclosed. It is contemplated that various alternate embodiments and or modifications to the present invention whether explicitly described or implied herein are possible in light of the disclosure.

Having thus described embodiments of the invention persons of ordinary skill in the art will recognize that changes may be made in form and detail without departing from the scope of the invention. Thus the invention is limited only by the claims.

