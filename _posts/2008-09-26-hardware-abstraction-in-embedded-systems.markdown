---

title: Hardware abstraction in embedded systems
abstract: A system and a machine-implemented method are provided. The system may include a platform, in which one or more application domains may be specified. At least some of the application domains may abstract a hardware device. Partitioning of the system into a number of independent applications with fixed public interfaces may provide each application domain with isolation, or protection, from other application domains. Application domains may be specified via programming language constructs. An application, within one application domain, may access a hardware device, or software, in another application domain via similar generic interfaces provided in a managed code environment enforced by the platform.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08307340&OS=08307340&RS=08307340
owner: Microsoft Corporation
number: 08307340
owner_city: Redmond
owner_country: US
publication_date: 20080926
---
When designing and programming a desktop or server application a high level of abstraction with respect to underlying computer resources provides scalability for the desktop or server application. A platform such as for example a platform using .NET framework developed by Microsoft Corporation of Redmond Wash. may be employed to execute programs. A programmer using service based design and multi threading techniques may not be concerned with which part of a system executes a program because the platform provides the high level of abstraction.

Embedded systems are prevalent in today s computer systems. Embedded systems may be developed to be implemented with custom hardware and often are executed in real time environments. Examples of embedded systems include but are not limited to mobile telephones set top boxes personal digital assistants PDAs telecommunication switching systems aircraft systems and spacecraft systems.

In embedded systems design a high level of abstraction as described above may adversely affect the embedded systems making performance unpredictable. Further specific aspects of hardware devices may be lost in the high level of abstraction. For example physical connections to physical interfaces may be abstracted but later may be re introduced by using additional parameters in thread control functions and I O drivers. In addition the high level of abstraction makes it impossible for a programmer to refer to a specific central processing unit CPU or CPU like device without breaking the abstraction.

In systems including but not limited to the .NET framework to communicate with a hardware component an application may communicate with a driver executing proprietary code which may then access the hardware component. Each different hardware component may use a different driver. As a result the programmer learns how the application interfaces with each of the different drivers before programming the application to call the drivers.

This Summary is provided to introduce a selection of concepts in a simplified form that is further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

A system and a machine implemented method may be provided for providing hardware abstraction. The system may include a platform which permits a user to specify one or more application domains some of which may abstract a hardware device. Application domains are computational units that may execute program code in a managed code environment. Application domains may be isolated from other application domains by partitioning a software system into a number of independent applications with fixed public interfaces.

In some embodiments consistent with the subject matter of this disclosure the platform provides the capability to create application domains via programming language constructs. An application within an application domain may access a hardware device or software in another application domain via generic interfaces provided in the managed code environment. The platform may enforce managed code features including but not limited to code access security code verification non functional constraint validation and application domain isolation. The non functional constraint validation may include but not be limited to information about a maximum running time for a function.

In some embodiments an application executing in a first application domain may download code to a hardware device in a second application domain. When the hardware device executes the downloaded code the hardware device may perform functions defined by the downloaded code. A generic interface may be defined such that an application executing in an application domain within a managed code environment may invoke one or more functions of the downloaded code executing in the hardware device. A generic interface may be defined such that an application executing in an application domain within a managed code environment may also invoke software executing in another application domain via a generic interface similar to a generic interface for downloading information by an application to a hardware device or similar to a generic interface for invoking functions of the hardware device from an application.

Embodiments are discussed in detail below. While specific implementations are discussed it is to be understood that this is done for illustration purposes only. A person skilled in the relevant art will recognize that other components and configurations may be used without parting from the spirit and scope of the subject matter of this disclosure.

A method and a system are provided in which a platform may execute an application in a managed code environment within an application domain. The managed code environment may be enforced by the platform and may provide a number of features to the application including but not limited to memory management thread execution verification of code execution of code code access security non functional constraint validation application domain isolation and releasing of resources. One example of non functional constraint validation may include but not be limited to a maximum running time for a function.

An application domain is a computational unit which may execute program code. The application domain may further be a target of communications and external events. Creation of an application domain results in initialization of a computational unit and locking of associated resources after which the application domain may be ready to process communications and events. An application domain may be destroyed resulting in a freeing of associated resources after which the application domain may no longer be available for processing communications and events.

In some embodiments consistent with the subject matter of this disclosure an application domain concept may be implemented in a .NET programming language within a .NET framework or platform which is available from Microsoft Corporation of Redmond Wash. In other embodiments a different platform may be employed. Resources including but not limited to memory and CPU time may be used by application domains. Other resources such as for example hardware interfaces may include but not limited to hardware interrupts shared memory regions direct memory access DMA channels memory mapped I O regions I O buses I O pins and shared or exclusive locks may be defined as properties of an application domain.

Application domains may be isolated from other application domains by partitioning a software system into a number of independent applications with fixed public interfaces defined by an application programmer. Other access among the application domains may be blocked.

The platform may provide a capability to create application domains as a programming language construct that abstracts hardware components. Such application domains may provide hardware functions and software implemented functions via a generic interface which may be used for management functions including but not limited to initialization as well as actual hardware or software functions.

Processor may include at least one conventional processor or microprocessor that interprets and executes instructions as well as one or more embedded systems. Memory may be a random access memory RAM or another type of dynamic storage device that stores information and instructions for execution by processor . Memory may store temporary variables or other intermediate information used during execution of instructions by processor . ROM may include a conventional ROM device or another type of static storage device that stores static information and instructions for processor . Storage device may include a hard disk and corresponding drive a flash based storage device or other type of storage device or medium for storing data and or instructions for processor .

Processing device may perform functions in response to processor executing sequences of instructions contained in a tangible machine readable medium such as for example memory ROM storage device or other medium. Such instructions may be read into memory from another machine readable medium or from a separate device via a communication interface not shown .

Application domain may interface with other components and vice versa via an interrupt and a software application programming interface API . Application domain may interface with application domain and vice versa via an I O bus and a shared memory region . Application domain may interface with application domain and vice versa via an I O bus . Application domain may interface with other components and vice versa via a software API and a memory mapped I O . Application domain may interface with application domain and vice versa via a software API an interrupt and a shared memory region .

In some embodiments consistent with the subject matter of this application platform may be implemented via a Common Language Runtime CLR which is a virtual machine component of the .NET framework provided by Microsoft Corporation of Redmond Wash. In other embodiments platform may be implemented via other means.

System is only exemplary. Other systems may have more or fewer application domains with different components than the components shown in .

The above mentioned hardware components may each be a programmable device. The programmable device may be a special purpose processor including but not limited to a digital signal processor or a graphic processor. In other systems hardware components specified to be within application domains may include but not be limited to a field programmable gate array FPGA or an application specific integrated circuit ASIC .

FPGA based application domain is only exemplary. In other embodiments an FPGA based application domain may communicate with other components via other types of interfaces than those shown in .

The one or more methods for accessing hardware component may include proprietary code provided by a manufacturer of hardware component or a developer. The one or more methods may further include information including but not limited to configuration information for hardware component .

Code may be downloaded to hardware component using generic interface . The code may include code for implementing functions on hardware component . A developer of the code may provide a class including methods for calling the functions on hardware component . The class that includes methods for calling the functions may be instantiated by application thereby providing a generic interface for calling the functions. As an example hardware component may be a digital signal processor DSP and the downloaded code may include instructions for the DSP to function as a video decoder. In this example application may call a function to pass encoded video to hardware component and may call a second function to receive a decoded video image from hardware component .

First an application domain for an application may be specified on a platform using a programming language construct act . Hardware interfaces to other application domains may be defined as properties of the application domain as discussed previously act . A class for accessing a hardware component may be specified act . The class may be specified in a software library in some embodiments. A class for invoking functions of the hardware component may be specified act . The application may instantiate an instance of the class for accessing the hardware component act . The instance of the class may include methods for accessing the hardware component when the hardware component is included in a same application domain as the application or stubs for accessing an object in a different application domain having methods for accessing the hardware component when the hardware component is included in the different application domain. Next an instance of the class for invoking functions of the hardware component may be instantiated act . Methods of the instance of the class may include stubs in a proxy object for communicating a function call to an instance of a class in the different application domain including the hardware component or the instance of the class may include methods for invoking functions of the hardware component when the application and the hardware component are in a same application domain. The application may initialize the hardware component by using methods of the instance of the class for accessing the hardware component in order to download information to the hardware component. The information may include code or configuration information in a binary file or code for the hardware component to perform functions act . Of course the information may be downloaded to the hardware component at a later time such as during runtime. The application may use methods of the instance of the class for causing the hardware component to perform the functions act . The application may then use a method to inform the hardware component to deinitialize and to release any resources used by the hardware component act .

Embodiments consistent with the subject matter of this disclosure provide a consistent method for users such as programmers to specify application domains hardware components and software components such that applications may access hardware components may invoke functions and may access software components in a consistent and well defined manner within a managed code environment.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms for implementing the claims.

Although the above descriptions may contain specific details they are not be construed as limiting the claims in any way. Other configurations of the described embodiments are part of the scope of this disclosure. Further implementations consistent with the subject matter of this disclosure may have more or fewer acts than as described with respect to or may implement acts in a different order than as shown. Accordingly the appended claims and their legal equivalents define the invention rather than any specific examples given.

