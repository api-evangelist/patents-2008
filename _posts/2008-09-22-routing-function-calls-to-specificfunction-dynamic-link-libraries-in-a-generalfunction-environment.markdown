---

title: Routing function calls to specific-function dynamic link libraries in a general-function environment
abstract: A method and system for routing a function call to a core dynamic link library (DLL) via a pass-through DLL. An indication that an application requires a specific functionality is received. Using the indication, an initialization function internal to the pass-through DLL identifies a core DLL as providing the specific functionality. The core DLL is loaded into a memory. The pass-through DLL calls an internal processing initialization function included in the core DLL. The pass-through DLL receives and stores an address of a list of pointers that reference a set of functions included in the core DLL. The pass-through DLL receives a function call to a first function in the set of functions. The pass-through DLL calls the first function by utilizing the address of the list of pointers to identify a pointer that references the first function in the set of functions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09098316&OS=09098316&RS=09098316
owner: International Business Machines Corporation
number: 09098316
owner_city: Armonk
owner_country: US
publication_date: 20080922
---
The present invention relates to a data processing method and system for routing function calls to specific function dynamic link libraries in a general function environment and more particularly to routing function calls to selected specific function dynamic link libraries via a pass through dynamic link library.

In conventional systems introducing a new set of functions that behave differently from an original set of functions included in a dynamic link library includes providing a new dynamic link library name or providing the functions in the new set with names that are different from the functions in the original set. These conventional schemes necessitate extensive changes to applications that need to utilize the new set of functions. For example an application may need to be recompiled to utilize the new set of functions. Besides being time consuming and expensive to implement the aforementioned required changes pose a risk of causing the application to malfunction i.e. by introducing a software bug . Thus there exists a need to overcome at least one of the preceding deficiencies and limitations of the related art.

The present invention provides a computer implemented method of routing a function call to a core dynamic link library DLL via a pass through DLL. A computing system receives an indication that an application requires a specific functionality. An initialization function internal to a pass through DLL included in the computing system identifies a first core DLL as providing the required specific functionality. Identifying the first core DLL includes selecting the first core DLL from a set of core DLLs based on the received indication. The first core DLL is loaded into a memory coupled to the computing system. The pass through DLL calls an internal processing initialization function included in the first core DLL. In response to the call of the internal processing initialization function the pass through DLL receives and stores an address of a list of pointers that reference a set of functions included in the first core DLL. The set of functions includes a first function. From the application the pass through DLL receives a function call to the first function. The pass through DLL calls the first function in response to receiving the function call. Calling the first function includes utilizing the address of the list of pointers to identify a pointer included in the list of pointers. The identified pointer references the first function in the set of functions. In response to the pass through DLL calling the first function the first function is executed.

A system computer program product and process for supporting computing infrastructure corresponding to the above summarized method are also described and claimed herein.

The present invention provides a method and system for routing a software application s function call via a pass through dynamic link library DLL to a function included in a core DLL. The core DLL is selected from multiple core DLLs according to functionality required by the application. In one embodiment the pass through DLL allows an application to exploit a system s new functionality through the same application programming interface the application uses to exploit old functionality. For example the new functionality may provide additional or restricted processing to comply with standards. A new function may be added to the pass through DLL to allow the application to indicate which functionality e.g. old functionality or new functionality is required. The DLL that provides the old functionality is renamed and identified as one of the multiple core DLLs. Another core DLL provides the new functionality. The original name of the DLL that provides the old functionality is given to the pass through DLL thereby allowing an application to continue to use the original name and the same application programming interface while exploiting either the old or the new functionality.

Computing system includes a pass through DLL and a core DLL a.k.a. loaded core DLL that is loaded into a memory or virtual storage of computing system . Pass through DLL includes an initialization function that calls an internal processing initialization function internal to loaded core DLL . Loaded core DLL also includes a list of function pointers . The list of function pointers reference one or more core DLL functions which are one or more functions included in loaded core DLL . The list of function pointers includes M function pointers function pointer . . . function pointer M i.e. function pointer . . . function pointer . The core DLL functions include M functions function . . . function M i.e. function . . . function . Function pointer . . . function pointer M reference function . . . function M respectively. An address a.k.a. address of the list of function pointers is returned to the pass through DLL by the call by initialization function to internal processing initialization function . The address references the list of function pointers . Internal processing initialization function may also perform any initialization required by the loaded core DLL .

In one embodiment pass through DLL includes a function to receive indication of specific functionality not shown that may receive an indication from application that the application requires a specific functionality provided by one of the N core DLLs in storage unit . The function to receive indication of specific functionality also calls initialization function .

Storage unit includes N core DLLs core DLL . . . core DLL N i.e. core DLL . . . core DLL . Each of the N core DLLs in storage unit includes M functions core DLL function . . . core DLL function m such that an i th core DLL function of one core DLL of the N core DLLs in storage unit has the same name as the i th core DLL function of any other core DLL of the N core DLLs. Core DLL includes function . . . function M i.e. function . . . function . Core DLL N includes function . . . function M i.e. function . . . function . Although not shown in the internal processing initialization function is included in each of the N core DLLs in storage unit .

Pass through DLL also includes M wrapper functions not shown that have the same names as the M core DLL functions included in core DLL functions . A wrapper function in pass through DLL checks if a list of function pointers is known to pass through DLL and calls one of the M functions in core DLL functions based on the called function having the same name as the wrapper function. In an alternate embodiment the wrapper function selects the function to be called based on the ordinal position of the function to be called within core DLL functions matching the ordinal position of the wrapper function within the M wrapper functions.

A call of initialization function identifies one of the N core DLLs in storage unit as the core DLL that provides the functionality required by application . The identified core DLL is loaded into memory or virtual storage of computing system . After being loaded the identified core DLL is loaded core DLL . For example if the execution of initialization function identifies core DLL as the core DLL that provides the functionality required by application then core DLL is loaded into memory or virtual storage of computing system . Thus in the example of this paragraph loaded core DLL is core DLL and the M functions included in core DLL i.e. function . . . function are the M functions included in core DLL i.e. function . . . function .

In one alternate embodiment pass through DLL see receives the aforementioned indication via an environment variable. In another alternate embodiment pass through DLL see receives the aforementioned indication via a configuration file that provides information necessary to load the required core DLL from the storage unit see .

After identifying the core DLL needed to provide the specific functionality the initialization function see loads in step the identified core DLL into a memory or virtual storage coupled to computing system see . In response to the loading performed in step the identified core DLL becomes the loaded core DLL of .

In step the pass through DLL see calls internal processing initialization function see which returns an address see of the list of function pointers see . In one embodiment the aforementioned function to receive indication of specific functionality is included in pass through DLL see and calls initialization function see which in turn calls internal processing initialization function see . In step pass through DLL see receives and stores the address see being returned by internal processing initialization function see . The list of function pointers see point to core DLL functions see included in loaded core DLL see . In step control returns to application see and the specific initialization process ends at step . Subsequent to the completion of the specific initialization process of application see makes a core DLL function call. As used herein a core DLL function call is defined as a call of one of the functions in core DLL functions see i.e. a call of one of the functions included in function . . . function M of . The routing of the core DLL function call is described below relative to .

In step a wrapper function in pass through DLL see that has the same name as the core DLL function called in step determines that the pass through DLL has no knowledge of address see . In the remaining discussion of the wrapper function that has the same name as the core DLL function called in step is also referred to as the aforementioned wrapper function. In step the aforementioned wrapper function in pass through DLL see initiates the default initialization process by calling initialization function see to identify the core DLL in storage unit see that provides the default functionality required by application see .

After identifying the core DLL needed to provide the default functionality the initialization function see loads in step the core DLL identified in step into a memory or virtual storage coupled to computing system see . In response to the loading performed in step the core DLL identified in step becomes the loaded core DLL of .

In step the initialization function see calls internal processing initialization function see in loaded core DLL see which returns the address see of the list of function pointers see . In step in response to the call of the internal processing initialization function see in step pass through DLL see receives and stores the address see .

In step the aforementioned wrapper function in pass through DLL see calls the core DLL function called in step via the list of function pointers see . That is the pass through DLL selects and utilizes a pointer from list of function pointers see that references the core DLL function called in step . The pass through DLL selects the pointer from the list of function pointers see based on the name or index of the core DLL function being called in step matching the name or index of the aforementioned wrapper function. The pass through DLL may also use one or more parameters in the call of the core DLL function in step . The parameter s are supplied to the pass through DLL by application see .

In step computing system executes the core DLL function called in step . In step control is returned to application see and the process of ends at step .

In step pass through DLL see receives a core DLL function call from application see . Hereinafter in this section the function called in step is also referred to as the required core DLL function. 

In step a wrapper function in pass through DLL see determines that the pass through DLL has knowledge of address see . In the remaining discussion of the wrapper function in the pass through DLL that makes the determination in step is referred to simply as the wrapper function. In step the wrapper function in pass through DLL see calls the required core DLL function via the list of function pointers see . That is the pass through DLL selects and utilizes a pointer from list of function pointers see that references the required core DLL function. The pass through DLL selects the pointer from the list of function pointers see based on the name or index of the core DLL function being called in step matching the name or index of the wrapper function. The pass through DLL may also use one or more parameters in the call of the required core DLL function in step . The parameter s are supplied to the pass through DLL by application see .

In step computing system executes the required core DLL function in response to the call in step . In step control is returned to application see and the process for routing a function call via a pass through DLL ends at step .

In step manual processing and computing system see rename the original DLL to identify the original DLL as a first core DLL e.g. core DLL of stored in storage unit see . In one embodiment computing system stores the new name of the original DLL in storage unit see .

In step manual processing and computing system see receive and store one or more other core DLLs e.g. core DLL N of to provide the new functionality identified in step . The one or more other core DLLs are stored in storage unit .

In step manual processing and computing system see set up a pass through DLL having the same name as the original DLL had prior to step . The pass through DLL is configured to have knowledge of the name of the first core DLL i.e. the new name of the original DLL and the one or more names of the one or more other core DLLs received and stored in step . That is the pass through DLL is generated to include wrapper functions having the same names as the names of the functions that formed the API of the original DLL. The pass through DLL is generated in step to include initialization function see . In one embodiment the pass through DLL is generated in step to also include a function to receive indication of specific functionality as described above relative to . Computing system see stores the pass through DLL in a storage unit e.g. storage unit of . In step computing system see loads the pass through DLL set up in step into a memory or virtual storage coupled to computing system see . The pass through DLL stored in the memory or virtual storage is pass through DLL see .

In step computing system performs specific and default initializations as needed and routes function calls via pass through DLL see as described above relative to . The process of ends at step .

In step computing system see receives an indication that application see requires a second specific functionality which is different from the first specific functionality. In step pass through DLL see calls initialization function see to identify a second core DLL e.g. core DLL N of that provides the second specific functionality. The second core DLL is different from the first core DLL.

In step computing system see unloads the first core DLL from the memory or virtual storage used in step see . Step also includes the computing system see loading the second core DLL into the aforementioned memory or virtual storage. In step computing system see performs steps of to complete an initialization for the second specific functionality with the second core DLL being the loaded core DLL. Subsequent to performing step application see calls another core DLL function that provides the second specific functionality i.e. application of performs a second function call . In step in response to the second function call computing system see performs steps of to route the second function call to the second core DLL thereby completing a dynamic change of the routing of function calls from the first core DLL to the second core DLL. The process of ends at step .

Each function in file.c that is part of the formal API is referenced by a corresponding function pointer included in a list of function pointers i.e. core vector which is included in core control.c. For example the add file record pointer in core vector references the add file record function and the close file pointer in core vector references the close file function .

The same core control.c component having the same list of function pointers i.e. core vector is included in every core DLL stored in storage unit see . Each list of function pointers included in the core DLLs stored in storage unit see reference the functions that are available to external callers e.g. application of . Any two of the aforementioned lists of function pointers included in the core DLLs stored in storage unit see have the same number of function pointers. Further corresponding entries in the aforementioned lists of function pointers have identical formats. An entry in a first list of function pointers addresses a first function that has the same name as a second function addressed by a corresponding entry in a second list of function pointers but the first function may provide a different functionality from the second function.

Pass through DLL includes an initialization component i.e. passthru.init.c . During initialization in the process of or the address to the list of function pointers is assigned to a pointer i.e. functionsCore that resides in the pass through DLL .

Since core DLL is the core DLL that was selected from the core DLLs in storage unit see and loaded functionsCore addresses list that includes pointers to functions included in core DLL .

Core DLL includes a first component i.e. core control.c and a second component i.e. file.c . The core control.c component includes an internal processing initialization function i.e. core init . The file.c component includes a function i.e. open file and may include one or more other functions not shown . Core DLL provides specific functionality that application requires e.g. additional processing to comply with a standards organization .

In example application indicates its need for a specific set of functionality via a call to the core set state function i.e. function see arrow in . The core set state function sets an indicator i.e. core state to indicate the specific functionality that is required by application and that is provided by one of the core DLLs. In alternate embodiments the need for a specific set of functionality is indicated by environment variables or by external configuration files. The core set state function then calls the private function i.e. a function internal to pass through DLL passthru init to complete the initialization i.e. specific initialization for the specific set of functionality see arrow in .

From storage unit see the passthru init function retrieves 1 a first core DLL i.e. CORE if the core state is set to OFF or 2 a second core DLL i.e. CORE if the core state is set to ON . In example core state is set to ON and therefore CORE is loaded see core DLL .

The passthru init function in the pass through DLL then calls core init within core DLL see arrow in . The core init function is used only internally by pass through DLL . Further the core init function returns the address of CORE s list of function pointers e.g. list in to pass through DLL and the returned address is stored in a pointer e.g. functionsCore in . Control then returns to pass through DLL and then to application thereby completing the call to core set state.

After completing the call to core set state application starts using the API provided by the system that implements PRODAPI. Application initiates the opening of a file by calling open file within pass through DLL see arrow in . The corresponding open file function in pass through DLL checks to ensure that the aforementioned address of the list of function pointers is known by the pass through DLL. The open file function then calls the open file function in the loaded core DLL with parameters supplied as is by application see arrow in .

The open file function in the core DLL is executed by computing system see to complete the opening of the file. The execution of open file function includes validating the parameters included with the call to function opening the file and returning the corresponding file handle.

Core DLL includes a first component i.e. core control.c and a second component i.e. file.c . The core control.c component includes an internal processing initialization function i.e. core init . The file.c component includes a function i.e. open file .

In example application is to run using a default functionality that had been used in previous versions of the application. The first function called by application is open file see arrow in . Pass through function detects that CORE s list of function pointers is not known to pass through DLL and in response calls the private function i.e. passthru init see arrow in .

The global indicator core state is set to OFF in example and therefore the passthru init function retrieves the core DLL CORE i.e. the default core DLL from storage unit see and loads the default core DLL in memory or virtual storage see loaded core DLL .

The passthru init function in the pass through DLL then calls core init within core DLL see arrow in . The core init function is used only internally by pass through DLL . Further the core init function returns the address of CORE s list of function pointers e.g. list in to pass through DLL and the returned address is stored in a pointer e.g. functionsCore in . Using a function pointer in CORE s list of function pointers that addresses the open file function the wrapper function calls the open file function with parameters supplied as is by application see arrow in .

The open file function in the core DLL is executed by computing system see . The execution of open file function includes validating the parameters included with the call to function opening the file and returning the corresponding file handle.

Example includes an application a pass through DLL i.e. PRODAPI and a loaded core DLL . Application uses functionality of a system that implements the API provided by PRODAPI. Core DLL may be for example CORE see core DLL in if example is following a default initialization or CORE see core DLL in if example is following a specific initialization. Pass through DLL includes an initialization component i.e. passthru init.c and a function calling component i.e. passthru.c . The passthru init.c component includes a function to receive indication of specific functionality i.e. core set state and a private initialization function i.e. passthru init . The passthru.c component includes pass through functions and that initiate the adding of a record the closing of a file and the opening of a file respectively.

Core DLL includes a first component i.e. core control.c and a second component i.e. file.c . The core control.c component includes an internal processing initialization function i.e. core init . The file.c component includes functions and i.e. add file record close file and open file respectively .

The first function called by application via function is open file see arrow n in . From the known list of function pointers function uses the function pointer that addresses the open file function to call the open file function with parameters supplied as is by application see arrow n 1 in .

The second function called by application via function is add file record see arrow n 2 in . From the known list of function pointers function uses the function pointer that addresses the add file record function to call the add file record function with parameters supplied as is by application see arrow n 3 in .

The third function called by application via function is close file see arrow n 4 in . From the known list of function pointers function uses the function pointer that addresses the close file function to call the close file function with parameters supplied as is by application see arrow n 5 in .

Memory may comprise any known type of computer data storage and or transmission media including bulk storage magnetic media optical media random access memory RAM read only memory ROM a data cache a data object etc. In one embodiment cache memory elements of memory provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution. Moreover similar to CPU memory may reside at a single physical location comprising one or more types of data storage or be distributed across a plurality of physical systems in various forms. Further memory can include data distributed across for example a local area network LAN or a wide area network WAN .

I O interface comprises any system for exchanging information to or from an external source. I O devices comprise any known type of external device including a display device e.g. monitor keyboard mouse printer speakers handheld device facsimile etc. Bus provides a communication link between each of the components in computing system and may comprise any type of transmission link including electrical optical wireless etc.

I O interface also allows computing system to store and retrieve information e.g. data or program instructions such as code from an auxiliary storage device such as computer data storage unit or another computer data storage unit not shown . Computer data storage unit may be a non volatile storage device such as a magnetic disk drive i.e. hard disk drive or an optical disc drive e.g. a CD ROM drive which receives a CD ROM disk .

Memory includes computer program code that provides the logic for routing a function call via a pass through DLL using specific or default initialization e.g. the process of together with or setting up the pass through and core DLLs e.g. the process of dynamically changing the routing of function calls from one core DLL to another core DLL e.g. the process of . Further memory may include other systems not shown in such as an operating system e.g. Linux that runs on CPU and provides control of various components within and or connected to computing system .

As will be appreciated by one skilled in the art the present invention may be embodied as a system method or computer program product. Accordingly the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a system e.g. system of or computing system . Furthermore the present invention may take the form of a computer program product embodied in any tangible medium of expression e.g. memory or computer data storage unit having computer usable program code e.g. code embodied in the medium.

Any combination of one or more computer usable or computer readable medium s e.g. memory and computer data storage unit may be utilized. The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. A non exhaustive list of more specific examples of the computer readable medium includes an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a transmission media such as those supporting the Internet or an intranet or a magnetic storage device. Note that the computer usable or computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory . In the context of this document a computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer usable medium may include a propagated data signal with the computer usable program code embodied therewith either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc.

Computer program code e.g. code for carrying out operations of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on a user s computer e.g. computing system partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network not shown including a LAN a WAN or the connection may be made to an external computer e.g. through the Internet using an Internet Service Provider .

The present invention is described herein with reference to flowchart illustrations e.g. and and or block diagrams of methods apparatus systems e.g. and and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions e.g. code . These computer program instructions may be provided to a processor e.g. CPU of a general purpose computer e.g. computing system special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium e.g. memory or computer data storage unit that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer e.g. computing system or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Any of the components of the present invention can be deployed managed serviced etc. by a service provider that offers to deploy or integrate computing infrastructure with respect to the method of routing a function call via a pass through DLL using specific or default initialization. Thus the present invention discloses a process for supporting computer infrastructure comprising integrating hosting maintaining and deploying computer readable code e.g. code into a computing system e.g. computing system wherein the code in combination with the computing system is capable of performing a method of routing a function call via a pass through DLL using specific or default initialization.

In another embodiment the invention provides a business method that performs the process steps of the invention on a subscription advertising and or fee basis. That is a service provider such as a Solution Integrator can offer to create maintain support etc. a method of routing a function call via a pass through DLL using specific or default initialization. In this case the service provider can create maintain support etc. a computer infrastructure that performs the process steps of the invention for one or more customers. In return the service provider can receive payment from the customer s under a subscription and or fee agreement and or the service provider can receive payment from the sale of advertising content to one or more third parties.

The flowcharts in and and the block diagrams in and illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code e.g. code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

While embodiments of the present invention have been described herein for purposes of illustration many modifications and changes will become apparent to those skilled in the art. Accordingly the appended claims are intended to encompass all such modifications and changes as fall within the true spirit and scope of this invention.

