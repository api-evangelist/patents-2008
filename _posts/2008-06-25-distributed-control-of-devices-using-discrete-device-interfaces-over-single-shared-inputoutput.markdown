---

title: Distributed control of devices using discrete device interfaces over single shared input/output
abstract: Systems and methods are provided for controlling a device. In one aspect, a method for controlling a device includes exposing a plurality of virtual device interfaces () for a device (), wherein each virtual device interface () enables client control of a discrete function of the device, and controlling concurrent communication between the device () and two or more virtual device interfaces () operating on a single shared I/O connection () using a shared I/O port controlled by a device I/O module (). The device I/O module () enables independent development of multiple device interfaces () that can seamlessly and independently operate on a single (physical) device communication connection (), wherein the device shared I/O (input/output) module () implements functions to arbitrate and coordinate I/O activity between the device interfaces () and target device ().
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08572631&OS=08572631&RS=08572631
owner: GVBB Holdings S.A.R.L.
number: 08572631
owner_city: Luxembourg
owner_country: LU
publication_date: 20080625
---
The present disclosure relates generally to systems and methods for accessing and controlling devices in a computing network using virtual device interfaces and in particular systems and methods for independently accessing and controlling discrete functionalities of a controlled device through separate virtual device interfaces utilizing a single shared deterministic I O connection.

Technological innovations and developments in distributed computing systems and applications have led to a significant increase in the amount and variety of network computing devices and peripheral hardware devices that can be interconnected and remotely accessible over communications networks. In general the functions of network devices can be accessed and controlled by client applications through some type of device interface. For example a common approach for enabling application access and control of a multi function device is by use of virtual device interfaces in which various functions of the device are exposed through discrete interfaces where each virtual device interface is an abstraction of actual device functionality. A fundamental goal for a virtual device interface framework is to allow for generic device control code within the application which lends itself to specialization the grouping and segregation of specific functional domains and to the ability of substituting plug in simulators in lieu of the actual device interface. Indeed it is preferable for the device interface code to maintain a strict hierarchal base that segregates discrete functional virtual device types and thus the APIs which leads to more code reuse and standardized APIs.

As multi function devices become more complex however the ability to abstract device functionality becomes more problematic at the level of both device interface development and application development especially when deterministic behavior is required. For example challenges that are faced at the device interface level include 1. Mode selection Operations for each of the discrete functionalities often require switching modes of operation with resulting increased complexity 2. Priority inversion The operation of a functional block of low importance preempting the operation of another functional block of higher importance and 3. Increased complexity of device API.

Conversely when developing an application that must make use of a device interface which combines several functionalities the application developer is often required to understand the multi function behavior of the special device. A common approach to addressing this issue is to create an interface to the interface one that must be understood at the user application level of operation. This direct method is problematic for various reasons. The most obvious being that the client application must include knowledge about a specific device type rather than a set of virtual device types. Ultimately this knowledge leads to a mass of specialized device specific code that should not be part of the application domain. In short the application developer must include the how knowledge of the device control with the what desired device behavior which is not desirable. In addition to the application developer becoming responsible for device control issues this approach inevitably introduces procedures that are tailored to a specific device and many problems are only exposed when the application must be modified to make use of another device or set of devices to accomplish the same task.

As the desired approach is to develop applications with virtual device interfaces it is up to the device interface developer to provide the independent yet integrated functionality of the complex device. However this often requires independent control channels for I O which are sometimes unavailable. For example most video servers present two completely independent functions 1 a transport play record functionality and 2 a media management functionality. An interface user a scheduling playout application may want to manage the resources using a system interface and also cue and play clips using transport interfaces. That is from the prospective of the client application there are two or more discrete functionalities provided by separate devices. This interface scheme reduces the complexity of each device interface by restricting the problem domain to that of a single functionality and thereby presents an opportunity to model the interface and the client application in an object orientated manner. However this approach often presents a problem when independent control channels for I O are not available for each operating device interface or when the target device limits the communication by its protocol implementation and or by its physical logical connections.

For example the LOUTH VDCP protocol consists of a mixture of system resource and control transport commands. A VDCP device therefore provides several play record control ports and a system port. However the system port is only accessible via a control port. Thus the interface developer is faced with the dilemma of having to present itself as both a VTR and a system resource manager. This complicates the interface by forcing modes of operation with priority impacts and also complicates the application making use of the interface by requiring a knowledge of which interface is the system port.

Moreover several major problems with the development of multiple device interfaces when they all operate on a single physical device communication connection as each interface competes for a limited amount of communication and CPU bandwidth. Device interfaces often operate in a quiescent state of ready with bursts of high priority and time critical activity. When more than one of such interfaces is operating simultaneously there must be a way to arbitrate both the maximum usage of the limited communications bandwidth and the precise timing of time critical messages often at a sub field resolution. These requirements present three major problems for device interface development namely 1. avoidance of process thread priority inversion or contention 2. precise timing of certain control messages and 3. handling timing collisions for multiple control messages.

Priority inversion refers to the problem of a high priority interface executing a low priority task and taking precedence over a lower priority interface executing a high priority task. Dealing with priority inversion issues is difficult even in a real time operating system where process thread priorities allow adjusting priorities. Indeed priority adjustment at runtime is a very difficult and seldom successfully used method for handling the problem of multiple interfaces with bursts of high priority activity.

In general systems and methods according to present principles are provided for independently accessing and controlling discrete functionalities of a controlled device through separate virtual device interfaces that utilize a single shared deterministic I O connection under control of a device I O module. In one aspect a method for controlling a device includes exposing a plurality of virtual device interfaces for a device wherein each virtual device interface enables client control of a discrete function of the device and controlling concurrent communication between the device and two or more virtual device interfaces operating on a single shared I O connection using a device I O interface. The device I O module enables development of multiple device interfaces that can seamlessly and independently operate on a single physical device communication connection wherein the device shared I O module implements functions to arbitrate and coordinate I O activity between the device interfaces and target device.

These and other exemplary embodiments aspects features and advantages of the present invention will become apparent from the following detailed description of the preferred embodiments which is to be read in connection with the accompanying drawings.

Exemplary systems and methods for accessing and controlling a device in a distributed computing environment through separate virtual device interfaces that can concurrently communicate with the associated device over a single shared I O port will now be described in further detail with reference to . It is to be understood that the exemplary systems and methods discussed herein can be implemented in various forms of hardware software firmware special purpose processors or a combination thereof. For example device interfaces and APIs can be implemented in software as an application comprising program instructions that are tangibly embodied on one or more program storage devices e.g. magnetic floppy disk RAM CD ROM ROM Flash memory etc. and executable by any computing device machine or platform comprising suitable architecture. It is to be further understood that because some of the system components and method steps depicted can be implemented in software the actual connections between the system components or the process steps can differ depending upon the manner in which the present invention is programmed.

Referring now to a high level schematic block diagram is depicted of a system for controlling and accessing a physical device using a plurality of virtual device interfaces over a shared communications port according to an exemplary embodiment of the present principles. In general illustrates a controlled device a device I O module a plurality of device interface modules and an I O API module . The various interfaces and provide a framework under which clients applications can independently access and control discrete functionalities presented by the single controlled device through separate virtual device control interfaces that can concurrently send receive messages to from the device over a single deterministic shared I O connection managed by the device I O module .

In particular each virtual device interface associated with the device exposes an interface to a set of abstract functions to access and control an independent discrete function of the target device . The device interfaces provide the necessary function commands that abstract the operating protocol commands control signals of the device for access and control of a discrete function. The device interfaces can concurrently communicate send and receive messages with the device via the device I O module wherein each of the device interfaces can simultaneously access share and communicate with the device I O module via the common I O API . In one exemplary embodiment the device I O module comprises a server front end that allows multiple clients device interfaces to access the device I O module via the common I O API wherein the clients can register interest in all or part of resulting I O activity during a session. The common I O API module allows a client using a device interface to send timed deferred commands to the target device via the device module . The device I O module comprises a back end device I O interface that provides the interface functionality socket serial port etc to interface with the device and send receive messages to from the target device over a single shared I O port . In this regard the device I O module with the common I O API module operates as a shared I O interface providing a many to one one to many I O interface.

The above exemplary embodiment of is a high level conceptual system framework for device control that can be implemented in various application environments and distributed computing systems. further depicts a method for controlling a device according to present principles by exposing a plurality of virtual device interfaces for a device wherein each virtual device interface enables client control of a discrete function of the device and controlling concurrent communication between the device and two or more virtual device interfaces operating on a single shared I O connection using a device I O interface.

For instance in the above mentioned example of video server applications the device interfaces can be configured to control independent functions such as i a transport play record functionality and ii a media management functionality. An interface user a scheduling playout application can access and manage resources using a system interface and cue and play clips using a transport interface. From the perspective .of the user the virtual interface device scheme makes the single device access appear to be two or more separate devices.

In contrast to conventional schemes as discussed above where the target device limits the communication by a protocol implementation and or by a physical logical connection of the device which forces the interface and application developers to address I O control and connectivity with device specific knowledge regarding the device communication protocol the present principles provide solutions to these problem by using a shared device I O module to implement functions for controlling a shared I O connection between multiple independent interfaces.

In accordance with present principles a shared device I O module enables development of multiple device interfaces that can seamlessly and independently operate on a single physical device communication connection wherein the device shared I O module implements functions to arbitrate and coordinate I O activity between the device interfaces and target device to achieve maximum usage of a limited amount of communications bandwidth and precise timing of time critical messages often at a sub field resolution.

In particular the front end interface comprises a client database a plurality of client message queues a timeline or transmit queue and receive queue . The client DB is used to store client information for a given user session for which a client engages the controlled device wherein such information includes user requests and other session data associated with I O activity and status for each client. The client DB allows a client to register information and interest in all or a portion of the I O events.

The front end interface implements a message queuing process that temporarily stores incoming client messages from each client operating a given device interface into a corresponding one of the client message queues . The message queuing process takes messages from the client message queues and places the messages into a timeline or transmit queue where the messages are placed in order of time and priority based on a specification for the priority and timing of messages. The stable time base provides a quantum of time with subdivisions as defined by the system e.g. a video frame with quarter frame subdivisions . In this example once every quarter frame the content of the timeline transmit queue is evaluated and relevant messages transmitted to the controlled device via the shared I O port interface over the single I O connection . The receive queue collects responses from the shared I O port interface which are received from the controlled device and copies the received message to individual client receive queues in accordance with the client s specification of interest.

The I O API includes but is not limited to a client form that allows one or more multiple clients to register their interest in all or some of the received messages a specification for the priority and timing of messages a request for received messages timeline control and status all under a framework that enables multiple clients to concurrently access control and otherwise communicate with a controlled device. For instance with regard to priority the front end interface assigns equal priority to virtual device interfaces executing tasks and prioritizes messages from the virtual device interfaces based on the priority assigned by the virtual device interface of the message. The front end interface implements a message level priority scheme wherein messages are prioritized according to the type of message and or the importance of an associated task. For instance control messages and data messages are different types of I O messages where pending control messages can be afforded higher priority to provide important control tasks while data messages can be afforded lower priority. Moreover messages can be assigned priority levels based on critical timing factors such as client requested deadlines etc. By operating according to a message level priority scheme the priority inversion problem associated with allowing a high priority interface to execute a low priority task taking precedence over a lower priority interface executing a high priority task is eliminated.

Under a message level priority framework the device I O module can control concurrent communication between a controlled device and a plurality of clients by placing messages in separate client queues associated with each client operating a virtual device interface and moving messages from the client queues and placing the messages into a timeline in order of time and priority. Moreover the ability to control concurrent communication is further supported by the front end interface periodically determining the priority of messages in the timeline and transmitting messages from the timeline according to priority. Furthermore the front end interface can support functionality for periodically determining a priority of messages in the timeline detecting potential timing collisions exist for message transmission and providing collision notification to the virtual device interfaces. Moreover by adding a timeline for the transmit queue it is possible to provide timely collision notification to the device interfaces to allow higher logic such as for example a system controller application to resolve the problem with the best compromise.

Although exemplary embodiments have been described herein with reference to the accompanying drawings it is to be understood that the present system and method is not limited to those precise embodiments and that various other changes and modifications can be affected therein by one skilled in the art without departing from the scope or spirit of the invention. All such changes and modifications are intended to be included within the scope of the invention as defined by the appended claims.

