---

title: Method and system for providing access to adapters
abstract: A computer program product comprises a computer useable medium. The computer useable medium has a computer readable program such that when the computer readable medium is executed on a computer, the computer is caused to receive a request from a database driver that is compatible with a software application. The request is in a database language format. Further, the computer is caused to parse the request. In addition, the computer is caused to convert the request into an intermediary data format. The computer is also caused to provide the request in the intermediary data format to a common client interface builder that reformats the request into a format that is compatible with a system resource adapter and invokes the system resource adapter with the reformatted request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08359323&OS=08359323&RS=08359323
owner: International Business Machines Corporation
number: 08359323
owner_city: Armonk
owner_country: US
publication_date: 20080611
---
This disclosure generally relates to software integration. More particularly the disclosure relates to connectivity to Enterprise systems.

In a business software environment adapters may be utilized to allow business events to flow between an Enterprise Information System EIS and a client. The client may be a business or process or other software application. Most software packages have associated adapters developed for them either by the company that provides the software package or by a company that creates middleware software applications that may be utilized with the software package.

Approaches have been developed for building these adapters. For example standards have been developed for the types of messages that can be sent and received by the adapters. In order to utilize the adapters all of the interfaces for the standard must be implemented. For computer languages that are not based on the standard or cannot operate with the standard the adapters which are written in the standard are inaccessible.

The only current remedy to allow an existing client application which is not written in the standard to access data in an EIS through a resource adapter or EIS Application Programming Interface API is to re code the existing client application in the standard. Such a remedy is very difficult to implement on a large scale. Further considerable time and resources are expended.

In one aspect of the disclosure a computer program product comprises a computer useable medium. The computer useable medium has a computer readable program such that when the computer readable medium is executed on a computer the computer is caused to receive a request from a database driver that is compatible with a software application. The request is in a database language format. Further the computer is caused to parse the request. In addition the computer is caused to convert the request into an intermediary data format. The computer is also caused to provide the request in the intermediary data format to a common client interface builder that reformats the request into a format that is compatible with a system resource adapter and invokes the system resource adapter with the reformatted request.

In another aspect of the disclosure a process is provided. The process receives a request from a database driver that is compatible with a software application. The request is in a database language format. Further the process parses the request. In addition the process converts the request into an intermediary data format. In addition the process provides the request in the intermediary data format to a common client interface builder that reformats the request into a format that is compatible with a system resource adapter and invokes the system resource adapter with the reformatted request.

In yet another aspect of the disclosure a bridge component is provided. The bridge component includes a database driver that is compatible with a software application. The database driver receives a request from the software application intended for a system the request being in a database language format. Further the bridge component includes a database language mapper that receives the request from the database driver parses the request and converts the request into an intermediary data format. The bridge component also includes a common client interface builder that receives the request in the intermediary data format from the database language mapper reformats the request into a format that is compatible with a system resource adapter and invokes the system resource adapter with the reformatted request.

In another aspect of the disclosure a computer program product comprises a computer useable medium. The computer useable medium has a computer readable program such that when the computer readable medium is executed on a computer the computer is caused to receive a request from a database driver through a network server. The database driver is compatible with a software application. The request is in a database language format. Further the computer is caused to parse the request. In addition the computer is caused to convert the request into an intermediary data format. The computer is also caused to provide the request in the intermediary data format to a common client interface builder that reformats the request into a format that is compatible with a system resource adapter and invokes the system resource adapter with the reformatted request.

In yet another aspect of the disclosure a process is provided. The process receives a request from a database driver through a network server. The database driver is compatible with a software application. The request is in a database language format. Further the process parses the request. In addition the process converts the request into an intermediary data format. The process also provides the request in the intermediary data format to a common client interface builder that reformats the request into a format that is compatible with a system resource adapter and invokes the system resource adapter with the reformatted request.

A method and system provide access to adapters for communication between an EIS and a client. Since many use cases fall into the category of accessing the EIS for data retrieval or updates the access and use of such systems may be abstracted as a database system. The method and system will allow various systems to communicate with adapters over a database interface e.g. Standard Query Language SQL interface. As a result easy reuse of already existing database communication infrastructure may be utilized. Further the database communication interface may be implemented in a network mode or a local server mode. Therefore the amount of recoding of existing client applications to allow communication through adapters is reduced.

One of the subcomponents of the bridge component is a database driver. The database driver is an implementation of the standard for database connectivity in the client s language environment. As examples the database driver is a Database Interface DBI driver for a Perl application an Open DataBase Connectivity ODBC driver for a C application and a Java DataBase Connectivity JDBC driver for a Java application . These examples are provided only for illustrative purposes as a variety of other client language environments and corresponding database drivers may be utilized. Further a plurality of software applications and corresponding database drivers are illustrated but the bridge component may have only one database driver if there is only a single software application or multiple software applications based on the same or compatible computer languages. The database driver is responsible for marshalling the client s standard database calls into either network calls when the network is used or to calls on a Database Language Mapper when the Bridge component is utilized in process.

Another subcomponent of the bridge component is a network server . Optionally the network server is responsible for managing connectivity to the Bridge component . For example the network server accepts schedules and or executes incoming requests in a network environment. This subcomponent is optional. In other words the network server is utilized if the bridge component allows for either a network mode or the combination of a possible network mode or local mode. However if the bridge component only utilizes a local server mode the network server may optionally not be utilized.

The Database Language Mapper is another subcomponent of the bridge component . The Database Language Mapper is responsible for parsing and converting database language requests into an intermediary data format e.g. Data Object and for converting responses in the same format into result sets. An example of the Database Language Mapper is an SQL Mapper. Accordingly the SQL Mapper parses and converts SQL requests into the intermediate data format. The SQL Mapper also converts responses in the same format into result sets.

Another subcomponent of the bridge component is a CCI Builder . The CCI Builder is responsible for calling the resource adapter utilizing the CCI. Further the CCI Builder will take the output of the Database Language Mapper reformat the input for an EIS Resource Adapter e.g. a J2C resource adapter and invoke the EIS Resource Adapter . The CCI Builder then returns the appropriate result to the Database Language Mapper .

A client may interact with the bridge component by utilizing the database driver in a similar manner to the client s interaction with a database. As a result the amount of re coding to allow clients based on a variety of different programming languages to interact with the EIS is reduced.

In one embodiment the clients and the drivers run outside a process space . Further the network server runs inside the process space and receives the requests from the one or more database drivers. In addition the Database Language Mapper the CCI Builder and the EIS Resource Adapter run inside the process space .

The insert operation maps to a create object operation with all the values populated into the DO as specified in the statement. If no column names are explicitly specified the values are put into the DO in the order they appear in the statement and in the DO . As an example the statement INSERT INTO CUSTOMER FirstName LastName VALUES Travis Nelson utilizes the insert operation to insert the value Travis into the FirstName field and Nelson into the LastName field of the DO . As a result the DO has the value Travis for the FirstName field and the value Nelson for the SecondName field.

Further illustrates a table with the retrieve operation illustrated in for the DO as output to the adapter. For example with respect to the CustomerID field having a value of 0001 the DO may have the value Travis for the FirstName field and the value Nelson for the LastName field. The output from the adapter will then be mapped to a result set with each of the populated properties becoming a column in the result set. Each DO returned becomes a row.Where the input data does not contain a primary key the operation will map to RetrieveAll. The output can then contain multiple objects such that each object will map to a row in the result set returned.

Further illustrates a table with the retrieve operation illustrated in for the DO as output to the adapter. For example with respect to the CustomerID field having a value of 0001 the DO may have the value Travis for the FirstName field. Irrespective of whether the DO has a value for the LastName field e.g. Nelson only value for the FirstName is displayed. Accordingly the result set returned will only include columns that were in the original projection. For instance if FirstName field is projected only the FirstName column will be in the result set.

The processor is coupled either directly or indirectly to the memory through a system bus. The memory can include local memory employed during actual execution of the program code bulk storage and or cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

The input output devices can be coupled directly to the system or through intervening input output controllers. Further the input output devices can include a keyboard a keypad a mouse a microphone for capturing speech commands a pointing device and other user input devices that will be recognized by one of ordinary skill in the art. Further the input output devices can include a receiver transmitter speaker display image capture sensor biometric sensor etc. In addition the input output devices can include storage devices such as a tape drive floppy drive hard disk drive compact disk CD drive etc.

Network adapters may also be coupled to the system to enable the system to become coupled to other systems remote printers or storage devices through intervening private or public networks. Modems cable modems and Ethernet cards are just a few of the currently available types of network adapters.

It should be understood that the method and system described herein can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. If software is utilized to implement the method or system the software can include but is not limited to firmware resident software microcode etc.

Further the method and or system can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purpose of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a RAM a ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include CD read only memory CD ROM CD read write CD R W and DVD.

While the apparatus and method have been described in terms of what are presently considered to be the most practical and preferred embodiments it is to be understood that the disclosure need not be limited to the disclosed embodiments. It is intended to cover various modifications and similar arrangements included within the spirit and scope of the claims the scope of which should be accorded the broadest interpretation so as to encompass all such modifications and similar structures. The present disclosure includes any and all embodiments of the following claims.

 IBM WebSphere WebSphere Business Monitor WebSphere Integration Developer and WebSphere Process Server are registered trademarks of International Business Machines Corporation in the United States other countries or both.

