---

title: Method and system for executing applications using native code modules
abstract: Some embodiments provide a system that executes a web application. During operation, the system loads the web application in a web browser and loads a native code module associated with the web application into a secure runtime environment. Next, the system provides input data associated with the web application to the native code module and processes the input data using the native code module to obtain output data. Finally, the system provides the output data to the web application for use by the web application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09176754&OS=09176754&RS=09176754
owner: Google Inc.
number: 09176754
owner_city: Mountain View
owner_country: US
publication_date: 20081107
---
This application claims priority under 35 U.S.C. section 119 e to U.S. Provisional Application Ser. No. 61 081 327 entitled Method and System for Executing Applications Using Native Code Modules by inventors Evangelos Kokkevis Matthew Papakipos and David C. Sehr filed on 16 Jul. 2008.

The subject matter of this application is also related to the subject matter in a co pending non provisional application by J. Bradley Chen Matthew T. Harren Matthew Papakipos David C. Sehr and Bennet S. Yee entitled Method for Validating an Untrusted Native Code Module having Ser. No. 12 117 634 and filing date 8 May 2008.

The subject matter of this application is also related to the subject matter in a co pending non provisional application by J. Bradley Chen Matthew T. Harren Matthew Papakipos David C. Sehr Bennet S. Yee and Gregory Dardyk entitled Method for Safely Executing an Untrusted Native Code Module on a Computing Device having Ser. No. 12 117 650 and filing date 8 May 2008.

The present embodiments relate to techniques for executing applications on computer systems. More specifically the present embodiments relate to a method and system for executing web applications using native code modules.

Computer systems may include a number of native applications that require significant processing resources to execute. Such applications may perform tasks such as image processing audio and video decoding and mixing mathematical modeling and or simulation. To run efficiently these applications are often written in a combination of general purpose programming languages such as C or C and low level languages such as assembly language. Consequently the applications may be restricted to specific platforms involve a lengthy installation process and may pose a security risk to the computer systems on which the applications are installed.

On the other hand web applications which have become more prevalent in recent years are typically written in scripting languages that are more secure and require no installation. However web applications may lack the performance capabilities of native applications. In particular a web application may run one or two orders of magnitude slower or more than a native application. As a result web applications are currently unable to implement computationally intensive features that are available in native applications.

Some embodiments provide a system that executes a web application. During operation the system loads the web application in a web browser and loads a native code module associated with the web application into a secure runtime environment. Next the system provides input data associated with the web application to the native code module and processes the input data using the native code module to obtain output data. Finally the system provides the output data to the web application for use by the web application.

In some embodiments the system also validates the native code module prior to loading the native code module into the secure runtime environment.

In some embodiments the output data is provided to a trusted plugin associated with the web browser for use by the trusted plugin.

In some embodiments the output data is used by the trusted plugin to render graphics for the web application.

In some embodiments the native code module provides at least one of simulation signal processing artificial intelligence modeling and analysis for the web application.

In some embodiments the secure runtime environment is implemented by a plugin associated with the web browser.

In some embodiments the input data is provided to the native code module using a first inter module communication IMC buffer and the output data is provided to the web application using a second IMC buffer.

In some embodiments processing the input data involves performing a series of mathematical calculations using the input data.

The following description is presented to enable any person skilled in the art to make and use the disclosed embodiments and is provided in the context of a particular application and its requirements. Various modifications to the disclosed embodiments will be readily apparent to those skilled in the art and the general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the disclosed embodiments. Thus the system is not limited to the embodiments shown but is to be accorded the widest scope consistent with the principles and features disclosed herein.

The data structures and code described in this detailed description are typically stored on a computer readable storage medium which may be any device or medium that can store code and or data for use by a computer system. The computer readable storage medium includes but is not limited to volatile memory non volatile memory magnetic and optical storage devices such as disk drives magnetic tape CDs compact discs DVDs digital versatile discs or digital video discs or other media capable of storing computer readable media now known or later developed.

The methods and processes described in the detailed description section can be embodied as code and or data which can be stored in a computer readable storage medium as described above. When a computer system reads and executes the code and or data stored on the computer readable storage medium the computer system performs the methods and processes embodied as data structures and code and stored within the computer readable storage medium.

Furthermore the methods and processes described below can be included in hardware modules. For example the hardware modules can include but are not limited to application specific integrated circuit ASIC chips field programmable gate arrays FPGAs and other programmable logic devices now known or later developed. When the hardware modules are activated the hardware modules perform the methods and processes included within the hardware modules.

Embodiments of the system provide a method and system for executing a web application. The web application may be loaded in a web browser and executed on a computing system such as a personal computer PC a mobile phone a personal digital assistant PDA a graphing calculator a portable media player a global positioning system GPS receiver and or another electronic computing device. The web application may be obtained by the computing system from a server using a network connection with the server. For example the web application may be downloaded over the Internet from a website.

More specifically embodiments of the technique provide a method and system for executing the web application using a native code module. The native code module may contain native code that is executed within a secure runtime environment. In addition the native code module may be used to process data for the web application to provide functionality associated with computationally intensive tasks such as simulation signal processing artificial intelligence and or modeling. As a result embodiments of the system may provide a framework for combining the portability and security of web applications with the native performance of binary code.

Computing system may correspond to an electronic device that provides one or more services or functions to a user. For example computing system may operate as a mobile phone personal computer PC global positioning system GPS receiver portable media player personal digital assistant PDA and or graphing calculator. In addition computing system may include an operating system not shown that coordinates the use of hardware and software resources on computing system as well as one or more applications e.g. web browser web application that perform specialized tasks for the user. For example computing system may include applications such as an email client address book document editor web browser and or media player. To perform tasks for the user applications may obtain the use of hardware resources e.g. processor memory I O components wireless transmitter etc. on computing system from the operating system as well as interact with the user through a hardware and or software framework provided by the operating system as described below.

Those skilled in the art will appreciate that computing system may include functionality to execute both native applications and non native applications. In other words computing system may include native applications such as web browser that are locally installed on computing system and specific to the operating system and or one or more hardware devices on computing system . Such applications may be compiled into native e.g. machine code that executes directly on one or more central processing units CPUs of computing system . Code execution in the applications may further be optimized by writing the applications in a combination of general purpose programming languages e.g. C C etc. and assembly language as well as utilizing libraries that provide hardware acceleration e.g. graphics hardware acceleration to the applications. However the installation of native applications may compromise computing system and private data stored on computing system .

Computing system may also include functionality to execute platform independent non native applications. In particular computing system may obtain web application from one or more servers e.g. server server x using a network connection with the server s and load web application in web browser . For example web application may be downloaded from an application server over the Internet by web browser .

Once loaded web application may provide features and user interactivity comparable to that of native applications on computing system . For example web application may function as an email client document editor media player computer aided design CAD system and or computer game. Web application may also include dynamic user interface elements such as menus buttons windows sub windows icons animations and or other graphical objects that emulate analogous user interface elements in native applications. In other words web application may correspond to a rich Internet application RIA .

Furthermore web application may execute on computing system regardless of the type of platform e.g. operating system drivers etc. associated with computing system . Though platform independent applications such as web application may be more portable and secure than native applications such cross platform applications may lack certain performance capabilities of native applications.

More specifically non native applications such as web application may be written using scripting languages that are interpreted rather than compiled such as Javascript Javascript is a registered trademark of Sun Microsystems Inc. . The interpretive nature of web application and or other non native applications may result in significantly slower execution times for the non native applications than those of compiled native applications. Non native applications may also be unable to utilize low level libraries and or application programming interfaces API that are available for use by native applications. Consequently non native applications may provide limited functionality in certain tasks.

In particular web application may be unable to provide computationally intensive features that are available in native applications. These features may include but are not limited to 

To provide computationally intensive features to the user a native code module associated with web application may be used to execute computationally intensive code on behalf of web application . Like web application native code module may be obtained from one or more servers e.g. server server x by web browser . For example web application may provide a hyperlink to native code module on the Internet. Web browser may then download native code module from the Uniform Resource Locator URL specified in the hyperlink. Alternatively native code module may be specified by the user or by an external source such as another web application and or a native application.

More specifically native code module may correspond to a software module containing native code that runs directly on hardware provided by computing system such as a CPU. As a result native code module may be used to perform tasks that require substantial access to CPU resources on computing system . In particular native code module may provide one or more of the computationally intensive features listed above to a user of web application by processing input data associated with web application . The input data may be processed by performing a series of mathematical calculations using the input data such as the mathematical operations described above.

Output data obtained from the processed input data may be provided to web application for use by web application . For example the output data may be provided to the user by web application or used by web application to perform additional tasks for the user. The output data may also be provided as input data to other components associated with web application such as a native application a trusted plugin and or one or more servers e.g. server server x .

For example web application may provide audio or video encoding and or decoding capabilities to the user of computing system . First the user may specify an audio or video file to decode and or an audio or video stream to encode. Next web application may obtain a native code module e.g. native code module containing a codec for the file or stream from a server e.g. server server x . The native code module may then execute on a CPU of computing system to provide the codec s encoding and or decoding capabilities to the user.

Similarly web application and native code module may be used by computing system to perform computationally intensive operations for a distributed computing cluster. More specifically native code module may be obtained by web application and executed by plugin to create a node in the distributed computing cluster on computing system . The computationally intensive operations may be performed by native code module during periods of CPU underutilization on computing system . Output from native code module may be sent to a server e.g. server server x to aid in the analysis of complex problems such as protein folding unsolved mathematics problems detection of gravitational waves and or stock forecasting.

In one or more embodiments plugin includes a variety of mechanisms to ensure the safe execution of native code module . In particular native code module may be validated by a validator provided by plugin prior to execution. Native code module validation is described in a co pending non provisional application by inventors J. Bradley Chen Matthew T. Harren Matthew Papakipos David C. Sehr and Bennet S. Yee and filed on the same day as the instant application entitled Method for Validating an Untrusted Native Code Module having Ser. No. 12 117 634and filing date 8 May 2008 which is incorporated herein by reference.

Once native code module is validated native code module may be loaded into a secure runtime environment provided by plugin . Native code execution in a secure runtime environment is described in a co pending non provisional application by inventors J. Bradley Chen Matthew T. Harren Matthew Papakipos David C. Sehr Bennet S. Yee and Gregory Dardyk and filed on the same day as the instant application entitled Method for Safely Executing an Untrusted Native Code Module on a Computing Device having Ser. No. 12 117 650 and filing date 8 May 2008 which is incorporated herein by reference.

While isolating native code modules from all other software and hardware components preserves security software modules typically do not execute in isolation and need to communicate results to a client application and or access system resources. Embodiments of the present invention enable limited communication between the native code module and other system components using a secure runtime environment.

The secure runtime environment moderates both which resources can be accessed and communicated with by the native code module as well as how such resources are accessed thereby ensuring that the native code module relies entirely on the secure runtime environment to access system services and cannot perform sensitive operations without explicit mediation. For instance a native code module cannot read or change file system state initiate network or inter module and or inter process communications or launch computations outside of an isolated sandbox and instead must rely on the secure runtime environment to perform such interactions if allowed on its behalf.

One embodiment of the present invention provides a system that safely executes a native code module on a computing device. During operation the system receives the native code module which is comprised of untrusted native program code expressed using native instructions in the instruction set architecture associated with the computing device. The system then loads the native code module into a secure runtime environment and proceeds to execute a set of instructions from the native code module in the secure runtime environment. The secure runtime environment enforces code integrity control flow integrity and data integrity for the native code module. Furthermore the secure runtime environment moderates which resources can be accessed by the native code module on the computing device and or how these resources can be accessed. By executing the native code module in the secure runtime environment the system facilitates achieving native code performance for untrusted program code without a significant risk of unwanted side effects.

In some embodiments the system enforces data integrity by using sandboxing techniques that manage and or limit the memory segments that the native code module can access thereby ensuring that the untrusted program code in the native code module cannot perform unauthorized data reads or writes. In some embodiments these techniques leverage hardware support for segmented memory to enforce data integrity.

In one embodiment of the present invention creating a system compliant native code module involves following a set of restrictions and or policies that preserve the integrity and security of code control flow and data. Preserving code integrity involves ensuring that only safe instructions can be executed by the native code module and that no unsafe instructions can be inserted at runtime via dynamic code generation or self modifying code. Restricting the instruction set which is available to the native code module also can help to make decoding the native code module during validation more reliable. Preserving control flow integrity involves ensuring that control flow instructions in the native code module cannot violate security by calling instructions outside of the native code module. Preserving data integrity involves ensuring that a native code module cannot perform wild reads or wild writes e.g. reads or writes outside of a specified data region associated with the native code module .

In one embodiment of the present invention the validator helps to achieve code control flow and data integrity for an x86 native code module in part by ensuring that a set of unsafe instructions from the x86 ISA instruction set architecture are not included in a native code module. For instance the validator may disallow the use of the following instructions and or features in a native code module 

Furthermore to provide effective code discovery and control integrity the system also restricts a set of control transfer instructions. Specifically unmodified indirect control flow instructions that can transfer execution to arbitrary locations in memory need to be modified to guarantee that all indirect control flow targets are in memory regions that are valid for the native code module. One embodiment of the present invention limits indirect control flow instructions by 1 not allowing return far call and far jump instructions 2 ensuring that call and jump imp instructions only use relative addressing and are encoded in a sequence of instructions such that the control flow remains within the native code module 3 ensuring that register indirect call and jump instructions are encoded in a sequence of instructions such that the control flow remains within the native code module and targets valid instruction addresses within the module and 4 not allowing other indirect calls and jumps.

Furthermore because native code module may include binary code that runs directly on hardware native code module may be platform independent with respect to the operating system of computing system web browser and or other software components on computing system . As described in the above referenced applications plugin and or native code module may also include mechanisms for executing on a variety of instruction set architectures including the use of fat binaries and binary translators.

Native code module may process input data to obtain output data which is placed into a second IMC buffer . More specifically native code module may obtain output data by performing a series of mathematical calculations using input data . For example native code module may perform a series of matrix operations mathematical transforms and or inverse transforms and or other floating point operations using input data . Output data may then be obtained from IMC buffer for use by web application and or a trusted plugin associated with web application . In particular web application and or trusted plugin may use output data to perform additional tasks for a user of web application or an entity associated with web application . For example output data may be stored in a file that is provided to the user plotted in a chart or graph uploaded to a database for a distributed computing cluster and or used to modify the execution of other applications. Output data may also be used to animate a 3D graphics model as discussed below with respect to .

In one or more embodiments IMC buffers correspond to shared memory buffers that are used to facilitate data intensive collaboration between native code module and external components such as web application and or trusted plugin . Furthermore sharing of data via IMC buffers may be managed by an IMC runtime as described in the above referenced applications.

As shown in plugin includes a physics engine that executes on a CPU . In one or more embodiments physics engine corresponds to a native code module that is executed within a secure runtime environment provided by plugin . Physics engine may be provided by 3D application e.g. downloaded over the Internet and validated prior to execution in plugin . Moreover physics engine may include native code that executes directly on CPU within the constraints set by the secure runtime environment. The execution of physics engine on CPU may thus provide 3D application with real time animation of objects within 3D application .

Similarly graphics plugin includes a rendering engine that communicates with a graphics processing unit GPU . In one or more embodiments graphics plugin corresponds to a trusted plugin such as trusted plugin of . In other words graphics plugin may be downloaded from a trusted source by web browser and installed by web browser to render graphics for 3D application . Furthermore rendering engine may provide graphics hardware acceleration by performing calculations related to graphics rendering using GPU . Graphics plugin and rendering engine are described in a co pending non provisional application by inventors Vangelis Kokkevis Matthew Papakipos and Robin Green and filed on the same day as the instant application entitled WEB BASED GRAPHICS RENDERING SYSTEM having Ser. No. 12 174 586 and filing date filing date Jul. 16 2008.

In one or more embodiments 3D application coordinates the joint execution of physics engine and rendering engine . More specifically 3D application may make method calls to both plugin and graphics plugin for loading a graphics model into rendering engine and a corresponding physics model into physics engine . 3D application may also facilitate the passing of data between plugin and graphics plugin using shared memory as described below. On the other hand plugin and graphics plugin may interface directly with one another to synchronize the animation and rendering of the graphics model.

In particular 3D application may provide an input file that describes a graphics model to graphics plugin . Alternatively 3D application may make a set of method calls that describe the graphics model to graphics plugin . The graphics model may then be loaded into the internal memory of graphics plugin . Next 3D application may request the allocation of one or more IMC buffers in a region of shared memory by an IMC runtime provided by plugin and or graphics plugin . Graphics plugin may then load data relevant to physics simulation into IMC buffers . For example graphics plugin may copy vertex positions normals triangle indices and or transformation matrices into IMC buffers .

To animate the graphics model physics engine may read from IMC buffers to create a physics model corresponding to the graphics model in graphics plugin . Additional information related to the physics model such as parameters may be obtained from 3D application by plugin . Next physics engine may perform a series of physics simulation calculations that update the physics model. For example physics engine may calculate vertex positions and velocities based on a set of forces acting on objects in the physics model. Plugin may then update IMC buffers with new vertex positions velocities and or other data. Finally the new data is read from IMC buffers by graphics plugin and used to update the graphics model. Rendering engine may then pass the updated graphics model to GPU for rendering.

Graphics rendering and animation may continue to be provided by rendering engine and physics engine during execution of 3D application . For example physics engine may continue to update the graphics model as long as forces are felt by objects in the graphics model. Additional objects and or forces may also be introduced into the graphics model and or physics model by 3D application . Similarly rendering engine may render the graphics model at a frame rate specified by 3D application and or supported by GPU . As a result physics engine and rendering engine may run at different frequencies. For example physics engine may run four times faster than rendering engine . As a result the graphics model may be rendered once by rendering engine for every four updates to the graphics model made by physics engine .

Initially a web application is loaded into a web browser operation . The web application may be obtained from a server by the web browser. Furthermore the web application may be used to provide computationally intensive features such as financial modeling computational math or science and or AI to a user. To implement such features in a practical manner a native code module associated with the web application may be obtained operation . For example the native code module may be downloaded from a source specified by the web application. The native code module may also be validated operation prior to executing the native code module. If the native code module is not validated the native code module is not executed and discarded.

If the native code module is validated the native code module is loaded into a secure runtime environment operation . The secure runtime environment may be provided by a plugin associated with the web browser. Next input data associated with the web application is provided to the native code module operation . The input data may be provided to the native code module using an IMC buffer.

The input data is then processed by the native code module operation to obtain output data operation . The output data is then provided to the web application operation for use by the web application. As with the input data the output data may be provided to the web application using an IMC buffer. For example the application may use the output data for simulation signal processing artificial intelligence modeling and or analysis. In addition the output data may optionally be provided to a trusted plugin operation associated with the web application for use by the trusted plugin. For example the output data may be used by the trusted plugin to render graphics for the web application.

The foregoing descriptions of embodiments of the system have been presented only for purposes of illustration and description. They are not intended to be exhaustive or to limit the system to the forms disclosed. Accordingly many modifications and variations will be apparent to practitioners skilled in the art. Additionally the above disclosure is not intended to limit the system. The scope of the present system is defined by the appended claims.

