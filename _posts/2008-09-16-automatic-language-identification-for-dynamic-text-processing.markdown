---

title: Automatic language identification for dynamic text processing
abstract: Methods and systems which utilize, in one embodiment, automatic language identification, including automatic language identification for dynamic text processing. In at least certain embodiments, automatic language identification can be applied to spellchecking in real time as the user types.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08464150&OS=08464150&RS=08464150
owner: Apple Inc.
number: 08464150
owner_city: Cupertino
owner_country: US
publication_date: 20080916
---
This application is related to and claims the benefit of the filing date of U.S. Provisional Application No. 61 059 762 filed on Jun. 7 2008.

Automatic language identification generally is the process of examining unlabeled data and determining the language or languages for any linguistic content it may contain. Examples can be found in research and in industry of automatic language identification as applied to varied data types including speech data images that may contain text and textual data. Here we are concerned only with automatic language identification as applied to textual data.

Automatic language identification is commonly used for identifying the language used in an unknown document for example a web page obtained from the internet. Many text document formats include mechanisms by which they may be manually labeled as to their language but these mechanisms often are not used or contain unreliable information so automatic language identification may often be needed. In many cases this is combined with the detection of the text encoding in use since mechanisms for labeling encodings suffer from the same problems. Automatic language identification is often used in data mining applications which may need to scan a large collection of heterogeneous documents for example Google is known to use automatic language identification as part of its initial processing phase when it reads web pages to be indexed.

Automatic language identification of this sort typically uses a combination of methods notably methods based on gathering statistics about characters and combinations of characters and dictionary based methods using word lists from various languages. These methods are all fairly well known and there is a significant body of research about them. Apple Inc. shipped an automatic language identification API with Mac OS X starting in 10.5.

Word processing and other text document applications often provide various features that depend on language such as spelling and grammar checking hyphenation and so forth. However these applications usually require that documents or portions of documents be manually labeled as to their language in order for these features to work correctly in general. Typically a default language will be chosen based on the user s preference and text in any other language will need to be manually labeled in general an arbitrary portion of text as small as a paragraph sentence or single word can be so marked.

Microsoft Word does not appear to use automatic language identification at all. Arbitrary portions of text may be manually labeled as to their language and this language is used for spelling and grammar checking and for various other processes either immediately as the user types or subsequently when processing is requested. Microsoft Word is typical of most applications in its class in this regard.

Google Does appears to use automatic language identification for spellchecking but only on a whole document basis users may choose either a single language to be used for spellchecking an entire document or Auto and in the Auto case a single language is chosen automatically for the entire document. Google Does apparently uses this language information only for spellchecking and spellchecking is performed only when manually requested not immediately while the user types.

A text system Cocoa Text System in a prior version of Mac OS X included an existing spellchecking feature that is similar in some ways to automatic language identification referred to as multilingual spellchecking. When multilingual spellchecking is turned on words are identified as correctly spelled if they are correct in any of the languages known to the spellchecker. However multilingual spellchecking does not use automatic language identification to identify the language of the text from context before spellchecking it merely assigns a misspelled word the language in which the last previous word was found to be correctly spelled. In addition this existing multilingual capability applies only to spellchecking and not to any other feature.

Present invention relates to various embodiments which utilize automatic language identification including automatic language identification for dynamic text processing.

A method according to one embodiment includes determining by a machine a language of a first portion of a document and determining by the machine a language of a second portion of a document and using the determination of the language of each of the first and second portions to perform automatic or user invoked modifying functions such as a spellchecking function on at least one of the first and the second portions. This method may further include determining which of the first and the second portions is being operated on currently by a user and dynamically selecting modifying functions based on the portion being currently operated on. This method which is a machine implemented method may also include dynamically selecting as a user types in either the first or the second portions between a spellchecking function for a first language in the first portion and a spellchecking function for a second language in the second portion.

According to another embodiment a machine implemented method includes invoking a document modifying function to modify a document and determining automatically in response to invoking the document modifying function a language of the document. This method may further include determining in response to determining the language a particular version of the document modifying function. For example a system may receive text as a user types text and automatically determine by the machine the language of the text entry. This determination is automatic and done by the machine and done in response to receiving the text entry without requiring the user to request a language identification. The method may further include using the language determined by the machine to perform a particular modifying function based upon the language automatically determined. For example spellchecking may be automatically performed for the determined language if the autocorrect feature correct as type is enabled.

According to another aspect of the present invention an embodiment of a machine implemented method includes providing an interface such as an application programming interface to allow a plurality of user applications to request an automatic language identification service and responding to a request from a user application with an identification of a language of a least a portion of a document being processed by the user application. In one implementation the automatic identification service may be configured to identify different languages for different portions of the document and the automatic language identification service may be a system level service available to the plurality of applications through a call to the service.

According to another embodiment a machine implemented method includes a spellchecker or other document modifying function which determines if the language determined by the automatic identification service is correct. If the spellchecker determines another language would be more appropriate the spellchecker sends the language back to the automatic language identifier for use by the rest of the system.

Other methods are also described herein and data processing systems which perform these methods and other aspects of the inventions are also described as well as machine readable media.

Various embodiments and aspects of the inventions will be described with reference to details discussed below and the accompanying drawings will illustrate the various embodiments. The following description and drawings are illustrative of the invention and are not to be construed as limiting the invention. Numerous specific details are described to provide a thorough understanding of various embodiments of the present invention. However in certain instances well known or conventional details are not described in order to provide a concise discussion of embodiments of the present inventions.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearance of the phrase in one embodiment in various places in the specification do not necessarily refer to the same embodiment.

At least certain embodiments of the invention can provide the following features. Automatic language identification can be applied to spellchecking in real time as the user types. An example of this is shown in . The application of automatic language identification to spellchecking may also be done on a fine grained basis. At least certain embodiments allow the use of different languages on a per paragraph or per sentence basis which are different portions of same document. shows an example of such a method in which different languages may be identified or determined in different portions of the same document. In at least certain embodiments the application of automatic language identification to spellchecking can be performed on a per script basis. For example certain embodiments can detect separate languages for separate scripts for example if both Russian written in the Cyrillic alphabet and English written the Latin alphabet are in use certain embodiments can detect both of these different languages. In at least certain embodiments a spellchecking system can provide feedback to an automatic language identification system in other words a spellchecking process may include a mechanism to modify the result of the automatic language detection if the spellchecking process can determine that the automatic language detection process incorrectly determined the language. An example of such a method is shown in . In at least certain embodiments the use of automatic language identification can be used in processes other than spellchecking. These processes or text processing functions can include but is not limited to grammar checking automatic spelling and grammar corrections hyphenation conversion of ASCII quotation marks to other quotation marks smart quotes making language dependent typographic choices such as varying fonts glyphs or ligatures capitalization sorting autocompletion displaying dictionary and thesaurus information detection of special items such as names dates and addresses text to speech conversion providing accessibility information to users with various impairments transliteration and special purpose operations such as converting between simplified and traditional Chinese forms.

In at least certain embodiments all of these processes can be made available to most or all uses of text on a data processing system. For example these processes can be available through API s which can be used by user applications running on the data processing system by making calls to the text services on the system. shows an example of a software architecture which supports such systems level availability for text services including automatic language identification and spellchecking which can utilize the automatic language identification before attempting to correct spelling etc.

At least certain embodiments of the present invention allow users to enter text in a variety of languages without having to worry about labeling text by language or switching any language settings.

One embodiment of the invention may be an improved version of the Mac OS X operating system from Apple Inc. of Cupertino Calif. and this improved version may be implemented by adding features to the Cocoa text system in Mac OS X and hence potentially to all Mac OS X applications that make use of the Cocoa text system that will a use automatic language identification b to identify the languages of arbitrary portions of text potentially as small as a single paragraph sentence or single word c in order to make use of that information for spelling and grammar checking and other related text processing features. This identification may occur either 1 immediately as the user types the text or 2 subsequently when processing is being performed on the text. At least certain embodiments of the present invention allow these features to be available to every application that allows the entry of text not just word processing applications like TextEdit. shows an example of a software architecture which allows all or most applications which allow entry of text to use one or more embodiments of the invention.

This sort of automatic language identification will ordinarily proceed in two phases in one embodiment. In the first phase standard language identification mechanisms will be used to attempt to identify the languages present in a portion of text from various characteristics of the text. Multiple languages may be identified within the same portion of text for example text containing a combination of Latin and Cyrillic might be identified as being in French and Ukrainian respectively. If a sufficiently clear identification cannot be made default languages will be chosen based on other text in the document previous documents from the same user or the user s localization preferences. In the optional second phase spelling and or grammar checking will be performed on the portion of text in question using the languages so identified and depending on the results of those checks the initial identification may be determined to be incorrect and may be revised either for the entire portion or for smaller pieces of it.

In operation the automatic language identifier service sends the identification of the determined language to a spellchecker in one embodiment.

In operation the spellchecker determines whether or not the language was properly identified. In one embodiment it determines this based upon the amount and or nature of the misspellings which indicate that the wrong language was determined. Factors for determining if the wrong language was determined may include the length of the text analyzed. Shorter length text may have a smaller threshold to overcome before the spellchecker determines the wrong language was determined whereas longer length text may have a larger threshold.

If the spellchecker determines that the language was incorrectly determined then it attempts to correct spelling with alternative languages and selects an alternative language that achieves an appropriate level of misspellings. The spellchecker may try the secondary sources previously determined by the automatic language identifier service in operation . In at least certain embodiments other possibilities for alternatives may be taken from information about the user. For example the user s indicated language and spelling preferences languages used elsewhere in the same document and languages that the user has used previously in other documents. This alternative language is then sent in operation back to the automatic language identifier which can then use the alternative language as the correct language for the document or portion of the document for use by the rest of the system e.g. grammar checking etc. .

As shown in the computer system which is a form of a data processing system includes a bus which is coupled to a processing system and a volatile memory and a non volatile memory . The processing system may be a microprocessor from Intel which is coupled to an optional cache . The bus interconnects these various components together and also interconnects these components to a display controller and display device and to peripheral devices such as input output I O devices which may be mice keyboards modems network interfaces printers and other devices which are well known in the art. Typically the input output devices are coupled to the system through input output controllers. The volatile memory is typically implemented as dynamic RAM DRAM which requires power continually in order to refresh or maintain the data in the memory. The nonvolatile memory is typically a magnetic hard drive a flash semiconductor memory or a magnetic optical drive or an optical drive or a DVD RAM or other types of memory systems which maintain data e.g. large amounts of data even after power is removed from the system. Typically the nonvolatile memory will also be a random access memory although this is not required. While shows that the nonvolatile memory is a local device coupled directly to the rest of the components in the data processing system it will be appreciated that the present invention may utilize a nonvolatile memory which is remote from the system such as a network storage device which is coupled to the data processing system through a network interface such as a modem or Ethernet interface. The bus may include one or more buses connected to each other through various bridges controllers and or adapters as is well known in the art.

It will be apparent from this description that aspects of the present invention may be embodied at least in part in software. That is the techniques may be carried out in a computer system or other data processing system in response to its processor such as a microprocessor executing sequences of instructions contained in a machine readable storage medium such as a memory e.g. memory and or memory . In various embodiments hardwired circuitry may be used in combination with software instructions to implement the present invention. Thus the techniques are not limited to any specific combination of hardware circuitry and software nor to any particular source for the instructions executed by the data processing system. In addition throughout this description various functions and operations are described as being performed by or caused by software code to simplify description. However those skilled in the art will recognize what is meant by such expressions is that the functions result from execution of the code by a processor such as the processing system .

In the foregoing specification the invention has been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

