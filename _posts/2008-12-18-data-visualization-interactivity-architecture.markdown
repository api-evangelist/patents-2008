---

title: Data visualization interactivity architecture
abstract: A data visualization interactivity architecture may be provided. The architecture may allow the creation of a data visualization, such as a chart, and may expose an interactive feature on the visualization. The architecture may provide integration with multiple rendering platforms. When a user selects the exposed feature, the architecture may translate the selection into a common format and modify the data visualization according to layout rules independent of the rendering platform.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08176096&OS=08176096&RS=08176096
owner: Microsoft Corporation
number: 08176096
owner_city: Redmond
owner_country: US
publication_date: 20081218
---
Data visualization interactivity architecture is a process for enabling interactive data visualization in a way that may maximize code sharing across many different rendering platforms. In some situations data visualization features need to be re implemented entirely within different rendering platforms because of the significant differences among the rendering platforms. Interactive data visualization may allow users to manipulate parts of a visualization such as a scatter chart to explore the data. For example a scatter chart may comprise thousands of data points that may make it difficult to analyze trends or patterns. Dragging a selection marquee around a set of data points in the scatter chart may zoom in on the data points thus revealing more detail. The conventional strategy is to entirely re implement the zoom feature for each of a multitude of rendering platforms such as GDI GDI Silverlight WPF and C winforms. This often causes problems because the conventional strategy may result in a great deal of duplicate effort and possibility for incompatibility errors and inconsistencies in presentation. The motivation for developing a sharable architecture for interactive data visualization serves a growing user need for consistent interactivity across a plethora of rendering technologies and applications using them.

A data visualization interactivity architecture may be provided. This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter. Nor is this Summary intended to be used to limit the claimed subject matter s scope.

A data visualization interactivity architecture may be provided. The architecture may allow the creation of a data visualization such as a chart and may expose an interactive feature on the visualization. The architecture may provide integration with multiple rendering platforms. When a user selects the exposed feature the architecture may translate the selection into a common format and modify the data visualization according to layout rules independent of the rendering platform.

Both the foregoing general description and the following detailed description provide examples and are explanatory only. Accordingly the foregoing general description and the following detailed description should not be considered to be restrictive. Further features or variations may be provided in addition to those set forth herein. For example embodiments may be directed to various feature combinations and sub combinations described in the detailed description.

The following detailed description refers to the accompanying drawings. Wherever possible the same reference numbers are used in the drawings and the following description to refer to the same or similar elements. While embodiments of the invention may be described modifications adaptations and other implementations are possible. For example substitutions additions or modifications may be made to the elements illustrated in the drawings and the methods described herein may be modified by substituting reordering or adding stages to the disclosed methods. Accordingly the following detailed description does not limit the invention. Instead the proper scope of the invention is defined by the appended claims.

A data interactivity visualization architecture may be provided. Consistent with embodiments of the present invention a Windows data visualization platform and an OS X data visualization platform may each comprise a shared core comprising software libraries and or utilities for providing interactive visualizations. Shared core may be implemented for example in C or C and may be platform independent. Shared core may comprise visualization utilities for providing layouts shapes and or geometry line services 3 dimensional rendering animation frame generation and or interactive hotspots. application programming interfaces APIs .

Data visualization platform may represent a set of known interactivity features gathered from existing data visualization clients. For example shared core may comprise utilities for displaying at least one of a pie chart a bar chart a scatter chart a column chart a line chart an area chart a doughnut chart a radar chart a surface chart a bubble chart and a stock chart. Each type of chart may comprise at least one interactive feature such as a data modification feature a data filtering feature and a visual adjustment feature. Each chart type may comprise interactive features specific to that type and or interactive features common to multiple types. For example a pie chart may comprise a chart type specific visual adjustment feature enabling a user to click on and select a wedge of the pie chart and enlarge the wedge and display additional information about the underlying data represented by the wedge. The pie chart may further comprise a feature common to multiple types such as enabling a user to drag a legend display to a different location. Data modification features may comprise receiving changes to underlying data elements of the visualization such as changing the value of a point on a graph and updating the visualization accordingly. Data filtering features may comprise enabling selection of a subset of data points such as through a search zoom pan or other subset selection. Visual adjustment features may comprise receiving changes to the visual appearance of the visualization such as changing a color a line width and or type and or a point representation icon. Other interactivity features may comprise moving a graph axis and or reference line adjusting a column and or bar representation width iterating a data point set providing additional information about a section and or point of the visualization predicting at least one effect of a data change copying a visualization in whole and or in part sorting data reordering data points and or legend entries resizing data points and or structural elements of the visualization highlighting pivoting rotating and displaying a tooltip. Consistent with embodiments of the invention user selection of an interactive feature may be achieved through any input received from a user input device associated with an exposed interactive feature such as a movement of a pointer over an area of the visualization a keyboard input and or a mouse movement and or click.

Windows data visualization platform and OS X data visualization platform may comprise shared application programming interfaces APIs such as C API and C API . Data visualization platform may comprise Windows platform specific utilities such as a Windows file I O library and a Windows user interface UI library . Consistent with embodiments of the invention file I O library and UI library may be implemented as dynamically linked libraries DLLs . Data visualization platform may comprise OS X platform specific utilities such as an OS X file I O library and an OS X user interface UI library .

Shared core may expose the interactivities in each chart type via HotSpot objects that may surface an area of the chart for which an interactive feature may be available. For each rendering platform an integration object may comprise integration code to provide generic interface information usable by the data visualization platform for that rendering platform. For example Windows data visualization platform may comprise a Win32 integration object and OS X data visualization platform may comprise an OS X integration object . The integration object for each data visualization platform may comprise software libraries and to provide a mouse cursor feedback and hit testing utility a drag drop loop utility that may capture mouse down mouse move and mouse up e.g. click drag and release a utility to draw a drag image that may be supplied by shared core while dragging and a utility to commit a changelist. The changelist may comprise a list of user inputs such as mouse movements and or keystrokes recorded during a drag drop loop. The changelist may describe data changes e.g. change value reorder values filter by area as well as shape changes move rotate size .

Each integration object may be responsible for converting platform specific user input data into a common version for submission to shared core . The integration object may not need any chart specific information to provide these utilities allowing the single object to expose all of the interactive features associated with each chart type provided by shared core .

Various chart types may be exposed by the data visualization platform DVP and may each have specific areas of interactivity that are unique to those chart types. To expose those interactive areas the top edge of a column for example the DVP may expose a hotspot. Each chart type may encode various hot spots specific to that chart type and expose the interactivity through that. A client may encode a very generic interface that may allow the client to make use of the interactive features exposed by the hotspots based on an interaction with a mouse and a simple commit step. The generic interface may comprise three pieces mouse hit testing logic a drag and drop loop and a commit step. Once those pieces are in place the client may hook into all of the chart specific hotspots that the DVP may surface.

Hit testing may comprise moving a user input device around and the client requesting information from the DVP as to what the user input cursor is over. The DVP may respond with that information for example a data point or a shape or nothing. The DVP may also will say inform the client that a hotpot is under the cursor. The client may then receive a reference to the hotspot and go into a drag and drop loop. As the client s user input cursor moves such as when a user has the mouse down and dragging the cursor around screen the client may update the hotspot with its location. The hotspot may then provide a dragged image to get the user s feedback. For example the hotspot may provide a wire frame and or a full fledged shape with a fill or a gray. Once the user releases the mouse the hotspot object may commit the changes and the changes may be encoded for the DVP. Consistent with embodiments of the invention the changes may be stored in a changelist object that the user and or the client may apply in whole and or in part. When the changes are committed the DVP may reflect all those changes internally to the data visualization.

Interactivity may be accomplished primarily via clicking and or dragging an input device such as a mouse a touchpad a multi touch display a touch screen and or a stylus. Keyboard based interactivity may also be provided. Consistent with embodiments of the invention each client may support additional user interface devices and or features. For example Macintosh client may provide support for an Apple Remote user interface device that may not be supported by Windows client .

Interactive locations in a visualization may be exposed via a built in collection of hotspot objects. Each visualization layout type may expose hotspots specific to the layout. For example a column chart may expose a hotspot to drag the top edge of the column vertically. A pie chart may expose a hotspot for each side of a pie slice that can be dragged in a clockwise or counterclockwise direction. Moving or rotating shapes such as legends and titles may be exposed via generic shape hotspots.

Hotspots may be exposed to a client via hit testing. The client may use an integration object to determine what objects are beneath a mouse cursor . Shared core may return a reference to a hit shape and or a reference to a newly created hotspot. Shared core may delegate hotspot detection to an active layout class for the chart that may analyze which geometry curves were hit. If no area corresponding to an interactive feature was hit shared core may return no hotspot reference. If a hotspot was hit shared core may create a new reference counted hotspot object that may record an initial hit test position. The rendering platform may get a description of what changes will occur and may display an appropriate cursor and or tooltip and or ignore the hotspot.

Once the client detects that a hotspot is being dragged with the mouse it may go into a standard drag drop loop. For example Windows client may enter an Object Linking and Embedding OLE drag and drop and or a simple message loop. Inside the loop each mouse movement by for example a method that reports a position to which mouse cursor has been dragged. The client may query the hotspot for an updated change list and or as a drag image such as a drag image . The type of change associated with a hotspot may change based on the location of the mouse. For example dragging a pie slice outward from a pie chart may simply move the shape whereas dragging the pie slice over another pie slice may reorder the data.

Drag image returned via a hotspot may be received by the client in the form of a geometry iterator that may be the same object used to draw the static image of the chart. Thus once a client is able to draw a chart it should be able to draw a drag image by invoking the same code. Inside shared core drag image may be generated by creating a temporary shape cloned from the original geometry and altered to reflect the current changelist.

When the mouse up event occurs the drag drop operation may be over and the changes may need to be committed. At this time the client may query the hotspot one last time for its change list and may commit the changelist to shared core to apply the changes internally. Consistent with embodiments of the invention the client may walks the change list and selectively apply the changes however it wishes. For example an Office chart client may push data changes back to an Excel worksheet letting changes trickle back to shared core at a later time.

Another exposed interactivity in line chart may comprise for example a visual adjustment feature such as a zoom operation. Win32 integration object may receive a mouse down e.g. mouse button click event from a user input device and begin tracking additional input and adding each input to a changelist until a mouse up e.g. muse button release event is received. For example a user may position cursor at one position and drag the mouse to select an area of line chart . Shared core may provide a platform independent graphical representation to the user to indicate the selected area such as drag image . Once the mouse up event is received Win32 integration object may commit the changelist to shared core that may in turn generate an updated visualization that may display an enlarged visualization of the selected area of line chart .

The hotspots exposed by shared core may represent a comprehensive set of known interactivities gathered from existing data visualization clients. There may be hotspots shared core did not expose that the client wants or there may be scenarios where a built in hotspot will not suffice. Consistent with embodiments of the invention shared core may expose additional APIs to allow the client to extend as necessary. For example shared core may expose APIs for clients to retrieve layout specific hit testing information to provide datapoint geometry iteration and or to provide what if change prediction.

Clients may want to understand what interesting parts of the layout are beneath the mouse cursor. For example Office apps may want to annotate a chart with a connector arrow from the drawing shapes. To do so shared core may need to provide sub element hit test information like Over data point 3 in series 1 or over the growth edge of a data point or over a value axis tickmark with value 10 .

Data points may be rendered as paths within a series shape. Clients may want to highlight individual data points e.g. on mouse hover and so may require the ability to iterate over the geometry specific to a single data point and not the entire series.

Clients may require a full chart to be handed back with the change predictively applied in a what if scenario. For example when reordering data points a client may wish to show a data point properly inserted into its new location rather than show an insertion marker ghost. To do this the client may create and hand a changelist to shared core which may then create a copy on write clone of the chart apply the changelist and hand back a geometry iterator pointed at the new chart for the client to draw.

Changes made to shared core via API access or user interaction e.g. hotspots should be undoable. To achieve this a transaction object may exist in shared core to allow the client to demark and record changes at a command level. For example the transaction object may expose a GetUndoRecord method that hands back an UndoRecord object to store undo redo information. The UndoRecord object may have Undo and Redo methods to be invoked from the client s undo redo commands. For user changes made via HotSpots the changelist object returned by the HotSpot may also expose a transaction object to track its undo redo state.

From stage method may advance to stage where computing device may expose at least one interactive feature for the data visualization. For example computing device may expose a hotspot associated with an interactive feature such as a data modification feature a data filtering feature and or a visual adjustment feature.

From stage method may advance to stage where computing device may provide an integration object associated with at least one of a plurality rendering platforms. For example computing device may use a rendering platform such as GDI GDI Silverlight WPF C winforms and or QT to render graphical displays and or data visualizations.

From stage method may advance to stage where computing device may receive a selection of at least one location on the data visualization from a user input device. For example a user may select a point on the data visualization using a mouse a stylus a keyboard and or a touch screen.

From stage method may advance to stage where computing device may determine whether the selected at least one location is associated with a hotspot. For example computing device may determine whether the selected at least one location comprises a data point a structural element of the data visualization such as an axis line a user interface menu item a user interface command element and or a data visualization control element.

If at stage computing device determines that the selected at least one location is associated with a hotspot method may advance to stage where computing device may translate the selection of the at least one interactive feature via the integration object into a common format associated with the data visualization platform. Translating the selection via the integration object into a common format is described below in greater detail with respect to . If at stage computing device determines that the selected at least one location is not associated with a hotspot method may return to stage where computing device may wait to receive another user input selection.

From stage method may advance to stage where computing device may update the data visualization according to the selected interactive feature. Once computing device updates the data visualization in stage method may then end at stage .

From stage subroutine may advance to stage where computing device may display a visual feedback associated with the at least one characteristic. For example computing device may display a visual feedback such as changing a cursor drawing a line drawing a shape changing a title changing a status display and or displaying a tooltip.

From stage subroutine may advance to stage where computing device may convert the captured selection characteristic from an encoding format associated with the rendering platforms to a common encoding format associated with the data visualization platform. For example the data visualization platform may use the associated integration object to convert the selection characteristic.

From stage subroutine may advance to stage where computing device may create a change list according to the converted at least one characteristic of the selection. For example computing device may create a changelist in response to receiving a mouse down selection characteristic. Once a changelist has been created computing device may append further selection characteristics to the changelist as they are received.

From stage subroutine may advance to stage where computing device may determine whether a user selection is complete. For example computing device may determine that the user has completed a drag drop loop by releasing the mouse button.

If at stage computing device determines that the user selection is complete subroutine may advance to stage where computing device may submit the changelist for processing. For example computing device may submit the changelist to the data visualization platform. If at stage computing device determines that the user selection is not complete subroutine may return to stage where computing device may wait to receive and capture another user input selection. Once computing device processes the changelist in stage subroutine may end and advance to stage of method .

An embodiment consistent with the invention may comprise a system for providing data visualization interactivity. The system may comprise a memory storage and a processing unit coupled to the memory storage. The processing unit may be operative to create a data visualization according to a shared layout expose at least one interactive feature for the data visualization provide an integration object associated with at least one of a plurality rendering platforms select the at least one interactive feature translate the selection of the at least one interactive feature via the integration object into a common format associated with the shared layout and modify the data visualization according to the selected interactive feature. An integration object may be provided for each of the plurality of rendering platforms. The shared layout may be independent of the rendering platforms and may comprise for example a pie chart a bar chart a scatter chart a column chart a line chart an area chart a doughnut chart a radar chart a surface chart a bubble chart and or a stock chart. The interactive feature may comprise for example a data modification feature a data filtering feature and or a visual adjustment feature. Selection of the at least one interactive feature may comprise receiving a selection input from at least one of a mouse a stylus a keyboard and or a touch screen.

The processing unit may be further operative to receive a location for a pointer of a user input device and retrieve information about the received location wherein the information comprises at least one of a description of possible modifications to the data visualization associated with the location and a description of at least one data point at the location. The information about the received location is displayed in a tooltip.

The processing unit may be further operative to expose at least one hotspot object specific to the layout such as a wedge manipulation interactive feature in a pie chart. A hotspot object may be associated with at least one structural element of the data visualization such as a graph axis line.

Another embodiment consistent with the invention may comprise a system for providing extensible interactivity for a data visualization. The system may comprise a memory storage and a processing unit coupled to the memory storage. The processing unit may be operative to create a data visualization according to a set of data expose at least one hotspot receive a selection of the at least one hotspot create a changelist associated with the selection of the at least one hotspot store a plurality of user input commands in the changelist process the changelist and update the data visualization according to the processed changelist. For example mobile client may open a chart file. A data visualization platform DVP may create a data visualization according to the data in the chart file and expose at least one hotspot area of the chart associated with an interactive feature. A user may select the exposed hotspot with a user input device and mobile client may receive feedback from the DVP to provide to the user such as changing the user input device s cursor appearance and or displaying a tooltip. The feedback may be associated with the at least one interactive feature associated with the hotspot such as changing the cursor to a hand when selecting a column edge to indicate that the column edge may be dragged to widen or narrow the column.

As the user manipulates the data visualization each user input manipulation may be added to the changelist as a command. When the user has finished manipulating the data visualization such as may be indicated by a mouse up event the changelist may be processed by mobile client . For example mobile client may commit the changelist to the DVP the DVP may then iterate through each command added to the changelist and update the data visualization accordingly. Consistent with embodiments of the invention mobile device may allow the user to view the commands in the changelist and apply them in whole and or in part such as by selecting at least one of the commands in the changelist to apply to the data visualization.

Yet another embodiment consistent with the invention may comprise a system for providing data visualization interactivity. The system may comprise a memory storage and a processing unit coupled to the memory storage. The processing unit may be operative to create a data visualization according to a layout associated with a data visualization platform expose at least one interactive feature for the data visualization provide an integration object associated with at least one of a plurality rendering platforms wherein the rendering platform comprises for example GDI GDI Silverlight WPF C winforms receive a selection of at least one location on the data visualization from a user input device and determine whether the selected at least one location is associated with a hotspot. The user input device may comprise a mouse a stylus a keyboard and or a touch screen. Determining whether the selected at least one location is associated with a hotspot may comprises determining whether the selected at least one location comprises a data point a structural element of the data visualization a user interface menu item a user interface command element and or a data visualization control element.

In response to determining that the selected at least one location is associated with a hotspot the processing unit may be further operative to translate the selection of the at least one interactive feature via the integration object into a common format associated with the data visualization platform. To translate the selection the processing unit may be further operative to capture at least one characteristic of the selection display at least one visual feedback associated with the at least one characteristic convert the at least one characteristic of the selection from the encoding format associated with the at least one of the plurality rendering platforms to a common encoding format associated with the data visualization platform create a change list according to the converted at least one characteristic of the selection and submit the change list to the data visualization platform. The processing unit may be further operative to update the data visualization according to the submitted change list and at least one property of the hotspot at the at least one selected location. Consistent with embodiments of the invention the at least one visual feedback may comprise for example changing a cursor drawing a line drawing a shape changing a title changing a status display and or displaying a tooltip. The at least one characteristic of the selection may comprise for example a mouse click a drag operation a drop operation a mouse movement and or a scroll operation. The captured at least one characteristic may be encoded in a format associated with at least one of the plurality rendering platforms.

With reference to a system consistent with an embodiment of the invention may include a computing device such as computing device . In a basic configuration computing device may include at least one processing unit and a system memory . Depending on the configuration and type of computing device system memory may comprise but is not limited to volatile e.g. random access memory RAM non volatile e.g. read only memory ROM flash memory or any combination. System memory may include operating system one or more programming modules and may include a data visualization platform . Operating system for example may be suitable for controlling computing device s operation. In one embodiment programming modules may include a data visualization viewing program . Furthermore embodiments of the invention may be practiced in conjunction with a graphics library other operating systems or any other application program and is not limited to any particular application or system. This basic configuration is illustrated in by those components within a dashed line .

Computing device may have additional features or functionality. For example computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by a removable storage and a non removable storage . Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all computer storage media examples i.e memory storage. Computer storage media may include but is not limited to RAM ROM electrically erasable read only memory EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store information and which can be accessed by computing device . Any such computer storage media may be part of device . Computing device may also have input device s such as a keyboard a mouse a pen a sound input device a touch input device etc. Output device s such as a display speakers a printer etc. may also be included. The aforementioned devices are examples and others may be used.

Computing device may also contain a communication connection that may allow device to communicate with other computing devices such as over a network in a distributed computing environment for example an intranet or the Internet. Communication connection is one example of communication media. Communication media may typically be embodied by computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may describe a signal that has one or more characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media may include wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency RF infrared and other wireless media. The term computer readable media as used herein may include both storage media and communication media.

As stated above a number of program modules and data files may be stored in system memory including operating system . While executing on processing unit programming modules e.g. data visualization viewing program may perform processes including for example at least one of method s stages as described above. The aforementioned process is an example and processing unit may perform other processes. Other programming modules that may be used in accordance with embodiments of the present invention may include electronic mail and contacts applications word processing applications spreadsheet applications database applications slide presentation applications drawing or computer aided application programs etc.

Generally consistent with embodiments of the invention program modules may include routines programs components data structures and other types of structures that may perform particular tasks or that may implement particular abstract data types. Moreover embodiments of the invention may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. Embodiments of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Furthermore embodiments of the invention may be practiced in an electrical circuit comprising discrete electronic elements packaged or integrated electronic chips containing logic gates a circuit utilizing a microprocessor or on a single chip containing electronic elements or microprocessors. Embodiments of the invention may also be practiced using other technologies capable of performing logical operations such as for example AND OR and NOT including but not limited to mechanical optical fluidic and quantum technologies. In addition embodiments of the invention may be practiced within a general purpose computer or in any other circuits or systems.

Embodiments of the invention for example may be implemented as a computer process method a computing system or as an article of manufacture such as a computer program product or computer readable media. The computer program product may be a computer storage media readable by a computer system and encoding a computer program of instructions for executing a computer process. The computer program product may also be a propagated signal on a carrier readable by a computing system and encoding a computer program of instructions for executing a computer process. Accordingly the present invention may be embodied in hardware and or in software including firmware resident software micro code etc. . In other words embodiments of the present invention may take the form of a computer program product on a computer usable or computer readable storage medium having computer usable or computer readable program code embodied in the medium for use by or in connection with an instruction execution system. A computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific computer readable medium examples a non exhaustive list the computer readable medium may include the following an electrical connection having one or more wires a portable computer diskette a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber and a portable compact disc read only memory CD ROM . Note that the computer usable or computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory.

Embodiments of the present invention for example are described above with reference to block diagrams and or operational illustrations of methods systems and computer program products according to embodiments of the invention. The functions acts noted in the blocks may occur out of the order as shown in any flowchart. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality acts involved.

While certain embodiments of the invention have been described other embodiments may exist. Furthermore although embodiments of the present invention have been described as being associated with data stored in memory and other storage mediums data can also be stored on or read from other types of computer readable media such as secondary storage devices like hard disks floppy disks or a CD ROM a carrier wave from the Internet or other forms of RAM or ROM. Further the disclosed methods stages may be modified in any manner including by reordering stages and or inserting or deleting stages without departing from the invention.

All rights including copyrights in the code included herein are vested in and the property of the Applicant. The Applicant retains and reserves all rights in the code included herein and grants permission to reproduce the material only in connection with reproduction of the granted patent and for no other purpose.

While the specification includes examples the invention s scope is indicated by the following claims. Furthermore while the specification has been described in language specific to structural features and or methodological acts the claims are not limited to the features or acts described above. Rather the specific features and acts described above are disclosed as example for embodiments of the invention.

