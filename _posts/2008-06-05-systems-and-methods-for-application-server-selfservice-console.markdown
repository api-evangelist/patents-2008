---

title: Systems and methods for application server self-service console
abstract: A self-service application console that provides users with restricted access to execute “tasks” in a secure, controlled way. The console allows users to execute scripts, applications or other executable files, using a user interface which abstracts the technical details of the task, as well as eliminates the need for users to have to login to the server. The console provides users with limited or no access to the capabilities of those with more security permissions without risking granting them more access. Tasks may be stored in a database and tasks may be grouped into profiles where the tasks are executed following a defined order.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08843647&OS=08843647&RS=08843647
owner: United Services Automobile Association (USAA)
number: 08843647
owner_city: San Antonio
owner_country: US
publication_date: 20080605
---
This application is related to U.S. patent application Ser. No. 12 239 895 filed Sep. 29 2008 and U.S. patent application Ser. No. 12 239 899 filed Sep. 29 2008 filed as divisional applications of the instant application the disclosures of which are incorporated in their entirety.

In order for a user to access a server or execute commands or scripts on a computer the user conventionally has an account on the computer that grants the user access to the server. The account is setup by an administrator having full administrative rights on the server or computer network on which the server communicates. Often there are instances where developers or other non users have a legitimate need to run scripts or executables on a server but do not have access to restricted environments. For example developers may want to gather information pertinent to achieve a particular purpose that would otherwise have to be executed by somebody with login access to the server and appropriate privileges.

While a solution is to grant the developer or non user access to the server to run the scripts or executables administrators often do not want to do this in order to protect the integrity of the restricted environment and to maintain strict access control. Thus balancing the needs of non users with the security of the restricted environment can be a difficult task for the system administrator.

A self service application console that provides users with restricted access to execute tasks in a secure controlled way. The console allows users to execute scripts applications or other executable files using a user interface which abstracts the technical details of the task as well as eliminates the need for users to have to login to the server. The console provides users with unlimited limited or no access to the capabilities of those with more security permissions without risking granting them more access than necessary. Tasks may be stored in a database and tasks may be grouped into either executable type profiles or security type profiles. Executable type profiles allow grouped tasks to be executed following a defined order when specified and security type profiles are used to group tasks that can be made available to users by mapping the user to the Security profile via a user interface.

In some implementations a method is provided for defining a task for execution on a server by a non user without a login account on the server. The method may include providing descriptive information regarding the task defining environment variables associated with the task and defining executable characteristics of the task.

In some implementations a method for defining a task for execution on a server by a non user without a login account on the server is provided. The method may include providing descriptive information regarding the task defining environment variables associated with the task and defining executable characteristics of the task.

In some implementations a method for executing tasks and profiles on a server by a non user without a login account on the server includes receiving a request for access to execute a task or profile on the server authenticating the request against an access database populating a user interface with a list of tasks and profiles to which the user has rights to execute on the server receiving a selection of a task or a profile validating the task or the profile and executing the task or profile on the server.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the detailed description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

In implementations described below a self service application server console provides users with restricted access the ability to execute tasks e.g. scripts applications or other executable files in a secure controlled fashion i.e. managed by those who have access to environments. Tasks may be grouped into profiles such that a particular function may be achieved through a predetermined sequence of task execution. The console allows users to execute scripts applications or other executable files within a user interface that eliminates the need for users to login to the remote server. The console may benefit those with limited access such as contractors or outside vendors. As will be described below in some implementations Java software is used to enable the above capabilities. The console also provides a way to manage users and workflows.

Referring now to there is an overview of an environment in which the self service console may be implemented. The environment includes a computer network such as for example a Transport Control Protocol Internet Protocol TCP IP network e.g. the Internet or an intranet . A server may be operably coupled to the network and a plurality of users and may also be operably coupled to the network in order to allow communication between the users and and the server .

Each of the server and the users and include a respective network interface for communicating with the network e.g. outputting information to and receiving information from the network such as by transferring information e.g. instructions data signals between such users and and the network . Accordingly through the network the server communicates with the users and and the users and communicate with the server .

For clarity depicts only one server . However the system may include a plurality of servers that are substantially identical to the server . Likewise for clarity depicts only three users and . However the system may include a plurality of users that are substantially identical to the users and .

Each of the server and the users and may be implemented in various electronic circuitry components and or software components. For example the users and may be operating a server computer a personal computer e.g. a desktop computer or a portable computer such as for example a laptop computer or a handheld computer.

Referring now to the server is illustrated in more detail. For example one or more web servers such as for example Hyper Text Transfer Protocol HTTP servers may be maintained by the server and may be operably coupled to the network described above with reference to . In some implementations an application server e.g. a WebSphere Application Server available from IBM Corp. may be maintained by the server and may be operably coupled to the web server s .

In some example implementations the application server can include one or more nodes through N where N is an integer greater than 1 e.g. logical machines and or physical machines that can include one or more virtual machines configured to service requests received from clients such as logon requests request to view account info etc. For example the requests may be received from one of users and .

When a request is received by a node node for example the node carries out the requested function by accessing one or more data sources through N where N is an integer greater than 1 to perform an action e.g. a read write request etc. In some implementations each node through N can include a JAVA database connectivity API JDBC or a JAVA connector architecture J2C configured to query data sources through N. In some implementations data sources through N may be located remote from the server and may be operably coupled to the server . Thus as the web server s receive requests they can route the requests to a specific node that is configured to handle such request and the node can access the appropriate data source to perform the desired function.

Referring now to there is illustrated an example node of an application server for example within node of the application server depicted in . An application component such as for example a servlet a JAVA bean or an enterprise JAVA bean EJB configured to perform a function such as accessing user accounts is included in node and may be operably coupled to the application server described above with reference to . An operating environment e.g. a virtual machine such as a Java Virtual Machine from Sun Microsystems or a physical machine in other implementations may be included in node and may be configured to effect the application component and interface with one or more of the data sources through N.

A configuration file repository may contain configuration files used by the node . When node is supplied with power or when the operating environment is enabled the node may acquire configuration parameters from the configuration file repository and store them in configuration parameter memory to affect how calls to the data sources through N are handled.

At the user profile is loaded and a list of servers to which the user has access is determined. Using the API provided by the manager a call to the database is made to fetch the user profile information and a list of servers to which the user may have access. The profile may determine which tasks and or profiles the user may execute on which servers the user may have access.

At the task and or profiles are loaded into the user interface. For example as show in the user interface may provide a list of tasks and or profiles available to the user based on information contained in the database. Tasks may be individual commands script files etc. that may be executed on a particular server. In some implementations tasks may be grouped into profiles which are one or more tasks that share a relationship execution order etc. to achieve a particular function such as managing a server.

At a user selection of a task or profile is received. For example in the user may select task 189 Show JVMs running and their PIDs from the drop down list . At the selected task is previewed. A task may be defined as follows 

The user interface of may be presented to preview the task. The environmental variables paths executable and other details noted above in the task definition may be presented along with a list of servers on which the task may be executed.

In some implementations at a user may select a profile. For example in the user may select the profile 19 BOUNCE WEBSPHERE AND AWC from the drop down list . At the profile is previewed. A user interface such as may presented to illustrate details to the profile a list of servers on which the profile may be executed and the tasks associated with the profile .

At a connection is made to the server on which the task will be executed. In some implementations an SSH client server connection may be made between the client and the server . In some implementations a connection using RMI with authentication using SOAP may be provided. A Java session may be created on the client to communicate securely with the server using the RMI protocol connection. SOAP may be used to exchange information e.g. XML documents between the Java virtual machines running on the client and server after the connection is established. For example a POST command may be executed to a servlet running in the application component on the server.

At the task is validated. When the user selects a task and or profile is may be checked using JavaScript to ensure that unexpected or unwanted commands are not being piped to the task or profile. The servlet may then read the FULLCMDSTRING and the process is then executed on the server . In some implementations the task may be validated before execution to ensure all of the dependencies are satisfied prior to execution. In some implementations it is determined if the server is available and if the file to be executed by the task exists on the server. illustrates the result of such a determination that is provided to the user. In some implementations if the task does not exist on the server where it is to be executed it may be copied using e.g. SCP from the client device to the server to ensure the task exists on the target server.

At the task is executed on the target server. A user interface providing results or status may be displayed to the user to illustrate the success failure or current status of the task and or profile execution.

In some implementations a profile may be created that includes the task defined in . At the task may be added to a profile or used to create a profile. As shown in the task may be added to the task definition area . At an order may be provided for task execution. For example and given a task execution order .

As shown in a search facility may be provided to search available tasks. A list of tasks the user has access to may be provided through a show my tasks option.

Numerous other general purpose or special purpose computing system environments or configurations may be used. Examples of well known computing systems environments and or configurations that may be suitable for use include but are not limited to PCs server computers handheld or laptop devices multiprocessor systems microprocessor based systems network PCs minicomputers mainframe computers embedded systems distributed computing environments that include any of the above systems or devices and the like.

Computer executable instructions such as program modules being executed by a computer may be used. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Distributed computing environments may be used where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules and other data may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing aspects described herein includes a computing device such as computing device . In its most basic configuration computing device typically includes at least one processing unit and system memory . Depending on the exact configuration and type of computing device system memory may be volatile such as random access memory RAM non volatile such as read only memory ROM flash memory etc. or some combination of the two. This most basic configuration is illustrated in by dashed line .

Computing device may have additional features and or functionality. For example computing device may include additional storage removable and or non removable including but not limited to magnetic or optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage .

Computing device typically includes a variety of computer readable media. Computer readable media may be any available media that may be accessed by computing device and includes both volatile and non volatile media and removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media.

Computer storage media include volatile and non volatile and removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer storage media. Computer storage media include but are not limited to RAM ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which may be used to store the desired information and which may be accessed by computing device . Any such computer storage media may be part of computing device .

Computing device may also contain communication connection s that allow the computing device to communicate with other devices. Communication connection s is an example of communication media. Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media include wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency RF infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media.

Computing device may also have input device s such as a keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. All these devices are well known in the art and need not be discussed at length here.

Computing device may be one of a plurality of computing devices inter connected by a network. As may be appreciated the network may be any appropriate network each computing device may be connected thereto by way of communication connection s in any appropriate manner and each computing device may communicate with one or more of the other computing devices in the network in any appropriate manner. For example the network may be a wired or wireless network within an organization or home or the like and may include a direct or indirect coupling to an external network such as the Internet or the like.

It should be understood that the various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the presently disclosed subject matter or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the presently disclosed subject matter. In the case of program code execution on programmable computers the computing device generally includes a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs may implement or utilize the processes described in connection with the presently disclosed subject matter e.g. through the use of an application programming interface API reusable controls or the like. Such programs may be implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s may be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and it may be combined with hardware implementations.

Although exemplary implementations may refer to utilizing aspects of the presently disclosed subject matter in the context of one or more stand alone computer systems the subject matter is not so limited but rather may be implemented in connection with any computing environment such as a network or distributed computing environment. Still further aspects of the presently disclosed subject matter may be implemented in or across a plurality of processing chips or devices and storage may similarly be effected across a plurality of devices. Such devices might include personal computers network servers and handheld devices for example.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

