---

title: Subsystem architecture for providing support services for software applications
abstract: A subsystem architecture is described that provides support services for software applications of a system. The subsystem architecture includes local infrastructure components, which provide infrastructure services to the software applications. Each local infrastructure component corresponds to a single software application and is independent from another of the local infrastructure components. The subsystem architecture may further include a central service component providing central services to at least one of the local infrastructure components. The central service component is independent and unaware of the local infrastructure components. Still further, the subsystem architecture may include an administrative component for monitoring and maintaining the local infrastructure components providing infrastructure services to the software applications. The administrative component is independent and unaware of the plurality of local infrastructure components.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08875097&OS=08875097&RS=08875097
owner: Siemens Aktiengesellschaft
number: 08875097
owner_city: Munich
owner_country: DE
publication_date: 20080125
---
Example embodiments relate to subsystem architecture for providing support services for software applications such as medical and financial applications.

Generally software applications used by various businesses and or institutions may require and or benefit from an infrastructure providing various information technology IT services such as logging auditing utilization installation software distribution licensing security online help configuration monitoring diagnostics life cycle management tracing session management and context management. Conventional solutions for providing this infrastructure and or the above mentioned IT services involve collecting a set of the required or requested IT services for each of the various different applications involved in a system or being run by a business and or institution. However the IT services for the various different applications are generally not related to each other and or consistent from one software application to another software application which may be used by the common business and or institution.

The different IT services may be provided by or produced from different third party vendors and may be implemented straight out of the box i.e. the service is not customized or adjusted for the specific software application using the service. As such there is not a homogenous and systematic deployment of an infrastructure providing IT services in the above described conventional solution. At least in part because there is not a systematic approach or pattern for providing services to the different software applications the management and monitoring of the infrastructure and related services are not easily provided.

Further providing different IT services created by different third party vendors which may be implemented straight out of the box may also cause other detrimental effects. In particular the specific operations of an IT service provided straight out of the box is not always known. Accordingly the coupling between the IT service and the serviced software application has an effect on the service and may also have an effect on one or more other software applications communicating with the serviced application. Stated differently the straight out of the box IT service may indirectly couple the serviced software application with one or more other software applications communicating with the serviced application.

One conventional approach attempting to address some of the above issues is to provide a single product or software application that superimposes a homogeneous solution on top of all of the various different software applications requiring or requesting IT services. In particular a common product will be used to manage all of the services required by the different software applications. Unfortunately this solution essentially moves the integration point of the various different applications having a common set of required IT services into the various different software applications. However the various different software applications generally have different purposes and the inclusion of this common product may detrimentally affect the performance of the various different software applications. Further because a homogenous solution is integrated into all of the various different software applications the applications are now dependent on monolithic middleware which may hamper the various different software applications. For example the various different software applications may have different product life cycles and thus the homogeneous solution may not take into account the different life cycles of the different software applications.

As described above conventional solutions for providing various IT services may have a detrimental effect on the performance of the software applications of a business and or institution. Further the conventional solutions may have a detrimental effect on the technical coupling between the software applications of a business and or institution.

Example embodiments provide a homogenous and systematic approach for providing IT services to software applications being run by a medical and or financial institution.

An example embodiment provides a subsystem architecture for providing support services for software applications of a system. The subsystem architecture includes a plurality of local infrastructure components for providing infrastructure services to the software applications. Each local infrastructure component corresponds to a single software application and is independent from another of the plurality of local infrastructure components.

According to an example embodiment each local infrastructure component provides a single service tailored for the corresponding software application.

According to an example embodiment a service provided by a local infrastructure component includes one of logging licensing auditing tracing session management context management security utilization installation system diagnostics online help configuration local monitoring life cycle management and software distribution services.

According to an example embodiment each local infrastructure component communicates with a corresponding software application via a contract using a programming language interface. The programming interface is not a remote interface.

According to an example embodiment the subsystem architecture further includes a central service component that provides central services to one or more of the plurality of local infrastructure components. The central service component is independent and unaware of the plurality of local infrastructure components.

According to an example embodiment the central services provided by a central service component relate to one or more of an active directory application mode session management license management system status monitoring message storage central auditing central utilization central logging authorization management authentication management online help repository managed node package and asset management.

According to an example embodiment the central service component communicates with the one or more of the local infrastructure components via a second contract using a web service or any other remote interface.

According to an example embodiment a service provided by the one or more local infrastructure components includes an online and offline mode. During the offline mode information related to the service is stored in a local infrastructure component. During the online mode information related to the service is stored in the central service component.

According to an example embodiment a local infrastructure component determines the significance and or severity of information received from a corresponding software application and the determined significance and or severity directs processing of the information. If the severity of information is determined to be high the information is stored in one of the local infrastructure components as well as the central service component. If the severity of information is determined to be low the information is only stored in a local infrastructure components.

According to an example embodiment the subsystem architecture further includes an administrative component for at least one of monitoring and maintaining the local infrastructure components providing infrastructure services to the software applications or the central component providing central services available to the local infrastructure components. The administrative component is independent and unaware of the local infrastructure components and the central service component.

According to an example embodiment the administrative component receives input from a user queries an appropriate data repository receives information based on the query and displays the queried information.

According to the example embodiment are one or more of two dimensional three dimensional four dimensional viewing applications for medical scanner devices patient health monitoring applications angiographic life monitoring applications patient registration applications information systems applications for a hospital department laboratory and patient archiving and viewing applications.

Various example embodiments are now described more fully with reference to the accompanying drawings in which some example embodiments of the invention are shown. However specific structural and functional details disclosed herein are merely representative for purposes of describing example embodiments and one skilled in the art will appreciate that example embodiments may be embodied in many alternate forms and should not be construed as limited to only the embodiments set forth herein.

It will be understood that although the terms first second etc. may be used herein to describe various components these components should not be limited by these terms. These terms are only used to distinguish one component from another. For example a first component could be termed a second component and similarly a second component could be termed a first component without departing from the scope of this disclosure.

It will be understood that when a component is referred to as being connected or coupled to another component it can be directly connected or coupled to the other component or intervening components may be present. In contrast when a component is referred to as being directly connected or directly coupled to another component there are no intervening components present. Other words used to describe the relationship between components should be interpreted in a similar manner e.g. between versus directly between adjacent versus directly adjacent etc. .

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of example embodiments of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises comprising includes and or including when used herein specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof. As used herein the term and or includes any and all combinations of one or more of the associated listed items unless the context clearly indicates otherwise.

An example embodiment of subsystem architecture for providing support services for software applications is illustrated in . Example software applications used in a medical institution include two dimensional 2D three dimensional 3D or four dimensional 4D viewing applications for medical scanner devices such as CT MR Ultrasound nuclear etc. patient health monitoring applications of an intensive care department angiographic life monitoring applications patient registration applications information systems applications for hospital departments radiology and cardiology laboratories patient archiving and viewing applications. The subsystem architecture includes local application infrastructure component a service IT administration component and a central operation management component .

The local application infrastructure component provides a variety of local services directly connected and tailored to the various different local software applications. For example the local application infrastructure component may provide services relating to one or more of configuration logging licensing auditing tracing session management context management security utilization installation system diagnostics online help life cycle management software distribution and local monitoring. Hereinafter each of the local services may be referred to as an infrastructure service IS . A brief description of these different services are provided below.

Configuration IS handles configuration data for a software application tool kits and services. Configuration data may be stored in local files and or a central configuration repository based on a statement defined in the configuration IS. An example central configuration repository is implemented using a MICROSOFT ADAM .

Logging IS handles logging of messages for a software application tool kits and services. Log messages can be stored in local files and or central message repository via a web service or any other remote communication system. The storage location of the log messages depends on a strategy of the logging IS.

Licensing IS provides license management to application business logic and services. Licenses can be available locally or from a central license node via web service access.

Auditing IS allows writing audit messages to the audit repository from application business logic. The audit messages can be stored locally e.g. in a file or in a central audit message repository. The storage location of the audit messages is based on a strategy of the auditing IS.

Tracing IS stores messages via trace mechanisms from the applications tool kits and services in local files. Tracing is generally used for debugging and or development purposes only.

Session management IS allows creating and propagating sessions and user information globally among software applications for each user. Context management IS offers Clinical Contacts Object Workgroup CCOW integration.

Security IS allows role based user access to the system and user management information using MICROSOFT ACTIVE DIRECTORY for example as well as locally. MICROSOFT AZMAN for example may be used to store roles and rights for users and implemented as a component of the Security IS.

Utilization IS collects information about usage statistics as well as staff performance. For example the usage statistics may provide information indicating what staff members and users are using various software applications.

Installation IS is a collection of tools and applications which may be used to install software on a machine. The tools and applications of the installation IS may be related to a first time installation as well as updates or upgrades of software at a later date.

System diagnostics IS allows a clinical user and or administrators to inspect system behavior and to match this behavior with reference values. The system diagnostics IS may log the results of the inspection of system behavior for further processing.

Online help IS provides user assistance with context sensitive help information on a user interface level.

Life cycle management IS allows managing the life cycles of the software programs. The life cycles refer to start restart and shutdown of the software applications. For example the life cycle management IS can include information for three different programs of a software application which must be launched in a specific order e.g. a first program then a second program and lastly a third program. In this example if the second program crashes the life cycle management IS stops the third program determines the first program is still running and accordingly will start the second program followed by the third program.

The central operational management component provides central services available to local application infrastructure components . For example central operational management component may provide central services using and or relating to one or more of an active directory application mode central session management license management system status monitoring message storage central auditing central utilization central logging authorization management authentication management online help repository managed node package and asset management.

An example central service relating configuration may involve an active directory application mode ADAM relating to user management and authentication relating to a user login. This central service may use a central ADAM to store selected configuration data of the multiple local ADAMs associated with the local services being provided by the local application infrastructure to the software applications being run by a medical and or financial institution.

A central session management service may be used to create and handle global sessions used by multiple software applications of the medical and or financial institutions for example.

A central license management service handles license management and can be queried for licenses by other components of the system. An example of a central license manager provided by the central operational management component may be implemented based on a FLEXLM license manager product.

A system status monitoring central service implements all web services for system status monitoring and supervision purposes and may use a central status repository. The system status monitoring service offers web services for administrative user interfaces and monitoring event reception and outgoing commands. Optionally the system status monitoring service may provide rules for various different plug ins.

A local monitoring central service is an example of a component adapter for system status monitoring that can perform local monitoring and submits these monitoring messages to the central monitoring service.

A central message storage service may store messages such as errors warnings debug messages audit messages etc. in a central database. An example of a central database is an ORACLE DB .

A central audit service offers central storage of audit messages which may be received from a local application infrastructure component via a web service.

A central utilization service offers a web service utilization message for central storage for utilization messages which may be received from a local application infrastructure component via a web service.

A central log service offers central storage of log messages and may also provide log messages to administrative user interfaces. Log messages are communicated to and from a central log service via one or more web services.

A central authorization management service may store roles and rights for different users. The central authorization management service may be implemented using the MICROSOFT AZMAN for example.

An active directory central service may be implemented using the MICROSOFT X.500 directory implementation for Windows.

A central online help service provides a website with context sensitive online help to a user. The central online help service may be implemented using a solution from T3 MEDIEN .

A managed node package MNP service may include an MNP depot that stores software that can be installed within the network. The MNP is a set of third party agents such as distribution installations provided by MEDCO like logging event handling and installation and may be maintained from a remote service department.

An asset management central service collects information about installed software and hardware on selected nodes and transfers this information to the service center.

The service IT administration component includes applications using central services directly in a manner similar to how the local application infrastructure component may use central services. However the service IT administration component uses the central services with a different intention. While the local application infrastructure component and the central operational management component provide services to a software application being used by a medical and or financial institution the service IT administration component does not provide specific services for the software applications and or used by the local application infrastructure component . Instead the service IT administration component includes applications allowing for exploration of data repositories monitoring and maintenance of the subsystem architecture for example.

According to example embodiments none of the three components of the subsystems architecture are aware of the other two components. For example the local application infrastructure component is not aware of either the central operational management component or the service IT administration component . As a result of the local application infrastructure the service IT administration component and the operational management component being independent and unaware of each other the danger of creating a monolithic approach to services provided to various different software applications of a medical and or financial institution is mediated. Accordingly various IT services can be exchanged and extended and versioning may be independently addressed for each of the different software applications of the medical and or financial institution. Further the subsystem architecture allows third party products to be introduced at any time independently of other local and central services being available for the various different software applications by the local application infrastructure .

Still referring to the local application infrastructure component may operate as a stand alone infrastructure. Accordingly both the central operational management component and the service IT administration component are optional. However if the operation management component is provided the application infrastructure component may access the operational management component with a configurable local plug in that uses a standardized remote interface such as a web service. The configurable local plug in may address compatibility issues and allow the various different services to be provided by different third party vendors. Further the configurable local plug in allows central services provided by the operation management component to communicate with the application infrastructure component providing local services. As such a software application being used by a medical and or financial institution may have an offline mode and an online mode. In an offline mode only a local service is available to the application infrastructure component i.e. a central service provided by a central operation management component is not provided and or is unavailable to the application infrastructure component servicing the software application. In an online mode both the local service provided by the application infrastructure is available to the software application and central services provided by the operational management component are available to the local application infrastructure component providing a local service to the software application.

Further if both the central operational management component and the service IT administration component are provided the service IT administration component may communicate with both the application infrastructure component and the central operational management component during administrative activities such as exploration of data repositories monitoring and maintenance of the subsystem architecture.

According to an example embodiment all services local and central are maintained independent of each other connecting only remotely via an interface such as a web service. An interface is an implementation of a contract. In an example in which both the local application infrastructure component and the operational management component are included in the subsystem architecture at least two different contracts are involved.

A first contract is an interface between a software application being used by a medical and or financial institution and the local application infrastructure component providing an IT service to the software application. The first contract generally is in the form of simple programming interfaces such as an application programming interface API that functions to provide communications between the local application infrastructure component and the software application. APIs are well known in the art and thus the specifics of an API are not discussed herein for the sake of brevity. Further the simple programming interfaces and or an API may be tailored specifically for the needs of the serviced software application. There is no remote access involved in the first contract.

A second contract is an interface between the local application infrastructure component and the operational management component . This second contract provides communications between the local application infrastructure component and the central operational management component . The second contract is different from the first contract in that the second contract involves the use of a web service or a remote connection.

Having the two different contracts according to an example embodiment allows a first contract to be stable while a second contract is adjusted. Stated differently the second contract may be configured without affecting the first contract. This avoids having to recompile a first contract which would affect the close coupling between a service software application and the local application infrastructure component when a contract between a local application infrastructure component and an operational management component is adjusted or reconfigured.

In the above described example the local application infrastructure component acts as a bridge between the first contract which connects the software application with the local application infrastructure component and the second contract which connects the local application infrastructure component and the central operational management component .

Example services of the subsystem architecture for providing support services for software applications as shown in are now detailed below.

The browser application in the example embodiment of receives local services from the local application infrastructure component and central services of the central operational management component are available to the local application infrastructure component . In addition the service IT administration component shown in allows IT administrators to explore data repositories monitor and maintain the subsystem architecture relating to the browser application for example.

Referring to the local application infrastructure component includes a logging IS unit three providers and and local file storage . The service IT administration component shown in includes an audit viewer task a message viewer task and file storage . The central operational management component of includes a central message storage unit a central log RSC an audit repository and a central audit RSC . The central log RSC and central audit RSC are web services allowing each of the local application infrastructure component and the service IT administration component to communicate with the central message storage unit and the audit repository of the operational management component .

Six different examples of operations performed by the example embodiment of the subsystem architecture and communications between various components of the sub system architecture are described below.

In a first example the browser application detects an error message and logs the error message in the central message storage unit . In particular the business logic of the browser application detects an error. For example an error is detected by the browser application if no data is available for a patient or if a database is unavailable. The specific detection of errors by a software application is well known in the art and thus is not discussed herein for the sake of brevity. Once the error is detected by the browser application the browser application communicates with the logging IS unit . For example the browser application may communicate with the logging IS unit according to a first contract which provides communication between the browser application and the logging IS via a simple programming interface or API.

A strategy relating to the processing of an error detected by the browser application by the logging service is determined and or defined by the logging IS unit . For example the logging IS unit may be configured to assign a significance and or severity to an error message received from the browser application . An error indicating data for a patient is unavailable may be assigned a low severity flag for example because this error is likely common and may simply indicate that test results for a patient is not yet available or a CT image of an organ of the patient has not been obtained. Further an error indicating a database is unavailable is assigned a high severity flag for example because this error can indicate that an entire patient record database or imaging database is down and that administrative action is required. According to an example strategy that can be implement by the logging IS unit if an error is assigned a high severity flag the error message is recorded both locally and centrally whereas an error assigned a low severity flag may only be stored locally.

As mentioned above in the first example the logging IS component is configured to log the error message in a central message storage unit . As such the logging IS unit formats the error message for storage in the central message storage unit and communicates the appropriately formatted message to a first provider unit . The formatted message may include a source ID text ID time stamp etc. In response to a received error message the provider establishes communication with the central log RSC . The error message is then submitted by the central log RSC to the central message storage unit as a web service call with the error message as content. The central message storage unit receives the web service call and stores the message in a database.

In a second example the browser application detects an error message and logs the error message locally in the local files based on the strategy implemented by the logging IS unit . An example significance and or severity strategy was described above in the description of the first example. However another example strategy implemented by the logging IS unit may include an online and offline mode. One skilled in the art will appreciate that the example strategy described below may be used in conjunction with the previously described strategy or other strategies not specifically disclosed herein. In an example online offline mode strategy the logging IS unit may be configured to detect whether a central message storage unit is available to store files such as in an online mode or if the central message storage unit is unavailable to store files such as in an offline mode.

Accordingly this second example corresponds to a situation in which the logging IS unit determines the central message storage unit is unavailable. The logging IS unit formats the error message received from the browser application into the proper format for storing the error message in local storage unit . The properly formatted message is then communicated to the provider . The second provider attempts to access the local storage unit and if access is granted the provider provides the properly formatted error message is stored in the local storage files .

In a third example the browser application needs to write an audit message related to the browser application . The audit message may indicate a particular clinical user has accepted or claimed a work item. For example a radiologist may claim a patient X ray in order to generate a report. The audit message is recorded in order to let other users know the X ray has been claimed. In this example the browser application collects audit message data and communicates the audit message data to the logging IS unit via an audit interface. The logging IS unit is always configured to store audit messages in an audit repository of the central operational management component . Accordingly the logging IS unit formats the audit message for the audit repository unit . Once the audit message is properly formatted by the logging IS unit the logging IS unit provides the properly formatted audit message to the provider . The provider then attempts to access the audit repository unit via a web service illustrated in as the central audit RSC . The central audit RSC communicates the audit message to the audit repository as a web service call with the properly formatted audit message content. The audit repository unit stores the received message into a database.

In a fourth example the message viewer task unit of the service IT administration component displays an available error message to an IT administrator of the one or more relevant clinical departments using the browser application . In this example the IT administrator has selected to deploy a central log database via the central operational management component . The central log database corresponds to the central message storage unit . Accordingly the IT administrator submits a web service request with fitting parameters to the central message storage unit via the central log RSC . The submitted web service request includes fitting parameters such as error type time of error error message text error message source etc. In response to the received web service request the central message storage unit communicates all messages corresponding with the fitting parameters to the message viewer task via the central log RSC . The message viewer task may then display the returned message to the IT administrator.

Still referring to in a fifth example the message viewer task unit of the service IT administration component again obtains and displays error messages. In this example the IT administrator has selected to deploy one or more local log files and which were transferred to his machine with additional services or to a shared file system . This is different from the previous example in which the central log database was deployed. In this fifth example the message viewer task unit accesses and opens the one or more log files and . The message viewer task unit then displays one or more error messages from the one or more log files and .

In a sixth example an audit viewer task unit of the service IT administration component displays recent audit messages to an IT administrator for review. The audit messages may be related to a clinical activity. Example clinical activities include recording data obtaining images and generating reports relating to diagnosis and treatment. In this example the IT administrator selects a relevant time interval. This selection may be made based on user input of the IT administrator. In response to this user input the audit viewer task unit attempts to access and query the audit repository unit of the central operational management component via the central audit RSC . In response to the received query the audit repository unit extracts all audit messages corresponding to the received query. The audit repository unit then provides the corresponding messages to the auto viewer task unit via the central audit RSC . The audit viewer task unit then displays the received messages to the IT administrator on a display.

The above described examples illustrate example communications and operations performed by the various different units of the local application infrastructure component the service IT administration component and the central operational component of an example embodiment of a sub system architecture.

Examples of different local infrastructure services and the configurations of the IS units providing these services to software applications are detailed below. From the previous disclosure and examples described above with respect to one skilled in the art will readily be able to apply the teachings of the previous disclosure and examples to the configurations of the IS units and various connections shown in .

Referring to a software application includes three layers. In particular the software application includes a presentation logic layer a business logic layer and a remote services logic layer . The presentation logic layer provides a user interface for the software application the business logic layer processes business calculations for the software application and the remote service logic layer provides access to enterprise services used by the software application. The layers of the software application will be readily understood by one skilled in the art and thus the specifics of these layers is not discussed further herein for the sake of brevity.

In the example of the software application receives logging services from the logging IS unit . The software application communicates with the logging IS unit via a log interface. The log interface is a simple programming interface or API. The logging IS unit provides logging of messages for the software application as well as tool kits and services required by the software application. For providing logging services to the software application the local logging IS unit provides and receives information or services from various other components of the system such as an external audit repository and a central message storage unit of the operational management component .

In the OPM trace listener communicates with the message storage unit of the operational management component via the web service ILogMessage. The remote trace listener communicates with the dynamic service the rolling file trace listener communicates with the log files and the syslog trace listener communicates with the external audit repository . The log component receives configuration information useful to the logging IS unit from a configuration IS unit . An example of a configuration IS unit is described in greater detail later with respect to .

Through an example trace listener such as the trace listener of a MICROSOFT ENTERPRISE LIBRARY for example various local and remote sinks for log messages can be configured to the logging IS unit . Through the remote trace listener message repositories and their respective trace listener can be transparently accessed from a Rich Thin Client RTC .

As previously described the local infrastructure service component may provide a variety of services and illustrate one of these services i.e. a logging service. One skilled in the art would readily understand that the teachings described above relating to an infrastructure service providing logging using the logging IS unit are applicable to the configuration service illustrated in . Further one should note that while the logging IS unit is labeled the configuration IS unit illustrated in is labeled and IS units described in the remaining figures will be labeled as etc. to indicate the teachings above referring to the logging IS unit would be applicable to these later described IS units providing services to a software application of a medical and or financial institution.

As shown in the configuration IS unit may again receive information from the presentation logic layer the business logic layer and the remote services logic layer of a software application. Further indicates that the configuration IS unit of a local application infrastructure component may receive and or provide information to MICROSOFT ACTIVE DIRECTORY MODE ADAM for example.

The configuration client is an administration part of the service for reading and writing configuration data. Calls to the configuration client provide explicit configuration context information for the configuration item that is read or written. The configuration object base is a context aware base for configuration of objects used inside components. The configuration converter is a tool for import of configuration data into a configuration repository. The remote configuration provider is a provider that gives transparent remote access to the active directory application mode configuration repository via dynamic service without requiring physical access rights. The active directory provider is a provider that gives access to an active directory application mode or an active directory via a Lightweight Directory Access Protocol LDAP .

While this invention has been particularly shown and described with reference to example embodiments of the present invention it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the spirit and scope of the invention.

