---

title: Automatic identification of document versions
abstract: A computer-implemented method for document management includes extracting from an input document a set of terms, each term including a fixed number of words. Respective numbers of the terms that occur in each of a group of stored documents are counted, and a respective association rate is computed between the input document and each of at least some of the stored documents responsively to the respective numbers of the terms that were counted in the stored documents. One or more of the stored documents are identified as versions of the input document responsively to the association rate, and an identification of the stored documents that are versions of the input document is outputted.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08315997&OS=08315997&RS=08315997
owner: Nogacom Ltd.
number: 08315997
owner_city: Herzliya
owner_country: IL
publication_date: 20080828
---
This application claims the benefit of U.S. Provisional Patent Application 60 968 329 filed Aug. 28 2007 whose disclosure is incorporated herein by reference.

The present invention relates generally to information processing and specifically to methods and systems for document management.

Most business and technical documents today are written edited and stored electronically. Organizations commonly deal with vast numbers of documents which often go through multiple versions. A document typically begins its life as a draft which is updated and changed multiple times until a final official version is created which may be further changed subsequently . Identifying and using the proper version of the document is often crucial. Sending the wrong version of a document to an outside party for example can have serious negative consequences.

Keeping track of document versions becomes even more difficult when documents are shared among different members of an organization. This sort of situation is common particularly since many documents are produced by collaborative effort of a number of people. As a result there may be as many as hundreds of copies of a given document in different directories and accounts. These copies may be distributed for example among organizational file systems document management systems and mail servers. Some of these copies may be identical or nearly identical while others may contain substantial changes or may only partially overlap. Different versions of the same document may be saved in different file formats and under different file names. Furthermore documents are frequently reused with one document serving as a template or starting point for other similar documents.

Many document management systems and word processors include version tracking utilities or features. Most such utilities are useful however only when the all the versions are created and maintained using the same document management system or word processor with explicit links among the versions.

Embodiments of the present invention that are described hereinbelow provide systems and methods for identifying and tracking document versions. These systems and methods may be applied to documents that are distributed among different file systems and servers including different documents that have been created and stored in multiple different formats.

There is therefore provided in accordance with an embodiment of the present invention a computer implemented method for document management. The method includes extracting from an input document a set of terms each term including a fixed number of words. Respective numbers of the terms that occur in each of a group of stored documents are counted and a respective association rate is computed between the input document and each of at least some of the stored documents responsively to the respective numbers of the terms that were counted in the stored documents. One or more of the stored documents are identified as versions of the input document responsively to the association rate and an identification of the stored documents that are versions of the input document is outputted.

There is also provided in accordance with an embodiment of the present invention a computer implemented method for document management which includes receiving an input document containing an input spreadsheet. A respective measure of similarity is computed between the input spreadsheet and each of a plurality of stored spreadsheets contained in a group of stored documents. One or more of the stored spreadsheets are identified as versions of the input spreadsheet responsively to the measure of the similarity. An identification of the stored documents that are versions of the input document is outputted responsively to having identified the one or more of the stored spreadsheets as versions of the input spreadsheet.

Other embodiments provide apparatus and computer software products that operate according to the principles of the above methods.

The present invention will be more fully understood from the following detailed description of the embodiments thereof taken together with the drawings in which 

Embodiments of the present invention that are described hereinbelow provide methods and systems for tracking and managing document versions. The methods are generic and automatic and operate across different storage platforms and document formats. They are capable of comparing thousands of documents without prior version classification or restriction and identifying the documents that are related as versions of one another. For this purpose the documents are retrieved from various repositories indexed in a common format and then compared efficiently using the index. The comparison is based only the textual content of the documents and is independent of their original format structure and even language.

The relation between documents is expressed in terms of an association rate which is a quantitative measure of the similarity between documents and thus indicates the likelihood that one document is a version of the other The higher the association rate between two documents the more likely they are versions of one another. The term versions is used in the context of the present patent application and in the claims to refer to documents that have a high degree of similarity to one another without restriction as to which document was earlier or how the similarity came about. Although the embodiments described below provide a certain method and formulas for computing the association rate other measures of similarity may alternatively be computed and used for the same purposes and are considered to be within the scope of the present invention.

In disclosed embodiments of the present invention when the document version management system receives an input document it calculates the association rate between this document and all documents already stored in the system. For each new input document the indexing and comparison with stored documents may be accomplished in a single pass through the new document. Typically the comparison extends over all parts of the new and stored documents but a randomly selected sample of the terms may be used in the comparison rather than comparing all the terms. The results of this process may be stored as a version index in a database or other repository so as to enable a user to retrieve and review all documents that are likely to be versions of a given base document. To reduce storage requirements only version relations with association rates greater than a certain threshold may be saved in the version index while relations with lower rates are discarded.

In some embodiments the document management system handles spreadsheets in any suitable format such as Microsoft EXCEL OpenOffice.org Calc or other formats that are known in the art separately from text documents taking into account the specific characteristics of spreadsheet structure and content. For example the system may read out and process spreadsheet content along both the rows and the columns of the spreadsheet. Additionally or alternatively the system may process and compare both data values and formulas in the cells of the spreadsheet. Typically changes in the formulas are more significant than changes in data values and are given greater weight in determining association rates between different spreadsheets. Additionally or alternatively the spreadsheets may be converted to textual form and thus compared to text documents.

System is typically built around an enterprise network which may comprise any suitable type or types of data communication network and may for example include both intranet and extranet segments. A variety of servers may be connected to the network including mail and other application servers for instance. Storage repositories are also connected to the network and may contain documents of different types and formats which may be held in one or more file systems or in storage formats that are associated with mail severs or other document management systems. Server may use appropriate Application Programming Interfaces APIs and file converters to access the documents and convert their contents to text form.

Server connects to network via a suitable network interface . The server typically comprises one or more general purpose computer processors which are programmed in software to carry out the functions that are described herein. This software may be downloaded to server in electronic form over a network for example. Alternatively or additionally the software may be provided on tangible storage media such as optical magnetic or electronic memory media. Although server is shown in for the sake of simplicity as a single unit in practice the functions of the server may be carried out by a number of different processors such as a separate processor or even a separate computer for each of the functional blocks shown in the figure. Alternatively some or all of the functional blocks may be implemented simply as different processes running on the same computer. Furthermore the computer or computers that perform the functions of server may perform other data processing and management functions as well. All such alternative configurations are considered to be within the scope of the present invention.

The functions of server are described in greater detail with reference to the figures that follow. Briefly server comprises a crawler which collects documents from system . An indexer builds an index of terms in each document as well as an index of the documents themselves. A classifier compares the documents in order to create a version index which indicates the association rates between documents in system . Indexer and classifier store the indices in an internal repository which typically comprises a suitable storage device or group of such devices. The term index as used in the context of the present patent application and in the claims means any suitable sort of searchable listing. The indices that are described herein may be held in a database or any other suitable type of data structure or format.

A searcher receives requests from users of client computers or from other applications to search the documents in system for versions of a given base document. In response to such requests the search consults the version index and provides the requester with a listing of all other documents whose association rates with the base document are above a given threshold which may be preset or chosen by the user . The user may then browse the content and metadata of the documents in the listing in order to find the desired version.

A document converter parser which is functionally separate from the document retrieval operations of the crawler converts each of these documents into standard text format. This conversion may include applying automated character recognition to document image formats as well as extracting text from spreadsheets in the manner described below with reference to .

Indexer comprises a document preprocessor which tokenizes each document into single words. The preprocessor may also remove stop words commonly used auxiliary words such as articles and pronouns as well as punctuation marks. When system includes documents in multiple different languages the set of stop words may be chosen by preprocessor according to the language or languages of the document in question.

A versioning indexer creates a term index and a document index in repository and places appropriate entries for each new document in these indices. For this purpose indexer divides the document into terms of k consecutive words each wherein k is a small fixed integer typically between three and seven. Using k token sequences rather than single tokens helps to ensure stability and reduce errors in comparing documents. Successive terms may overlap one another. For example when five word terms are used the first term may contain words 1 5 the next term words 2 6 and so forth. 

Indexer creates a single record for each term in term index . The key to each record is the term itself or a suitable representation of the term. Each record contains a list of the document identifiers document IDs that represent the documents in which the term occurs. The list may be in a compressed form such as a Zip file . The terms may be hashed using a suitable algorithm such as MD5 to create respective numbers which may then be used as keys for easy database access and random term sampling in document comparison as explained below.

Document index is a reverse index which holds for each document according to its document ID a list of the terms in the document. The term lists in index may likewise be compressed. The reverse list in index is required mainly for purposes of document update and delete operations When a document is updated or deleted the terms in the document are found using document index and the term records in term index are updated accordingly

For efficient document processing indexer may bulk store the sets of document ID document term list data in a database queue for further processing. The document term lists are then dequeued non synchronically and both of indices and are updated accordingly.

After the above tables have been updated a versioning classifier in classification engine computes the association rates between pairs of documents using term index . This process is shown in greater detail in as described hereinbelow. Classifier writes the association rates that are above a certain threshold indicating that a versioning link exists between the documents in question to a version index in repository .

Version index may subsequently be queried by searcher according to the document ID of any chosen document referred to herein as the base document . The query returns the document IDs of all documents that are versions of the base document or possibly only the versions with an association rate above a certain threshold that is specified in the query. The searcher may present the results to the user via a client user interface of server . Alternatively or additionally the version index may be accessed by another system or application using a suitable API.

Versioning classifier receives a set of k word terms T . . . T which were found by indexer in the current input document D and were indexed as described above. The versioning classifier chooses one of these terms at a term selection step . For each term the versioning classifier retrieves from term index the document IDs of all the stored documents D . . . Dthat contain this term at a document identification step . For greater efficiency steps and may be performed only on a random subset of all the terms in document D. The inventors have found for example that sampling 10 of the terms is usually sufficient.

For each document Dthat was found to contain the term in question versioning classifier counts the number of terms that are shared by Dand D i.e. terms that occur in both documents at a term counting step . This count is denoted Count Common D D . The versioning classifier uses this count at a rate computation step in calculating the normalized association rate Count Common MaxNumber of terms in Number of terms in . The versioning classifier compares the associate rate value to a predetermined threshold for example 0.4 at a rate comparison step . If the value is above threshold the versioning classifier saves a corresponding entry in versioning index as described above at an index recording step . Alternatively the association rate may be defined such that a low value is indicative of a high measure of similarity between documents. 

Versioning classifier checks whether there are any remaining documents found at step that have not yet been processed at a document checking step . If so the next such document is processed starting at step . Otherwise the versioning classifier checks whether there are further terms in document D to be processed at a term checking step . If so the next such term is chosen at step . This procedure continues until all of terms T . . . Thave been processed.

In the process described above there is no need for server to scan all of term index It is sufficient to access only the records corresponding to the terms in document D and the documents listed in these records . Therefore the procedure shown in may be carried out concurrently and in conjunction with creating the entries for document D in indices and .

Prior to document comparison indexer saves for each cell in the current spreadsheet both the formula and the data value of the cell at a cell processing step . For example a formula in an EXCEL spreadsheet may have the form A2 A3. The data value is the result of the computation specified by the formula or is a fixed value stored in the spreadsheet and may be either a number or a text string. The indexer will save the above formula as A2 A3 while the saved data value will be the actual numerical sum of the value in cell A2 and the value in cell A3. The indexer counts the total number of cells in the spreadsheet that contain formulas and the total number of cells containing fixed values.

Indexer divides the spreadsheet into k word terms at a term extraction step . In this context a word may be either a formula or a data value. This step is performed separately over the values and the formulas in the cells and over the rows and columns of the spreadsheet thus generating sets of row terms and column terms. In other words step includes the following sub steps 

Classification engine carries out the method of for the current spreadsheet document D with respect to each of the four types of terms in the document RVT CVT RFT and CFT at an association rate computation step . The classification engine thus computes separate values of the normalized association rate A for each type of terms in each document Dthat is compared to D A RVT A CVT A RFT and A CFT .

The classification engine then combines these separate values to find an overall weighted average association rate for each compared document D at an average computation step . For this purpose the classification engine first finds weighted average association rates for the rows and the columns of the spreadsheet RFT RVT 1 Row Association Rate CFT CVT 1 Column Association Rate Here w is the relative weight of the formula based association rates while 1 w is the relative weight of the value based association rates. w has a value between 0 and 1 and is typically set in the range of 0.6 0.8 giving the formula based association rates a higher weight. Typically formulas are more stable than data values over the life cycle of a spreadsheet and are thus a better indicator of a version relationship between different spreadsheets.

The overall association rate between a pair of spreadsheets is the maximum of their Row Association Rate and their Column Association Rate. For multi sheet spreadsheet documents an overall association rate may be set to the average of the maximum of the individual sheet association rates for each sheet since a given sheet in one multi sheet document can have several associations with sheets in another such document .

The overall spreadsheet association rates are used in identifying the stored spreadsheet documents that may be considered versions of the input spreadsheet document in the manner described above. Additionally or alternatively a spreadsheet may be compared to text documents by converting the spreadsheet to a sequence of text tokens.

It will be appreciated that the embodiments described above are cited by way of example and that the present invention is not limited to what has been particularly shown and described hereinabove. Rather the scope of the present invention includes both combinations and subcombinations of the various features described hereinabove as well as variations and modifications thereof which would occur to persons skilled in the art upon reading the foregoing description and which are not disclosed in the prior art.

