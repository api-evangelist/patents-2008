---

title: Methods, systems and computer program products for fault tolerant applications
abstract: Methods, systems and computer program products for architecting fault tolerant applications. Embodiments of the invention include a method for executing an application in a computer system, the method including monitoring a behavior of the computer system, the computer system having a subsystem in an operating system of the computer system, in response to encountering a problem in the computer system, performing switching the application from a normal mode of operation to a critical mode of operation, executing the application in the critical mode of operation, determining if the computer system has returned to the normal mode of operation, in response to the computer system returning to the normal mode of operation switching the application to execute in the normal mode and executing the application in the normal mode of operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07934128&OS=07934128&RS=07934128
owner: International Business Machines Corporation
number: 07934128
owner_city: Armonk
owner_country: US
publication_date: 20080605
---
IBM is a registered trademark of International Business Machines Corporation Armonk N.Y. U.S.A. Other names used herein may be registered trademarks trademarks or product names of International Business Machines Corporation or other companies.

This invention relates to fault tolerant systems and particularly to methods systems and computer program products for architecting fault tolerant applications.

Fault tolerance is a computer system property that enables the system to continue operating properly in the event of the failure of some of its components. As such if the system s operating quality decreases at all the decrease is proportional to the severity of the failure. Typically fault tolerance is achieved by generic techniques which apply to all the applications running on the system. Such techniques may include a disaster recovery system fault tolerant system software kernel support for fault tolerance and hardware support for fault tolerance.

However currently existing solutions to fault tolerance behave in a generic way to handle the system s fault. Currently an application program relies on generic methods of fault tolerance such as on the underlying operating system and firmware to save itself when a problem occurs in the system. As such the application program specifically can t do anything to tolerate the fault. For example suppose an application program uses an Ethernet card for network connection. After some time the Ethernet card does not work properly. Typically the OS fails over to a new redundant Ethernet card and gives the new Ethernet card the same identity as the failed Ethernet card. This operation happens transparently to the application program. The application program keeps on running even in the event of an Ethernet card failure. Here the fault tolerance is provided to all the applications running on the system. This method of handling the fault it a generic one irrespective of type of application programs.

As such an application programmer for the system is left with no option other than to rely on the generic mechanism to handle the fault for the application. In addition the application programmer has no way of designing a better way of handling the fault for what the application programmer believes to be more appropriate in the context of the particular application. It would be desirable to have a fault tolerant system to enable the application programmer with some programming structures which help in designing better way of handling the fault for the application without blindly relying on the generic solutions.

Embodiments of the invention include a method for executing an application in a computer system the method including monitoring a behavior of the computer system the computer system having a subsystem in an operating system of the computer system in response to encountering a problem in the computer system performing switching the application from a normal mode of operation to a critical mode of operation executing the application in the critical mode of operation determining if the computer system has returned to the normal mode of operation in response to the computer system returning to the normal mode of operation switching the application to execute in the normal mode and executing the application in the normal mode of operation.

Additional embodiments include a computer program product for executing an application in a computer system the computer program product including a tangible storage medium readable by a processing circuit and storing instructions for execution by the processing circuit for performing a method including monitoring a behavior of the computer system the computer system having a subsystem in an operating system of the computer system in response to encountering a problem in the computer system performing switching the application from a normal mode of operation to a critical mode of operation executing the application in the critical mode of operation determining if the computer system has returned to the normal mode of operation in response to the computer system returning to the normal mode of operation switching the application to execute in the normal mode and executing the application in the normal mode of operation.

Further embodiments include a system for executing an application the system including a processor an operating system operatively coupled to the processor and a subsystem residing in the operating system wherein the subsystem is configured to monitor problems in the system and notify the application of normal and critical modes of operation on the system.

Other systems methods and or computer program products according to embodiments will be or become apparent to one with skill in the art upon review of the following drawings and detailed description. It is intended that all such additional systems methods and or computer program products be included within this description be within the scope of the present invention and be protected by the accompanying claims.

As a result of the summarized invention technically we have achieved a solution which provides the ability to handle a system fault or any critical condition for his application without relying on the generic techniques. An application programmer can explicitly write code for handling fault which is more suitable for his application rather than relying on a generic technique which improves the programmer s control of the application behavior. As fault tolerance is application specific the systems and methods described herein uses resources sufficient for the application to handle the fault. But in case of generic techniques of handling fault the system uses more resources by taking more precautions and applying more methods which is generic in nature and more than what the particular application needs to handle a critical situation. This paradigm reduces the cost of handling critical conditions. Application specific fault tolerance is more efficient finer grained and more robust than any generic method of fault tolerance.

The detailed description explains the preferred embodiments of the invention together with advantages and features by way of example with reference to the drawings.

Exemplary embodiments include systems and methods that provide an application programmer the control of deciding how to handle a particular critical condition or fault for an application. In exemplary embodiments the application programmer writes or defines two types of modules for the same functionality. One module is a normal module that defines the functionality for a system that is operating in a usual and expected manner. The second type of module is a critical version of the normal module designed for some particular types of critical conditions. The second type of module is functionally equivalent to the first type but fault tolerant and operates in the critical mode. When a critical fault in the computer system occurs the application switches from the normal mode of operation to the critical mode of operation and switches back to the normal mode of operation when the critical fault has been resolved. In exemplary embodiments the system can implement application programming interfaces APIs to switch the application program between the normal mode and the critical mode of operation. This paradigm provides the application programmer the control of deciding how to deal with critical conditions of the system for his application without relying upon the generic fault tolerant system software or any such generic techniques.

In exemplary embodiments the application programmer defines the functionality in the critical versions of the modules assuming that system s condition is critical and faults and other failures can occur any time during the system s operation. In exemplary embodiments the application programmer takes extra precautions while writing the steps of the functionality. The programming structure reflects a more play safe approach unlike the normal module which defines the same function in a usual way. In exemplary embodiments the application programmer registers both the kinds of modules of the same functionality with a new subsystem e.g. named Critical Watch . The subsystem notifies the applications while executing about the criticalness of the system. In exemplary embodiments applications include notification handlers for these kinds of notifications from the new subsystem. In exemplary embodiments upon receiving the notification a handler replaces the normal module with the critical version of the module defined for the particular critical condition of the system for the same functionality. Now the application program runs in the critical condition of the system the critical version of the functionality defined specially for the critical condition of the system. In this way the application attains robustness or reliability in that critical condition of the system. The Critical Watch subsystem notifies the application when the system is back to normal condition. That time the application restores the modules replacing the critical version module with the normal version module of the same functionality. Therefore the application runs the normal version or usual version of the functionality in the normal conditions of the system.

In exemplary embodiments in terms of hardware architecture as shown in the computer includes a processor memory coupled to a memory controller and one or more input and or output I O devices or peripherals that are communicatively coupled via a local input output controller . The input output controller can be for example but not limited to one or more buses or other wired or wireless connections as is known in the art. The input output controller may have additional elements which are omitted for simplicity such as controllers buffers caches drivers repeaters and receivers to enable communications. Further the local interface may include address control and or data connections to enable appropriate communications among the aforementioned components.

The processor is a hardware device for executing software particularly that stored in memory . The processor can be any custom made or commercially available processor a central processing unit CPU an auxiliary processor among several processors associated with the computer a semiconductor based microprocessor in the form of a microchip or chip set a macroprocessor or generally any device for executing software instructions.

The memory can include any one or combination of volatile memory elements e.g. random access memory RAM such as DRAM SRAM SDRAM etc. and nonvolatile memory elements e.g. ROM erasable programmable read only memory EPROM electronically erasable programmable read only memory EEPROM programmable read only memory PROM tape compact disc read only memory CD ROM disk diskette cartridge cassette or the like etc. . Moreover the memory may incorporate electronic magnetic optical and or other types of storage media. Note that the memory can have a distributed architecture where various components are situated remote from one another but can be accessed by the processor .

The software in memory may include one or more separate programs each of which comprises an ordered listing of executable instructions for implementing logical functions. In the example of the software in the memory includes the fault tolerant architecting methods described herein in accordance with exemplary embodiments and a suitable operating system OS . The operating system essentially controls the execution of other computer programs such the fault tolerant architecting systems and methods described herein and provides scheduling input output control file and data management memory management and communication control and related services.

The fault tolerant architecting methods described herein may be in the form of a source program executable program object code script or any other entity comprising a set of instructions to be performed. When a source program then the program needs to be translated via a compiler assembler interpreter or the like which may or may not be included within the memory so as to operate properly in connection with the OS . Furthermore the fault tolerant architecting methods can be written as an object oriented programming language which has classes of data and methods or a procedure programming language which has routines subroutines and or functions. As further described herein the OS can include a subsystem that monitors for problems in the computer . The subsystem is in communication with one or more applications as further described herein each of which can include an exemplary application programming interface .

In exemplary embodiments a conventional keyboard and mouse can be coupled to the input output controller . Other output devices such as the I O devices may include input devices for example but not limited to a printer a scanner microphone and the like. Finally the I O devices may further include devices that communicate both inputs and outputs for instance but not limited to a network interface card NIC or modulator demodulator for accessing other files devices systems or a network a radio frequency RF or other transceiver a telephonic interface a bridge a router and the like. The system can further include a display controller coupled to a display . In exemplary embodiments the system can further include a network interface for coupling to a network . The network can be an IP based network for communication between the computer and any external server client and the like via a broadband connection. The network transmits and receives data between the computer and external systems. In exemplary embodiments network can be a managed IP network administered by a service provider. The network may be implemented in a wireless fashion e.g. using wireless protocols and technologies such as WiFi WiMax etc. The network can also be a packet switched network such as a local area network wide area network metropolitan area network Internet network or other similar type of network environment. The network may be a fixed wireless network a wireless local area network LAN a wireless wide area network WAN a personal area network PAN a virtual private network VPN intranet or other suitable network system and includes equipment for receiving and transmitting signals.

If the computer is a PC workstation intelligent device or the like the software in the memory may further include a basic input output system BIOS omitted for simplicity . The BIOS is a set of essential software routines that initialize and test hardware at startup start the OS and support the transfer of data among the hardware devices. The BIOS is stored in ROM so that the BIOS can be executed when the computer is activated.

When the computer is in operation the processor is configured to execute software stored within the memory to communicate data to and from the memory and to generally control operations of the computer pursuant to the software. The fault tolerant architecting methods described herein and the OS in whole or in part but typically the latter are read by the processor perhaps buffered within the processor and then executed.

When the systems and methods described herein are implemented in software as is shown in it the methods can be stored on any computer readable medium such as storage for use by or in connection with any computer related system or method. In the context of this document a computer readable medium is an electronic magnetic optical or other physical device or means that can contain or store a computer program for use by or in connection with a computer related system or method. The fault tolerant architecting methods described herein can be embodied in any computer readable medium for use by or in connection with an instruction execution system apparatus or device such as a computer based system processor containing system or other system that can fetch the instructions from the instruction execution system apparatus or device and execute the instructions. In exemplary embodiments a computer readable medium can be any means that can store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer readable medium can be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium would include the following an electrical connection electronic having one or more wires a portable computer diskette magnetic a random access memory RAM electronic a read only memory ROM electronic an erasable programmable read only memory EPROM EEPROM or Flash memory electronic an optical fiber optical and a portable compact disc read only memory CDROM optical . Note that the computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory.

In exemplary embodiments where the fault tolerant architecting methods are implemented in hardware the fault tolerant architecting methods described herein can implemented with any or a combination of the following technologies which are each well known in the art a discrete logic circuit s having logic gates for implementing logic functions upon data signals an application specific integrated circuit ASIC having appropriate combinational logic gates a programmable gate array s PGA a field programmable gate array FPGA etc.

As discussed above the exemplary fault tolerant application program provides the application programmer a new paradigm of defining different versions of code for the same functionality under different fault circumstances. A particular version of code replaces any existing version in run time when the Critical Watch subsystem detects that particular circumstance is prevailing in the system. Hence the application programmer retains full control of defining fault tolerant versions of code that the application programmer considers being the best under some fault condition. As such fault tolerance efforts are internal to the application program and controlled by application programmer. However fault tolerance is not transparent to the application programs. In alternate exemplary embodiments transparency of fault tolerance is a paradigm of building application programs in which the application programmer embeds fault tolerance in different versions of same functionality in the application program itself.

The systems and methods described herein therefore provide a more fine grained approach towards fault tolerance. A particular functionality as fine grained as routine in a program is replaced by its fault tolerant version both of them defined by the application programmer. In exemplary embodiments the systems and methods described herein provide programming and building fault tolerant applications that implement an application internal effort to achieve fault tolerance. Furthermore the systems and methods described herein provide enhanced control of the application programmer over behavior of the application program towards fault condition of the system without depending upon the generic system software. As such the systems and methods described herein provide an application with specific ways to handle fault tolerance in contrast to a generalized generic approach to handle the fault. Furthermore no external subsystem is needed to achieve fault tolerance for the application. Finally the systems and methods described herein replace different versions of same functionality in different fault conditions in run time to incorporate fault tolerance to that particular fault condition in an application program.

In exemplary embodiments the application program defines two signal handlers for handling the signals e.g. ENTER CRITICAL and EXIT CRITICAL respectively. In the signal handler for ENTER CRITICAL the application calls the API e.g. panic to replace all the intended normal modules e.g. normal module with its critical versions e.g. modules depending on the type of critical condition. In the signal handler for EXIT CRITICAL the application calls the API to return the normal modules e.g. module back into their positions within the application .

The module func can contain a majority of the functionality what the application program delivers. The routine func is resolved from a module func.so that defines it.

Suppose now that the system is in a critical condition in which the hard drive in not responding properly. In that scenario write file buf 100 does not guarantee writing that buffer into the file. Therefore in this critical condition of the system when hard drive is not responding the functionality of the application program is not reliable and robust.

As per the systems and methods described herein the application programmer defines the same routine in a different module named func critical.so. The definition of func in func critical.so can be as follows 

This critical definition of func does not proceed further until the time it is assured that it has written the data to the file properly. In addition this version of func definition is more robust and reliable when the hard drive is in critical condition than the previous one. Here the application programmer has defined a way of how to face the critical condition for the application. The module func critical.so should also be registered to the subsystem Critical Watch for the critical condition of the system when hard drive responds very slowly.

In addition the application has two signal handlers one for the signal ENTER CRITICAL and the other for the signal EXIT CRITICAL as follows 

As such when hard drive starts responding slower then the Critical Watch subsystem detects this slow response and sends the signal ENTER CRITICAL to the application. The signal handler then catches the signal and invokes panic which in turn replaces func.so with func critical.so. The application then starts running more reliable and robust definition of func than before with func.so. As such the application attains fault tolerance to the hard drive problem of the system. When the system comes to the normal condition then Critical Watch sends EXIT CRITICAL signal to the application. The signal handler again restores func.so and runs the normal definition of func .

The capabilities of the present invention can be implemented in software firmware hardware or some combination thereof.

As one example one or more aspects of the present invention can be included in an article of manufacture e.g. one or more computer program products having for instance computer usable media. The media has embodied therein for instance computer readable program code means for providing and facilitating the capabilities of the present invention. The article of manufacture can be included as a part of a computer system or sold separately.

Additionally at least one program storage device readable by a machine tangibly embodying at least one program of instructions executable by the machine to perform the capabilities of the present invention can be provided.

The flow diagrams depicted herein are just examples. There may be many variations to these diagrams or the steps or operations described therein without departing from the spirit of the invention. For instance the steps may be performed in a differing order or steps may be added deleted or modified. All of these variations are considered a part of the claimed invention.

As described above embodiments can be embodied in the form of computer implemented processes and apparatuses for practicing those processes. In exemplary embodiments the invention is embodied in computer program code executed by one or more network elements. Embodiments include computer program code containing instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other computer readable storage medium wherein when the computer program code is loaded into and executed by a computer the computer becomes an apparatus for practicing the invention. Embodiments include computer program code for example whether stored in a storage medium loaded into and or executed by a computer or transmitted over some transmission medium such as over electrical wiring or cabling through fiber optics or via electromagnetic radiation wherein when the computer program code is loaded into and executed by a computer the computer becomes an apparatus for practicing the invention. When implemented on a general purpose microprocessor the computer program code segments configure the microprocessor to create specific logic circuits.

While the invention has been described with reference to exemplary embodiments it will be understood by those skilled in the art that various changes may be made and equivalents may be substituted for elements thereof without departing from the scope of the invention. In addition many modifications may be made to adapt a particular situation or material to the teachings of the invention without departing from the essential scope thereof. Therefore it is intended that the invention not be limited to the particular embodiment disclosed as the best mode contemplated for carrying out this invention but that the invention will include all embodiments falling within the scope of the appended claims. Moreover the use of the terms first second etc. do not denote any order or importance but rather the terms first second etc. are used to distinguish one element from another. Furthermore the use of the terms a an etc. do not denote a limitation of quantity but rather denote the presence of at least one of the referenced item.

