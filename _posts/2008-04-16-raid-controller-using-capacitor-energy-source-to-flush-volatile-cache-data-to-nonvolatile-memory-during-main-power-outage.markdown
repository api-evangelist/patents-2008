---

title: RAID controller using capacitor energy source to flush volatile cache data to non-volatile memory during main power outage
abstract: A write-caching RAID controller includes a CPU that manages transfers of posted-write data from host computers to a volatile memory and transfers of the posted-write data from the volatile memory to a redundant array of storage devices when a main power source is supplying power to the RAID controller. A memory controller transfers the posted-write data received from the host computers to the volatile memory and transfers the posted-write data from the volatile memory for transfer to the redundant array of storage devices as managed by the CPU. The memory controller flushes the posted-write data from the volatile memory to the non-volatile memory when main power fails, during which time capacitors provide power to the memory controller, volatile memory, and non-volatile memory, but not to the CPU, in order to reduce the energy storage requirements of the capacitors. During main power provision, the CPU programs the memory controller with information needed to perform the flush operation, such as the location and size of the posted-write data in the volatile memory and various flush operation characteristics.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07809886&OS=07809886&RS=07809886
owner: Dot Hill Systems Corporation
number: 07809886
owner_city: Longmont
owner_country: US
publication_date: 20080416
---
This application is a continuation of pending U.S. Non Provisional application Ser. No. 11 226 825 filed Sep. 14 2005 which a continuation in part of pending U.S. Non Provisional application Ser. No. 11 054 203 filed Feb. 9 2005 which claims the benefit of expired U.S. Provisional Application Ser. No. 60 581 556 filed Jun. 21 2004 all of which are hereby incorporated by reference for all purposes.

Application Ser. No. 11 226 825 claims the benefit of the following expired U.S. Provisional Applications which are hereby incorporated by reference for all purposes.

The present invention relates in general to the field of write caching RAID controllers and particularly to the preserving of write cached data during the loss of main power.

Redundant Array of Inexpensive Disk RAID systems have become the predominant form of mass storage systems in most computer systems today that are used in applications that require high performance large amounts of storage and or high data availability such as transaction processing banking medical applications database servers internet servers mail servers scientific computing and a host of other applications. A RAID controller controls a group of multiple physical disk drives in such a manner as to present a single logical disk drive or multiple logical disk drives to a computer operating system. RAID controllers employ the techniques of data striping and data redundancy to increase performance and data availability.

An important characteristic of RAID controllers particularly in certain applications such as transaction processing or real time data capture of large data streams is to provide fast write performance. In particular the overall performance of the computer system may be greatly improved if the write latency of the RAID controller is relatively small. The write latency is the time the RAID controller takes to complete a write request from the computer system.

Many RAID controllers include a relatively large cache memory for caching user data from the disk drives. Caching the data enables the RAID controller to quickly return data to the computer system if the requested data is in the cache memory since the RAID controller does not have to perform the lengthy operation of reading the data from the disk drives. The cache memory may also be employed to reduce write request latency by enabling what is commonly referred to as posted write operations. In a posted write operation the RAID controller reads the data specified by the computer system from the computer system into the RAID controller s cache memory and then immediately notifies the computer system that the write request is complete even though the RAID controller has not yet written the data to the disk drives. Posted writes are particularly useful in RAID controllers since in some redundant RAID levels a read modify write operation to the disk drives must be performed in order to accomplish the system write request. That is not only must the specified system data be written to the disk drives but some of the disk drives may also have to be read before the user data and redundant data can be written to the disks which without the benefit of posted writes may make the write latency of a RAID controller even longer than a non RAID controller.

However posted write operations make the system vulnerable to data loss in the event of a power failure. This is because the cache memory is a volatile memory that loses the user data when power is lost and the data has not yet been written to the disk drives.

To solve this problem some RAID controllers include a battery to continue to provide power to the cache memory in the event of a loss of main power. Although the battery greatly reduces the likelihood that user data will be lost because the energy stored in the battery is finite the possibility still exists that the battery energy will run out before main power can be restored in which case the user data will be lost. The minimum length of time the battery must supply power to the cache memory varies among users of RAID systems however many consumers require at least 72 hours in the event a power failure occurs on a weekend.

However there are some well known limitations associated with the use of batteries in this application. First batteries are a relatively expensive component of the RAID controller. Second for many of the relevant battery technologies the ability of the battery to hold a charge begins to degrade within two or three years which is typically less than the expected lifetime of the RAID controller. Consequently the RAID controller must be designed with the battery as a field replaceable unit and in many cases as a hot pluggable field replaceable unit. This adds further cost to the RAID controller. Third the operating temperature range of batteries outside of which their lifetime and performance degrade is relatively small. Fourth after the battery has been drained due to a main power outage the RAID controller must operate in lower performance write through cache mode until the battery is re charged and the re charge time of batteries is relatively long. Fifth as the size of cache memories increases so does the amount of energy the battery must provide during the main power outage. Given contemporary battery energy densities the size of the battery required to provide the required amount of energy may exceed the available space within the RAID controller.

Therefore what is needed is a RAID controller that employs an alternative solution for maintaining volatile posted write data during a main power outage.

The present invention provides a RAID controller that uses capacitors rather than batteries to supply power in the event of a loss of main power. The RAID controller also includes a non volatile memory such as a FLASH memory to which posted write data can be flushed from cache memory when main power is lost. The RAID controller also includes a memory controller that is capable of performing the flush operation of the posted write data. This reduces the amount of energy storage capacity requirement of the capacitors for at least two reasons first the capacitors do not have to supply power to the CPU of the RAID controller since the CPU does not perform the flush operation second the memory controller performs the flush operation faster than the CPU would.

In one aspect the present invention provides a write caching redundant array of inexpensive disks RAID controller connected to host computers and to a redundant array of storage devices including a volatile memory a non volatile memory and a central processing unit CPU . The CPU manages transfers of posted write data received from the host computers to the volatile memory and transfers of the posted write data from the volatile memory to the redundant array of storage devices when a main power source is supplying power to the RAID controller. The RAID controller also includes a memory controller coupled to the volatile memory and the non volatile memory. The memory controller transfers the posted write data received from the host computers to the volatile memory and transfers the posted write data from the volatile memory for transfer to the redundant array of storage devices as managed by the CPU. The memory controller rather than the CPU flushes the posted write data from the volatile memory to the non volatile memory when the main power source fails to supply power to the RAID controller. The RAID controller also includes at least one capacitor coupled to provide power to the memory controller the volatile memory and the non volatile memory when the main power supply fails to supply power to the RAID controller. The CPU is excluded from receiving power from the at least one capacitor when the main power supply fails to supply power to the RAID controller.

In another aspect the present invention provides a method for preserving posted write data in a write caching redundant array of inexpensive disks RAID controller connected to host computers and to a redundant array of storage devices. The method includes supplying power by at least one capacitor to a volatile memory a non volatile memory and a memory controller of the RAID controller in response to a loss of main power to the RAID controller. The method also includes foregoing supplying power by the at least one capacitor to a central processing unit CPU of the RAID controller in response to the loss of main power to the RAID controller. The CPU manages transfers of the posted write data received from the host computers to the volatile memory and transfers of the posted write data from the volatile memory to the redundant array of storage devices when main power is being supplied to the RAID controller prior to the loss thereof. The memory controller transfers the posted write data received from the host computers to the volatile memory and transfers the posted write data from the volatile memory for transfer to the redundant array of storage devices as managed by the CPU. The method also includes flushing posted write data by the memory controller rather than by the CPU from the volatile memory to the non volatile memory in response to the loss of main power.

In another aspect the present invention provides a write caching redundant array of inexpensive disks RAID controller connected to host computers and to a redundant array of storage devices. The RAID controller includes a volatile memory a non volatile memory and a central processing unit CPU . The CPU manages transfers of posted write data received from the host computers to the volatile memory and transfers of the posted write data from the volatile memory to the redundant array of storage devices when a main power source is supplying power to the RAID controller. The RAID controller also includes a memory controller coupled to the volatile memory and the non volatile memory. The memory controller transfers the posted write data received from the host computers to the volatile memory and transfers the posted write data from the volatile memory for transfer to the redundant array of storage devices as managed by the CPU. The memory controller rather than the CPU flushes the posted write data from the volatile memory to the non volatile memory when the main power source fails to supply power to the RAID controller. The RAID controller also includes at least one battery coupled to provide power to the memory controller the volatile memory and the non volatile memory when the main power supply fails to supply power to the RAID controller. The CPU is excluded from receiving power from the at least one battery when the main power supply fails to supply power to the RAID controller.

An advantage of the embodiments employing the capacitors as a re chargeable energy source is that capacitors are typically less expensive than comparable energy density batteries. Another advantage is that when main power is restored the capacitors may be recharged much more quickly than batteries typically on the order of minutes in contrast to hours for batteries of comparable energy storage capacity consequently when main power is restored the capacitor based RAID controller need not operate in write through mode as long as a RAID controller that employs a battery. Another advantage is that the lifetime of capacitors is typically longer than batteries such that unlike batteries the capacitors may not need to be a field replaceable unit. For example some capacitors have approximately twice the lifetime of batteries. Furthermore some capacitors tolerate a wider range of environmental conditions than batteries. For example current Lithium ion battery technologies are limited to an operating temperature range of approximately 45 60 degrees Celsius whereas some capacitors can operate at up to 85 degrees Celsius.

An advantage of the embodiments employing the non powered CPU flush operation of cached data from the cache memory to non volatile memory by the memory controller is that they require less energy consumption than a CPU assisted flush operation. Consequently the capacitors battery or other re chargeable energy source employed on the RAID controller may be smaller both in terms of volume and energy capacity than required by a RAID controller that employs a relatively large power consuming CPU to perform the flush. Additionally the memory controller is capable of performing the flush operation in a shorter amount of time than the CPU which also reduces the energy capacity requirement of the re chargeable energy source. Finally the memory controller performing the flush operation greatly reduces the complexity of the software executing on the CPU since the software no longer must handle the non graceful transition from normal processing during main power operation to a flush mode of operation in the event of a loss of main power.

Referring now to a block diagram illustrating a RAID controller according to the present invention is shown. In one embodiment the RAID controller may be one of a pair of active active redundant fault tolerant RAID controllers for providing high data availability. In the event of a failure of one RAID controller such as the failure to flush posted write data from volatile memory to non volatile memory as described herein the system may failover to the other RAID controller . Advantageously the RAID controller includes one or more capacitors for supplying power to selected portions of the RAID controller circuits during the loss of main power for enabling a memory controller thereof to quickly and efficiently flush the posted write data from a cache memory to a non volatile memory without assistance from a CPU subsystem of the RAID controller which is not powered by the capacitors as described in detail herein.

The RAID controller includes a host interface for interfacing with host computers. In one embodiment the RAID controller is a local bus based controller such as a controller that plugs into or is integrated into a local I O bus of the host computer system such as a PCI PCI X CompactPCI PCI Express PCI X2 EISA VESA VME RapidIO AGP ISA 3GIO HyperTransport Futurebus MultiBus or any other local bus. In this type of embodiment the host interface comprises a local bus interface of the local bus type. In another embodiment the RAID controller is a standalone controller in a separate enclosure from the host computers that issue I O requests to the RAID controller . For example the RAID controller may be part of a storage area network SAN . In this type of embodiment the host interface may comprise various interfaces such as Fibre Channel Ethernet InfiniBand SCSI HIPPI Token Ring Arcnet FDDI LocalTalk ESCON FICON ATM SAS SATA iSCSI and the like.

The RAID controller also includes a disk interface for interfacing to disk drives or other mass storage devices including but not limited to tape drives solid state disks SSD and optical storage devices such as CDROM or DVD drives. The disk drives store user data. The disk interface may include but is not limited to the following interfaces Fibre Channel Small Computer Systems Interface SCSI Advanced Technology Attachment ATA Serial Attached SCSI SAS Serial Advanced Technology Attachment SATA Ethernet Infiniband HIPPI ESCON iSCSI or FICON. The RAID controller reads and writes data from or to the disk drives in response to I O requests received from host computers.

The RAID controller also includes a volatile cache memory or cache memory or volatile memory . The volatile cache memory is volatile because it ceases to store its data when it is not powered. In one embodiment the volatile cache memory comprises double data rate synchronous dynamic random access memory DDR SDRAM which includes a self refresh mode. When the SDRAM is placed into self refresh mode the SDRAM consumes less power than when not operating in self refresh mode. In other embodiments the volatile cache memory may include other types of volatile memory including but not limited to static random access memory SRAM . The amount of volatile cache memory may be significant. Embodiments in which the volatile cache memory comprises 512 MB 1 GB and 2 GB are contemplated however other embodiments are contemplated in which more or less volatile cache memory is included on the RAID controller .

The volatile cache memory is employed by the RAID controller to buffer data transferred between the hosts and disks. When a host requests data to be written to the disks the RAID controller transfers the data from the host via the host interface into the volatile cache memory and subsequently transfers the data from the volatile cache memory via the disk interface to the disks. Conversely when a host requests data to be read from the disks the RAID controller transfers the data from the disks via the disk interface to the volatile cache memory and subsequently transfers the data from the volatile cache memory via the host interface to the host.

As mentioned above when a host requests data be written to the disks the RAID controller transfers the data from the host via the host interface into the volatile cache memory and subsequently transfers the data from the volatile cache memory via the disk interface to the disks. Normally the RAID controller does not indicate to the host that the write request is complete until the data is actually written to disk. However if configured to do so the RAID controller may cache the data in the volatile cache memory and indicate to the host that the write request is complete before the data is actually written to the disk and then subsequently write or flush the data to disk. This operation is referred to as write caching or may also be referred to as a posted write operation. The data associated with a posted write operation is referred to as posted write data or write cache data. That is posted write data is data stored in the volatile cache memory that has not yet been written to disk but concerning which the RAID controller has told the host that the write operation has completed. Additionally the posted write data as referred to herein may comprise metadata which is used to refer to control information required to write the data to disk including but not limited to the logical block addresses and disk drive unit numbers to which the data must be written and information specifying whether the data is part of a RAID array with a RAID level requiring redundant data to be generated based on the posted write data that also must be written to disk.

The volatile cache memory may also be used by the RAID controller to perform read caching of data i.e. to provide requested data to the hosts from the volatile cache memory rather than from the disks if the requested data is already present in the volatile cache memory because of a previous read request of the same data. Finally the RAID controller may use the volatile cache memory for buffering redundant RAID data generated for writing to the disks.

The RAID controller also includes a CPU subsystem for fetching and executing program instructions to control the transfer of data between the disk drives and the hosts such as described above. The CPU subsystem may include any processor capable of executing stored programs including but not limited to for example a processor and chipset such as an x86 architecture processor and what are commonly referred to as a North Bridge or Memory Control Hub MCH and a South Bridge or I O Control Hub ICH which includes I O bus interfaces such as an interface to an ISA bus or a PCI family bus. In one embodiment the CPU subsystem comprises a Transmeta TM8800 processor that includes an integrated North Bridge and an ALi M1563S South Bridge. In another embodiment the CPU subsystem comprises an Intel Celeron M processor and an MCH and ICH. In one embodiment the CPU subsystem also includes RAM for storing program instructions that are fetched and executed by the microprocessor and a FLASH memory coupled to the CPU subsystem for storing the program instructions in a non volatile manner and which is decompressed and written to the program RAM for execution by the microprocessor. In one embodiment the FLASH memory also stores information such as a signature for comparing with a signature written to a non volatile memory described below to indicate a successful flush of the cache memory to the non volatile memory as described below.

The CPU subsystem receives host computer I O requests from the host interface and processes the requests. Processing the requests may include various functions. For example the host I O request specifies a logical block number and number of blocks of data to be transferred to or from the redundant array however these logical blocks and number of blocks do not typically correspond to the appropriate physical block numbers and number of blocks on the physical disks comprising the redundant array. Therefore the logical block number specified in the host I O request must be translated into the appropriate physical block number number of blocks and disk to be used in performing one or more data transfers between the RAID controller and the disks comprising the redundant array. This translation function is performed by the CPU subsystem . In one embodiment the CPU subsystem performs the translation according to well known RAID techniques. After performing the translation the CPU subsystem programs the disk interface to perform the data transfers between the disks and the volatile cache memory . Additionally the CPU subsystem programs the host interface to perform data transfers between the host computers and the volatile cache memory . Thus when processing a host I O request to write data from a host computer to a redundant array the CPU subsystem programs the host interface to transfer data from the host computer to the volatile cache memory after the data is received into the volatile cache memory the CPU subsystem programs the disk interface to transfer the data from the volatile cache memory to the translated appropriate physical block numbers of the disks comprising the redundant array. Conversely when processing a host I O request to read data from a redundant array to a host computer the CPU subsystem programs the disk interface to transfer the data to the volatile cache memory from the translated appropriate physical block numbers of the disks comprising the redundant array after the data is received into the volatile cache memory the CPU subsystem programs the host interface to transfer the data to the host computer from the volatile cache memory . The CPU subsystem also performs the function of managing allocation of portions of the volatile cache memory for performing the data transfers and in particular of cache management i.e. managing the volatile cache memory as a cache memory for caching portions of the data buffered in volatile cache memory in order to improve I O performance between the redundant arrays and the host computers according to well known caching techniques. In one embodiment the CPU subsystem performs exclusive OR operations of the data required in certain RAID levels that employ parity data as the redundant data such as RAID level 5 for example. In one embodiment the CPU subsystem programs a dedicated exclusive OR circuit comprised within the memory controller to perform the exclusive OR operation on the user data to generate the redundant parity data.

The RAID controller also includes a non volatile memory . The non volatile memory is non volatile because it continues to store its data when it is not powered. In one embodiment the non volatile memory comprises a Compact FLASH memory device comprising NAND Flash devices and a controller that presents an ATA interface to a memory controller which is described below . Embodiments in which the non volatile memory comprises 256 MB 512 MB and 1 GB contemplated however other embodiments are contemplated in which more or less non volatile memory is included on the RAID controller . In one embodiment the non volatile memory comprises a micro disk drive. The non volatile memory is used by the RAID controller to backup or flush the contents of the volatile cache memory particularly the posted write data in response to a loss of main power so that when main power returns the posted write data may be restored from the non volatile memory to the volatile cache memory .

The RAID controller also includes a memory controller coupled to the disk interface host interface cache memory and non volatile memory . The memory controller controls accesses by the disk interface host interface and CPU subsystem to the cache memory and non volatile memory . In one embodiment the memory controller also functions as a bus bridge for bridging communications between the volatile cache memory bus the non volatile memory bus the CPU subsystem bus and the host interface and disk interface buses. In one embodiment the memory controller is a custom large scale integrated circuit. In one embodiment the memory controller comprises a custom programmable logic device. The memory controller is described in more detail below with respect to .

During normal operation the RAID controller receives power from a main power source external to the RAID controller including but not limited to a common commercially supplied A C power source as is well known in the art of power supplying. However the RAID controller also includes one or more capacitors for supplying power to the RAID controller in the event of a loss of main power as described in more detail below. If some or all of the charge or energy store on the capacitors is depleted because of a main power outage the capacitors are re charged from the main power source once main power is restored. In one embodiment the capacitors employ Aerogel carbon technology as an active material and are configured as an array of parallel capacitors in a single package. In one embodiment the capacitors comprise four model B1860 2RS107 PowerStor B Series Aerogel Supercapacitors manufactured by Cooper Bussman of Boynton Beach Fla. a division of Cooper Industries. However other embodiments are contemplated and the present invention is not limited to a particular capacitor model or capacitor technology.

The RAID controller also includes a power regulator coupled to receive power from both the capacitors and the main power source. The power regulator senses whether the main power source is supplying power and if so regulates the main power source to provide power to the various RAID controller circuits. If the main power source is not supplying adequate power the power regulator regulates the capacitors to provide power to a subset of the RAID controller circuits as described in more detail below.

The RAID controller also includes a power manager coupled to the power regulator and to the memory controller . The power manager also senses whether the main power source is supplying power. If the power manager senses a loss of main power the power manager selectively instructs the memory controller to flush the posted write data from the cache memory to the non volatile memory as described in detail below. In one embodiment the power manager comprises a micro complex programmable logic device CPLD that consumes very low power. Additionally other circuits may be employed to perform the functions described herein that are performed by the power manager such as custom integrated circuits or discrete components.

In the embodiment of when main power is lost the capacitors supply power only to the cache memory the non volatile memory the memory controller and power manager and other circuits required to keep those circuits operational such as bus terminators of the high speed memory bus coupling the memory controller to the cache memory . That is the capacitors supply power only to the circuits required to perform the flush operation of the posted write data from the cache memory to the non volatile memory . Advantageously the capacitors do not supply power to the circuits not required to perform the flush namely the CPU subsystem disk interface host interface and unneeded portions of the memory controller such as the portions for interfacing with the CPU subsystem disk interface and host interface .

In the present disclosure a flush operation refers to a copying of data from the cache memory to the non volatile memory in response to a loss of main power whereas a restore operation refers to a copying of data from the non volatile memory to the cache memory after main power is restored. The RAID controller selectively performs a restore operation when main power is restored as described below.

Referring now to a block diagram illustrating in more detail the memory controller of according to the present invention is shown. The memory controller includes control logic for controlling various portions of the memory controller . In one embodiment the control logic includes a direct memory access controller DMAC that copies the data from the volatile cache memory to the non volatile memory during the flush operation.

The control logic receives a reset signal from the power manager of . When the power manager asserts the reset signal the memory controller is reset. The power manager is configured to selectively reset the cache memory in such a manner that when the RAID controller is reset or when main power is restored if the contents of the cache memory are still valid the memory controller does not invalidate the contents of the cache memory . For example if the cache memory is in the process of performing a flush operation the power manager does not reset the memory controller thereby enabling the CPU subsystem to gracefully abort the flush operation as described below.

The control logic also receives a pwr state signal from the power manager . The power manager instructs the memory controller to perform actions via the pwr state signal as described in Table 1 below. In particular the power manager instructs the memory controller to flush the cache memory contents to the non volatile memory with one value of the pwr state signal and instructs the memory controller to place the cache memory into self refresh mode with another value of the pwr state signal in response to different events such as a loss of main power or completion of a flush operation as discussed below.

The control logic also provides a flush status signal to the power manager . The memory controller provides the power manager with the current cache memory to non volatile memory flush state via the flush status signal as described in Table 2 below. In particular the memory controller indicates to the power manager via the flush status signal whether or not a flush operation is in progress and whether or not a flush operation has completed with or without errors.

The memory controller also includes a local bus interface such as a PCI X interface for interfacing the memory controller to the disk interface another local bus interface such as a PCI X interface for interfacing the memory controller to the host interface a memory bus interface such as a DDR SDRAM interface for interfacing the memory controller to the cache memory and an ATA interface for interfacing the memory controller to the non volatile memory . The local bus interfaces and memory bus interface and ATA interface are all coupled to the control logic and are also coupled to buffers such as first in first out FIFO buffers that buffer data transfers between the various interfaces and provide parallel high speed data paths therebetween. In one embodiment the ATA interface supports ATA PIO Mode 4 and a data transfer rate of up to 16.7 MB second.

The memory controller also includes a local bus interface such as a PCI interface coupled to the control logic for interfacing the memory controller to the CPU subsystem . The CPU subsystem accesses the cache memory non volatile memory disk interface and host interface via the PCI interface .

The memory controller also includes control and status registers CSRs coupled to the local bus interface and to the control logic . The CSRs are programmable by the CPU subsystem of to control the memory controller and are readable by the CPU subsystem for the memory controller to provide status to the CPU subsystem . Among the CSRs are control registers that enable the CPU subsystem to specify the location and size of one or more regions of data such as posted write data in the cache memory which the memory controller is to flush to the non volatile memory when main power is lost. The CSRs are described in detail below with respect to .

Referring now to a block diagram illustrating the CSRs of according to the present invention is shown. The various CSRs and their contents are described in the text and Tables below.

The NVB FLUSH CTRL Register provides the CPU subsystem the ability to initiate a flush operation similar to the ability of the power manager to initiate a flush operation via the pwr state signal and provides the CPU subsystem the ability to read the status of a flush operation similar to the ability of the power manager to read the flush operation status via the flush status signal . When main power is restored and the CPU subsystem software boots a flush operation may still be in progress and the cache memory contents may still be valid. Consequently in one embodiment the CPU subsystem may command the memory controller to abort an in progress flush operation since the cache memory contents may still be valid by writing a 0 to the FLUSH START bit in the NVB FLUSH CTRL Register as described in Table 3.

The NVB RESTORE CTRL Register provides the CPU subsystem the ability to initiate a restore operation from non volatile memory to cache memory and provides the CPU subsystem the ability to read the status of a restore operation.

The NVB RAM START ADDR Register specifies the starting address in the cache memory of a first region of data that is the source or sink of a flush or restore operation respectively.

The NVB ATA START ADDR Register specifies the starting address in the non volatile memory of the first region of data that is the sink or source of a flush or restore operation respectively. In one embodiment the memory controller converts the non volatile memory address specified in the NVB ATA START ADDR Register to a sector number if the non volatile memory is a sectored ATA device.

The NVB SIZE Register specifies the total size or length of the first region of data that is to be copied by a flush or restore operation.

The NVB RAM START ADDR Register specifies the starting address in the cache memory of a second region of data that is the source or sink of a flush or restore operation respectively.

The NVB ATA START ADDR Register specifies the starting address in the non volatile memory of the second region of data that is the sink or source of a flush or restore operation respectively. In one embodiment the memory controller converts the non volatile memory address specified in the NVB ATA START ADDR Register to a sector number if the non volatile memory is a sectored ATA device.

The NVB SIZE Register specifies the total size or length of the second region of data that is to be copied by a flush or restore operation.

The NVB SECTOR COUNT Register specifies the number of sectors to use for each write read command issued by the memory controller to the non volatile memory ATA device. The NVB SECTOR COUNT Register may be used to optimize the speed of the flush and restore operations to and from the non volatile memory ATA device. The NVB SECTOR COUNT Register is used in conjunction with the NVB SIZE Register . For example the CPU subsystem may program the NVB SIZE Register with a value of 256 KB and the NVB SECTOR COUNT Register with a value of 32 resulting in the 256 KB of data being written as 16 write commands of 32 sectors 16 KB each. The NVB SIZE Register must be programmed with a value that is a multiple of the NVB SECTOR COUNT Register value.

The NVB PROGRESS Register specifies the current address in the cache memory being read from or written to during a flush operation or restore operation respectively. The NVB PROGRESS Register is valid only when a flush or restore operation is in progress. The NVB PROGRESS Register enables the CPU subsystem to assess the progress of a flush or restore operation. If the flush or restore operation generates an error the NVB PROGRESS Register value specifies the approximate address where the error occurred. If a flush or restore operation is aborted the NVB PROGRESS Register will have incremented to the next sector after the abort occurs.

The ATA INT STATUS Register may be read by the CPU subsystem to determine whether the non volatile memory ATA device has generated an interrupt such as upon the successful read or write of one or more sectors of data during a flush or restore operation and to determine whether a flush or restore operation has completed. The ATA INT STATUS Register also enables the CPU subsystem to clear the interrupt source.

The ATA INT ENABLE Register enables the CPU subsystem to enable or disable interrupt sources specified by the ATA INT STATUS Register .

The NVB ERROR CODE Register specifies the error type when a flush or restore operation completes if the NVB FLUSH CTRL Register or NVB RESTORE CTRL Register indicates a failure. When an ECC error is detected the operation terminates at the next sector boundary. Consequently up to 512 bytes may be transferred after the error occurs. In one embodiment the CPU subsystem has the ability to cause ECC errors to be ignored. Hardware detection of ATA device errors is performed by checking the contents of the ATA Device Status register which is a Task File register in the ATA Direct Access Registers discussed below. The memory controller reads the ATA Device Status register after issuing the ATA command and after the transfer of each sector completes. Consequently ATA device errors are detected and reported at the sector boundary where the error occurs i.e. up to 512 bytes may transfer after the ATA error actually occurs. Likewise ATA operations terminate only at a sector boundary.

The NVB CONFIG Register enables the CPU subsystem to configure aspects of a flush operation. In particular the CPU subsystem may enable the memory controller to automatically perform a flush operation or may disable the memory controller from automatically performing a flush operation. Additionally the CPU subsystem may selectively instruct the memory controller via the NVB CONFIG Register to write to the non volatile memory information specifying the results of a flush operation when the flush operation ends whether the flush was successful or was aborted or an error occurred as described below. The memory controller writes the flush results information to a predetermined flush results sector of the non volatile memory ATA device. In one embodiment the flush results sector is the first sector of the non volatile memory .

The ATA CRC Register contains the 32 bit CRC for the data when a flush or restore operation is completed. The CRC data is automatically written to the write results sector if the option is enabled. In one embodiment a flush operation writes the CRC value to the write results sector and when a restore operation is performed the CRC value is compared to the ATA CRC Register value to determine if any data corruption occurred during the flush or restore operation indicated by a mismatch.

The format of the flush results information written to the non volatile memory ATA device flush results sector is described in Table 19 below.

The Completion Signature value is also stored in the code FLASH so that the CPU subsystem can compare it with the Completion Signature in the non volatile memory flush results sector to determine whether a flush operation was successful. Additionally in one embodiment the memory controller computes a running cyclic redundancy code CRC of the data as it flushes the data to the non volatile memory and writes the final CRC value to the flush results sector at the offset shown in Table 19. This enables the CPU subsystem to generate a CRC when reading the data during a restore operation to verify that the data is valid i.e. that the data was accurately written to the non volatile memory by the flush operation by comparing with the ATA CRC Register value.

The ATA Direct Access Registers comprise control and status registers used by the CPU subsystem to communicate with the non volatile memory ATA device. In one embodiment the ATA Direct Access Registers comprise a standard ATA register file commonly known as a Task File which is well known in the art of disk drives. The memory controller reads and writes the ATA Direct Access Registers to perform ATA commands with the non volatile memory ATA device such as writes of posted write data during a flush operation and reads of the data during a restore operation. The CPU subsystem may also directly access the ATA Direct Access Registers .

Referring now to a flowchart illustrating operation of the RAID controller of to perform a flush operation according to the present invention is shown. Flow begins at block .

At block the CPU subsystem programs the memory controller CSRs of with the information needed by the memory controller to perform an automatic flush operation. Preferably the CPU subsystem software performs this function as part of its initialization sequence during boot up. In particular the CPU subsystem programs the NVB FLUSH CTRL Register the NVB RAM START ADDR Register the NVB ATA START ADDR Register the NVB SIZE Register the NVB RAM START ADDR Register the NVB ATA START ADDR Register the NVB SIZE Register the NVB SECTOR COUNT Register the ATA INT ENABLE Register and the NVB CONFIG Register with the desired values to provide the memory controller with the necessary information to perform a flush operation. In one embodiment the CPU subsystem programs the memory controller to flush all cached data i.e. posted write data and read cached data however in another embodiment the CPU subsystem programs the memory controller to include only posted write data thereby reducing the amount of energy and time required to perform the flush operation. In addition the CPU subsystem may initialize the flush results sector to a predetermined value in order to enable the CPU subsystem to determine whether the memory controller successfully wrote the flush operation results information to the flush results sector at the end of a flush operation. For example in one embodiment the CPU subsystem writes or erases the flush results sector with a value of 0xFF for each byte in the sector. The CPU subsystem subsequently begins normal operation while the main power source supplies power to the RAID controller . Normal operation includes performing posted write operations causing posted write data to be stored into the volatile cache memory . Flow proceeds to block .

At block the main power source fails to supply power to the RAID controller . In response the capacitors begin supplying power to the predetermined portions of the RAID controller namely to the cache memory the non volatile memory the memory controller the power manager and power regulator and related circuitry. In particular the capacitors do not supply power to the CPU subsystem disk interface or host interface . Additionally the PCI X interfaces and and FIFOs that are not needed because they are used only to interface with the disk interface and host interface are not powered by the capacitors . Consequently advantageously the CPU subsystem disk interface host interface and unneeded portions of the memory controller do not consume energy during the flush operation thereby enabling the RAID controller to employ capacitors capable of storing less energy which typically implies capacitors that are less expensive and or require less space. Additionally the fact that the CPU subsystem disk interface and host interface do not consume energy stored in the capacitors leaves more energy stored in the capacitors once the flush operation is complete which increases the likelihood that the capacitors will continue to supply power to the cache memory after the flush is complete thereby keeping the posted write data intact which may alleviate the need for a restore operation when the main power is restored as described below. Flow proceeds to block .

At block the power manager detects the loss of main power and commands the memory controller via the pwr state signal to begin a flush operation of data from the cache memory to the non volatile memory . Flow proceeds to block .

At block if the AUTO FLUSH EN bit in the NVB CONFIG Register is set then the memory controller performs a flush operation based on the information previously programmed into the CSRs at block . In particular the memory controller copies the data in the two regions specified by the NVB RAM START ADDR Register NVB SIZE Register and NVB RAM START ADDR Register NVB SIZE Register to the two locations in the non volatile memory specified by the NVB ATA START ADDR Register and NVB ATA START ADDR Register respectively in a manner specified by the NVB SECTOR COUNT Register and the ATA INT ENABLE Register . In one embodiment the first region includes the portion of the posted write data that includes the actual user data and the second region includes the portion of the posted write data that is metadata. In another embodiment the first region includes the posted write user data and associated metadata and the second region includes read cached user data and associated metadata. However the use of the two regions is not limited to these embodiments. Furthermore embodiments are contemplated in which the CSRs include registers for specifying more or less than two data regions. Flow proceeds to block .

At block if the WR FLUSH RESULTS EN bit in the NVB CONFIG Register is set then the memory controller writes the flush results information specified in Table 19 above to the flush results sector of the non volatile memory at the end of the flush operation whether the flush operation was successful was aborted or was terminated due to an error. If the CPU subsystem aborts a flush or restore operation or if the memory controller detects an ECC or ATA error during the flush or restore operation then the memory controller will terminate the flush or restore operation at the next sector boundary. If the WR FLUSH RESULTS EN bit in the NVB CONFIG Register is set the memory controller will write the flush results sector and post a Boolean on the flush status signal and in the FLUSH STATUS bits of the NVB FLUSH CTRL Register . If while the memory controller is writing the flush operation results to the flush results sector itself the CPU subsystem commands an abort or the memory controller detects an error the flush operation results may or may not be written successfully to the flush results sector and if they are written the flush results information may be unreliable. Flow proceeds to block .

At block after the power manager commands the memory controller to initiate the flush operation the power manager monitors the progress of the flush operation via the flush status signal . When the flush operation completes the power manager commands the memory controller via the pwr state signal to place the cache memory into self refresh mode in order to reduce the amount of energy stored in the capacitors that is consumed by the cache memory . Flow proceeds to block .

At block the memory controller places the cache memory into self refresh mode in response to the command performed by the power manager at block . Flow proceeds to block .

At block the power manager causes the capacitors to supply power to the cache memory only. That is the power manager causes the capacitors to no longer supply power to the non volatile memory and the memory controller in order to reduce the amount of energy stored in the capacitors that is consumed while waiting until main power is restored. Flow ends at block .

Referring now to a flowchart illustrating operation of the RAID controller of in response to main power being restored after a failure of main power according to the present invention is shown. Flow begins at block .

At block the main power source resumes supplying power to the RAID controller . Consequently the CPU subsystem software boots up and begins its initialization sequence. Flow proceeds to decision block .

At decision block the CPU subsystem determines whether the cache memory contents is still valid. In one embodiment the CPU subsystem determines whether the cache memory contents is still valid by examining a data good indicator in the power manager that may be written by the memory controller . The power manager is configured such that when it is powered up the data good indicator resets to a predetermined value such as a Boolean value of zero. Furthermore the power off threshold of the power manager is at least as high as the power threshold at which the cache memory begins to lose its data. When main power is lost the memory controller writes a value into the data good indicator different from the power up reset value. Thus if the capacitors fail to supply power to the cache memory and therefore also fail to supply power to the data good indicator when main power is restored the CPU subsystem will read the power up reset value from the data good indicator rather than the value written by the memory controller . Consequently the CPU subsystem will determine that the cache memory must be restored from the non volatile memory if the flush operation was successful. However if the CPU subsystem reads from the data good indicator the value written by the memory controller then the CPU subsystem will determine that it can forego restoring the cache memory thereby making the user data available to the host computers sooner. If the cache memory contents is still valid flow proceeds to decision block otherwise flow proceeds to decision block .

At decision block the CPU subsystem determines whether a flush operation performed according to was successfully completed by examining the FLUSH STATUS bits of the NVB FLUSH CTRL Register . In one embodiment the CPU subsystem additionally determines whether the flush operation completed successfully by examining the Completion Status in the flush results sector. In one embodiment the CPU subsystem additionally determines whether the flush operation completed successfully by comparing the Completion Signature in the flush results sector with the Completion Signature in the code FLASH . In one embodiment the CPU subsystem additionally determines whether the flush operation completed successfully by comparing the CRC in the flush results sector with the CRC computed by reading the data from the non volatile memory . If the flush operation completed successfully flow proceeds to block otherwise flow proceeds to block .

At block since the posted write data has been lost the RAID controller fails over to the partner i.e. redundant RAID controller in the system. In one embodiment during normal operation when a host issues a write I O request to the RAID controller the posted write data is also written to the partner RAID controller . Consequently if one of the RAID controllers fails in particular if a flush operation fails on one RAID controller there is a high probability that the flush operation succeeded on the partner RAID controller . If so the partner RAID controller can perform a restore of the posted write data from its non volatile memory to the cache memory and subsequently flush the posted write data to disk. Flow ends at block .

At block the CPU subsystem commands the memory controller to perform a restore operation to restore the data flushed from the cache memory to the non volatile memory during the flush operation described in back to the cache memory . Prior to commanding the memory controller to perform the restore operation the CPU subsystem programs the appropriate values into the various CSRs of the memory controller needed to perform the restore operation. In one embodiment the CPU subsystem performs the restore operation rather than commanding the memory controller to perform the restore operation by simply reading data from the non volatile memory and writing the data to the cache memory . Because the restore operation is performed while the main power source is supplying power it is not as crucial that the memory controller perform the restore operation at a lower power consumption level. However this embodiment has the disadvantage that the CPU subsystem may take longer than the memory controller to complete the restore operation. Flow proceeds to block .

At block the CPU subsystem flushes the posted write data from the cache memory to disk. Flow ends at block .

At decision block the CPU subsystem determines whether a flush operation is in progress by reading the FLUSH STATUS bits of the NVB FLUSH CTRL Register . If a flush operation is in progress flow proceeds to decision block otherwise flow proceeds to block .

At decision block the CPU subsystem examines the capacitors voltage level to determine whether the voltage level is above a minimum threshold. In one embodiment the minimum voltage threshold value is programmed into the CPU subsystem software. In another embodiment the minimum voltage threshold value is user programmable via a user configuration program. If the capacitors voltage level is above the minimum threshold flow returns to decision block to wait until either the flush operation completes or the capacitors voltage reaches the minimum threshold otherwise flow proceeds to block .

At block the CPU subsystem aborts the flush operation by writing a Boolean 0 to the FLUSH START bit in the NVB FLUSH CTRL Register . Flow proceeds to block .

The process of waiting to boot the RAID controller and resume normal operations if the cache memory is still good and a flush operation is in progress until either the flush completes or the capacitors voltage level reaches the minimum threshold solves the problem which might exist without the benefit of the additional test at decision block as exemplified by the following sequence of events. Assume the power manager senses the loss of main power and commands the memory controller to perform a flush operation. A significant amount of the capacitors stored energy is consumed by the flush operation. Before the flush operation completes main power is restored consequently the CPU subsystem aborts the flush operation. The CPU subsystem boots up and enables another flush operation in the event of another main power loss. Shortly thereafter and significantly while the capacitors are less than fully re charged the power manager senses another loss of main power and commands the memory controller to perform another flush operation. The second flush operation consumes again a significant amount of the capacitors stored energy which began with less than a full charge. If this sequence continues eventually the capacitors will not have enough energy to complete a successful flush operation resulting in potential loss of user data. The scenario described above may be induced by periodic brown outs of the main power supply or possibly by a noisy power supply that cause the power manager to sense that main power is being lost in a relatively periodic fashion in which the period is on the order of the flush operation time. However advantageously the additional test at decision block potentially avoids this problem.

In one embodiment the capacitors comprise a 200 Farad package of four 50 Farad capacitors in series storing 336 Joules of usable energy when fully charged assuming a 2.0 Volt charged voltage level of each capacitor and a 0.8 Volt cut off voltage which defines the minimum working voltage for reliable FET gate thresholds and low drop out regulation. In one embodiment the power consumption of the cache memory non volatile memory memory controller power manager DDR SDRAM bus interface termination circuitry a clocking circuit and other miscellaneous circuitry requiring power during the flush operation is approximately 4 Watts. The non volatile memory is capable of being written to at a sustained rate of approximately 10 MB second. In one embodiment the size of the cache memory is 1 GB which comprises approximately 512 MB allocated to storage of posted write data and the size of the non volatile memory is 512 MB. Consequently the flush operation takes approximately 50 seconds to complete and consumes approximately 200 Joules of energy. In another embodiment the size of the cache memory is 512 MB which comprises approximately 256 MB allocated to storage of posted write data the size of the non volatile memory is 256 MB and the non volatile memory is capable of being written to at a sustained rate of approximately 7.5 MB second. Consequently the flush operation takes approximately 33 seconds to complete and consumes approximately 133 Joules of energy. This is in contrast to the relatively large amount of energy consumed by the CPU subsystem in some embodiments. For example in one embodiment the CPU subsystem consumes approximately 15 Watts during normal operation hence if the CPU subsystem was powered during the flush operation the capacitors embodiment described above would not be able to provide the required energy for either of the flush operations described above. However the embodiments described above which do not provide power to the CPU subsystem during the flush operation advantageously enable the flush operation to be performed within the energy storage capabilities of a cost effective capacitor solution in many applications such as the capacitors of the embodiments described in this paragraph. However the present invention is not limited to the capacitors embodiments described herein but may be adapted to employ capacitors with more or less energy storage capacity and density as needed by the particular RAID controller application.

Although embodiments have been described in which the memory controller is employed to perform the posted write data flush from volatile memory to non volatile memory embodiments are contemplated in which the CPU performs the flush from volatile memory to non volatile memory as illustrated in . The embodiment of which use the CPU subsystem to perform the flush operation may be a viable embodiment if one or more of the following in combination is true the energy density of the capacitors is sufficiently high to store the energy needed by the RAID controller including the CPU subsystem to perform the flush operation the available space allocated for the capacitors on the RAID controller is sufficiently great to use enough capacitors to store the energy needed by the RAID controller including the CPU subsystem to perform the flush operation the CPU subsystem consumes a small enough amount of power such that the capacitors can store the energy needed by the RAID controller including the CPU subsystem to perform the flush operation. Although this embodiment may consume more energy than the embodiments described in if the capacitors are able to supply the required energy then the RAID controller would enjoy the benefits of capacitor technology over battery technology described herein such as lower cost higher reliability less maintenance and shorter re charge time.

Referring now to a block diagram illustrating a RAID controller according to an alternate embodiment of the present invention is shown. The RAID controller of is similar to the RAID controller of however the power manager is coupled to communicate with the CPU subsystem with respect to flush operations rather than to the memory controller as shown and as described with respect to .

Referring now to a flowchart illustrating operation of the RAID controller of to perform a flush operation according to an alternate embodiment of the present invention is shown. Flow begins at block .

At block the main power source fails to supply power to the RAID controller . In response the capacitors begin supplying power to the predetermined portions of the RAID controller namely to the cache memory the non volatile memory the memory controller the power manager power regulator CPU subsystem and related circuitry. In particular the capacitors do not supply power to the disk interface or host interface . Additionally the PCI X interfaces and and FIFOs that are not needed because they are used only to interface with the disk interface and host interface are not powered by the capacitors . Consequently advantageously the disk interface host interface and unneeded portions of the memory controller do not consume energy during the flush operation thereby enabling the RAID controller to employ capacitors capable of storing less energy which typically implies capacitors that are less expensive and or require less space. Additionally the fact that the disk interface and host interface do not consume energy stored in the capacitors leaves more energy stored in the capacitors once the flush operation is complete which increases the likelihood that the capacitors will continue to supply power to the cache memory after the flush is complete thereby keeping the posted write data intact which may alleviate the need for a restore operation when the main power is restored as described below. Flow proceeds to block .

At block the power manager detects the loss of main power and notifies the CPU subsystem that a flush operation of data from the cache memory to the non volatile memory is needed. Flow proceeds to block .

At block the CPU subsystem performs a flush operation by copying the data from the cache memory to the non volatile memory . Flow proceeds to block .

At block the CPU subsystem writes the flush results information specified in Table 19 above to the flush results sector of the non volatile memory upon completion of the flush operation whether the flush operation was successful was aborted or was terminated due to an error. Flow proceeds to block .

At block the CPU subsystem commands the power manager to cause the capacitors to supply power to the cache memory only. That is the power manager causes the capacitors to no longer supply power to the CPU subsystem non volatile memory and the memory controller in order to reduce the amount of energy stored in the capacitors that is consumed while waiting until main power is restored. Flow ends at block .

Although describe embodiments in which capacitors supply power to the RAID controller when main power fails and the CPU subsystem is not involved with and is powered down during the flush operation other embodiments are contemplated in which a battery or other re chargeable power source is employed to supply power when main power fails as illustrated in .

Referring now to a block diagram illustrating a RAID controller according to an alternate embodiment of the present invention is shown. The RAID controller of is similar to the RAID controller of however in the RAID controller of the capacitors of are replaced by a battery . The embodiment of operates similarly to the embodiment of as described in except the battery supplies power during the main power outage rather than the capacitors . That is the memory controller performs the flush operation such that the battery does not supply power to the CPU subsystem during the flush operation. Consequently the embodiment of may enjoy the benefits of reduced energy consumption of the battery or other re chargeable power source achieved by having the memory controller perform the flush operation rather than the CPU subsystem such as requiring a smaller capacity and less expensive battery or other re chargeable power source.

Although the present invention and its objects features and advantages have been described in detail other embodiments are encompassed by the invention. For example although embodiments have been described in which the interface between the memory controller and the non volatile memory is an ATA interface other embodiments are contemplated in which the non volatile memory comprises a NAND Flash memory array to which the memory controller writes directly. Preferably each NAND Flash memory device in the array comprises an 8 bit wide data device and the devices are arranged such that the memory controller performs 16 bit or 32 bit wide write accesses to the non volatile memory to increase the write rate thereby further decreasing the flush operation time. Still further although embodiments have been described in which the non volatile memory comprises FLASH or micro disk technology other embodiments may employ NVRAM or any other type of non volatile storage technology to which the data may be flushed from the cache memory in a time effective and power effective manner.

Finally those skilled in the art should appreciate that they can readily use the disclosed conception and specific embodiments as a basis for designing or modifying other structures for carrying out the same purposes of the present invention without departing from the scope of the invention as defined by the appended claims.

