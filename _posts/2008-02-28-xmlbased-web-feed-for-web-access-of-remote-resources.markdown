---

title: XML-based web feed for web access of remote resources
abstract: Techniques for XML (Extensible Markup Language) web feeds for web access of remote resources are described. In one embodiment, a method includes obtaining information regarding one or more available resources from one or more resource hosts, rendering the information regarding one or more available resources into an Extensible Markup Language (XML) document, and providing the XML document to a user device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08161160&OS=08161160&RS=08161160
owner: Microsoft Corporation
number: 08161160
owner_city: Redmond
owner_country: US
publication_date: 20080228
---
This patent application is related to co pending commonly owned U.S. patent application Ser No. 12 039 732 entitled Centralized Publishing of Network Resources filed Feb. 28 2008 which application is incorporated herein by reference

Users understand and know how to launch resources on their local computer. When connected to a domain e.g. Active Directory domain administrators can ease the burden of installing resources and setting up remote desktops by pushing the resources and settings out via Group Policy.

Current methods of installing resources to non managed desktops over the internet are far from perfect. There are only a few options such as sending out installation files that the users have to install or using technology such as Terminal Services TS Web Access where an administrator may give users a Uniform Resource Locator URL to visit that allows users to launch remote programs through the webpage. However these types of installations have limitations. For example anything a user has to install locally means that the administrator has lost control of patching the resources or upgrading the application without the help of the user installing an additional package. Solutions such as TS Web Access are great for providing the ability to manage the resources but they may be limited in other ways such as the inability to double click on a file and launch the remote application. Therefore methods and systems that reduce or mitigate these undesirable aspects of the conventional methods would have considerable utility.

Techniques for XML Extensible Markup Language based web feeds for web access of remote resources are described. Generally implementations in accordance with the present disclosure advantageously allow an administrator to add remove and update resources from a non managed machine and still allow those resources to behave like a locally installed resource such as having the ability to take over file extensions.

In one embodiment a method includes obtaining information regarding one or more available resources from one or more resource hosts rendering the information regarding one or more available resources into an Extensible Markup Language XML document that describes the one or more available resources in a non client specific format and providing the XML document to a user device. In some embodiments providing the XML document may including providing the XML document as a syndication feed. In further embodiments rendering the information may include providing timestamp information for each of the one or more available resources wherein the timestamp information enables the user device to determine whether each of the one or more available resources have been modified from a previously available resource version.

In another embodiment a method includes receiving an Extensible Markup Language XML document containing information regarding one or more available resources from one or more remote resource hosts parsing the XML document to determine the one or more available resources and displaying information regarding the one or more available resources. The XML document describes the one or more available resources in a non client specific format. In some embodiments the parsing of the XML document may include parsing the XML document to provide one or more of remote application files icons or RDP files.

In yet another embodiment a computing system includes a processing unit a communication component operatively coupled to the processing unit and configured to operatively communicate with a user device and with one or more resource hosts and a memory operatively coupled to the processing unit. The memory includes an Extensible Markup Language XML presentation layer stored thereon and configured to perform operations that when executed on the processing unit perform a method including obtaining information regarding one or more available resources from the one or more resource hosts rendering the information regarding one or more available resources into an XML document that describes the one or more available resources in a non client specific format and providing the XML document to the user device. In alternate embodiments the method further includes determining whether a current list of available resources is cached and available to provide to the client device.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Techniques for XML Extensible Markup Language based web feeds for web access of remote resources are disclosed herein. Generally embodiments of systems and methods in accordance with the present disclosure advantageously provide an ability to launch remote programs that behave much like a locally installed program after it has been launched e.g. clipboard access tooltip integration etc. . In addition such embodiments may leverage the infrastructure of existing web access systems and may also allow an administrator to efficiently add remove and update applications from a non managed machine.

In operation the smart client may make a request to the web server for available resources found on remote resource hosts . In some embodiments the IIS of the XML presentation layer receives the request and provides a call for an XML feed to the XML feed component . In some embodiments the XML presentation layer determines whether a current list of available resources is already cached and available to provide to the smart client . If a current list of resources is not cached the XML presentation layer e.g. using the XML feed component sends requests to one or more of the resource hosts for a list of resources available on each of the resource hosts . The resource hosts return lists of available resources that are available on each respective resource host . The XML feed component renders the lists into an XML feed that is provided back to the smart client . Icons corresponding to the resources available on the remote resource hosts may be displayed on a display component of the user computer . A user not shown may launch selected resources by clicking on the corresponding icons allowing the user to use the resources much like a locally installed program.

The XML feed provided by the XML presentation layer may be a tightly structured XML format for encoding resource data including for example application data . Thus unlike conventional web access systems that may use loosely structured XML format e.g. Extensible HyperText Markup Language that is presentation based and generally oriented around describing a user experience and is intended for consumption by a web browser i.e. is client specific the XML feed provided by the XML presentation layer may be structured more rigorously and may be used to accomplish a different purpose. The XML feed of the present disclosure may include additional information that a XML format that is presentation based can not make use of such as file associations client configuration data and other data that are unknown or unforeseen at this time. Furthermore the XML feed of the present disclosure is non client specific i.e. is general and describes the available resources without making any assumptions about the consuming software. The XML feed is intended to be consumed in a variety of ways including some ways that are unknown or unforeseen at this time.

In some embodiments an existing web access system for accessing remote resources such as the Terminal Services TS Web Access system available from Microsoft Corporation may incorporate aspects of the present disclosure to provide improved service to users of remote resources. Other systems that enable remote access to resources via a network that may be used include for example PC Duo Remote Control available from Vector Networks products available from Citrix or any other suitable remote network access systems. Such web access systems may advantageously include XML feeds in accordance with the present disclosure to collect resource data from resource hosts including terminal servers.

For example in some embodiments an administrator may give the user a Uniform Resource Locator URL to point the smart client toward. The URL could be provided through an electronic communication system e.g. Exchange Everest the Zimbra Collaboration Suite or other suitable system or method and doesn t necessarily preclude that the user has to specifically configure the smart client with the URL. Once the smart client is configured and authenticated the start menu on the client machine may include remote resources that the administrator has made available to that user. In addition file associations may be made for those programs.

When an administrator removes or adds resources available to the user these changes may be mirrored on the client computer s start menu and the file associations may be updated accordingly. From this point on when a user selects a file it may open in either a local or remote resource if one exists that can handle that file type.

One of the advantages of publishing network resources such as remote resources through XML documents is the wide range of standard technologies that support this delivery method. Embodiments in accordance with the present disclosure may also allow an administrator to easily add remove and update resources available to a non managed machine and allow those resources to behave like a locally installed resource.

As further shown in the XML presentation layer receives the request e.g. via an information component or other suitable component . The XML presentation layer is configured to render XML content e.g. using an XML feed component or other suitable component . The XML presentation layer then requests remote resources from a remote application publishing RAP web service such as the Terminal Services RAP Web Access service available from Microsoft Corporation. The RAP web service provides resource information including available resources to the XML presentation layer . The XML presentation layer renders the resource information into an XML feed which is provided back to the web enabled client application .

In a particular embodiment the XML presentation layer uses an existing Terminal Services Web Access TSWA structure for setup and data transport but incorporates novel components and features that transform the list of discoverable resources into an XML document that may include for example the resources icons and Remote Desktop Protocol RDP files. Thus the XML presentation layer provides an XML document that can then be transformed into a Hypertext Markup Language HTML document or consumed directly by other resources.

At the process merges returned resources into a current resource list and the process returns to to determine whether there are any unprocessed servers remaining. Once there are no more unprocessed servers remaining at the process generates an XML document or feed of the current resource list at and returns the XML document of the current resource list at .

Once all resources have been fetched at the process merges returned resources into a current resource list at . An XML document or feed of the current resource list is generated at and the XML document of the current resource list is returned to a web enabled client resource at .

The user computer that receives the XML feed of available resources from the XML presentation layer may be any suitable computing device or platform. For example is a schematic view of a computing device in accordance with an embodiment of the present disclosure. In a very basic configuration the computing device includes at least one processing unit and system memory . Depending on the exact configuration and type of computing device the system memory may be volatile such as RAM non volatile such as ROM and flash memory or some combination of the two. The system memory typically includes an operating system one or more program modules and may include program data . As an alternative program modules as well as the other modules may be implemented as part of the operating system or it may be installed on the computing device and stored in other memory e.g. non removable storage separate from the system memory .

As further shown in the smart client is stored in the system memory . The smart client is configured to operatively communicate with the XML presentation layer to provide an ability to launch remote programs that behave much like a locally installed program after it has been launched. An embodiment of the smart client is described more fully below with respect to .

The computing device may have additional features or functionality. For example the computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. The system memory removable storage and non removable storage are all examples of computer storage media. Thus computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of the device . Computing device may also have input device s such as keyboard mouse pen voice input device and touch input devices. Output device s such as a display speakers and printer may also be included. These devices are well known in the art and need not be discussed at length.

The computing device may also contain a communication connection that allow the device to communicate with other computing devices such as over a network. Communication connection s is one example of communication media. Communication media may typically be embodied by computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media.

Various modules and techniques may be described herein in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures and so forth for performing particular tasks or implementing particular abstract data types. These program modules and the like may be executed as native code or may be downloaded and executed such as in a virtual machine or other just in time compilation execution environment. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. An implementation of these modules and techniques may be stored on or transmitted across some form of computer readable media.

It will be appreciated that the smart client may be configured in a wide variety of ways to provide the desired functionalities and capabilities described herein. For example is a diagrammatic view of a smart client and various interactions with other components of a representative environment in accordance with a particular embodiment of the present disclosure.

In the embodiment shown in the smart client includes a workspace manager that operatively communicates with a feed configuration of the environment . In some embodiments the feed configuration represents user input when connecting to a workspace and may include a Uniform Resource Locator URL and credentials to obtain the resources feed.

The workspace manager may be the central manager or driver of some or all of the activities associated with the functions of the smart client . In some embodiments the workspace manager may be configured to perform one or more of the following manage creation and deletion of workspace folders invoke a parser to gather remote resources or downloaded files e.g. RDP files into a specified folder location invoke a view manager to display the remote resources e.g. by providing a specified folder location manage multiple remote workspaces or any other suitable functions.

For example in some embodiments the workspace manager may create a user interface UI thread and may set up a window message loop. The window message loop may be called during creation of an object. Requests to perform operations on the workspaces may be serialized to the UI thread through the message loop. In particular embodiments the serialization of the UI thread may allow only one configuration process to be ongoing at one time i.e. configuring a new workspace . Attempts by a user to perform more than one operation at a time e.g. starting a Connect to Workspace operation then starting it again before the first is done configuring may be prevented by bringing to foreground the ongoing configurations window. The serialization of the UI thread however may not prevent multiple workspace windows to be open at the same time. Once the configuration process is complete and a workspace window is displayed window events may be conveyed to the window procedure owned by the UI thread. Thus the serialized UI thread can handle multiple open windows and also respond to new workspace management requests. In some embodiments the UI thread may not perform any blocking activities such as network requests disk access etc. Instead such blocking activities may be handed off to a separate worker thread spawned by the UI thread and the worker thread may invoke the parser to handle the blocking activity. The UI thread may also give the user the option to cancel out of any blocking activity.

The parser may be responsible for invoking a feed retriever to fetch a feed of remote resources specified in XML. In particular embodiments the parser may also perform one or more of the following parse the XML files to extract information about RDP files and icons for each remote resource and invoke the feed retriever to download RDP files and icons into a specified folder .

The feed retriever may manage the connection with a resource server such as the web server of . More specifically the feed retriever may be configured to download information XML files RDP files icons etc. from the resource server .

The view manager may be configured to handle the display of remote resources. The view manager may also be configured to perform one or more of the following create and configure an explorer browser control to host the RDP files downloaded by the components of the smart client and to act as a Shell Extension Handler for RDP file types to customize the look and feel e.g. view window location etc. of RDP files in a displayed folder.

In a particular embodiment the functions of the view manager may be performed in different contexts. For example in a first context the Windows Explorer by the Microsoft Corporation may invoke the shell extension handler for RDP files e.g. via COM prior to displaying the files in an explorer browser control. In alternate contexts other methods for handling RDP files prior to display may be used.

In operation the components of the smart client may cooperatively obtain the data resources regarding the workspace including communicating with the server to obtain a list of resources and presenting the data in a user interface e.g. displaying the icons and or RDP files . The smart client may communicate with the resource server to obtain a list of resources. The resources may be ultimately represented on the client computer as RDP files. When the smart client presents the data in a user interface UI it may involve one or more of the following presenting the RDP files in a UI that encapsulates the explorer browser control or customizing the behavior and appearance of RDP files using Shell extension handlers.

It will be appreciated that based on the teachings of the present disclosure a variety of alternate embodiments may be conceived and that the present disclosure is not limited to the particular embodiments described herein and shown in the accompanying figures. For example illustrates an alternate environment for implementing techniques for XML based web feeds in accordance with the present disclosure. In this embodiment the environment includes a user computer having a smart client . A back end operatively communicates with the smart client and with a central server via Application Programming Interfaces and one or more networks . The back end includes an XML presentation layer having a feed component and an Internet information server IIS .

The central server operatively communicates with one or more remote resource hosts having one or more resources or software programs installed thereon. In the embodiment shown in for example the resource hosts include a directory service B such as the directory service known as Active Directory developed by Microsoft Corporation. As noted above the resource hosts may include terminal servers directories directory services e.g. Active Directory centralized publishing sources or any other suitable hosts or sources.

In operation the smart client makes a request to the back end for available resources found on remote resource hosts . In some embodiments the IIS of the XML presentation layer receives the request and provides a call for an XML feed to the XML feed component . In some embodiments the XML presentation layer determines whether a current list of available resources is already cached and available to provide to the smart client and if so then the cached list is provided to the smart client . If a current list of resources is not cached the XML presentation layer e.g. using the XML feed component communicates a request for current resources to the central server which sends requests to the resource hosts for a list of resources available on each of the resource hosts . The resource hosts return lists of available resources that are available on each respective terminal server and the central server provides the available resources information back to the back end . As described above the XML feed component renders the lists into an XML feed that is provided back to the smart client . Icons corresponding to the resources may be displayed on a display component of the user computer allowing the user to use the resources much like a locally installed program.

In further embodiments the XML feed may be used in a variety of alternate ways and may not be limited to delivery to the user computer . For example as shown in the XML feed may be fed back via the network to the central server or to the resource hosts . The fed back XML feed may for example be used by the resource hosts to determine which resources to host or for any other suitable use. In still other embodiments the XML feed may be provided to a web server which may consume the XML feed for various purposes such as for example transforming it e.g. through technologies such as Extensible Stylesheet Language Transformations XSLT into an HTML web page .

As noted above one of the advantages of publishing network resources such as remote resources through XML documents is the wide range of standard technologies that support this delivery method. One such technology is generally referred to as web syndication which simplifies the process of notifying end users about changes to published network resources.

For example it may be of interest to the end user that their personal client computer should constantly grant them seamless access to all available network resources such as remote resources . In accordance with the teachings of the present disclosure such resources may be published in a single XML document . As changes in this XML document occur the end user would like them to be reflected on their user computer or other platform . A synchronization mechanism may be implemented to automatically accomplish this synchronization between the user computer configuration and the published resource data. For example in some embodiments a process on the user computer may periodically download the full XML file compare it to the configuration on the user computer and update the configuration of the user computer or client configuration to incorporate any recent changes.

Because the XML document may describe dozens or even hundreds of available resources such an auto synchronization mechanism may require significant resource overhead for both client and web server. Since it may be anticipated that most published resources will remain the same for long periods of time it may be possible to significantly reduce the overhead burden associated with such synchronization activities by providing timestamp information be included in each resource node of the XML document .

More specifically with reference to the rendering of the information regarding one or more available resources into an XML document could include providing timestamp information for each of the one or more available resources the timestamp information enabling the user computer to determine whether each of the one or more available resources have been modified from a previously available resource version This would allow the smart client to analyze the timestamp information and only download supplementary files such as RDP files and icons for such resources that have changed. Such a synchronization mechanism may require each resource or application to undergo some processing at each synchronization and may require the client side state to retain some data for each remote resource e.g. in the form of a last updated time value .

In further embodiments web syndication technologies such as Really Simple Syndication or Atom may provide an alternate solution to the need to reduce synchronization overhead see e.g. http www.rssboard.org rss specification http tools.ietf.org html rfe4287 . These technologies may supplement a primary web resource with time based information about changes to that resource. This is implemented in a syndication feed a web document at a well known location that describes in a machine readable standard XML language what recent changes have occurred to that primary resource. For example the web site of such publications as the New York Times may provide syndication feeds for several kinds of content. When for example a news article is added to the web site an entry is also added to the associated syndication feed to notify users of the change. Syndication clients periodically retrieve this feed document from a URL and by parsing this feed document a syndication client can notify the user about recently added articles. Embodiments of XML feeds in accordance with the teachings of the present disclosure may similarly use web syndication technologies in the context of updating clients about changes to remote resources that may be installed on their user computers.

Although the computing device of is described as being representative of a user device e.g. the user computer of it will be appreciated that in alternate embodiments the computing device may also be representative of other hardware devices of systems and methods disclosed herein. For example if the smart client of the computing device is replaced with an XML presentation layer e.g. XML presentation layer of XML presentation layer of or XML presentation layer of then the computing device may represent an embodiment of the web server of or the back end of . Similarly by omission of the smart client the computing device may be representative of an embodiment of the central server or the resource hosts of .

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as exemplary forms of implementing the claims.

