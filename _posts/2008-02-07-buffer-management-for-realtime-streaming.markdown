---

title: Buffer management for real-time streaming
abstract: Technologies are described herein for buffer management during real-time streaming. A video frame buffer stores video frames generated by a real-time streaming video capture device. New video frames received from the video capture device are stored in the video frame buffer prior to processing by a video processing pipeline that processes frames stored in the video frame buffer. A buffer manager determines whether a new video frame has been received from the video capture device and stored in the video frame buffer. When the buffer manager determines that a new video frame has arrived at the video frame buffer, it then determines whether the video processing pipeline has an unprocessed video frame. If the video processing pipeline has an unprocessed video frame, the buffer manager discards the new video frame stored in the video frame buffer or performs other processing on the new video frame.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08665281&OS=08665281&RS=08665281
owner: Microsoft Corporation
number: 08665281
owner_city: Redmond
owner_country: US
publication_date: 20080207
---
As local area networks and high speed connections to the Internet have become more pervasive a greater number of computer users are utilizing the Internet and other networks for real time streaming of multimedia. Streaming refers to the process of continually transmitting media to an endpoint where it is typically displayed or otherwise provided to a user. Real time streaming refers to the process of streaming media that is generated in real time. For instance a computer with a video capture device such as a World Wide Web web camera webcam connected thereto can be utilized to stream audiovisual media to one or more other computers over a network in real time.

In most real time video streaming systems it is necessary to perform some processing on the video frames before the frames are transmitted to a recipient. For instance video frames may be compressed prior to transmission to reduce the amount of data transmitted. A video frame buffer is typically utilized to store the video frames prior to and or during processing.

In most computer systems the amount of memory available to the video frame buffer is limited. As a result the video frame buffer can quickly become full and consequently new frames arriving to the video frame buffer from a video capture device must be discarded or dropped. Dropping consecutive video frames can cause significant degradation in video quality for a real time video streaming application like video conferencing.

Some previous real time video streaming solutions avoid dropping consecutive video frames by buffering a larger number of video frames. This solution however adds latency to the streaming transmission. Latency refers to the time between when a video frame is generated and the time it is displayed at the receiving computer. While additional latency can be acceptable during non real time playback of a video stream it is generally unacceptable during real time video streaming.

Technologies are described herein for buffer management during real time streaming. Through the concepts and technologies presented herein a buffer utilized to store video frames during real time streaming is managed in a manner that reduces the need to drop consecutive video frames. The technologies provided herein also manage the video buffer in a manner that reduces the latency caused by storing large numbers of video frames in the video buffer.

According to one aspect presented herein a video frame buffer is maintained for storing video frames generated by a real time streaming video capture device. New video frames received from the video capture device are stored in the video frame buffer prior to processing by a video processing pipeline. The video processing pipeline processes frames stored in the video frame buffer. For instance the video processing pipeline may retrieve video frames stored in the video frame buffer and compress the frames prior to transmission to a destination. When the video processing pipeline completes the processing of a video frame it retrieves another frame from the video buffer for processing.

According to other aspects a buffer manager is executed to manage the contents of the video frame buffer. In one embodiment the buffer manager is configured to determine whether a new video frame has been received from the video capture device and stored in the video frame buffer. When the buffer manager determines that a new video frame has arrived at the video frame buffer it then determines whether the video processing pipeline has an unprocessed video frame. If the video processing pipeline has an unprocessed video frame the buffer manager processes the new video frame stored in the video frame buffer. For instance in one embodiment the buffer manager discards the new video frame stored in the video frame buffer. In another embodiment the buffer manager averages the new video frame with a subsequently received video frame and stores the result in the video frame buffer. Latency is reduced and buffer utilization is minimized by dropping video frames that arrive while the video processing pipeline is processing previously received video frames.

According to embodiments the buffer manager determines whether the video processing pipeline contains an unprocessed video frame by querying the video processing pipeline. In other embodiments this determination is made by checking an input output I O control command to and from the video processing pipeline. The video processing pipeline may be executed within a kernel of an operating system or within a multimedia framework.

It should be appreciated that the above described subject matter may also be implemented as a computer controlled apparatus a computer process a computing system or as an article of manufacture such as a computer readable medium. These and various other features will be apparent from a reading of the following Detailed Description and a review of the associated drawings.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended that this Summary be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

Technologies are described herein for buffer management during real time streaming. Through the embodiments presented herein a buffer utilized to store video frames during real time streaming is managed in a manner that reduces the dropping of consecutive video frames and reduces the latency caused by storing large numbers of video frames in the video buffer.

While the subject matter described herein is presented in the general context of program modules that execute in conjunction with the execution of an operating system and application programs on a computer system those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

In the following detailed description references are made to the accompanying drawings that form a part hereof and which are shown by way of illustration specific embodiments or examples. Referring now to the drawings in which like numerals represent like elements through the several figures aspects of a computing system and methodology for buffer management during real time streaming will be described.

Turning now to details will be provided regarding an illustrative operating environment and several software components provided by the embodiments presented herein. In particular shows aspects of a real time video streaming system . The real time video streaming system includes two computers A B both of which are configured for streaming audio visual media over the network in real time. As discussed above streaming refers to the process of continually transmitting media to an endpoint where it is typically displayed or otherwise provided to a user. Real time streaming refers to the process of streaming media that is generated in real time.

According to one embodiment each of the computers A B is configured to execute a real time streaming application . The real time streaming application is configured to receive video frames from a real time streaming video capture device such as the web cameras A B. The video frames may also include audio data received for instance from microphones integrated with the web cameras A B. The real time streaming video capture device may be integrated with or external to the computers A B.

The real time streaming application is also configured to cause the video frames received from the web cameras A B to be processed and to transmit the processed video frames in real time to a destination. For instance the real time streaming application executing on the computer A receives video frames in real time from the web camera A. In the example shown in the video frames comprise images of a person A and potentially audio generated by the person A such as a speaking voice.

In response to receiving the video frames the real time streaming application executing on the computer A causes the frames to be processed and transmits the processed video frames over the network to the computer B in real time. The real time streaming application executing on the computer B receives the video frames processes the video frames and displays the video frames on a display B. In the example shown in this process causes the computer B to display a real time image B of the person A on the display B. The computer B may also play back any audio transmitted by the computer A in synchronization with the play back of the received video frames.

In a similar fashion the computer B may stream video frames to the computer A. In particular the real time streaming application executing on the computer B receives video frames in real time from the camera B. The video frames may comprise images of the person B and audio. In response to receiving the video frames the real time streaming application executing on the computer B processes the frames and transmits the processed video frames over the network to the computer A.

The real time streaming application executing on the computer A receives the video frames processes the video frames and displays the video frames on a display A. In the example shown in this process causes the computer A to display a real time multimedia image A of the person B on the display A. The computer A may also play back any audio transmitted by the computer B with the video frames.

It should be appreciated that while the real time video streaming system illustrated in includes two computers A B both of which have been equipped with a video capture device in an embodiment only one of the computers A B has a video capture device. In this embodiment the real time streaming of video frames is one way from the computer A B equipped with the capture device to the computer A B that is not equipped with a capture device. For instance if the computer A is equipped with the camera A but the computer B does not have a camera installed video frames can only be streamed from the computer A to the computer B. No streaming of video frames can occur from the computer B to the computer A.

Referring now to a software architecture diagram illustrating aspects of the various software components presented herein in embodiments will be described. In particular illustrates a software architecture utilized by the computers A B to manage the real time streaming of video frames. As shown in the software architecture includes a buffer manager a video frame buffer and a video processing pipeline . As discussed briefly above a real time streaming video capture device such as the web cameras A B generates the video frames A C and causes the video frames A C to be placed into the video frame buffer .

The video processing pipeline retrieves video frames from the video frame buffer and performs processing on the video frames A C prior to transmission. For instance the video processing pipeline may compress the video frames A C prior to transmission. Other types of processing may also be performed. When the video processing pipeline has completed the processing of a video frame such as the video frame D it causes a network stack to transmit the processed video frame to its destination over the network . The video processing pipeline then retrieves a new video frame from the video frame buffer for processing and repeats this process.

According to embodiments presented herein the video processing pipeline may be executed within a kernel of an operating system. This implementation is utilized for instance when the LINUX operating system is utilized. In another embodiment the video processing pipeline is executed within a multimedia framework such as the DIRECTSHOW multimedia framework and application programming interface API from MICROSOFT CORPORATION.

According to embodiments presented herein the buffer manager is configured to manage the contents of the video frame buffer to optimize the operation of the real time streaming of video frames. For instance according to one embodiment the buffer manager is configured to determine when a new video frame has been placed in the video frame buffer . For instance a signal provided by the video frame buffer may be utilized to notify the buffer manager that a new video frame has been placed in the video frame buffer .

When the buffer manager determines that a new video frame has been placed in the video frame buffer the buffer manager then determines whether the video processing pipeline has an unprocessed video frame. An unprocessed video frame is a video frame for which the video processing pipeline has begun but not yet completed processing. This will occur for instance when the video processing pipeline is actively processing a video frame D.

In one embodiment the buffer manager utilizes a signal to communicate with the video processing pipeline and to determine whether the video processing pipeline is processing a video frame. In one implementation the signal is utilized to query the video processing pipeline to determine whether the video processing pipeline contains an unprocessed video frame. In another implementation the signal is utilized to check an I O control command to and from the video processing pipeline to determine whether the video processing pipeline contains an unprocessed video frame. Other mechanisms may also be utilized to communicate with the video processing pipeline .

If the buffer manager determines that a new video frame has arrived at the video frame buffer and that the video processing pipeline has an unprocessed video frame the buffer manager is configured to perform processing on the new video frame stored in the video frame buffer . In one embodiment the buffer manager discards the new video frame stored in the video frame buffer . In another embodiment the buffer manager averages the new video frame with a subsequently received video frame and stores the result in the video frame buffer . Latency is reduced and buffer utilization is minimized by dropping video frames that arrive while the video processing pipeline is processing previously received video frames. Additional details regarding this process are provided below with respect to .

Referring now to additional details will be provided regarding the embodiments presented herein for buffer management during real time streaming. In particular is a flow diagram showing an illustrative routine that illustrates the operation of the buffer manager in one embodiment provided herein. It should be appreciated that the logical operations described herein are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein are referred to variously as states operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the figures and described herein. These operations may also be performed in a different order than those described herein.

The routine begins at operation where the buffer manager determines whether the video frame buffer has a new video frame stored therein. If the video frame buffer does not have a new video frame the routine returns to operation where another such determination is made. If the video frame buffer has a new video frame the routine proceeds to operation .

At operation the buffer manager determines whether the video processing pipeline has an unprocessed video frame in the manner described above. If the video processing pipeline does not have an unprocessed video frame the buffer manager takes no action with respect to the new video frame in the video frame buffer and the routine returns to operation described above.

If at operation the buffer manager determines that the video processing pipeline does have an unprocessed video frame the routine proceeds from operation to operation . At operation the buffer manager processes the new video frame stored in the video frame buffer . As discussed above in one embodiment the buffer manager discards the new video frame stored in the video frame buffer . In another embodiment the buffer manager averages the new video frame with a subsequently received video frame and stores the result in the video frame buffer . Other types of processing may also be performed in other embodiments. From operation the routine returns to operation in order to process additional video frames in the manner described above.

At operation a determination is made as to whether the video processing pipeline has completed the processing of the video frame. If not the routine returns to operation where the video processing pipeline continues to process the video frame. If the processing of the video frame has completed the routine returns to operation where the video processing pipeline retrieves the next video frame from the video frame buffer for processing. In this manner the video processing pipeline continually retrieves available video frames from the video frame buffer and processes the available frames.

The computer architecture shown in includes a central processing unit CPU a system memory including a random access memory RAM and a read only memory ROM and a system bus that couples the memory to the CPU . A basic input output system containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM . The computer further includes a mass storage device for storing an operating system application programs and other program modules which are described in greater detail herein.

The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable media provide non volatile storage for the computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable media can be any available computer storage media that can be accessed by the computer .

By way of example and not limitation computer readable media may include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer readable media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer .

According to various embodiments the computer may operate in a networked environment using logical connections to remote computers through a network such as the network . The computer may connect to the network through a network interface unit connected to the bus . It should be appreciated that the network interface unit may also be utilized to connect to other types of networks and remote computer systems. The computer may also include an input output controller for receiving and processing input from a number of other devices including a keyboard mouse or electronic stylus not shown in . Similarly an input output controller may provide output to a display screen a printer or other type of output device also not shown in . The input output controller may also be utilized to receive video frames from a real time video capture device such as the camera A.

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a networked desktop laptop or server computer. The mass storage device and RAM may also store one or more program modules. In particular the mass storage device and the RAM may store the real time streaming application the video processing pipeline and the buffer manager each of which was described in detail above with respect to . The mass storage device and the RAM may also store other types of program modules.

Based on the foregoing it should be appreciated that technologies for buffer management during real time streaming are provided herein. It should be appreciated that although the embodiments presented herein have been described in the context of a real time video streaming system the concepts presented herein may also be utilized with a real time audio streaming system. Moreover although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

