---

title: System and methods for enforcing software license compliance with virtual machines
abstract: A virtualization system supports secure, controlled execution of application programs within virtual machines. The virtual machine encapsulates a virtual hardware platform and guest operating system executable with respect to the virtual hardware platform to provide a program execution space within the virtual machine. An application program, requiring license control data to enable execution of the application program, is provided within the program execution space for execution within the virtual machine. A data store providing storage of encrypted policy control information and the license control data is provided external to the virtual machine. The data store is accessed through a virtualization system including a policy controller that is selectively responsive to a request received from the virtual machine to retrieve the license control data dependent on an evaluation of the encrypted policy control information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08875266&OS=08875266&RS=08875266
owner: VMware, Inc.
number: 08875266
owner_city: Palo Alto
owner_country: US
publication_date: 20080516
---
The present application claims the benefit of earlier filed U.S. Provisional Patent Application 60 938 987 filed May 16 2008 the contents of which is hereby expressly incorporated by reference in its entirety.

The many automation based techniques for implementing and enforcing software license requirements specifically the permissions rights and restrictions under which a particular program or software package can be used have achieved varying degrees of success over the years. Beyond the purely commercial interest of ensuring compensation for access to software there are additional interests in controlling the concurrent use of defined instances the available or active feature sets the restricting of software to particularly identified system hardware or computer platforms and rights to further distribute software under different categories of licensing. Interest in controlling use is not however limited to software vendors. System managers especially in controlled secure environments may wish to actively control and ensure that only specifically licensed software is permitted to be executed or that particular software is executable on particular systems by individuals or groups with necessary permissions.

Conventional automation based licensing strategies include use of self certifying software modules other software modules that rely on some inherent system or platform identifier and dongles and other hardware based add in components. In each case a challenge response transaction is typically implemented to validate the application is licensed for the requested use. Self certifying software modules typically implement an encryption based license control algorithm to securely verify a user provided license code against an embedded encrypted value or transform function uniquely associated with a software package instance. To prevent spoofing circumvention the license control algorithm can be made additionally reliant on a platform identifier. Conventionally a platform identifier is a specific processor resident hardware value or generated as a bit code representative of the combined identity of platform hardware further tracked against a remote license database.

Alternately a unique encrypted identifier or encryption transform function against which a specific software package instance is licensed can be provided through a proprietary hardware dongle attached to an available system port or equivalently an expansion card on a peripheral bus. To reduce the potential for circumvention a significant portion of the license control algorithm can be implemented on the dongle as part of the transform function. Conventionally a software package reliant on a hardware dongle is constructed to frequently require access to and validation of continued operation from the dongle rendering impractical circumvention by selectively nullifying all code points within the software package that rely on dongle access.

These conventional licensing strategies become particularly complicated if not rendered fundamentally impractical where the computer system platform used to execute the licensed software is implemented using virtual machine technologies. Virtualization decouples the application software from the underlying hardware platform. Consequently the license control algorithms implemented by application programs cannot discern changes in the underlying hardware platform allowing the application program including virtual computer environment to be copied and executed without imposed limit. Decoupling also defeats the ability of the application program to discern whether a hardware dongle is uniquely available to just one application instance or through virtual connections shared by many.

Aside from the licensing issues however the benefits of virtual machines for the execution of conventional software applications are compelling and well recognized. Virtual machine technology enables multiple relatively independent virtual machines to be executed on a single host platform. Each virtual machine encapsulates a guest operating system that as between different virtual machine instances may be of different type and revision. Each guest operating system in turn manages a discrete application execution space. Virtual machine technology thus enables more efficient use of hardware capacity while still ensuring that the users of the different virtual machines have access and use of a complete computer. Depending on specific implementation virtualization can and typically does ensure security as between the applications executed in different virtual machines even as executed on the same physical machine. The virtualization of the underlying computer system isolates potentially unstable or unsafe software from adversely affecting the hardware state or system files required for running the physical as opposed to virtual hardware.

As is well known in the field of computer science a virtual machine VM is an abstraction virtualization of an actual physical computer system. shows one possible arrangement of a computer system that implements virtualization. One or more virtual machines VMs or guests are installed on a host platform or simply host which will include system hardware also referred to herein as a hardware platform and virtualization software . Virtualization software may comprise one or more layers or co resident components comprising system level software such as a kernel and a virtual machine monitor or some combination of these. The system hardware typically includes one or more processors memory some form of mass storage and various other devices . The configuration of virtualization software shown in is referred to as an unhosted virtualization system because the kernel takes the place of a host operating system. Virtualization software could also provide a hosted configuration in which a host operating system not shown is co resident with a hypervisor or virtual machine monitor.

Each VM will typically have both virtual system hardware and guest system software . The virtual system hardware typically includes at least one virtual CPU virtual memory at least one virtual disk and one or more virtual devices . Note that a disk virtual or physical is also a device but is usually considered separately because of the important role of the disk. All of the virtual hardware components of the VM may be implemented by virtualization software using known techniques to emulate the corresponding physical components. Thus the virtual system hardware does not exist as software or hardware components within virtual machine however the states of these virtual devices are generally considered to be part of virtual machine . Furthermore virtual system hardware illustrated as being within virtual machine provides a convenient representation of the execution environment of guest system software . Guest system software includes a guest operating system OS and drivers as needed for the various virtual devices . Guest system software generally will include applications not shown that execute in an application execution environment provided by guest OS and virtual system hardware .

Note that a single VM may be configured with more than one virtualized processor. To permit computer systems to scale to larger numbers of concurrent threads systems with multiple CPUs have been developed. These symmetric multi processor SMP systems are available as extensions of the PC platform and from other vendors. Essentially an SMP system is a hardware platform that connects multiple processors to a shared main memory and shared I O devices. Virtual machines may also be configured as SMP VMs. for example illustrates multiple virtual processors VCPU0 VCPU1 . . . VCPUm within the VM .

Yet another configuration is found in a so called multi core architecture in which more than one physical CPU is fabricated on a single chip with its own set of functional units such as a floating point unit and an arithmetic logic unit ALU and can execute threads independently multi core processors typically share only very limited resources such as some cache. Still another technique that provides for simultaneous execution of multiple threads is referred to as simultaneous multi threading in which more than one logical CPU hardware thread operates simultaneously on a single chip but in which the logical CPUs flexibly share some resource such as caches buffers functional units etc. The terms CPU or processor as used herein should be understood to encompass any of these processor configurations.

If VM is properly designed applications running on the VM will function as they would if run on a real computer even though the applications are running at least partially indirectly that is via the guest OS and virtual processor s . Executable files will be accessed by the guest OS from the virtual disk or virtual memory which will be mapped to portions of physical disk or memory that are allocated to that VM. Once an application is installed within the VM the guest OS retrieves files from the virtual disk just as if the files had been pre stored as the result of a conventional installation of the application. The design and operation of virtual machines are well known in the field of computer science.

As mentioned above virtualization software is an interface that is logically interposed between guest system software within VM and the various hardware components and devices in the underlying hardware platform. The term hypervisor is often used to describe both a VMM and a kernel together either as separate but cooperating components or with one or more VMMs incorporated wholly or partially into the kernel itself. However hypervisor is sometimes used instead to mean some variant of a VMM alone which interfaces with some other software layer s or component s to support the virtualization. In some systems some virtualization code is included in at least one superior VM to facilitate the operations of other VMs. Furthermore specific software support for VMs may be included in the host OS itself.

Certain software components illustrated are shown and described as being within a virtualization software located logically between virtual machines and the system hardware . However it is possible to implement at least part of virtualization software within specialized hardware not shown . Therefore the illustrated embodiments are given only for the sake of simplicity and clarity and by way of illustration as mentioned above the distinctions between various components of a virtualized platform are not always so clear cut. Unless otherwise indicated the terms virtual virtualize virtualization etc. refer herein to virtualized computer systems having any type or configuration of virtualization software.

The various virtualized hardware components in the VM such as virtual CPU s virtual memory virtual disk and virtual device s are shown as being part of the VM for the sake of conceptual simplicity. In actuality these components are usually implemented as software emulations included in the VMMs . One advantage of such an arrangement is that the VMM may but need not be set up to expose generic devices which facilitate VM migration and hardware platform independence.

The availability of virtualization software has posed challenges to developers concerned about piracy of their products. In particular a self certifying module will be unable to distinguish unique virtualized platform instances at least not without substantial additional and typically complex virtualization platform specific coding. Conversely where a unique platform instance can be discerned the characterizing platform details are represented by the virtualized rather than underlying physical platform. Therefore self certifying modules may certify in all copies of the virtual machine.

Virtualization can also limit the effective use of hardware dongles. In effect all virtual machines implemented on host platform may nominally have unconstrained access to a particular dongle thereby allowing application instances to run equally licensed in each of the hosted virtual machines. The different virtual machines can of course be distinctly configured to define which have access to a particular port and thereby an attached dongle. Beyond the potential for circumvention of copy protections chemes by system administrator modification of the configuration files the specific restriction of licensed virtual machines to a particular hardware dongle significantly constrains other intrinsic benefits of virtualization. For example virtualization enables ready movement of virtual machines to different platforms to provide automated load scaling and redundancy in case of physical hardware failures. Constraint to a particular hardware platform due to a physical dongle requirement is undesirable particularly where direct manual management intervention is intrinsically required to preserve the scaling and redundancy capabilities of virtualization.

In one embodiment a method for enforcing licensing permissions rights and restrictions is securely controlling the execution of a computer system program within a virtual machine. The virtual machine may provide an execution environment for a guest operating system and at least one computer program configured to execute in conjunction with the guest operating system. The virtual machine may be configured for execution by way of system level virtualization software on a current host platform the current host platform comprising at least one central processing unit having access to mass storage device. In the method a secure policy controller is executed outside of the virtual machine. The secure policy controller may access policies stored by the mass storage device the policies identifying one or more hardware platforms for which the virtual machine is authorized to execute. The secure policy controller may determine whether the host platform matches one of the hardware platforms identified by the policies and prohibit the virtual machine from executing on the current host platform when the policies do indicate that the virtual machine is permitted to execute on the current host platform and permit the virtual machine to execute on the current host platform when the policies indicate that the virtual machine is permitted to execute on the current host platform.

As will become clear in the following description of an exemplary licensing enforcement framework implementation of the present invention is not closely dependent on any particular implementation of the physical computer system or in general the particular architecture of the virtual machine and supporting virtualization technology. As will become apparent the exemplary framework described below is not constrained to servicing any particular type of software program but rather is applicable to any software program otherwise supported by the guest operating system including or in the alternative the guest operating system itself that requires access to external license control data. A person of ordinary skill in the art will accordingly readily recognize from the following discussion the variety of computer systems virtual machines and virtualization techniques and programs to which the present invention is applicable.

For example in one embodiment license module is implemented as a relatively thin software library that enables an initialization routine to functionally interoperate with and through the virtual machine to authenticate license keys and retrieve license information. Initialization routine is executed when application is launched and functions to evaluate license control information to determine whether continued execution of application program is permitted and if so the licensed set of programmatic features and functions enabled for the particular instance of application program .

In one embodiment license module is provided as a software component linked to application program . In alternate embodiments license module may be incorporated into initialization routine of application program or fully dissociated from application program as an independent program executed by guest operating system or made virtually available to initialization routine by virtual machine . Therefore use of the secure access control policies may be made transparent to the application programs which may therefore be conventional in nature. The license module is in each case responsible for accessing a communications channel to and through the virtual machine to obtain the license control information. For purposes of discussion this access channel is described as a virtual dongle for which it is loosely analogous as functionally enabling the retrieval of license control information by the license module .

Virtual machine encapsulates the virtual computer hardware platform including virtual disk devices and other supported virtual devices including virtual system I O ports. License module is linked with application program which in turn is supported by guest operating system . File system accesses to data by application program as well as guest operating system are directed to the virtual disk . These access requests are relayed through and as appropriate translated by the virtualization software to corresponding accesses of the physical disk storage e.g. by way of a disk driver . Specifically access requests directed to the virtual disk are preferably realized as access requests directed to virtual disk image stored within virtual machine folder physically present within a directory maintained on the physical disk storage . In one embodiment virtual disk image contains a complete file system in functional emulation of a conventional i.e. physical disk drive storage device. Virtual machine folder may be organized as a directory that in turn contains virtual disk image in combination with virtual machine configuration files and virtual machine policy control files . In general virtual machine configuration files store the information used to define the configuration of virtual machine . Policy control files are used to store information defining access and operating controls on the operation of the virtual machine.

In one embodiment virtual machine folder which stores virtual machine policy and configuration files as well as virtual disk image defined for the virtual machine is an encrypted storage container. Virtualization software may implement a virtual policy enforcer layer that controls access to encrypted virtual machine folder dependent on the access control policies maintained within the policy control files . Operation of virtual policy enforcer layer may be supported by a cipher function library that implements encryption algorithms appropriate to support both data encryption and secure authentication. Thus access to the virtual machine folder is secured by and requires use of the virtual policy enforcer layer .

Administration of virtual disk image of the virtual machine and related aspects of the virtualization system may be performed through VM manager which may be an administrative virtual machine management server acting through the virtualization software and ultimately the kernel resident disk device driver . VM manager may communicate with virtualization software via a network connection or other means. Administration of the contents of the encrypted virtual machine folder including in particular the virtual machine configuration files and policy control files may also be performed using VM manager . As indicated administration of the virtual machine folder is subject to the virtual policy enforcer layer further acting through the disk device driver to securely access the contents of the virtual machine folder . In accordance with the present invention administration of virtual machine folder includes enabling editing of the individual virtual machine configuration files and policy control files as well as the selective application of patch updates by which pre configured differential content updates can be concurrently applied to any or all of the files stored within the virtual machine folder including virtual disk image .

In one embodiment license module implements first and or second access paths to license files functionally stored external to the virtual machine . For example license files may be stored within the virtual machine folder as entries in or as referenced from the policy control files . Alternately policy control files may reference or define the applicable access controls that will allow access from virtual machine to license files stored externally of virtual machine folder e.g. on local physical disk store other local disk stores not shown or the storage systems provided by other computer systems not shown .

First access path ultimately reaching the virtual machine folder to access the policy control files and license files may be implemented through an application programming interface API provided by virtual computer system platform . For purposes of representation this interface is shown as presented by virtual dongle . In one embodiment virtual dongle may not ordinarily be accessible by or through the guest operating system . License authentication and control information requests are passed by the virtual dongle to the virtual policy enforcer layer using ordinary hardware device virtualization techniques. As mentioned previously virtual hardware devices are implemented by emulators that form part of virtualization software which are in communication with device drivers implemented in guest operating system . For example Virtual Dongle is implemented as a unique hardware device for which a special driver is installed into guest OS . It is also possible for virtual dongle to be implemented through an assigned port of the virtual devices and the virtual policy enforcer layer . Since the virtual devices are nominally available to the guest operating system coordinated if not dedicated use of a virtual port may be established to enable access to virtual policy enforcer . Thus application initiated requests for license information may then be passed through the license module and an assigned port such as a Universal Serial Bus USB port in communication with USB drivers built into guest operating system . Virtual dongle may be similarly implemented as a device on a different standard I O port such as a network port PCI SCSI etc. Communication with the assigned port may be recognized and processed by the virtual policy enforcer layer . Regardless of the implementation license module may be configured to communicate with virtual policy enforcer layer by way of a virtual dongle which appears as a hardware device within VM .

This allows the license module to identify the application to the virtual policy enforcer layer and as permitted by the access restrictions defined by the policy control files to selectively return the contents of the license files to the application . In one embodiment the license module may additionally present a well defined API through which the application can iteratively or otherwise perform ad hoc queries for specific information defining different licensable features from the contents of the license files . For example application may issue a query to determine whether particular features of the software is paid for and adjust its behavior accordingly. The back end for the virtual dongle can satisfy these queries a number of ways e.g. by looking at metadata that is included with the virtual machine or by querying 3party licensing libraries or licensing servers.

In another embodiment access path to the policy control files and license files can be established using what is referred to herein as a hypervisor call or simply a hypercall. A hypercall is a special function that allows software modules such as license module to communicate with the virtualization software through a bridge component not shown which may itself be implemented in virtualization software . For example license module may place information into one or more registers or into a specified guest physical memory location and then execute an instruction or series of instructions that are recognized by the hypervisor. Those skilled in computer virtualization should be familiar with hypercalls.

Use of the interface presented by virtual dongle provides certain advantages. First much of the functionality required to be implemented in license module can be instead be uniquely implemented in the software module driver or modules that collectively implement virtual dongle thereby reducing the required content and complexity of license module . This in turn reduces the required variants for license module required to support different application programs . Additionally virtual dongle component can be replaced or updated to address newly identified security concerns or handle changes otherwise made to virtual machine or virtualization system independent of application . This also functionally separates virtual dongle from other virtualized components of the virtual hardware platform thereby effectively hiding virtual dongle from guest operating system and other potentially insecure applications executed by operating system . In one embodiments virtual dongle may be accessed inconspicuously by license module writing to invalid I O ports at least from the perspective of the guest operating system .

In one embodiment application may be packaged with a virtual machine. As generally illustrated in a virtual machine package also referred to as a para application package provides an execution environment containing one or more different applications. That is the virtual machine package contains a pre configured instance of the virtual hardware that on execution implements a virtual hardware platform and related aspects of a virtual machine. Manifest files including the virtual machine configuration files and policy control files provide the initialization and execution control information. Virtual disks generally correspond to the virtual disk image . First virtual disk stores the executable virtual machine programs including the application guest operating system described above with reference to and other user environment application and utility programs. User and application data may be stored separately on second virtual disk to simplify subsequent patch updates of the executable programs stored on the first virtual disk without compromising the integrity of user data.

Distribution of the application in virtual machine packages in accordance with the present invention enables secure control over the replication of the embodied virtual machine and correspondingly the application contained within. Preferably virtual machine packages are cryptographically signed. Specifically a secure signature of the manifest and other defined read only components of the virtual machine package may be verified by virtualization system each time virtual machine is launched. A copy control list is preferably embedded within the policy control files to store identifiers used to control derivative distribution of application . In one embodiment a suitable identifier of each allowed or licensed virtualization system is stored in the copy control list .

Copy control list need not be static. In one embodiment copy control list may be dynamically modified subject to access controls and modification restrictions defined by the policy control files. For example policy allowed patch updates of the policy control files can replace the identification of the host platform allowed to execute instances of the virtual machine thereby allowing the virtual machine to be moved to a different host platform . Where licensing is intended to allow alternate execution on any of a set of host platforms copy control list may be updated with identifications of the allowed set and as necessary security certificates for package on each licensed host platform .

Once the virtual machine is sufficiently initialized to permit interaction with the virtual policy enforcer layer the procedure flows to operation wherein a component of virtualization software e.g. the virtual machine monitor queries virtual policy enforcer layer to determine whether continued execution of virtual machine is permitted on the host platform . In response virtual policy control layer performs operations wherein policy control files are accessed virtual machine is authenticated against the host platform . In one embodiment this authentication includes deriving a platform identifier from one or more components of the host platform hardware and then cryptographically authenticating this identifier against a license value stored as part of the policy control files . If authentication fails virtual policy control layer returns an indication of authentication failure to virtualization software which then terminates further execution of virtual machine in operation .

If execution is determined to be permitted in operation then the procedure flows to operation wherein policy control files are read to identify configuration parameters for the virtual machine . In one embodiment policy control files store one or more properties files as represented in that define the operating parameters of the virtual machine and application . The set of virtual machine properties may define a subset of virtual components that may be enabled and further any functional constraints that are to be placed on operation of the components . For example guest operating system or any application may be prohibited from modifying the operative configuration of components regardless of the privilege level within which such a modification is attempted. Application property sets are preferably provided to respectively define an operating configuration of a plurality of application programs . For example properties for a particular application program may describe directly or by reference a preferred base configuration of the application program and as applicable the associated license rights .

In operation virtual machine properties are evaluated in combination with virtual machine configuration files to appropriately enable and further configure the virtual components . Individual virtual peripheral devices such as network interface controllers and printer interface ports not shown separately may be selectively enabled dependent on corresponding virtual machine property values . Then in operation virtual machine continues initialization including initial execution of the guest operating system .

Referring again to operation determines whether the licensing module or application is executing within a VM e.g. as described above with reference to . If the licensing module is not operating within a VM then the procedure flows to operation wherein the application is terminated as previously described. On the other hand if the licensing module is executing within a VM then the procedure flows to operation wherein a query is issued through either a virtual dongle interface or a directly to the virtual policy enforcer in order to authenticate application and as applicable retrieve applicable licensing control information. Depending on the particular implementation operations and encircled by box may be performed by one or more of a virtual dongle licensing module or virtual policy enforcer . In one embodiment operations in box are performed exclusively by a virtual dongle. For increased security an application identifier and license key may be required to be presented to virtual dongle . For example the application identifier may identify the application properties set defined for the specific application . The license key may be presented for conventional use in authenticating the application against license file and retrieve associated license control information from the identified application properties set .

For memory accesses directed to addresses that are not recognized by the virtual machine monitor the procedure flows to operation to determine if the memory access is directed to a pre define address outside of the address space allocated to the guest operating system that is associated with the virtual dongle port. If not then procedure flows to operation wherein an invalid access exception is returned by the virtual machine monitor to guest operating system for handling in a conventional manner.

If the invalid port is associated with the virtual dongle then the procedure flows to operation wherein the virtual dongle is executed. As previously mentioned accesses intended for virtual dongle may be directed to a pre defined address outside of the address space allocated to the guest operating system . On trap of these memory access exceptions the virtual machine monitor may execute virtual dongle to process the data transfer. Thus for a license authentication query initiated by application each read and write operation of the ensuing cryptographic challenge response transaction will be routed through virtual dongle by the virtual machine monitor.

Returning to for the specific case of a request to retrieve license information the query is responded to as shown in operations designated by box wherein the virtual dongle or other component working in conjunction with the virtual policy enforcer layer reads the policy control files in operation to retrieve relevant access control and restriction policies. Then in operation virtual dongle or other component evaluates the policies to further locate and retrieve the applicable license file . Then in operation the application identifier and application key are authenticated against the license file key data. The procedure then flows to decision block . On authentication failure the procedure flows to operation wherein the execution of the application may be terminated . Alternatively the application may be placed in a limp or reduced usability mode pending a license purchase or other remediation or the initiation of a trial period may begin be maintained or ended wherein the trial period allows full access to application features for testing purposes.

Where authentication is successful in operation the procedure flows from decision block to operation wherein the license information may be further examined to determine the features and functions that will be identified through the license module to the application as licensed and thereby enabled for use in the further execution of the application . Alternately or in addition subsequent queries for license control information dynamically initiated by the application can be similarly trapped and routed through the virtual dongle subject to policy qualification as performed by the virtual policy enforcer layer to retrieve enabled features and functions license information. In either case the license module then returns to allow initialization of the application program in operation to complete the procedure.

Referring to the sets of virtual machine and application properties stored by the property files are constructed and maintained as a coordinated set of properties. In particular virtual machine properties set may be established and adjusted to augment control over the licensed use of application programs as defined by application properties . For example use of a virtual machine package described above with reference to may enhance security and control for distributing application programs initially for unrestricted demonstration or test use and subsequently selectively restricted use based on acquired licenses. In this case the virtual machine properties may be initially defined in a highly restricted configuration while most if not all functions and features of the application programs are enabled through the settings of the application properties .

In this restricted virtual machine configuration guest operating system and all hosted application programs are functionally constrained to basic user interaction and further exclusively limited to accessing just the virtual disk image . The restricted properties configuration of the virtual machine is defined to preclude the transfer of data out of the virtual machine including copying of data between the virtual disk image and disk storage or other storage devices. The restricted configuration further precludes copying in of any programs that could be used to tamper with the applications or to copy out an application program for any purpose. Other restricted configuration virtual machine properties are concurrently defined to enable only essential virtual external I O connections. Keyboard and display interaction with the applications may be enabled while virtual network connections and others external I O connections such as printer interfaces may be disabled. Without the ability to import or export or data other what may be typed in or viewed on the user display the application programs have little practical utility other than for evaluation use. Therefore without modifying application in any way its use may nevertheless be restricted by disabling I O functionality of the containing VM.

Additionally the restricted configuration of virtual machine properties defines storage and treatment of the host identifier value used in authenticating the virtual machine as described above with reference to . A virtual machine property is defined to store the host identifier value as a blank or otherwise specified default value. When this default value is read and evaluated by virtual policy enforcer layer virtual machine will be permitted to execute on any host platform. Thus although there may be no restriction on use of the most advanced features and functions of applications the identity of hosts permitted to execute virtual machine or even on the ability to make and execute copies of virtual machine the restricted configuration of virtual machine including all restricted configuration copies ensures limitation of the hosted applications to no more than demonstration and test use.

Returning to the restricted configuration of virtual machine may be altered by modifying application property files including license file as represented in by arrows . In one embodiment for example property files may be functionally created through by applying a patch update applied to the virtual machine folder . Such a patch update may be received as a consequence of a conventional license rights acquisition transaction wherein license rights to use a specific set of application features on a specific host platform is acquired. Virtual machine properties preferably replace the default host identifier with an identifier that will only authenticate against the specific host identifier of the licensed host platform . Revisions to the virtual machine properties limiting the available set of virtual peripheral devices are made to enable use of the peripheral devices to a scope commensurate with the licensed rights. Establishing the host identifier property functionally locks execution of the virtual machine to the one host platform . Instances of the virtual machine as executed from copies of the virtual machine package having the patch update applied will not complete initialization on unlicensed host platforms due to a failure to authenticate .

The patch update may also modify one or more of application properties to allow use consistent with the acquired license rights. Thus for example the application property set may be updated to allow a licensed scope of use for the corresponding application or suite of applications while the remaining application property sets may be marked closed to simply preclude execution for any purpose. License files may be updated integrally with the application property set . Application property set is thus effective in locking the corresponding licensed instance of the application or suite of applications to the virtual machine and in combination with the virtual machine properties further to a specific host platform . Concurrently unlicensed use of other applications controlled by the application property sets would be prohibited.

In operation the user transports the snapshot created in operation to a different host platform . For example the user may copy VM package and transmit the copy to a different host platform over a network connection. In operation the virtualization software when initializing VM on the different host platform compares the host identifier value for the different host platform with host value stored as part of or in conjunction with the copy control list . If the values match then the host is considered to be licensed for execution on different host platform and the procedure flows to operation wherein execution of VM is permitted to proceed. On the other hand if the host identifier values do not match then the procedure flows to operation to determine if a policy patch is available. If not then the procedure flows to operation wherein execution of the virtual machine is either terminated or continues in a restricted mode. If a policy patch is available in operation then the policy patch is obtained and applied to copy control list therefore modifying host value . Thereafter the procedure flows to operation wherein the procedure described above for operation is repeated to determine if the patched virtual machine is now properly licensed for the different host platform . If the authentication fails then the procedure flows to operation wherein the virtual machine is terminated or restricted. If in operation the authentication succeeds then the procedure flows to operation wherein the virtual machine is permitted to continue executing.

In an alternate embodiment copy control list may store of some number of alternate host values . In authenticating the virtual machine for a host platform each of the host values is preferably checked as part of the authentication step. The host values thus defines a pool of host platforms within which copies of the virtual machine can be freely transferred and executed. Transfers can be performed as needed to accommodate load sharing redundancy maintenance and other similar goals. For this embodiment the host values can be provided as part of the update patch providing for the initial licensing of the virtual machine or potentially incrementally relying on the license server generating patch updates to maintain a unique identification of the allowed host platforms in a particular pool of platforms.

Thus a system and methods for providing for enabling software programs most commonly user application programs to appropriately access license data fully consistent with execution within a virtual machine based system has been described. In view of the above description of the preferred embodiments of the present invention many modifications and variations of the disclosed embodiments will be readily appreciated by those of skill in the art. For example the mass storage devices utilized may be local to the host platform or accessed remotely through a communications network. Further the virtual machine policy control files may be accessed indirectly through the virtual machine manager or another policy management server allowing the policy control files of multiple virtual machines to be centrally managed and updated in a coordinated and securely controlled manner. It is therefore to be understood that within the scope of the appended claims the invention may be practiced otherwise than as specifically described above.

The various embodiments described herein may employ various computer implemented operations involving data stored in computer systems. For example these operations may require physical manipulation of physical quantities usually though not necessarily these quantities may take the form of electrical or magnetic signals where they or representations of them are capable of being stored transferred combined compared or otherwise manipulated. Further such manipulations are often referred to in terms such as producing identifying determining or comparing. Any operations described herein that form part of one or more embodiments of the invention may be useful machine operations. In addition one or more embodiments of the invention also relate to a device or an apparatus for performing these operations. The apparatus may be specially constructed for specific required purposes or it may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular various general purpose machines may be used with computer programs written in accordance with the teachings herein or it may be more convenient to construct a more specialized apparatus to perform the required operations.

The various embodiments described herein may be practiced with other computer system configurations including hand held devices microprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

One or more embodiments may be implemented as one or more computer programs or as one or more computer program modules embodied in one or more computer readable media. The term computer readable medium refers to any data storage device that can store data which can thereafter be input to a computer system computer readable media may be based on any existing or subsequently developed technology for embodying computer programs in a manner that enables them to be read by a computer. Examples of a computer readable medium include a hard drive network attached storage NAS read only memory random access memory e.g. a flash memory device a CD Compact Discs CD ROM a CD R or a CD RW a DVD Digital Versatile Disc a magnetic tape and other optical and non optical data storage devices. The computer readable medium can also be distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion.

Although one or more embodiments of the present invention have been described in some detail for clarity of understanding it will be apparent that certain changes and modifications may be made within the scope of the claims. Accordingly the described embodiments are to be considered as illustrative and not restrictive and the scope of the claims is not to be limited to details given herein but may be modified within the scope and equivalents of the claims. In the claims elements and or steps do not imply any particular order of operation unless explicitly stated in the claims.

In addition while described virtualization methods have generally assumed that virtual machines present interfaces consistent with a particular hardware system persons of ordinary skill in the art will recognize that the methods described may be used in conjunction with virtualizations that do not correspond directly to any particular hardware system. Virtualization systems in accordance with the various embodiments implemented as hosted embodiments non hosted embodiments or as embodiments that tend to blur distinctions between the two are all envisioned. Furthermore various virtualization operations may be wholly or partially implemented in hardware. For example a hardware implementation may employ a look up table for modification of storage access requests to secure non disk data.

Many variations modifications additions and improvements are possible regardless the degree of virtualization. The virtualization software can therefore include components of a host console or guest operating system that performs virtualization functions. Plural instances may be provided for components operations or structures described herein as a single instance. Finally boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the invention s . In general structures and functionality presented as separate components in exemplary configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements may fall within the scope of the appended claims s .

