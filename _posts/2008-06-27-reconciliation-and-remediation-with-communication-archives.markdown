---

title: Reconciliation and remediation with communication archives
abstract: Techniques for reconciliation and remediation of messages sent by a server for storage in an archive are described. Some techniques may comprise receiving a message to be reconciled corresponding to a message sent by a server to be stored in an archive. The received message may be categorized for reconciliation, and a delivery confirmation query may be issued to the archive according to categorization of the message for reconciliation. Based on the response to the delivery confirmation query, it can be determined with certainty whether the message sent to the archive for storage is indeed stored at the archive. Other embodiments are described and claimed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08732265&OS=08732265&RS=08732265
owner: Microsoft Corporation
number: 08732265
owner_city: Redmond
owner_country: US
publication_date: 20080627
---
Electronic mail e mail provides a store and forward approach for end to end message delivery that allows messages to travel across multiple machines through various organizations and networks and to survive temporary connection outages. The downside to this asynchronous approach is that the sending user or organization has no way of truly knowing if and when the recipient has received the message and whether any post receipt processing has been successfully accomplished.

This problem is especially prevalent in the case of e mail archives. Businesses and organizations that are subject to e mail retention requirements due to regulatory compliance or court order need to be able to search and produce e mails from such archives. Failure to do so can result in significant fines and reputation damage. Due to the inability for current e mail systems to guarantee that a message sent to the archive has successfully been saved in the archive these businesses incur significant cost having to search through redundant backups in addition to their archive.

From the perspective of the message generating e mail system there are several potential points of data loss along the way to the archive. For example the generating e mail system or an intermediary e mail system may incur a software or hardware failure and the message destined to the archive is lost. In addition the front end e mail system of the archive where messages are received or the injection system of the archive where messages are saved into a database may incur a software or hardware failure and the message destined to the archive is lost. Consequently improvements are needed to solve these and other problems and for guaranteeing end to end delivery and archiving of a message in a transactionless environment.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

Various embodiments are directed to techniques for reconciliation and remediation of messages sent by a server for storage in an archive. Some techniques may comprise receiving a message to be reconciled corresponding to a message sent by a server to an archive for storage categorizing the received message for reconciliation issuing a delivery confirmation query to the archive according to categorization of the message for reconciliation and determining whether the message sent from the server to the archive is stored at the archive based on a response to the delivery confirmation query. A retry query may be issued after receiving a negative response to the delivery confirmation query. The message to be reconciled may be resubmitted to the archive after receiving a negative response to the retry query. The message to be reconciled may be stored until confirmation is received and deleted after receiving a positive response to the delivery confirmation query. Other embodiments are described and claimed.

These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are explanatory only and are not restrictive of aspects as claimed.

Various embodiments include physical or logical structures arranged to perform certain operations functions or services. The structures may comprise physical structures logical structures or a combination of both. The physical or logical structures are implemented using hardware elements software elements or a combination of both. Descriptions of embodiments with reference to particular hardware or software elements however are meant as examples and not limitations. Decisions to use hardware or software elements to actually practice an embodiment depends on a number of external factors such as desired computational rate power levels heat tolerances processing cycle budget input data rates output data rates memory resources data bus speeds and other design or performance constraints. Furthermore the physical or logical structures may have corresponding physical or logical connections to communicate information between the structures in the form of electronic signals or messages. The connections may comprise wired and or wireless connections as appropriate for the information or particular structure. It is worthy to note that any reference to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

Various techniques for reconciliation and remediation of messages sent by a server for storage in an archive are provided. Some techniques may comprise receiving a message to be reconciled corresponding to a message sent by the server to be stored in the archive. The received message may be categorized for reconciliation and a delivery confirmation query may be issued to the archive according to categorization of the message for reconciliation. Based on the response to the delivery confirmation query it can be determined with certainty whether the message sent to the archive for storage is indeed stored at the archive. Additionally or alternatively a retry query may be issued after receiving a negative response to the delivery confirmation query. If a negative response to the retry query is received the message to be reconciled may be resubmitted to the archive. The message to be reconciled may be stored until confirmation is received and deleted only after receiving a positive response to the delivery confirmation query to guarantee availability of the message.

As used herein the terms system subsystem component and module are intended to refer to a computer related entity comprising either hardware a combination of hardware and software software or software in execution. For example a component can be implemented as a process running on a processor a processor a hard disk drive multiple storage drives of optical and or magnetic storage medium an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a server and the server can be a component. One or more components can reside within a process and or thread of execution and a component can be localized on one computer and or distributed between two or more computers as desired for a given implementation. The embodiments are not limited in this context.

In the example illustrated in the operating environment may comprise among other elements an e mail server and an archive . Although the operating environment as shown in has a limited number of nodes in a certain topology it may be appreciated that the operating environment may include more or less nodes in alternate topologies as desired for a given implementation. In various embodiments the e mail server may be implemented within an e mail messaging system to send and receive messages over electronic communication systems. The archive may be implemented as an on site or off site archiving system or data storage facility for archiving messages received over electronic communication systems from an e mail messaging system. As shown the e mail server and the archive may be communicatively coupled via a network and appropriate wireless or wired communications media. The e mail server and the archive may communicate information over the network and coordinate operations between each other which may involve the unidirectional or bidirectional exchange of information. The network may comprise a packet switched network a circuit switched network or a combination of both. The information communicated over the network can be implemented as data messages sent across various network interfaces. Exemplary network interfaces include parallel interfaces serial interfaces and bus interfaces.

The e mail server may be operative to communicate with various types of messaging clients. In some implementations the e mail server may provide an interface for communicating with a client based software program such as MICROSOFT OFFICE OUTLOOK application software from Microsoft Corporation Redmond Wash. The e mail server also may provide an interface for communicating with various other types of e mail clients including without limitation Simple Mail Transfer Protocol SMTP clients Hypertext Transfer Protocol HTTP clients Messaging Application Programming Interface MAPI clients Post Office Protocol 3 POP3 clients Internet Message Access Protocol IMAP or IMAP4 clients Network News Transfer Protocol NNTP clients webmail clients and so forth.

The e mail server may be operative to provide web access mobile access and synchronization functionality Internet Information Services IIS and Internet Server Application Programming Interface ISAPI applications providing SMTP NNTP IMAP4 and POP3 services to allow communication over a variety of Internet access protocols and HTTP based protocols including remote procedure call RPC over HTTP communication. In some implementations the e mail server may communicate data formatted as compressed Wireless Binary XML WbXML data to make efficient use of bandwidth for mobile clients. In addition to standard Internet protocols the e mail server also may support communication over proprietary or non standard protocols when used by a company or other organization.

In various implementations the e mail server and or the archive may perform one or more reconciliation and remediation techniques in accordance with the described embodiments. In some embodiments the e mail server may comprise a server computing device implementing a server based e mail software program. Accordingly in some embodiments one or more reconciliation and remediation techniques may be implemented as features within a server based software program such as MICROSOFT EXCHANGE SERVER from Microsoft Corporation Redmond Wash. It can be appreciated that the embodiments are not limited in the context and that the e mail server may implement other types of applications programs or services including web based e mail applications providing access to e mail services via a web browser.

In some embodiments the archive may comprise a server computing device implementing one or more server applications and or web services. The archive may implement various web services using platform and language independent formats designed to communicate over computer networks such as the Internet using communications protocols such as Hypertext Transfer Protocol HTTP Hypertext Transfer Protocol over Secure Socket Layer HTTPS Simple Mail Transfer Protocol SMTP File Transfer Protocol FTP and so forth. Accordingly in some embodiments one or more reconciliation and remediation techniques may be implemented as features within server application and or a web service. It can be appreciated that the embodiments are not limited in the context and that the archive may be implemented by other types of on site or off site archiving systems and or or data storage facilities.

In general the e mail server and the archive each may comprise or be implemented by any suitable type of computing device having computing capabilities and communications capabilities in accordance with the described embodiments. To implement such capabilities the e mail server and the archive may comprise respective computing systems and communications system . The computing systems may include various computing elements such as one or more processors co processors memory units chipsets controllers peripherals interfaces oscillators timing devices video cards audio cards multimedia input output I O components and so forth. The communications systems may include various communications elements such as a transmitter receiver transceiver radio network interface baseband processor antenna amplifiers filters and so forth.

The computing systems may implement among other elements respective server programs . The server programs and their included elements may comprise or be implemented by one or more types of application programs software components program modules and or program data supporting operation of the e mail server and the archive in accordance with the described embodiments. In some implementations the server programs may be implemented on one physical server computer device. Alternately various server programs may be implemented across multiple servers potentially located in different domains and sites to meet geographical deployment requirements and or to provide performance and fault tolerance when supporting a large number of users.

In the example illustrated in the server programs may implement one or more server roles including for example a hub transport server role and a mailbox server role operative to provide certain services and features for the e mail server . The hub transport server role may be operative to handle incoming and outgoing messages and the mailbox server role may be operative to host mailbox and public folder data. As shown the hub transport server role may comprise a journaling agent and the mailbox server role may comprise a reconciliation agent . According to various embodiments the journaling agent and the reconciliation agent may perform one or more reconciliation and remediation techniques as described in greater detail below. The server programs also may comprise other server programs such as other server roles and or other types of server applications in accordance with the described embodiments.

In the example illustrated in the server programs may implement one or more server applications including for example a journaling application and a reconciliation application operative to provide certain services and features for the archive . According to various embodiments the journaling application and the reconciliation application may communicate with the journaling agent and the reconciliation agent for performing one or more reconciliation and remediation techniques as described in greater detail below. The server programs also may comprise other server programs such as other types of server applications and or web services in accordance with the described embodiments.

The e mail server and the archive may comprise or communicate with respective data stores for storing items such as e mail messages and other data in mailboxes and folders in accordance with the described embodiments. With reference to a data store for the e mail server may implemented by an e mail server database and a data store for the archive may be implemented by an archive database . While shown as being separate elements for purposes of illustration it can be appreciated that in some embodiments the e mail server database may form part of the e mail server and or the archive database may form part of the archive . It also can be appreciated that the respective data stores for the e mail server and the archive can reside with the e mail server and the archive or in other remote devices.

The computing device further includes a mass storage device for storing an operating system such as a MICROSOFT WINDOWS operating system from Microsoft Corporation Redmond Wash. or other suitable operating system. The mass storage device also may store various application programs as described in greater detail below as well as other program modules and program data .

The mass storage device is connected to the processor through a mass storage controller not shown connected to the system bus . The mass storage device and its associated computer readable media provides non volatile storage for the computing device . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it is to be appreciated by those skilled in the art that computer readable media can be any available media that can be accessed by the computing device . By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer.

According to various embodiments the computing device may operate in a networked environment using logical connections to remote computers through a network which in some implementations may be a Transmission Control Protocol TCP and Internet Protocol IP network such as the Internet. The computing device may connect to the network through a network interface e.g. a wired or wireless network interface connected to the system bus . It can be appreciated that the network may comprise any type of network in accordance with the described embodiments including without limitation a wide area network WAN a local area network LAN and or a cellular telephone network and that the network interface may support various transport layers such as GPRS CDMA 1xRTT IEEE 802.11 Bluetooth PAN and others for connecting to a variety of networks and or remote computer systems.

The computing device may include an I O controller for receiving and processing input from a number of input devices . A user may enter commands and information into the computing device through various input devices such as a keyboard and pointing device such as a mouse trackball or touch pad. Other examples of input devices may include a microphone joystick game pad satellite dish scanner or the like. The input devices may be connected to the processor through the I O controller that is coupled to the system bus but may be connected by other interfaces and bus structures such as a parallel port game port or a universal serial bus USB . The I O controller also may provide output to various output devices such as a monitor or other type of display device that is connected via the I O controller to the system bus a printer speakers and other peripheral devices.

As mentioned above a number of program modules and data files may be stored in the mass storage device and RAM of the computing device . In the example illustrated in the mass storage device and RAM may store the operating system as well as one or more server programs including the hub transport server role comprising the journaling agent and the mailbox server role comprising the reconciliation agent . According to various embodiments the reconciliation agent may be operative to perform one or more reconciliation and remediation techniques. In one embodiment for example the reconciliation agent may be implemented as described with reference to .

As shown the e mail application may include message storage . While the message storage is shown as part of the reconciliation application for purposes of illustration and not limitation it can be appreciated that the message storage can reside in various locations in accordance with the described embodiments. For instance the message storage may reside on the e mail server and or the e mail server database . As one non limiting example the message storage of the reconciliation application can reside within the program data of the computing device either in a database and or in one or more files. As another non limiting example the message storage can reside all or in part in a directory specified by the user in the file system of an operating system such as the operating system .

In the example illustrated in the message storage includes one or more messages pending reconciliation which may be categorized as Generation 0 Gen 0 messages Generation 1 Gen 1 messages Generation 2 Gen 2 messages and Generation 3 Gen 3 messages . In various embodiments queries may be issued according to message categorization. For example queries may be issued based on the reconciliation generations to optimize the performance of the reconciliation process and to minimize the number of queries to the archive .

In some embodiments messages pending reconciliation may be categorized as Gen 0 messages based on latency associated with the archive . Messages received by the reconciliation application and categorized as Gen 0 messages may correspond to messages which were recently sent to the archive . According to various embodiments queries are not issued for pending Gen 0 messages and delayed until the latency associated with the archive has elapsed.

For a short interval of time after a particular message is received by the reconciliation application a copy of the particular message may be locally stored in and accessed from a cache . In some embodiments messages pending reconciliation may be categorized as Gen 1 messages based on the time interval when a copy of the particular message may be locally available from the cache . Messages received by the reconciliation application and categorized as Gen 1 messages may correspond to messages which are expected to have been delivered to and or processed by the archive . In addition while the copy of the message is available from the cache I O savings may be realized. In various implementations delivery confirmation queries are sent for Gen 1 messages and an attempt is made to process almost all messages during the lifetime of cache .

When a positive response to a delivery confirmation query is received for a particular message the reconciliation application confirms that the message is archived and may delete the message from the message storage . When the reconciliation application receives a negative response regarding a particular message the unconfirmed message is maintained in the message storage to guarantee its availability until it can be confirmed that the message is archived.

In some embodiments messages pending reconciliation may be categorized based on the failure to confirm the archiving of such messages. When negative responses for particular messages are received the reconciliation application may categorize the messages as Gen 2 messages . Messages may remain categorized as Gen 2 messages based on the time needed to resolve message delays. Pending messages categorized as Gen 2 messages by the reconciliation application may correspond to unconfirmed messages experiencing delay issues. According to various embodiments queries are not issued for Gen 2 messages and delayed to allow mail delays to be resolved.

Pending messages categorized as Gen 3 messages by the reconciliation application may correspond to unconfirmed messages that had delay issues that now may be resolved. The reconciliation application may issue retry queries for one or more of the Gen 3 messages . When a positive response is received for a particular message the reconciliation application can confirm that the previously unconfirmed message has been archived and may delete the message from the message storage . When a negative response for the retry query is received the unconfirmed message remains in the message storage to guarantee its availability until it can be confirmed that the message is archived.

When one or more Gen 3 messages cannot be confirmed the reconciliation agent may perform remediation by resubmitting the Gen 3 messages to the archive . Until it is confirmed that a particular message is archived the unconfirmed message remains in the message storage to guarantee its availability. The reconciliation application may resubmit the unconfirmed Gen 3 messages to the archive and may keep a copy of each unconfirmed message in the message storage . After a particular unconfirmed message is resubmitted to the archive the reconciliation process may begin again until it is confirmed that the particular message is archived. It can be appreciated that even when a particular message cannot be reconciled the message remains in the message storage to guarantee its availability.

As shown the e mail application may include reconciliation and remediation logic which may be responsible for carrying out some or all of the reconciliation and remediation techniques described herein. In the example illustrated in the reconciliation and remediation logic includes logic for receiving messages to be reconciled logic for categorizing messages pending reconciliation logic for issuing archive queries logic for confirmation of archived messages logic for deleting confirmed messages and logic for remediation of unconfirmed messages .

In some implementations the reconciliation and remediation logic may reside within the reconciliation application as part of the reconciliation agent on the e mail server . It can be appreciated however that the reconciliation and remediation logic can alternatively or additionally be embodied as computer executable instructions stored on one or more types of computer readable storage media in a variety of locations in accordance with the described embodiments.

Although the example illustrated in includes a particular set of logic it can be appreciated that the reconciliation and remediation logic provides an exemplary implementation of the general functionality. It is to be understood that the sequence of logic does not necessarily have to be executed in the order presented unless otherwise indicated. In addition while the reconciliation and remediation logic may be described as performing a certain sequence of steps other sequences of steps may also be performed according to alternative embodiments. Moreover some individual steps performed by the reconciliation and remediation logic may include multiple sub steps that may be performed in various sequences as appropriate to the individual step. Furthermore additional steps may be performed or some steps may be omitted by the reconciliation and remediation logic depending on the particular implementation.

As shown messages pending reconciliation may be categorized as Generation 0 Gen 0 Generation 1 Gen 1 Generation 2 Gen 2 and Generation 3 Gen 3 messages according to corresponding time intervals T T . In this example a message may be classified as a Gen 0 message when a time associated with the message is within a time interval T a Gen 1 message when the time is within time interval T a Gen 2 message when the time is within time interval T and a Gen 3 message when the time is during T. While some embodiments may describe certain exemplary values associated with the time intervals T T it is to be understood that other suitable values may be used. It also can be appreciated that messages may be categorized in other ways in accordance with the described embodiments.

In various implementations the time associated with a particular message may correspond to the amount of time that has elapsed since the copy of the journal report including the particular message was received. For example the time associated with a particular message may be when the copy of the journal report containing the particular message is received by the reconciliation agent and or when the particular message is stored in the message storage . In other embodiments the time associated with the message may be based on the time when the message was sent to the archive which may be provided in the copy of the journal report.

After a particular message is received by the reconciliation agent in a copy of a journal report a short interval of time may be needed for the original journal report to be delivered to and or processed by the archive . Accordingly in some embodiments messages pending reconciliation may be categorized based on latency such as delivery and or processing latency associated with the archive .

In the example illustrated in a message may be categorized as a Gen 0 message when the time associated with the message is within the time interval T. As shown the length of the time interval T may correspond to an expected level agreement SLA or latency SLA for an original journal report to be delivered to the archive . Generally the time interval SLA will be a relatively short period of time such as approximately 5 minutes.

According to various embodiments the time interval SLA may be based on delivery and or processing latency for messages sent to the archive . In some embodiments the time interval SLA may be an assumed or observed amount of time taken for most journal reports to be delivered to the archive . The time interval SLA also may be defined by a vendor SLA that specifies the level of service and or time for performance contracted to by the archive . In some cases the time interval SLA may be based on information provided by the archive . For example in some implementations the reconciliation agent may query the archive to obtain certain configuration information such as the expected SLA or latency for processing messages.

As shown the time interval T may correspond to and end after SLA has elapsed. In various implementations a particular message may be categorized as a Gen 0 message during the time interval T and until SLA has elapsed from the time associated with the message such as when the copy of the journal report containing the particular message was received by the reconciliation agent and or when the message was stored in the message storage . Accordingly messages received by the reconciliation agent and categorized as Gen 0 may correspond to messages which were recently sent to the archive .

For a short interval of time after a particular message is received by the reconciliation agent a copy of the message to be reconciled may be locally stored in and accessed from the cache . Accordingly in some embodiments messages pending reconciliation may be categorized based on this time interval or cache lifetime Cache associated with the cache . In general the cache lifetime Cache will be and in some cases is required to be longer that the expected latency SLA. In some embodiments the cache lifetime Cache may be approximately 10 minutes.

The cache lifetime Cache generally will vary in direct proportion to the available RAM on the system such as RAM . For example on the e mail server with a cache lifetime Cache of 10 minutes the cache lifetime Cache usually can be doubled by doubling the RAM. Accordingly the Cache time interval typically is much more variable than most of the other time intervals such as the time interval SLA which tends to be around 5 minutes and is relatively hard to change. Due to its linear relationship with the RAM the cache lifetime Cache can be easily increased by adding RAM on the server s running the reconciliation agent . This allows the cache lifetime Cache to comfortably exceed the SLA time interval when required and to produce I O savings.

In the example illustrated in a message may be classified as a Gen 1 message when the time associated with the message is within the time interval T. As shown the length of the time interval T may correspond to the time window after the expiration of SLA and before the expiration of the cache lifetime Cache. In various implementations a particular message may be categorized as a Gen 1 message during the time interval T and until the cache lifetime Cache has elapsed from the time associated with the message such as when the copy of the journal report containing the particular message was received by the reconciliation agent and or when the message was stored in the message storage . Accordingly messages received by the reconciliation agent and categorized as Gen 1 may correspond to messages which are expected to have been delivered to and or processed by the archive .

In various embodiments queries may be issued according to message categorization. For example queries may be issued based on the reconciliation generations to optimize the performance of the reconciliation process and to minimize the number of queries to the archive .

Messages received by the reconciliation agent and categorized as Gen 0 may correspond to messages which were recently sent to the archive . According to various embodiments queries are not issued by the reconciliation agent for pending messages categorized as Gen 0. For example if a query were sent to the archive regarding the disposition of a journal report before SLA has elapsed the query would probably result in a negative response Nak . Accordingly the issuing of queries is not performed for Gen 0 messages during T and may be delayed until the expiration of SLA.

Messages received by the reconciliation agent and categorized as Gen 1 correspond to messages expected to be stored in the archive . In addition while the copy of the message is available from the cache I O savings may be realized. After the expiration of the cache lifetime Cache however the copy of the message may fall out of the cache and I O savings are no longer possible. In various embodiments initial queries are sent for pending messages categorized as Gen 1. In such embodiments the reconciliation agent may attempt to process almost all messages during the time interval T which may be based on and extend to the expiration of the cache lifetime Cache. Accordingly the performance of the reconciliation process may be optimized since the reconciliation agent issues queries for messages expected to be stored in the archive and may realize I O savings by accessing messages from the cache .

During the time interval T the reconciliation agent may contact the reconciliation application of the archive and issue an initial query comprising the message IDs for one or more Gen 1 messages. The initial query may be received by the archive via the reconciliation application and a determination may be made whether each of the messages identified in the query has been received and is fully stored by the archive . After determining that all of the messages indentified in the query are fully stored the archive may respond via the reconciliation application with a positive response Ack indicating that each message is stored. When a positive response is received for a particular message the reconciliation agent confirms that the message is archived and may delete the message from the local message store .

In some cases however it may be determined that one or more of the messages indentified in the query are not be stored by the archive . For example the archive may not have received a particular message at the time the query is received. In such cases the archive may respond via the reconciliation application with a negative response Nak identifying the messages that are not stored. Because the initial delivery confirmation queries issued by the reconciliation agent are for messages expected to be stored in the archive the receipt of a negative response may be indicative of typical message delivery and processing delays or more serious problems. When the reconciliation agent receives a negative response from the archive regarding a particular message the unconfirmed message is maintained in the message storage to guarantee its availability until it can be confirmed that the message is archived.

When a negative response for a particular message is received the reconciliation agent may categorize the message as Gen 2. Accordingly in some embodiments messages pending reconciliation may be categorized based on the failure to confirm the archiving of such messages. If the archiving of a message cannot be confirmed it may be the case that typical message delivery and processing delays are being experienced and that additional time is needed to allow the delay to be resolved.

In the example illustrated in a message may be categorized as a Gen 2 message when the time associated with the message is within the time interval T. As shown the length of the time interval T may correspond to an issue resolution SLA IssueResolution time interval. According to various embodiments the time interval IssueResolution may be based on the time needed to resolve message delays. For example the time interval IssueResolution may be an assumed or observed amount of time taken for most message delay issues to be resolved in normal course through automated correction and or by manual intervention to fix the issue causing the delay. Generally the time interval IssueResolution will be a relatively longer period of time such as approximately 5 hours.

Messages pending reconciliation may be categorized based on a time interval for resolving message delays. It can be appreciated that ideally the categorization of a message as Gen 2 or Gen 3 is a rare occurrence. In various implementations a particular message may be categorized as a Gen 2 message during the time interval T and until the time interval IssueResolution has elapsed and then categorized as Gen 3. For example a particular unconfirmed message may be categorized as Gen 2 until a time interval of Cache IssueResolution has elapsed from the time when the copy of the journal report containing the particular unconfirmed message was received by the reconciliation agent and or when the unconfirmed message was initially stored in the message storage . Alternatively a particular unconfirmed message may be categorized as Gen 2 until the time interval IssueResolution has elapsed from the time when the initial delivery confirmation query for the particular unconfirmed message was sent.

Pending messages categorized as Gen 2 by the reconciliation agent may correspond to unconfirmed messages experiencing delay issues. According to various embodiments queries are not issued by the reconciliation agent for pending messages categorized as Gen 2. For example if a retry query were sent regarding the disposition of a journal report before IssueResolution has elapsed the query would probably result in another negative response Nak . Accordingly the issuing of queries is not performed for Gen 2 messages during T and may be delayed until the expiration of IssueResolution.

In various embodiments messages categorized as Gen 3 messages may comprise messages older than T T T. In some embodiments for example messages categorized as Gen 3 span all messages submitted before a time interval Cache IssueResolution before the current time. Pending messages categorized as Gen 3 by the reconciliation agent may correspond to unconfirmed messages that had delay issues that now may be resolved.

After allowing the time interval IssueResolution to elapse for mail delays to be resolved the reconciliation agent may issue a retry query for one or more unconfirmed messages categorized as Gen 3. During the time interval T for example the reconciliation agent may contact the reconciliation application of the archive and issue a retry query comprising the message IDs for one or more Gen 3 messages. In some embodiments the reconciliation agent may periodically issue a retry query for some or all of the pending Gen 3 messages. For example the reconciliation agent may contact the reconciliation application of the archive every 24 hours and issue a retry query comprising all message IDs for all Gen 3 messages previously submitted before a time interval Cache IssueResolution before the current time.

The retry query may be received by the archive via the reconciliation application and a determination may be made whether each of the messages identified in the retry query has now been received and is fully stored by the archive . If it is determined that all of the Gen 3 messages indentified in the retry query are fully stored the archive may respond via the reconciliation application with a positive response Ack indicating that each message is stored. When a positive response is received for a particular message the reconciliation agent can confirm that the previously unconfirmed message has been archived and may delete the message from the local message store .

If however it is determined that one or more of the messages indentified in the retry query are not be stored the archive may respond via the reconciliation application with a negative response Nak identifying the messages that are not stored. When the reconciliation agent receives a negative response from the archive regarding a particular message the unconfirmed message remains in the message storage to guarantee its availability until it can be confirmed that the message is archived.

In some embodiments when a negative response for a retry query is received for a Gen 3 message the reconciliation agent may determine whether a maximum latency threshold has been reached. If the maximum latency threshold has not been reached the reconciliation may periodically contact the reconciliation application of the archive and issue further retry queries for the unconfirmed message until the maximum latency threshold is reached.

In other embodiments when a negative response for a retry query is received for a Gen 3 message the reconciliation agent may determine whether a maximum number of retry attempts has been reached. If the maximum number of retry attempts has not been reached the reconciliation may periodically contact the reconciliation application of the archive and issue further retry queries for the unconfirmed message until the maximum number of attempts is reached.

When a message cannot be confirmed the reconciliation agent may perform remediation of the unconfirmed message by resubmitting the unconfirmed message to the archive . In some embodiments the reconciliation agent may perform remediation of the unconfirmed message when the maximum latency or maximum number of retry attempts has been reached. In other embodiments there may be no maximum latency or maximum number of retry attempts and the reconciliation agent may begin remediation upon the failure of a single retry attempt. For example if the first retry attempt for a Gen 3 message fails the reconciliation agent may being remediation for the message immediately upon receiving a negative response from the archive .

Until it is confirmed that a particular message is archived the unconfirmed message remains in the message storage to guarantee its availability. According to various embodiments the reconciliation agent may resubmit the unconfirmed message to the archive and keep a copy of the unconfirmed message in the message storage . After the unconfirmed message is resubmitted to the archive the reconciliation process may begin again until it is confirmed that the particular message is archived.

If a particular message cannot be reconciled after several resubmission attempts intervention may be needed. According to various embodiments upon the failure of remediation such as the failure of a certain number of resubmission attempts the reconciliation agent may generate and send an alert. For example if reconciliation fails after several resubmission attempts an alert may be sent to an administrator of the generating e mail system informing the administrator of the problem and that some manual process is needed to resolve the problem. It can be appreciated that even when a particular message cannot be reconciled the message remains in the message storage to guarantee its availability.

As shown the e mail server via the journaling agent sends a journal report to the archive . In various implementations the journal report may be created based on a set of journaling conditions. For example when an e mail message is sent to a recipient by the e mail server the journaling agent may determine whether the e mail message satisfies the conditions for journaling. If the conditions are met and journaling is to be applied the journaling agent packages the e mail message as a journal report .

The journal report may comprise for example a copy of the e mail message that has met the journaling conditions for the archive and metadata including a message ID for the message the identities of the recipients and other transport data for the message. The e mail server sends the e mail message to the recipient and sends the journal report via the journaling agent to the archive . The journal report may be sent to the archive over e mail through SMTP for example.

According to various embodiments when the journal report is created the journaling agent also sends a copy of the journal report to the reconciliation agent for storage in a local mailbox or holding area such as message storage . The copy of the journal report includes the message to be reconciled which may comprise a copy of the same message sent to the recipient and sent to the archive . The copy of the journal report also may comprise metadata including a message ID for the message the identities of the recipients and other transport data for the message.

As described above in some implementations messages pending reconciliation in the holding area may be categorized into multiple reconciliation generations. According to various embodiments messages pending reconciliation may be categorized based on latency associated with the archive when a copy of the message to be reconciled may be locally available from the cache the failure to confirm the archiving of the message a time interval for resolving message delays or in other ways. In such implementations queries may be issued according to message categorization to optimize the performance of the reconciliation process and minimize the number of queries to the archive .

In the example illustrated in the reconciliation agent may contact the reconciliation application of the archive and send a configuration query . In various implementations the configuration query may comprise a web service query requesting certain configuration information from the archive such as the expected SLA or latency for processing messages. The configuration query may be received by the archive via the reconciliation application . The archive responds to the configuration query via the reconciliation application with a configuration response comprising the requested configuration information.

As shown the e mail server via the reconciliation agent may issue one or more queries to the reconciliation application to guarantee the arrival and storage of a particular message at the archive . In various embodiments the reconciliation agent may perform an asynchronous reconciliation process for contacting the archive inquiring whether the messages that were sent to the archive have been fully saved and confirming the storage of the messages in the archive . If the archive cannot confirm the storage for a given message the reconciliation agent may perform a series of steps to ask the archive again at a later point in time. Even if the archive never confirms storage the reconciliation agent will maintain a local copy of the message which is available for viewing printing saving and so forth.

In the example illustrated in the reconciliation agent may contact the reconciliation application of the archive and send a delivery confirmation query . In various implementations the delivery confirmation query may be sent during the time interval T after the expiration of SLA. The delivery confirmation query may comprise for example the message IDs for one or more Gen 1 messages. Messages received by the reconciliation agent and categorized as Gen 1 may correspond to messages expected to be stored in the archive . In addition a copy of the message may be available from the cache to realize I O savings.

The delivery confirmation query may be received by the archive via the reconciliation application and a determination may be made whether each of the messages identified in the delivery confirmation query has been received and is fully stored by the archive . Based on the determination the archive responds to the delivery confirmation query via the reconciliation application with a delivery confirmation query response . In various implementations the delivery confirmation query response may be sent during the time interval T and comprise the message IDs for one or more Gen 1 messages.

If it is determined that all of the messages indentified in the delivery confirmation query are fully stored the archive may respond via the reconciliation application with a delivery confirmation query response comprising a positive response Ack indicating that each message is stored. When the delivery confirmation query response comprises a positive response the reconciliation agent confirms that the message is archived and may delete the message from the local message store .

If it is determined that one or more of the messages indentified in the delivery confirmation query are not stored by the archive the archive may respond via the reconciliation application with a delivery confirmation query response comprising a negative response Nak identifying the messages that are not stored. When the reconciliation agent receives a delivery confirmation query response comprising a negative response the unconfirmed messages are maintained in the message storage to guarantee availability until it can be confirmed that the messages are archived.

When one or more messages are unconfirmed the reconciliation agent may contact the reconciliation application of the archive and send a retry query . In various implementations the retry query may be sent during the time interval T after allowing the time interval IssueResolution to elapse for mail delays to be resolved. The retry query may comprise the message IDs for one or more Gen 3 messages. Pending messages categorized as Gen 3 by the reconciliation agent may correspond to unconfirmed messages that had delay issues that now may be resolved.

The retry query may be received by the archive via the reconciliation application and a determination may be made whether each of the messages identified in the retry query has been received and is fully stored by the archive . Based on the determination the archive responds to the retry query via the reconciliation application with a retry query response . In various implementations the retry response may be sent during the time interval T and comprise the message IDs for one or more Gen 3 messages.

If it is determined that all of the messages indentified in the retry query are fully stored the archive may respond via the reconciliation application with a delivery confirmation query response comprising a positive response Ack indicating that each message is stored. When the retry query response comprises a positive response the reconciliation agent confirms that the message is archived and may delete the message from the local message store .

If it is determined that one or more of the messages indentified in the retry query are not stored by the archive the archive may respond via the reconciliation application with a retry query response comprising a negative response Nak identifying the messages that are not stored. When the reconciliation agent receives a retry query response comprising a negative response the unconfirmed messages are maintained in the message storage to guarantee availability until it can be confirmed that the messages are archived.

In some embodiments when a retry query response comprising a negative response is received the reconciliation agent may issue further retry queries until reaching a maximum latency threshold and or a maximum number of attempts. In other embodiments the reconciliation agent may begin remediation immediately upon the failure of a single retry attempt.

When a message cannot be confirmed the reconciliation agent may perform remediation of the unconfirmed message by resubmitting the message to the archive . As shown in some embodiments the reconciliation agent may perform remediation of the unconfirmed message by sending a resubmission message to the journaling application . In other embodiments the reconciliation agent may perform remediation of the unconfirmed message by sending the resubmission message to the journaling agent for resubmission to the archive .

The resubmission message may comprise a copy of the unconfirmed message and may be sent to the archive as a journal report e mail message through SMTP for example. In various implementations sending the resubmission message replays the original journal report sent to the archive . The reconciliation agent also will keep a copy of the unconfirmed message in the message storage .

After the resubmission message is sent the reconciliation process may begin again until it is confirmed that the particular message is archived. If a particular message cannot be reconciled after several resubmission attempts the reconciliation agent may generate and send an alert to an administrator.

According to various embodiments the message flow may involve the exchange of one or more messages in accordance with a reconciliation protocol for communicating between the e mail server and the archive . The reconciliation protocol may be implemented for example as a web service using a web service protocol and web service schema. In some embodiments the reconciliation protocol may be implemented to communicate XML documents in accordance with Simple Object Access Protocol SOAP communication protocol and procedures for communication between applications. When implemented as a web service the reconciliation protocol may use various platform and language independent formats designed to communicate over computer networks such as the Internet in accordance with communications protocols such as HTTP HTTPS SMTP FTP and so forth. It can be appreciated that the reconciliation protocol may advantageously be implemented as a web service due to firewalls typically allowing HTTP traffic and many archives already providing an HTTP front end to allow administrators to log in and perform searches on the archived content.

In some embodiments the query and response messages of the reconciliation protocol may comprise web service queries and responses implemented as XML documents. The query and response XML documents may be implemented using XML schema and attributes such as XML namespaces xmlns XML schema instance xsi XML schema definition xsd extension filenames and so forth. In some implementations the query and response XML documents may comprise SOAP messages including a SOAP envelope and a SOAP body containing call and response information.

The following illustrates one non limiting example of a configuration query and a configuration response implemented in accordance with a web service reconciliation protocol. In this example the configuration query is asking to obtain certain configuration information such as the expected SLA or latency for processing messages.

The following illustrates one non limiting example of a delivery confirmation query and a delivery confirmation response implemented in accordance with a web service reconciliation protocol. In this example the delivery confirmation query is asking the archive account bank customer ehs.com for the status of two messages which were sent the times shown the Z suffix indicates UTC in XML schema .

It can be appreciated that while some embodiments may be described as implementing the reconciliation protocol in accordance with a web service protocol other protocols may be used including without limitation a Remote Procedure Call RPC protocol e mail messaging protocols Internets protocol such as Transmission Control Protocol TCP a Representational State Transfer REST protocol web feed protocols such as Really Simple Syndication RSS and or any other suitable synchronous or asynchronous protocols.

Operations for the above described embodiments may be further described with reference to one or more logic flows. It may be appreciated that the representative logic flows do not necessarily have to be executed in the order presented or in any particular order unless otherwise indicated. Moreover various activities described with respect to the logic flows can be executed in serial or parallel fashion. The logic flows may be implemented using one or more hardware elements and or software elements of the described embodiments or alternative elements as desired for a given set of design and performance constraints. For example the logic flows may be implemented as logic e.g. computer program instructions for execution by a logic device e.g. a general purpose or specific purpose computer .

As shown the logic flow may comprise receiving a message to be reconciled block . In various implementations the message to be reconciled may correspond to a message sent by an e mail server to an archive for storage. In some implementations for example the message to be reconciled may comprise a copy of a message sent to the archive for storage. The message to be reconciled may be received in a copy of a journal report corresponding to a journal report sent by the e mail server to the archive . The copy of the journal report may comprise a copy of the same message that was sent to a recipient and sent to the archive for storage.

The logic flow may comprise categorizing the received message for reconciliation block . In various embodiments the message to be reconciled may be categorized based on one more time intervals such as a time interval corresponding to latency associated with the archive a time interval when a copy of the message to be reconciled is available in a local cache and a time interval for resolving delay issues. The message to be reconciled also may be categorized based on receiving a negative response to a delivery confirmation query.

The logic flows may comprise issuing a delivery confirmation query to the archive according to categorization of the message for reconciliation block . In various embodiments the delivery confirmation query may be delayed based on latency of the archive . In some implementations the delivery confirmation query may be sent to the archive in accordance with a web service protocol.

The logic flow may comprise confirming the archiving of the message sent to the server block . In various embodiments the message to be reconciled is stored in a holding area such as the message storage until it is confirmed that the message sent to the archive is stored. After confirming storage of the message at the archive the message to be reconciled may be deleted from the message storage . If a negative response to the delivery confirmation query is received a retry query may be sent to the archive until a maximum latency and or maximum number of attempts is reached.

The logic flow may comprise remediating an unconfirmed message block . In various embodiments the message to be reconciled may be resubmitted to the archive after receiving a negative response to the retry query. After the unconfirmed message is resubmitted to the archive the reconciliation process may begin again until it is confirmed that the particular message is archived. It can be appreciated that even when a particular message cannot be reconciled the message remains in the message storage to guarantee its availability.

It can be appreciated that while the logic flow may illustrate a certain sequence of steps other sequences of steps may also be performed according to alternative embodiments. Moreover some individual steps of the logic flow may include multiple sub steps that may be performed in various sequences as appropriate to the individual step. Furthermore additional steps may be added or some steps may be removed depending on the particular implementation.

In one embodiment for example the article of manufacture and or the computer readable storage medium may store logic comprising executable computer program instructions that when executed by a computer cause the computer to perform methods and or operations in accordance with the described embodiments. Examples of a computer may include any suitable computing device having computing capabilities and or communications capabilities in accordance with the described embodiments. Exemplary computing device may include without limitation a mobile device a personal digital assistant a mobile computing device a smart phone a cellular telephone a handset a one way pager a two way pager a messaging device a computer a personal computer PC a desktop computer a laptop computer a notebook computer a handheld computer a server a server array or server farm a web server a network server an Internet server a work station a mini computer a main frame computer a supercomputer a network appliance a web appliance a distributed computing system multiprocessor systems processor based systems consumer electronics programmable consumer electronics television digital television set top box wireless access point base station subscriber station mobile subscriber center radio network controller router hub gateway bridge switch machine or combination thereof.

The executable computer program instructions may include any suitable type of code such as source code compiled code interpreted code executable code static code dynamic code and the like. The executable computer program instructions may be implemented according to a predefined computer language manner or syntax for instructing a computer to perform a certain function. The instructions may be implemented using any suitable high level low level object oriented visual compiled and or interpreted programming language such as C C C Java BASIC Perl Matlab Pascal Visual BASIC assembly language and others.

Various embodiments may be implemented using hardware elements software elements or a combination of both. Examples of hardware elements may include any of the examples as previously provided for a logic device and further including microprocessors circuits circuit elements e.g. transistors resistors capacitors inductors and so forth integrated circuits logic gates registers semiconductor device chips microchips chip sets and so forth. Examples of software elements may include software components programs applications computer programs application programs system programs machine programs operating system software middleware firmware software modules routines subroutines functions methods procedures software interfaces application program interfaces API instruction sets computing code computer code code segments computer code segments words values symbols or any combination thereof. Determining whether an embodiment is implemented using hardware elements and or software elements may vary in accordance with any number of factors such as desired computational rate power levels heat tolerances processing cycle budget input data rates output data rates memory resources data bus speeds and other design or performance constraints as desired for a given implementation.

Some embodiments may be described using the expression coupled and connected along with their derivatives. These terms are not necessarily intended as synonyms for each other. For example some embodiments may be described using the terms connected and or coupled to indicate that two or more elements are in direct physical or electrical contact with each other. The term coupled however may also mean that two or more elements are not in direct contact with each other but yet still co operate or interact with each other.

It is emphasized that the Abstract of the Disclosure is provided to comply with 37 C.F.R. Section 1.72 b requiring an abstract that will allow the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition in the foregoing Detailed Description it can be seen that various features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description with each claim standing on its own as a separate embodiment. In the appended claims the terms including and in which are used as the plain English equivalents of the respective terms comprising and wherein respectively. Moreover the terms first second third and so forth are used merely as labels and are not intended to impose numerical requirements on their objects.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

