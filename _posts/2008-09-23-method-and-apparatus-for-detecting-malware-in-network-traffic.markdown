---

title: Method and apparatus for detecting malware in network traffic
abstract: A method and apparatus for detecting malware in network traffic is described. One embodiment executes, in an emulation environment, an executable file as it is being received serially over a network, execution beginning once a block of data including an entry point of the executable file has been received, execution halting whenever an instruction in the executable file references data not yet received and resuming once the data not yet received has been received, execution ceasing upon satisfaction of a termination condition; examining the emulation environment for indications that the executable file includes malware; and taking corrective action responsive to the results of examining the emulation environment for indications that the executable file includes malware.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08370932&OS=08370932&RS=08370932
owner: Webroot Inc.
number: 08370932
owner_city: Broomfield
owner_country: US
publication_date: 20080923
---
The present application is related to commonly owned and assigned U.S. patent application Ser. No. 10 956 575 entitled System and Method for Actively Operating Malware to Generate a Definition now abandoned and commonly owned and assigned U.S. Pat. No. 7 590 707 entitled Method and System for Identifying Network Addresses Associated With Suspect Network Destinations each of which is incorporated herein by reference.

The present invention relates generally to computer networks. More specifically but not by way of limitation the present invention relates to methods and apparatuses for detecting malware in network traffic.

In a network gateway apparatus e.g. a Web proxy server router or firewall it is often desirable to test streaming data for malware such as viruses Trojan horses worms spyware adware keyloggers etc. Blocking malware as network traffic passes through a gateway apparatus helps to reduce the risk that harmful malware will reach a user s desktop.

Testing network traffic for malware takes time however. Unfortunately conventional gateway apparatuses and applications require that an entire executable file be read before testing for malware can begin. The resulting latency negatively impacts performance and degrades the quality of the user experience.

It is thus apparent that there is a need in the art for an improved method and apparatus for detecting malware in network traffic.

Illustrative embodiments of the present invention that are shown in the drawings are summarized below. These and other embodiments are more fully described in the Detailed Description section. It is to be understood however that there is no intention to limit the invention to the forms described in this Summary of the Invention or in the Detailed Description. One skilled in the art can recognize that there are numerous modifications equivalents and alternative constructions that fall within the spirit and scope of the invention as expressed in the claims.

The present invention can provide a method and system for detecting malware in network traffic. One illustrative embodiment is a method for detecting malware in network traffic the method comprising executing in an emulation environment an executable file as it is being received serially over a network the executing beginning once a block of data including an entry point of the executable file has been received the executing halting whenever an instruction in the executable file references data not yet received and resuming once the data not yet received has been received the executing ceasing upon satisfaction of a termination condition examining the emulation environment for indications that the executable file includes malware and taking corrective action responsive to results of the examining.

Another illustrative embodiment is a network gateway apparatus comprising at least one processor a communication interface configured to send and receive data over a network and a memory containing a plurality of program instructions executable by the at least one processor the plurality of program instructions being configured to cause the at least one processor to execute in an emulation environment an executable file as it is being received by the network gateway apparatus serially over the network via the communication interface execution of the executable file in the emulation environment beginning once a block of data including an entry point of the executable file has been received execution of the executable file in the emulation environment halting whenever an instruction in the executable file references data not yet received and resuming once the data not yet received has been received execution of the executable file in the emulation environment ceasing upon satisfaction of a termination condition examine the emulation environment for indications that the executable file includes malware and take corrective action responsive to results of examining the emulation environment for indications that the executable file includes malware.

In some embodiments the methods of the invention can be implemented at least in part as a plurality of program instructions executable by a processor and stored on a computer readable storage medium.

In various illustrative embodiments of the invention a gateway apparatus tests streaming data e.g. a serially received WINDOWS Portable Executable PE file for malware by executing the executable file in an emulation environment. To overcome the problems of latency execution of the executable file in the emulation environment begins before the entire executable file has been received. For example in one embodiment execution begins as soon as a block of data including the entry point of the executable file has been received and execution continues as far as possible until an instruction in the executable file references data not yet received. At that point the emulator waits for the needed data. Once the additional data has been received emulated execution continues until another instruction is reached that references data not yet received and so forth. Thus the executable file is opportunistically executed in the emulation environment without waiting for the entire executable file to be received before beginning execution.

When a predetermined termination condition has been satisfied emulated execution of the executable file ceases. At an appropriate time the emulation environment is examined for indications that the executable file includes malware. Such an examination may be performed after emulated execution of the executable file has been terminated or it may begin sooner depending on the embodiment. Depending on the results of the examination appropriate corrective action can be taken when the executable file is found to include malware such as notifying a user e.g. a network administrator of the detected malware blocking the executable file containing malware from propagating further over the network or both.

The predetermined termination conditions can vary depending on the embodiment but two illustrative examples are 1 the executable program has been executed in the emulation environment for a predetermined period of time or for a predetermined number of CPU cycles or 2 the executable file has attempted to call a portion of the operating system s application programming interface API that is not implemented in the emulation environment. In one illustrative embodiment satisfaction of either termination condition above causes emulated execution of the executable file to cease. Other termination conditions may be devised besides those listed above depending on the particular embodiment. For a time or CPU cycles based termination condition the goal in general is to execute executable file long enough for it to show its true colors as malware but not to execute it for so long that malware detection adds excessive latency to the network traffic.

The illustrative embodiments described above can in many cases significantly reduce the latency of scanning streaming network traffic for malware. In fact in some cases emulated execution of the executable file terminates before the entire executable file has been received. Such a situation can arise for example where a termination condition is satisfied early or the executable file for whatever reason does not reference data near the end of its binary. In such cases the latency added by malware testing in accordance with various illustrative embodiments of the invention is nearly zero.

Referring now to the drawings where like or similar elements are designated with identical reference numerals throughout the several views and referring in particular to it is a block diagram of a computer networking environment in which various embodiments of the invention can be implemented. In a gateway apparatus enables a client computer to communicate with one or more Web servers via network which in some embodiments includes the Internet. As used herein a gateway apparatus refers to any device that acts as an intermediary between a client computer and a server over network . Examples include without limitation a Web proxy server a router and a firewall appliance. A gateway apparatus is one suitable environment to which the principles and techniques of the invention can be applied.

Input devices include for example a keyboard a mouse or other pointing device or other devices that are used to input data or commands to Web proxy server to control its operation.

In the illustrative embodiment shown in communication interfaces are provided at least in part by a Network Interface Card NIC that implements a standard such as IEEE 802.3 often referred to as Ethernet or IEEE 802.11 a set of wireless standards . In general communication interfaces permit Web proxy server to communicate with other computers such as client computer and Web server via one or more networks such as network see .

Memory may include without limitation random access memory RAM read only memory ROM flash memory magnetic storage e.g. a hard disk drive optical storage or a combination of these depending on the particular embodiment. In memory includes Web proxy application . As those skilled in the computer networking art are aware a Web proxy server is a gateway apparatus that services the requests of client computers by forwarding those requests to other servers on the network.

In the illustrative embodiment of Web proxy application includes the following functional modules emulator malware detection engine and corrective action module . Web proxy application typically includes other functional modules not shown in for simplicity that support the fundamental network proxy function of Web proxy server . The functional modules shown in are related to the malware detection aspect of Web proxy application . The division of Web proxy application into the particular functional modules shown in is merely illustrative. In other embodiments the functionality of these modules may be subdivided or combined in ways other than that indicated in .

In the illustrative embodiment of Web proxy server receives an executable file serially over network and tests it for the presence of malware. Executable file in one illustrative embodiment is a WINDOWS PE file as mentioned above. In other embodiments executable file can be an executable file in accordance with a different operating system such as LINUX.

In one illustrative embodiment Web proxy application and its functional modules shown in are implemented as software that is executed by processor . Such software may be stored prior to its being loaded into RAM for execution by processor on any suitable computer readable storage medium such as a hard disk drive an optical disk or a flash memory see storage device . In general the functionality of Web proxy application may be implemented as software firmware hardware or any combination or sub combination thereof.

In this illustrative embodiment emulator emulates in software the functionality of a central processing unit CPU such as an INTEL x86 or x86 64 CPU and also implements a subset of the operating system s API. The emulated API is designed to be called by non trusted code. In one illustrative embodiment for example emulator implements a subset of the MICROSOFT WINDOWS API. In other embodiments emulated execution of executable file may be accomplished by means other than software emulation. For example executable file can be executed natively in a carefully restricted hardware environment often called a sandbox by those skilled in the art. In another embodiment executable file can be executed using dynamic translation recompilation. Herein emulation environment refers broadly to any of the foregoing and other applicable techniques and their associated resources for securely executing untrusted program code. These techniques have in common some form of isolated execution of the untrusted program code.

In some sense emulator tricks executable file into running in an emulation environment as if it were running on an ordinary computer system. This permits the executable file s process memory and behavior to be analyzed for the presence of malware safely without risking the integrity of Web proxy server and without Web proxy server necessarily having to run the same operating system as that for which executable file is intended. Also some malware is packed encrypted or both and must be unpacked and or decrypted before it can be executed. Execution of executable file in emulator permits the process memory and behavior of such packed and or encrypted malware to be examined for indications of malware.

As noted above emulator is configured to begin execution of executable file before the entire file has been received by Web proxy server to pause execution as needed when an instruction in executable file references data not yet received and to resume execution once that data has been received emulator ceasing execution upon satisfaction of a termination criterion as explained above.

Malware detection engine is configured to detect malware in executable file . In doing so malware detection engine may scan the process memory associated with executable file in the emulation environment associated with emulator for known malware definitions or signatures. Malware detection engine may also analyze the behavior of executable file in the emulation environment to determine whether executable file exhibits behaviors commonly associated with malware e.g. attempting to reformat a disk drive or modify the operating system s registry in particular ways . Malware detection engine may employ the foregoing or other malware detection techniques separately or in combination depending on the particular embodiment.

Corrective action module is configured to take appropriate corrective action when malware detection engine determines that executable file includes malware. Specific corrective actions may include without limitation reporting the detected malware to a user e.g. a network or system administrator and preventing the executable file from propagating further over network . That is corrective action module can block an executable file that includes malware thereby preventing it from reaching a client computer .

In the illustrative embodiment shown in memory includes router firmware . In this embodiment router firmware includes functional modules similar to those discussed above in connection with emulator malware detection module and corrective action module . As in the embodiment discussed above in connection with router receives an executable file in serial fashion over network . Note that router firmware typically includes other functional modules not shown in for simplicity that support its fundamental network traffic routing tasks.

A network gateway apparatus such as Web proxy server or router may in some embodiments be configured as a network firewall. In the computer industry a firewall commonly refers to a device set of devices and or software firmware configured to permit or deny encrypt decrypt or proxy all network traffic between different security domains in accordance with a set of rules or other criteria.

Upon satisfaction of a termination condition execution of executable file in the emulation environment ceases. As discussed above the termination of emulated execution may be triggered by for example a predetermined limit on elapsed execution time or number of expended CPU cycles having been reached an attempt by executable file to call a portion of the operating system s API that is not implemented in the emulator or some other suitable termination criterion depending on the particular embodiment.

At malware detection engine examines the emulation environment associated with emulator for indications that executable file includes malware. As discussed above such an examination can include scanning the process memory associated with executable file for known malware definitions examining the behavior of executable file in the emulation environment or both.

At corrective action module takes corrective action responsive to the results of malware detection engine s examination of the emulation environment. If malware detection engine determines at that executable file includes malware corrective action could include without limitation notifying a user e.g. by displaying a warning on a display or writing a message to an event log preventing executable file from propagating further over network or both. At the method terminates.

In some embodiments as much as possible of executable file is read at a time depending on network and device limitations. In other embodiments executable file is read in blocks of equal fixed size.

At the gateway apparatus reads the stream of PE data and loads it into memory. If the current data block has been loaded in its entirety at the method proceeds to . Otherwise the method loops to Block until all of the data in the current data block has been read.

At the gateway apparatus checks to determine whether a predetermined emulated execution time limit for executable file has been reached. If not the current data block is executed in emulator . If the emulated execution of executable file requires data in a subsequent data block of the file a data block of the file not yet received the identity of the current data block is updated to reflect that condition. In such cases emulated execution pauses temporarily while the necessary data is read to permit execution to continue. If during execution of the current data block no attempt is made to call an unimplemented portion of the API at the method returns to Block for reading of the current data block if needed. Otherwise if the emulated execution time limit or CPU cycle limit was reached at or executable file attempted to call an unimplemented portion of the API at malware detection engine at examines the emulation environment associated with emulator for indicators of malware as explained above.

At corrective action module takes appropriate corrective action responsive to the results of the examination of the emulation environment by malware detection engine . As discussed above in connection with if malware detection engine determines at that executable file includes malware taking corrective action could include without limitation notifying a user preventing executable file from propagating further over network or both. At the method terminates.

In one illustrative embodiment of the invention the methods of the invention are implemented at least in part as a plurality of program instructions executable by a processor and stored on a computer readable storage medium such as without limitation a hard disk drive HDD optical disc ROM or flash memory. In such an embodiment the various functional units such as emulator malware detection engine and corrective action module can be implemented as one or more instruction segments e.g. functions or subroutines .

Those skilled in the art are well aware that modern file systems and operating systems support memory mapped input output I O including virtual memory. Those skilled in the art may also recognize that the above techniques discussed in connection with various illustrative embodiments enable one to pretend that memory mapped I O is also available in a network streaming data environment. As discussed above such an approach can significantly reduce the latency incurred in detecting malware in network traffic.

In conclusion the present invention provides among other things a method and apparatus for detecting malware in network traffic. Those skilled in the art can readily recognize that numerous variations and substitutions may be made in the invention its use and its configuration to achieve substantially the same results as achieved by the embodiments described herein. Accordingly there is no intention to limit the invention to the disclosed exemplary forms. Many variations modifications and alternative constructions fall within the scope and spirit of the disclosed invention as expressed in the claims.

