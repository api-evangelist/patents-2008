---

title: Managing shared inventory in a virtual universe
abstract: Generally speaking, systems, methods and media for managing shared inventory in a virtual universe are disclosed. Embodiments of the method may include receiving notification of a user session being established between a user and a virtual universe simulator. The method may also include accessing a list of shared inventory items for the user where the list of shared inventory items includes one or more shared inventory items each having an inventory source associated with it. Embodiments may also include retrieving at least one shared inventory item from its associated inventory source and passing the retrieved shared inventory item to the virtual universe simulator. Further embodiments may include retrieving an updated listing for the shared inventory items from their associated inventory sources and passing the updated shared inventory item list to the virtual universe simulator. Further embodiments may include passing metadata for shared inventory items to the virtual universe simulator.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09256898&OS=09256898&RS=09256898
owner: International Business Machines Corporation
number: 09256898
owner_city: Armonk
owner_country: US
publication_date: 20080211
---
The present invention is in the field of data processing systems and in particular to systems methods and media for managing shared inventory in a virtual universe.

Computer systems are well known in the art and have attained widespread use for providing computer power to many segments of today s modern society. As advances in semiconductor processing and computer architecture continue to push the performance of computer hardware higher more sophisticated computer software has evolved to take advantage of the higher performance of the hardware resulting in computer systems that continue to increase in complexity and power. Computer systems have thus evolved into extremely sophisticated devices that may be found in many different settings. Computer systems are often connected to the Internet or other broad based network in order to communicate with other computer systems access information or other resources or perform various tasks associated with business personal bankings electronic commerce transactions or other endeavors.

One application for computer systems that is increasing in importance is for use in accessing virtual universes VUs which are also known as virtual worlds and virtual world environments VWEs . A VU represents a real or imaginary place using graphics images video auditory data or other sensory data to define a representation on a computer system to one or more users. The hardware and software that together create a VU provide the ability for users to interact with the VU in various ways VUs commonly allow for multiple users to simultaneously interact with the VU allowing the users to thus interact with each other within the VU and form a community. Current VUs such as Second Life by Linden Lab or There by Makena Technologies provide an interactive three dimensional 3D online digital world with hundreds of thousands of users accessing the world via the Internet. In these graphical VUs users typically are represented by an avatar within the online world and the users may command their avatar to move within the VU communicate with other users via their avatars etc. and thus interact with the virtual world VUs typically allow users using a client program on their computer system to use various tools to view navigate and modify the virtual world as well as participate in its virtual economy.

VU users typically have an inventory of items that they own and these inventory items may be bought sold traded etc during operation of the VU. Items in a typical inventory may include clothing virtual pets vehicles electronic media e.g. music files or other possessions. Each inventory item may represent a piece of code or other data which may be rendered in some fashion to the user during a session in the VU. Clothing inventory for example may be rendered as clothing for the user s avatar while a virtual dog in another example may render as an automated avatar that follows the user s avatar within the VU. The contents of a user s inventory are typically displayed in a hierarchical manner similar to an operating system s display of folders subfolders and files within a filesystem.

The current use of inventories within a VU is limited. Individuals must typically manage their own inventories manually adding or deleting inventory items from their inventory. Also since each inventory item often has software code necessary to render it the stored code results in significant storage and maintenance requirements within the VU as each instance of code is stored separately. The cost of purchasing or otherwise acquiring many inventory items is also sometimes prohibitive for many users. Another problem with current inventory systems is that sharing of inventory items is not available. A user wishing to loan an inventory item to another for example loses control of that item making such a loan undesirable in many cases. For items such as artwork the owner may want to retain some control over the item. For other items where control is not as important a copy of an item can sometimes be made in order to facilitate exchange of items but this may result in excessive use of VU resources. The lack of sharing may thus exacerbate the storage problems associated with inventory items as the code must be stored for each individual user. Managing inventories has thus become a major problem in VU space as such inventories are increasingly taken up by functional software documents and other such items that today reside on local drives.

The problems identified above are in large part addressed by systems methods and media for managing shared inventory in a virtual universe. A method for managing shared inventory in a virtual universe is disclosed. Embodiments of the method may include receiving notification of a user session being established between a user and a virtual universe simulator. The method may also include accessing a list of shared inventory items for the user where the list of shared inventory items includes one or more shared inventory items each having an inventory source associated with it. Embodiments may also include retrieving at least one shared inventory item from its associated inventory source and passing the retrieved at least one shared inventory item to the virtual universe simulator. Further embodiments may include retrieving an updated listing for the shared inventory items from their associated inventory sources and passing the updated shared inventory item list to the virtual universe simulator. Further embodiments may include passing metadata for shared inventory items to the virtual universe simulator.

Another embodiment provides a computer program product comprising a computer useable medium having a computer readable program wherein the computer readable program when executed on a computer causes the computer to perform a series of operations for managing shared inventory in a virtual universe. The series of operations generally includes receiving notification of a user session being established between a user and a virtual universe simulator. The series of operations may also include accessing a list of shared inventory items for the user where the list of shared inventory items includes one or more shared inventory items each having an inventory source associated with it. Embodiments may also include retrieving at least one shared inventory item from its associated inventory source and passing the retrieved at least one shared inventory item to the virtual universe simulator. Further embodiments may include retrieving an updated listing for the shared inventory items from their associated inventory sources and passing the updated shared inventory item list to the virtual universe simulator. Further embodiments may include passing metadata for shared inventory items to the virtual universe simulator.

A further embodiment provides a data processing system having a machine accessible medium storing a plurality of program modules. Embodiments may include a virtual universe simulator interface module to facilitate communication to and from a virtual universe simulator and to receive notification of a user session to the virtual universe simulator being established. Embodiments may also include a shared inventory en abler module to manage shared inventory items in a virtual universe. The shared inventory enabler module may include an inventory list module to access a list of shared inventory items for the user that includes one or more shared inventory items each having an inventory source associated with it. The shared inventory enabler module may also include an inventory software module to retrieve at least one shared inventory item from its associated inventory source for passing to the virtual universe simulator.

The following is a detailed description of example embodiments of the invention depicted in the accompanying drawings. The example embodiments are in such detail as to clearly communicate the invention. However the amount of detail offered is not intended to limit the anticipated variations of embodiments on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims. The descriptions below are designed to make such embodiments obvious to a person of ordinary skill in the art.

Generally speaking systems methods and media for managing shared inventory in a virtual universe are disclosed. Embodiments of the method may include receiving notification of a user session being established between a user and a virtual universe simulator. The method may also include accessing a list of shared inventory items for the user where the list of shared inventory items includes one or more shared inventory items each having an inventory source associated with it. Embodiments may also include retrieving at least one shared inventory item from its associated inventory source and passing the retrieved at least one shared inventory item to the virtual universe simulator. Further embodiments may include retrieving an updated listing for the shared inventory items from their associated inventory sources and passing the updated shared inventory item list to the virtual universe simulator. Further embodiments may include passing metadata for shared inventory items to the virtual universe simulator.

The system and methodology of the depicted embodiments allow for effective and efficient management of shared inventory in a virtual universe. By allowing users to share inventory items users can retain some level of control over their property by placing restrictions on the use of the item by others according to some embodiments. The resources required to store and maintain various inventory items may also be reduced as the disclosed shared inventory system prevents wasteful duplicative storage of shared inventory items. A user may have in their inventory list a number of shared inventory items that are stored at a variety of locations many remote hi this fashion the shared inventory items heed not be stored in a unique instance for each user sharing the item and can instead be efficiently stored in one location. A user who is offering an item for sharing may restrict sharing by others in a variety of ways such as by putting time limits on others usage requiring for the others to first pay a fee limiting how the other users may utilize the item or other restrictions.

In general the routines executed to implement the embodiments of the invention may be part of a specific application component program module object or sequence of instructions. The computer program of the present invention typically is comprised of a multitude of instructions that will be translated by the native computer into a machine readable format and hence executable instructions. Also programs are comprised of variables and data structures that either reside locally to the program or are found in memory or on storage devices. In addition various programs described herein may be identified based upon the application for which they are implemented in a specific embodiment of the invention. However it should be appreciated that any particular program nomenclature herein is used merely for convenience and thus the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

While specific embodiments will be described below with reference to particular configurations of hardware and or software those of skill in the art will realize that embodiments of the present invention may advantageously be implemented with other substantially equivalent hardware software systems manual operations or any combination of any or all of these. The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc. Moreover embodiments of the invention may also be implemented via parallel processing using a parallel computing architecture such as one using multiple discrete systems e.g. plurality of computers etc or an internal multiprocessing architecture e.g. a single system with parallel processing capabilities .

Aspects of embodiments of the invention described herein may be stored or distributed on computer readable medium as well as distributed electronically over the Internet or over other networks including wireless networks. Data structures and transmission of data including wireless transmission particular to aspects of the invention are also encompassed within the scope of the invention. Furthermore the invention can take the form of a computer program product accessible from a computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The medium may be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

Each software program described herein may be operated on any type of data processing system such as a personal computer server etc. A data processing system suitable for storing and or executing program code may include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements may include local memory employed during execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution input output I O devices including but not limited to keyboards displays pointing devices etc. may be coupled to the system either directly or through intervening I O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices though intervening private or public networks including wireless networks. Modems cable modems and Ethernet cards are just a few of the currently available types of network adapters.

Turning now to the drawings depicts a virtual universe VU inventory system with one or more virtual universe simulators one or more client computer systems a virtual inventory manager and various inventory sources according to some embodiments. In the depicted embodiment the virtual universe inventory system includes one or more virtual universe simulators in communication with a plurality of client computer systems via network . The virtual universe simulator and client computer systems may also be in communication with a virtual inventory manager via network . A variety of possible inventory sources are also depicted including VU inventory databases for each virtual universe simulator local inventory databases for each client computer system distributed inventory and a virtual inventory manger VIM central inventory . As will be described in more detail subsequently a virtual universe simulator may manage a virtual universe VU by interacting with a variety of users of client computer systems and the virtual inventory manager may facilitate sharing of inventory items between various users of the client computer systems . While a plurality of virtual universe simulators and client computer systems are depicted one of ordinary skill in the art will recognize that the virtual inventory manager may facilitate shared inventory items with either a single virtual universe simulator or multiple simulators.

Inventory items may be any item that may be associated with a user in a virtual universe. Inventory items may each be comprised of one or more files be part of a larger database or be stored in any other fashion. In some embodiments an inventory item may be a piece of software code that is renderable in a virtual universe. In other embodiments inventory items may be represented as non executable data that may be used by the VU to render the inventory item for the user when needed. Non limiting examples of inventory items include graphics files sound files animations electronic documents video files avatar clothing or accessories avatar body parts avatar tools or vehicles or other objects avatar gestures automated avatars calling cards landmarks such as bookmarked locations or other geographical information items in a lost and found folder note cards photos and photo albums scripts e.g. macros to perform actions textures deleted items or any other type of item. One of ordinary skill in the art will recognize that inventory items may include executable code non executable data or any other type of information and may also represent any type of item within a VU.

Virtual universe simulator may be implemented on one or more servers or other computer systems such as those described in relation to adapted to implement all or part of a virtual universe. The virtual universe simulator may be implemented for example on one or more application servers such as International Business Machine s IBM s WebSphere Application Server WAS that may serve as middleware to set up operate and integrate e business applications across multiple computing platforms using Web technologies. The virtual universe simulator may provide a virtual universe to users by accessing stored information from a database and creating and operating a virtual universe based on the stored information. To accomplish this the virtual universe simulator may render the virtual universe including a user s inventory items on the client computer system so that the user can view or otherwise experience the virtual universe. An example virtual universe simulator may include massively multiplayer online games such as the Second Life virtual world from Linden Lab or There by Makena Technologies.

A virtual universe simulator may also have a universe database to store a variety of files used to create maintain and operate a virtual universe collectively environment information such as graphics files e.g. buildings avatars landscapes items etc. sound files e.g. environmental sounds spoken words etc. or text files e.g. configuration information descriptive information for objects user information etc. . The universe database may include a VU inventory database storing shared inventory items and or information relating to shared inventory items such as item metadata. Shared inventory items much like traditional inventory items may be rendered within a virtual universe. The VU inventory database may be wholly or partially a separate database from the universe database or it may be integrated within the universe database as depicted. The universe database and VU inventory database may each be stored on any type or combination of storage devices including volatile or non volatile storage such as hard drives storage area networks memory fixed or removable storage or other storage devices.

Users may utilize a client computer system according to the present embodiments to access the virtual universe simulator and thus the virtual universe via network . Client computer system may be a personal computer system or other computer system adapted to execute computer programs such as a personal computer workstation server notebook or laptop computer desktop computer personal digital assistant PDA mobile phone wireless device or set top box such as described in relation to . A user of the client computer system may utilize a VU interface to interact with the VU operated by the virtual world simulator . VU interface may be dedicated client software provided by the VU operator in some embodiments or it may alternatively be existing general software such as a browser.

The client computer system may optionally have a local inventory database to store shared inventory items and or information relating to shared inventory items such as item metadata. The local inventory database may be stored on any type or combination of storage devices including volatile or non volatile storage such as hard drives storage area networks memory fixed or removable storage or other storage devices. A local inventory database may be useful when a user stores some of their inventory items locally including items that they may make available for sharing. In some embodiments a local inventory database is not needed and inventory items are stored in other inventory sources such as the VU inventory database .

Network may be any type of data communications channel or combination of channels such as the Internet an intranet a LAN a WAN an Ethernet network a wireless network telephone network a proprietary network or a broadband cable network. In one example the Internet may serve as network and the client computer systems the virtual inventory manager and the virtual universe simulator may communicate via the Internet using known protocols. Those skilled in the art will recognize however that the invention described herein may be implemented utilizing any type or combination of data communications channel s without departure from the scope and spirit of the invention.

The virtual inventory manager as will be described in more detail in relation to may manage shared inventory items for one or more virtual universe simulators and thus one or more virtual universes . In some embodiments the virtual inventory manager may facilitate the Copying of a shared inventory item from ah inventory source to the virtual universe simulator when the shared inventory item is requested. By facilitating such copying the virtual inventory manager allows the virtual universe simulator to avoid having to store a copy of a shared inventory item for each instance of a user having rights to the item. In an example a user may have multiple items in her inventory some of which are shared inventory items. The shared inventory items may be represented as pointers or references to the shared inventory item that is stored at a remote inventory source as part of a shared managed inventory. When the user checks her inventory or at an earlier time the virtual inventory manager may in effect access the remote shared inventory item and provide that shared inventory item to the virtual universe simulator which may in turn render the Inventory item to the user. From the point of the view of the user it will appear in this example as if the item had been in her inventory all along. The virtual inventory manager may also optionally cache some or all shared inventory items and query inventory sources periodically for new or updated items in order to improve its efficiency.

The virtual inventory manger may optionally include a VIM central inventory database to store shared inventory items related information. The VIM central inventory database may be stored on any type or combination of storage devices including volatile or non volatile storage such as hard drives storage area networks memory fixed or removable storage or other storage devices. In some embodiments shared items may be stored on the VIM central inventory database instead of a VU inventory database associated with a virtual universe simulator or a local inventory database of a user. The VIM central inventory database may be particularly useful for situations where a virtual universe operator does not want to manage shared resources or for when inventory items may be shared across multiple virtual universes. A user may for example wish to use and share inventory items in multiple virtual universes to which they belong and a centralized database to store such items may provide efficiency benefits.

A virtual inventory manager may be operated by a virtual universe simulation owner a third party provider or other entity. The virtual inventory manager may also have a VIM Application Programming Interface API to facilitate access to and from any virtual universe simulator which may be particularly useful for third party managed virtual inventory managers . Once a VIM API is established a virtual universe simulator that wishes to take advantage of the services of a virtual inventory manager can ensure compatibility and operability via use of the VMI API

A distributed inventory database is another option for an inventory source to store shared inventory items and related information. A distributed inventory database may be a separate database from any of the other components of the virtual universe inventory system . A distributed inventory database may be particularly useful for content providers such as music or video distributors that wish to maintain control of their content and potentially service multiple virtual universe simulators . The distributed inventory database may be stored on any type or combination of storage devices including volatile or non volatile storage such as hard drives storage area networks memory fixed or removable storage or other storage devices.

According to some embodiments the virtual inventory manager may be considered an abstraction layer between traditional means of connecting data among servers and a virtual universe simulator specific graphical user interface GUI . The means of connecting data among servers may include network file system NFS applications structured query language SQL file transfer protocol ftp a services oriented architecture SOA request or other methodologies. A particular shared inventory item may be stored at any inventory source within the virtual universe inventory system including on VU inventory databases local inventory databases distributed inventory databases or VIM central inventory databases . While many types of inventory sources are depicted one of ordinary skill in the art will recognize that not all depicted inventory sources are required and that only one inventory source would be sufficient according to the present embodiments. As described previously the virtual inventory manager may access a particular shared inventory item from its original location and provide it to a virtual universe simulator so that a user with the appropriate permissions can access the shared inventory item regardless of its original location.

Various non limiting examples may serve to former illustrate the disclosed virtual universe inventory system . In one example a user of a client computer system may wish to share an inventory item stored in their local inventory database with other users of their virtual universe. By designating the inventory item as shareable other users will be able to enjoy the inventory item during their own user sessions in the virtual universe as the virtual inventory manager will facilitate copying the original inventory item as needed so that the item renders for the other users. The owning user may also limit the sharing in a variety of fashions such as by using metadata to specify the terms and conditions of sharing. By retaining the only permanent version of the item according to some embodiments the owning user may have improved control over its use compared to current systems. In other example a content provider may maintain a distributed inventory database including multiple shareable inventory items. The content provider may potentially provide access to these items to many users across multiple virtual universe simulators without having to distribute persistent copies of their content providing possible advantages in protection of intellectual property.

In the depicted embodiment the computer system includes a processor storage memory a user interface adapter and a display adapter connected to a bus or other interconnect. The bus facilitates communication between the processor and other components of the computer system as well as communication between components. Processor may include one or more system central processing units CPUs or processors to execute instructions such as an IBM PowerPC processor an Intel Pentium processor an Advanced Micro Devices Inc. processor or any other suitable processor. The processor may utilize storage which may be non volatile storage such as one or more hard drives tape drives diskette drives CD ROM drive DVD ROM drive or the like. The processor may also be connected to memory via bus such as via a memory controller hub MCH . System memory may include volatile memory such as random access memory RAM or double data rate DDR synchronous dynamic random access memory SDRAM . In the disclosed systems for example a processor may execute instructions to perform functions of the virtual inventory manager such as by accessing and passing shared inventory items to a virtual world simulator and may temporarily or permanently store information during its calculations or results after calculations in storage or memory . All or part of the virtual inventory manager for example may be stored in memory during execution of its routines. Similarly processor may execute instructions for the VU interface when computer system is used for a client computer system .

The user interface adapter may connect the processor with user interface devices such as a mouse or keyboard . The user interface adapter may also connect with other types of user input devices such as touch pads touch sensitive screens electronic pens microphones etc. A user of a client computer system attempting access to a shared inventory item for example may utilize the keyboard and mouse to interact with their computer system. The bus may also connect the processor to a display such as an LCD display or CRT monitor via the display adapter .

The user interface module may facilitate communication to and from a user including transmitting and receiving information associated with configuring an inventory item for sharing. For example a user may request and the user interface module may receive parameters for the sharing of a particular item such as by limiting the other users who can access it the length of time they may use it or other limitation. The VU simulator interface module may facilitate communication to and from virtual universe simulators such as by receiving notification of user sessions being established and requests for stored shared inventory items and by transmitting shared inventory items or metadata to a virtual universe simulator .

The shared inventory enabler and its components may communicate with the two interface modules to assist it in performing its task of managing shared inventory items in a virtual universe or multiple virtual universes . The inventory list module may access a list of shared inventory items for the user upon receiving notification that the user has established a session with a virtual universe simulator . The shared inventory item list may include one or more shared inventory items each having an inventory source i.e. where the shared inventory item is located associated with it. The inventory list module may also retrieve updated listings for shared inventory items from their associated inventory sources and may also pass the updated shared inventory item list to the virtual universe simulator . The inventory list module may optionally establish or verify a connection with the various inventory sources as part of its task.

The inventory software module may retrieve shared inventory items from its associated inventory source for passing to the virtual universe simulator . The inventory software module may access records of the location of particular shared inventory items in order to accomplish this task. To accomplish this the inventory software module may access a list of shared inventory items for the user that includes an inventory source for the items such as the list updated by the inventory list module . Using the shared inventory item list the inventory software module may retrieve the shared inventory items from their associated inventory source and may then pass the retrieved items to the virtual universe simulator via the VU simulator interface module .

The metadata manager module may pass metadata for shared inventory items to the virtual universe simulator to assist in controlling or limiting access to the shared inventory items. The metadata may include information relating to sharing of shared inventory items with users other than their owner. Metadata may be associated with a particular inventory item using any type of methodology. Metadata may for example mark an item for sharing by all may mark the item for sharing with particular users mark the item for sharing for particular users etc. In other examples metadata may mark an item for auction barter or other means of sharing items. In yet another example metadata may mark an inventory item by a rating such as a compilation of user ratings for the item. This example may be useful in facilitating a user searching for inventory items that meet a desired standard of quality or popularity e.g. a user may request all five star or 10 out of 10 rated items . The metadata may be persisted to a database such as the inventory source of the item or a separate metadata database and may also be used for visual indication of whether an object is available for sharing.

The use of metadata may allow a virtual inventory manager through the metadata manager module to offer a variety of services. One service may provide for scheduling policies where the metadata includes an indication of a sharing scheduling policy that provides for use of a particular shared inventory item by different users at different times. An inventory owner may thus state that her items may be shared for predefined blocks of time e.g. shared when owner not logged on shared every evening between 6 and 10 p.m. etc. . Another service may provide for access control lists ACLs that allow owners to set up ACLs around which other members of the virtual universe may access the sharing status of a particular inventory item. A user may configure an ACL to for example specify that a particular other user to know that item A from their inventory is shareable but not to know that item B is similarly shareable with other users. Another inventory service the metadata manager module may implement would include management of expiration of borrowing terms such as by specifying a borrow time for an item. When the borrow time expires a pop up window or other notification could be used and renewal options could optionally be provided. One of ordinary skill in the art will recognize that metadata may be used to control or limit virtually every aspect of shared inventory items in a virtual universe.

The virtual universe simulator may receive an updated shared inventory item list from the virtual inventory manager at element and may similarly receive a shared inventory item and any metadata from the virtual inventory manager at element . In some embodiments the updated shared inventory items list is received first and the shared inventory item follows at a later time. For example according to some embodiments the item and metadata are not sent unless the user attempts to use the inventory item. In this example the virtual universe simulator would notify the virtual inventory manager of the need to send the shared inventory item. In another example all shared inventory items from the list are sent soon alter the updated list. Alternatively only the shared inventory items that are likely to be used such as based on past history are sent immediately and others are held back until needed. In yet another example the virtual inventory manager may send the shared inventory items and metadata for a first layer of subfolders in the inventory item hierarchy and the shared inventory items and metadata and possibly listing for lower tiers of subfolders in the hierarchy and are only sent if the user expands the folders below the first layer. One of ordinary skill in the art will recognize that the virtual universe simulator and virtual inventory manager may utilize any other known or later developed methodology for sending and displaying data from a remote source and apply these methodologies to the use of shared inventories.

During the user s session the virtual universe simulator may at element receive a request from the user to use or otherwise access an item from their inventory list. At decision block the virtual universe simulator may determine if the inventory item to be used is a shared inventory item. If the item is not a shared inventory item the virtual universe simulator may proceed to element and render the inventory item for the user. If the item is a shared inventory item the virtual universe simulator may at decision block determine if the item use is permitted based on airy metadata associated with the item. If item use is not permitted the method may terminate and may optionally notify the user that use was denied and provide the reasons for the denial. If item use is permitted the virtual universe simulator may at element render the shared inventory item for the user using the shared inventory item received at element . After rendering the inventory item and if the item is a shared virtual inventory item the virtual universe simulator may optionally notify the virtual inventory manager of the use of the shared inventory item after which the method terminates.

At element the virtual inventory manager may receive notification of a user session from a virtual universe simulator . The notification may include an identification of the user. Upon receiving the notification the virtual inventory manager may at element access a list of shared inventory items for the user and their associated inventory sources. The virtual inventory manager may then update information and retrieve each item on the list of shared inventory items. At element the virtual inventory manager may connect to the first inventory source for shared inventory items or alternatively ensure that a previous connection is still active . The virtual inventory manager may then at element retrieve updated listings for the shared inventory items stored on that particular inventory source and may also at element retrieve the shared inventory items themselves and metadata for the shared inventory items. If there are more shared inventory items with different sources at decision block the method returns to element to repeat the process in this fashion all listings of inventory items may be updated for the user and any shared inventory items and metadata may also be retrieved.

The virtual inventory manager may next at element pass the updated shared inventory item list to the virtual universe simulator and may also at element pass the shared inventory item s to the virtual universe simulator . As described previously in relation to the virtual inventory manager may perform these tasks at different times and under different conditions such as by delaying passing the shared inventory items until they are needed.

The virtual inventory manager may at optional element receive a notification of inventory item use by a user and at element may store an indication of such if required after which the method terminates. Item use may be relevant in cases for example where the metadata for an inventory item provides that only a limited number of users can share at once where the owner wants to know who shares the item or in other situations.

Once the user is logged in to the virtual universe they may proceed in the virtual universe until accessing a list of the user s inventory items at element . The list of inventory items for the user may include both shared inventory items i.e. owned by others as well as inventory items owned by the user. The shared inventory items may optionally be indicated as shared by some means such as an asterisk next to their name in the list or other visual indication. The user may at element request the user of a particular inventory item and at element the virtual universe simulator will render at the client computer system the inventory item if permitted as described previously. From the point of the view of the user using a permitted shared inventory item should be the same experience as using their own items according to some embodiments providing a seamless use of shared inventory items by the user.

The VU interface may receive from a user at element a request to designate an inventory item that they own as a shared inventory item. The request may optionally include limitations to be implemented in metadata. If sharing of the item is permitted at decision block i.e. the user owns the item and it can be shared by its nature or virtual universe rules the VU interface may optionally generate metadata associated with the shared inventory item based on the user s request default settings or other information. The VU interface may then transmit the request and optional metadata to either the virtual universe simulator or virtual inventory manager for processing.

Each inventory source list may represent the contents of a particular inventory source such as VU inventory database distributed inventory database local inventory database etc. Each may also include a variety of folders sub folders or files some or all of which are marked as shared.

The user inventory item lists may represent the contents of the inventory for particular users of a virtual universe simulator . A user may have both shared inventory items and traditional inventory items and the difference between the two may not be visible to the user in some embodiments. In the depicted example Anne s inventory list has a number of items that are owned by her e.g. red shirt blue jeans but other items that are shared from another source e.g. U2song1.mp3 prognosisnegativetrailer video . For these shared items the inventory list may only have a pointer to the actual location of the content according to some embodiments and the disclosed system may provide the necessary code or other data to render those items as needed. One of Anne s items is also marked as shareable the map of New York City and Cliff is sharing that item in his inventory item list .

As can be seen from a single inventory source may thus provide inventory items to a large amount of users and a particular user may have items in the inventory list from a wide variety of inventory sources provided a flexible and scaleable model for managing shared inventory items.

It will be apparent to those skilled in the art having the benefit of this disclosure that the present invention contemplates methods systems and media for managing shared inventory items in a virtual universe. It is understood that the form of die invention shown and described in the detailed description and the drawings are to be taken merely as examples. It is intended that the following claims be interpreted broadly to embrace all the variations of the example embodiments disclosed.

