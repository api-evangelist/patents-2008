---

title: Methods and apparatus for agreement-based automated service provisioning
abstract: Techniques are disclosed for automated provisioning of resources to fulfill a service agreement. For example, a technique for use by a service provider for automatically provisioning one or more resources based on at least one service agreement offer of a service client comprises the following steps/operations. The at least one service agreement offer is obtained. At least one implementation plan template is obtained. A provisioning description is then automatically derived in accordance with the service agreement offer and the implementation plan template, wherein the provisioning description is usable for configuring one or more resources such that a service may be provided to the service client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08775228&OS=08775228&RS=08775228
owner: International Business Machines Corporation
number: 08775228
owner_city: Armonk
owner_country: US
publication_date: 20080604
---
This application is a continuation of pending U.S. application Ser. No. 11 155 218 filed on Jun. 16 2005 the disclosure of which is incorporated herein by reference.

This present invention generally relates to service environments and more particularly to techniques for automated provisioning of resources to fulfill a service agreement.

In the field of information technology IT services services between entities are acquired by means of service agreements. When a prospective service client submits an agreement offer a service provider must assess whether it can comply with the agreement offer and if so provision the necessary IT resources for the service to be delivered. IT resources include for example storage computing and networking elements.

U.S. Pat. No. 6 148 290 to Dan et al. the disclosure of which is incorporated by reference herein teaches the use of service agreements to automate the delivery of services between autonomous entities. A service agreement may define penalties and rewards associated with breaking or achieving service level objectives related to the service. In this case the IT resource configuration of a provider set up for the delivery of an agreement must implement the service in the way that it trades off rewards received and penalties incurred with the costs of IT resource usage.

Formal representations of agreements enable the automatic interpretation of service agreements. WS Agreement see e.g. A. Andrieux et al Web Services Agreement Specification version 1.1 draft 18 May 2004 the disclosure of which is incorporated by reference herein is a draft for a standard representation of service agreements and can be used in combination with service type specific representations e.g. the Web Service Description Language see e.g. E. Christensen et al. Web Services Description Language WSDL 1.1 World Wide Web Consortium Technical Report the disclosure of which is incorporated by reference herein . The Web Services Offer Language is another representation to the same end see e.g. V. Tosic et al WSOL A Language for the Formal Specification of Classes of Service for Web Services Proceedings of 2003 International Conference on Web Services CSREA Press pp. 375 381 June 2003 the disclosure of which is incorporated by reference herein .

Deriving the set of resources or alternative sets of resources necessary for implementing a service agreement and subsequently provisioning this set is essential for automating the process of automatically fulfilling service agreements. A. Dan et al Connecting Client Objectives with Resource Capabilities An Essential Component for Grid Service Management Infrastructures International Conference on Service Oriented Computing ICSOC 2004 pp. 57 64 the disclosure of which is incorporated by reference herein teaches an approach how to translate performance objectives in multiple steps into resource requirements. However the proposed approach per se does not automate the derivation. For each particular domain e.g. computing job scheduling a specific resource derivation model has to be defined and implemented by a programmer. The approach gives guidance how to do this though it does not automate the resource requirement derivation by itself. Furthermore it does not solve the provisioning problem.

Lastly while there are template based provisioning approaches available from such companies as AdventNet Pleasanton Calif. Cisco San Jose Calif. and Veritas Mountain View Calif. these approaches do not take into account service agreements.

The present invention provides techniques for automated provisioning of resources to fulfill a service agreement.

For example in one aspect of the invention a technique for use by a service provider for automatically provisioning one or more resources based on at least one service agreement offer of a service client comprises the following steps operations. The at least one service agreement offer is obtained. At least one implementation plan template is obtained. A provisioning description is then automatically derived in accordance with the service agreement offer and the implementation plan template wherein the provisioning description is usable for configuring one or more resources such that a service may be provided to the service client.

Advantageously techniques are provided for the interpretation and analysis of a service agreement offer submitted by a service client and the provisioning of one or more services in accordance with the service agreement offer.

These and other objects features and advantages of the present invention will become apparent from the following detailed description of illustrative embodiments thereof which is to be read in connection with the accompanying drawings.

The present invention will be explained below in the context of an illustrative information technology IT service environment. However it is to be understood that the present invention is not limited to such a service environment. Rather the invention is more generally applicable to any service environment in which it would be desirable to provide automated provisioning of resources to fulfill a service agreement.

Accordingly as will be explained herein illustrative principles of the invention provide for automated provisioning of IT resources to fulfill a service agreement. It is to be understood that the term automated and the term automatically generally describe steps or operations that are not performed manually e.g. by a human operator but rather are performed via one or more processing systems or devices e.g. by a computer system .

Furthermore illustrative principles of the invention relate to service agreements that contain formalized quality of service guarantees and the automated derivation of IT resource requirements to fulfill the service guarantees. More specifically illustrative principles of the invention relate to the creation of an automatically executable deployment plan for IT computing and other resources based on a formal representation of a deployment plan template associated with a formal representation of an agreement template and finally executing the deployment plan using a provisioning system.

Thus illustrative principles of the invention provide techniques for automatically deriving an executable provisioning description for a service agreement between a service provider and a service client. The provisioning description comprises a formal machine interpretable description of the set of resources to be configured to implement the plan the configuration information and the process steps and their sequence to configure the resources according to the configuration information. The provisioning description is executed by a provisioning engine that acquires resources and configures according to the description.

Illustrative principles of the invention associate each agreement offer submitted thereto with an agreement implementation plan template describing how a provisioning description will be derived from contents of an agreement offer adhering to a know structure. The agreement implementation plan template contains a template of a provisioning description having open fields that are filled in for each created instance of the provisioning description. From the perspective of the fill in process the provisioning description is a text or Extensible Markup Language XML document into which more text is inserted.

The use of agreement templates published to potential service clients greatly enhances service clients ability to create agreement offers that can be processed by agreement implementation plan templates. Hence life cycle management for agreement templates and their associated agreement implementation plan template increases the effectiveness of the inventive techniques.

Using the techniques of the invention services can be provisioned according to agreements without the provisioning description mechanism understanding the semantics of the provisioned system domain and hence can be applied to any environment where provisioning systems accepting a formal input language are available. To date this process of deriving a provisioning description is mainly conducted by hand if service clients are given substantial flexibility in creating agreement offers.

As shown a service provider domain for example a company or a data center of a large organization offers services to one or more service clients in service client domains which can be either external companies or other organizational units within the same company. Services may include web services accessed using the Simple Object Access Protocol SOAP or a Representational State Transfer REST over the Hypertext Transfer Protocol HTTP job execution services for example in a computational grid web hosting services and networking services. Services are provided using resources out of a pool of resources . Resources may include computers network elements and communication connections.

Before a service client can access a service an agreement will be established between the service provider domain and the service client domain . To establish an agreement a service client submits an agreement offer to the service management of a service provider domain. Agreement offers can be represented in various ways for example using the WS Agreement format for agreement offers.

Upon acceptance of the agreement offer the service management will provision resources out of the resource pool such that a service s behavior complies with the terms defined in the accepted agreement offer or within a margin of deviation acceptable to the service provider domain . Service management has to determine the number of resources devoted to the service and the resources configuration. Resources can be exclusively used for one service of one service client for a service shared by multiple service clients or by multiple services sharing the same resource. Also the service client that presented the service offer is informed via an agreement response from the service management that an agreement has been created. When the service is provisioned the service client can access the service.

First in step the service management algorithm receives the agreement offer. To this end an agreement submission interface is exposed for example the agreement factory interface as defined in the WS Agreement specification. Subsequently the feasibility of the agreement is checked in step . Feasibility refers to the syntactic verification the successful derivation of resource configurations and the availability of resources at the desired time of service. If the agreement offer is not considered feasible step the failure of the agreement establishment is returned to the service client through a message in step . If the agreement is feasible step the service management provisions resources in step to implement the service. The service client that presented the service offer is informed via an agreement response from the service management in step that an agreement has been created. The service management then starts the service in step by making it available to the service client.

The service management component in comprises two sub components as outlined in . More particularly decomposes the service management function of a service provider and outlines the use of agreement implementation plan templates according to an embodiment of the present invention.

As shown the first sub component is the Agreement Provisioning Planner which analyzes an agreement offer checks its syntactic feasibility and devises a Provisioning Description . To this end the service management component uses one or more Agreement Implementation Plan IP Templates . . . from its Agreement Implementation Plan Template repository . IP templates contain a description how to create a Provisioning Description from a given agreement offer.

The second sub component is a Provisioning Engine . The Provisioning Engine executes the Provisioning Description by acquiring the required resources and configuring them. The Provisioning Engine reports the Provisioning Process Result i.e. success or failure of the resource configuration back to the Agreement Provisioning Planner . In case of failure the Agreement Provisioning Planner can devise an alternate Provisioning Description. The Agreement Provisioning Planner also communicates the created agreement message in back to the service client.

An example of an Agreement Implementation Plan IP Template in is illustrated in . The IP Template and the process that uses it is agnostic to the semantics of Agreement Offers and Provisioning Descriptions . The template describes the derivation of a Provisioning Description from a template provisioning description referred to as a Partial Provisioning Description containing fields to be filled in based on Agreement Offer parts identified in the Agreement Parameter Identifiers section according to the Instance Completion Description .

Thus it is to be understood that the IP Template contains a template of a provisioning description Partial Provisioning Description having open fields that are filled in for each created instance of the provisioning description. The resulting end product filled in results is one or more Provisioning Specification Instances. The one or more Provisioning Specification Instances serve as the Provisioning Description that is provided to Provisioning Engine .

Also shown as part of an IP Template are the Provisioning Engine Invocation Details . It is to be appreciated that principles of the invention take into account environments with multiple provisioning engines. This is done by defining the Address or Endpoint to which the Provisioning Specification Instance Provisioning Description is sent. In one illustrative embodiment the system may use an Endpoint Reference according to the WS Addressing specification. An example in the simplest case is 

Furthermore the IP Template can be represented in a convenient format for example in an XML structure 

The purpose of the Agreement Parameter Identifiers section is to relate the IP Template to agreements to which it can be applied illustrated in . When designing IP Templates one has to relate them to a class of potential agreements that follow a similar structure potentially being created according to an agreement template as for example the WS Agreement draft specification suggests. Each Parameter Identifier . . . in this section is comprised of a unique Name . . . and a Location Pointer . . . . The Location Pointer points to exactly one location in an agreement referred to as Agreement Part . . . . Agreement parts can be any clearly identified substructure of an agreement. In an XML representation such as the WS Agreement draft substructures can be elements or attributes of elements.

If an agreement is represented in an XML data structure the XPath format see e.g. Clark James DeRose Steve 1999 XML Path Language XPath Version 1.0 W3C Recommendation November 1999 the disclosure of which is incorporated by reference herein can be employed to represent this Location Pointer information. However while XPath expressions can point to a set of locations at a time the use of XPath in this context requires that the author of an XPath expression makes sure it resolves to one and only one single location in an agreement document.

The name of the parameter is AverageResponseTime and it s location in an agreement to which the IP Template is applied is defined as the XPath expression in the LocationPointer element. In the example the parameter refers to the content of the element Value of a guarantee term specified in the WS Agreement format whose name is responseTimeGuarantee.

For agreement representations other than XML those skilled in the art can use or readily devise a corresponding pointer format.

The Instance Completion Description section of the agreement defines what parts will be filled in and substituted in the Partial Provisioning Description and how the value to be filled in is determined.

The Location Pointer of the Instance Completion Description is designed along the same principles as the Location Pointer of the Parameter Identifiers . . . . In the case of the Provisioning Description being an XML structure XPath can be used to point to a specific XML element or attribute.

The Field Value Algorithm Description . . . contains a representation of an algorithm in a format that can be interpreted by the Agreement Provisioning Planner. In this algorithm Agreement Parts . . . can be referred to as constants or variables as suitable for the chosen format. The PMAC Expression Language see e.g. IBM Corporation PMAC Expression Language Users Guide Alphaworks PMAC distribution 2005 www.alphaworks.ibm.com is one suitable representation as the following example illustrates 

The Location Pointer refers to an XML element NumberOfServers in the Provisioning Description. It will get assigned the value of the Field Value Algorithm Description represented in the PMAC expression language 2 1 AverageResponseTime. In this example the number of servers to be provisioned increases the shorter the average response time is chosen. AverageResponseTime refers to an Agreement Part . . . identified by a Parameter identifier . . . as shown in the example above.

The Provisioning Description has a format that is interpreted by the Provisioning Engine . Skipping now to the main elements of the Provisioning Description are outlined.

A Provisioning Description comprises a Definition of Resource Types and one or more Definitions of Resource Assembly . . . which are alternatives and among which can be chosen depending on resource availability and cost considerations.

The Definition of Resource Types contains the information to uniquely identify the type of resources to a resource pool e.g. the cluster management system of a data center in to query the resources availability. It can be represented in an XML structure as the following example illustrates 

The Definition of Resource Assembly . . . comprises a Resource Quantity Definition . . . indicating how many resources of which type are needed for this assembly. The Assembly Provisioning Definition . . . contains a workflow description or a script that defines how the resources will be provisioned and in which order. This definition is typically written in a script language such as a Unix shell script or Perl or in a workflow language such as the Business Process Execution Language For Web Services BPEL4WS .

When an Agreement Offer is received in the receive agreement step the algorithm starts. The Agreement Provisioning Planner retrieves the set of IP Templates from their repository in step . The Agreement Provisioning Planner chooses the first template. For the first IP template the Planner verifies in step the Location Pointer of each Parameter Identifier if it points to one and only one location in the received agreement offer.

If all Location Pointers have one match step the algorithm proceeds to step . Otherwise it is checked if there are more IP Templates left in step . If not failure is returned in step . Otherwise the algorithm goes back to step and tries the next IP Template. If all Location Pointers have a match all Agreement Part values are stored indexed by their name given in the Parameter Identifiers of the IP Template in step .

Next an instance of the Provisioning Description is written in memory in step . Then for all Field Descriptions the algorithm executes the Field Value Algorithm Description and inserts the value returned by the algorithm in the Provisioning Description instance at the location indicated by the Location Pointer of the Field Description in step . With the completion of this step the algorithm yields a complete and executable instance of the Provisioning Description advantageously without a need to understand the semantics of the Provisioning Description . This Provisioning Description instance is sent to the Provisioning Engine specified in the Provisioning Engine Invocation Details given in the IP Template . That is to determine the particular provisioning engine the process retrieves the provisioning engine s endpoint from the IP template.

The next steps are executed by the Provisioning Engine executing the Provisioning Description . The algorithm proceeds as follows. First it selects the first Definition of Resource Assembly and checks whether the resources can be acquired from the resource pool in the quantity indicated by the Resource Quantity Definition of the respective Definition of the Resource Assembly in step . If not step the algorithm checks step if more alternative Definitions of Resource Assemblies are in the Provisioning Description. If so it continues with step otherwise it signals failure block to the Agreement Provisioning Planner .

If all resources of an assembly are available step the algorithm acquires those resources in the defined quantities in step . Then the Assembly Provisioning Description is executed to configure the assembly in step . If this step completes the provisioning is complete and the service can be used block .

A service provider using the mechanism of the present invention should carefully manage which Agreement Implementation Plan Templates it uses for which types of agreement. As a service provider s resource pool changes over time for example by acquiring more modern and powerful host computers the Agreement Implementation Plan Templates should change. Furthermore the type of services for which a service provider accepts agreement offers changes over time and must be managed corresponding. In addition to facilitate the creation of acceptable agreement offers by service clients service providers should provide agreement templates to clients.

Hence as outlined in service providers use a Life Cycle Manager and Template Editor to create Agreement Templates . . . and one or more associated IP Templates . . . . The use of Agreement Templates enables service providers to write IP Templates more efficiently as they know the structure of agreement offers to expect and hence can effectively write Agreement Parameter Identifiers.

That is the life cycle manager editor can be used as an automated agreement provisioning system that is able to create a service offer create an associated agreement template create an associated IP template and remove and change the artifacts of such offers and templates.

Thus the computing system shown in represents an illustrative computing system architecture for implementing among other things one or more functional components steps of an agreement based automated service provisioning system e.g. implementation plan templates agreement templates provisioning planner provisioning engine life cycle manager editor etc. as may be maintained by a service provider. Further the computing system architecture may also represent an implementation of one or more of the actual resources provided by the service provider. Still further the computing system architecture may also represent an implementation of one or more service clients.

As shown the computing system architecture may comprise a processor a memory I O devices and a network interface coupled via a computer bus or alternate connection arrangement.

It is to be appreciated that the term processor as used herein is intended to include any processing device such as for example one that includes a central processing unit CPU and or other processing circuitry. It is also to be understood that the term processor may refer to more than one processing device and that various elements associated with a processing device may be shared by other processing devices.

The term memory as used herein is intended to include memory associated with a processor or CPU such as for example RAM ROM a fixed memory device e.g. hard drive a removable memory device e.g. diskette flash memory etc.

In addition the phrase input output devices or I O devices as used herein is intended to include for example one or more input devices e.g. keyboard mouse etc. for entering data to the processing unit and or one or more output devices e.g. display etc. for presenting results associated with the processing unit.

Still further the phrase network interface as used herein is intended to include for example one or more transceivers to permit the computer system to communicate with another computer system via an appropriate communications protocol.

Accordingly software components including instructions or code for performing the methodologies described herein may be stored in one or more of the associated memory devices e.g. ROM fixed or removable memory and when ready to be utilized loaded in part or in whole e.g. into RAM and executed by a CPU.

In any case it is to be appreciated that the techniques of the invention described herein and shown in the appended figures may be implemented in various forms of hardware software or combinations thereof e.g. one or more operatively programmed general purpose digital computers with associated memory implementation specific integrated circuit s functional circuitry etc. Given the techniques of the invention provided herein one of ordinary skill in the art will be able to contemplate other implementations of the techniques of the invention.

Accordingly as illustratively explained herein principles of the invention provide a formal resource provisioning specification comprising a method to extract information from an agreement a method to derive new parameters a method to create resource assembly alternatives and a method to compare alternatives.

A mechanism for executing the specification is also provided. By way of example the mechanism may be operative to automatically extract agreement offer elements for offers based on agreement templates automatically derive implementation plan allocation parameters from agreement offer elements based on potentially external functions automatically parameterize the implementation plan template with derived values and automatically choose allocation alternatives based on the business value of allocation alternatives in a business plan.

Using this mechanism detailed resource requirements like number and configuration of servers are derived from services guarantees such as response time goals alternatives are chosen required resources are acquired the overall decision whether or nor to accept the service request is made based on the business value of alternative allocations and the activation of service provisioning can be triggered based on the resulting allocation.

Advantageously as described in detail herein principles of the invention provide implementation plan templates and an engine for automatically processing such templates. Such a template comprises information on four major aspects identification of agreement parameters a method to determine the respective amounts of different types of resources based on agreement parameters configuration and assembly of resource types and definition of resource types.

Although illustrative embodiments of the present invention have been described herein with reference to the accompanying drawings it is to be understood that the invention is not limited to those precise embodiments and that various other changes and modifications may be made by one skilled in the art without departing from the scope or spirit of the invention.

