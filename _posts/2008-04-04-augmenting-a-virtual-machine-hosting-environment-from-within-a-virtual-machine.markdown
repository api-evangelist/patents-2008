---

title: Augmenting a virtual machine hosting environment from within a virtual machine
abstract: Systems and methods augment a virtual machine (computer) hosting environment from within a virtual machine. A communication channel between the virtual machine and the player is used to send instructions to the player to load and execute requested software modules. Requests to load and execute the modules may originate in the corporate network and may be issued by the corporate network administrator. If a requested module is not stored on the host computer, the virtual machine may upload the module, via the communication channel, to the player. The uploaded module may, for example: (a) install a required upgrade in the host operating system; (b) execute virus checking software on the host computer; or (c) install a corporate network-provided secure printing module that enables software being executed by the host computer to print on devices connected to the host computer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08326449&OS=08326449&RS=08326449
owner: Microsoft Corporation
number: 08326449
owner_city: Redmond
owner_country: US
publication_date: 20080404
---
This application claims the benefit of U.S. Provisional Patent Application No. 60 910 288 filed Apr. 5 2007 titled Augmenting a Virtual Machine Hosting Environment from within a Virtual Machine the entire contents of which are hereby incorporated by reference herein for all purposes.

The present invention relates to virtual machines used to run multiple instances of one or more operating systems on a host computer and more particularly to methods and systems for providing services to extend upgrade or otherwise change functional behavior user interfaces or other aspects of the virtual machine and its hosting software from within the virtual machines.

A number of companies provide software solutions to enable virtualization of multiple operating systems on a single host computer. These software solutions tend to be focused on technical users who have a need to for example consolidate a set of enterprise servers onto a single server for better resource utilization. Other software solutions focus on virtualization of operating systems on desktop computers typically for purposes such as testing software development or software compatibility. For example the Parallels Desktop for Mac product from Parallels Inc. Renton Wash. 98057 allows users to run Windows XP applications on Apple Mac computers.

A growing field in the virtualization business space is the use of virtualization to provide better desktop management and security for corporate workstations. In addition this enterprise oriented desktop virtualization is being used to provide the ability for workers to access fully secured and managed corporate resources on unmanaged computers such as employees home computers by running virtualized corporate workstations on those unmanaged computers.

The use of virtualization to provide corporate access in unmanaged locations is a way of providing remote access to users building upon the existing virtualization technology. However there are significant complexities that arise as the technology is integrated into the corporate environment.

It is desirable for administrative users of a corporate desktop virtualization solution or any other centrally managed virtualization solution to have the same level of control and same capacity to upgrade and manage the virtual workstations as they have to control upgrade and manage centrally located enterprise computers. Existing technologies can provide many of the capabilities needed by the administrator. For example the Systems Management Server product from Microsoft Corporation Redmond Wash. can be used to update install and remove software on a managed virtual corporate workstation.

However a significant difference exists between the abilities a corporate IT administrator has available when administering a physical corporate workstation and a virtualized corporate workstation. The administrator has physical access to the physical corporate workstation. Upgrades to the computer such as adding new peripheral devices adding memory or adding disk space can be done by physically accessing the workstation. In the case of a virtual workstation which is being used on an unmanaged computer and which may not be physically located within the enterprise this is not possible.

A prior art virtual machine hosting environment typically includes a player that is executed by a host computer under control of a host operating system. The player creates a virtual machine that is separate from and does not execute under the host operating system. The virtual machine emulates a computer which can execute an operating system and application programs. Software executed by the virtual machine may establish a virtual private network VPN connection with a corporate network and then access resources on the corporate network via the VPN. A corporate network administrator manages the virtual machine such as by installing required software on the virtual machine. However in the prior art the corporate network administrator does not manage and cannot control or update the host computer or software thereon.

An embodiment of the present invention provides a technology extension in a virtual environment that allows software which may be managed by a corporate IT administrators to have secured access to update extend or otherwise change the behavior of software that is running on an unmanaged host computer which is associated with or is providing a virtualized environment within which the managed virtual corporate workstation is running.

Embodiments of the present invention provide systems and methods for augmenting a virtual machine computer hosting environment from within a virtual machine. Some embodiments use a communication channel between the virtual machine and the player to send instructions to the player to load and execute requested software modules. Requests or messages to load and execute the modules may originate in a corporate network such as by a second computer of that network and may be issued by a corporate network administrator. If a requested module is not stored on the host computer the virtual machine may upload the module via the communication channel to the player. The uploaded module may for example a install a required upgrade in the host operating system b execute virus checking software on the host computer or c install a corporate network provided secure printing module that enables software being executed by the host computer to print on devices connected to the host computer.

An embodiment of the current invention includes a software solution providing the ability for software running within a virtual environment to update extend or otherwise change the operating parameters or environment the virtual computer is running within. This embodiment includes providing a secured communication mechanism for software running in the virtual computer to access a limited set of services running on the physical computer. The embodiment additionally provides mechanisms to publish software components Extension Modules to the host computer through this communication mechanism. The embodiment additionally provides a secured environment that the Extension Module will be executed within on the host computer. The embodiment additionally provides mechanisms including but not limited to Application Programming Interfaces for the Extension Modules to access additional resources such as configuration options other software or physical devices on the host computer.

Extension Modules can perform services including but not limited to changing configuration information extending the behavior of the hosting application in response to predetermined events updating portions of or the entire hosting environment providing extended scanning of the host computer for security threats and adding new functionality to the hosting environment. An embodiment of an extension module provides new services such as providing for software within the virtual computer to securely print to printers attached to the host computer.

An embodiment of the present invention provides a method for loading software on a host computer that hosts a virtual machine. A request is sent from within the virtual machine to a hosting application being executed by the host computer. The request is a request to load requested software. In response the hosting application loads the requested software onto the host computer.

If the requested software is not installed on the host computer the requested software may be uploaded from the virtual machine to the host computer and then the uploaded software may be installed on the host computer. Optionally or alternatively the requested software may be downloaded from a server to the host computer and then installed on the host computer.

Sending the request to the hosting application may include uploading a software module from a server to the virtual machine via a virtual private network connection established between the server and the virtual machine and then executing the uploaded software module by the virtual machine.

Loading the requested software onto the host computer may include executing at least part of the loaded software by the host computer storing at least part of the loaded software on a storage device attached to the host computer and or storing at least part of the loaded software on a storage device attached to the host computer. Loading the requested software onto the host computer may include modifying existing software on the host computer augmenting existing software on the host computer and or replacing at least in part existing software on the host computer.

Loading the requested software onto the host computer may include any or all of the following installing an upgrade in the host operating system executing virus checking software on the host computer and or installing a secure printing module.

Another embodiment of the present invention provides a computer program product for use on a computer system for loading software on a host computer that hosts a virtual machine. The computer program product includes a computer readable medium on which are stored computer instructions for execution by a processor. When executed the instructions cause the processor to send a request from within the virtual machine to a hosting application being executed by the host computer. The request may be a request to load requested software. The instructions also cause the processor to load onto the host computer the requested software by the hosting application.

If the requested software is not installed on the host computer the instructions cause the processor to upload the requested software from the virtual machine to the host computer and then install the uploaded software on the host computer. Optionally or alternatively if the requested software is not installed on the host computer the instructions cause the processor to download the requested software from a server to the host computer and then install the downloaded software on the host computer.

The instructions that cause the processor to send the request to the hosting application may include instructions to upload a software module from an enterprise to the virtual machine via a virtual private network connection established between the enterprise and the virtual machine and to execute the uploaded software module by the virtual machine. The instructions that cause the processor to load the requested software onto the host computer may include instructions to execute at least part of the loaded software by the host computer store at least part of the loaded software on a storage device attached to the host computer and or store at least part of the loaded software in a memory used to store instructions that are executed by the host computer.

The instructions that cause the processor to load the requested software onto the host computer may include instructions to modify existing software on the host computer to augment existing software on the host computer and or to replace at least in part existing software on the host computer.

The contents of U.S. Provisional Patent Application No. 60 910 288 filed Apr. 5 2007 titled Augmenting a Virtual Machine Hosting Environment from within a Virtual Machine U.S. Provisional Patent Application No. 60 839 157 filed Aug. 22 2006 titled Remote Network Access Via Virtual Machine U.S. Provisional Patent Application No. 60 816 288 filed Jun. 23 2006 titled Remote Network Access Via Virtual Machine U.S. patent application Ser. No. 11 689 177 filed Mar. 21 2007 titled Remote Network Access via Virtual Machine and U.S. patent application Ser. No. 11 689 190 filed Mar. 21 2007 titled Accessing a Printer Resource Provided by a Real Computer from within a Virtual Machine are all hereby incorporated by reference herein for all purposes.

As used in this description and the accompanying claims the following terms shall have the meanings indicated unless the context otherwise requires 

A Virtual Machine sometimes herein called a VM is a self contained software environment on a host computer that simulates a computer separate from the host computer providing at least a degree of system independence from the hardware and software environment of the host computer including from the operating system of the host computer.

A Virtual Machine Image sometimes herein called a VM Image or an Image is a specific instance of a Virtual Machine.

A Hosting Application sometimes herein called a Hosting Environment is an application that manages a Virtual Machine. 

A VIC is an application or process that allows for the authoring of Virtual Machines and is a certain type of Hosting Environment. 

A Player is an application or process that runs a Virtual Machine and is a type of Hosting Environment. 

An Extension Module sometimes herein called a Module is a software component that is managed by a Guest Process and whose purpose is to be installed into a secured portion of a Hosting Environment to extend limit upgrade configure or take any other action upon the Hosting Environment or Host Computer.

A UI Module is a specific embodiment of an Extension Module whose purpose is to extend limit or otherwise change a visual element that an end user interacts with while using a Player or VIC. Examples include a menu item configuration dialog or any other user interface UI element used by an end user.

A Communication Module is a specific embodiment of an Extension Module whose purpose is to extend a set of functionality available to a Guest Process for communication with a Hosting Environment.

An Upgrade Module is a specific embodiment of an Extension Module whose purpose is to enable a partial or wholesale updating of a hosting environment or other software on a Host Computer.

A Configuration Setting is a controlling parameter used to affect how a Player or VIC functions. A non limiting example of a configuration setting is a parameter that controls how software running within a Virtual Machine connects to a remote network via a Virtual Private Network.

A virtual machine simulates actual computer hardware. is schematic block diagram of a virtual machine operating within a real computer an environment in which embodiments of the present invention may be used. A host computer such as a personal computer includes real hardware such as a basic input output system BIOS one or more central processing units CPUs memory one or more disk drives and optionally other peripheral devices. The host computer executes a host operating system such as the Windows XP operating system available from Microsoft Corporation Redmond Wash. Alternatively other operating systems such as Linux can be used. The host operating system controls the real hardware and provides an environment in which one or more application programs such as application can execute. The host operating system provides an interface between the application and the real hardware . If the host computer is appropriately equipped such as with a network interface card NIC the host operating system can establish a network connection to another computer.

A virtualization program sometimes referred to as a virtual machine manager virtual machine monitor or VMM is a program that executes on the host real computer typically independently of the host operating system . The virtualization program creates an environment a virtual machine defined above in which other software can be executed. The virtualization program simulates operation of a computer. For example the virtualization program provides virtual hardware including a BIOS CPU s memory disk drive s and optionally other peripherals to software that executes on the virtual machine .

The configuration of the virtual machine such as the CPU model amount of memory initial contents of the memory number of disk drives and their contents are stored in a virtual machine image file . Upon beginning execution the virtualization program reads the virtual machine image file and creates the virtual machine according to information in the virtual machine image file . Exemplary virtualization programs are available from VMware Inc. Palo Alto Calif. Parallels Inc. Herndon Va. and Microsoft Corporation Redmond Wash.

The virtualization program may provide a virtual machine user interface also referred to as a player which executes as an application in the environment created by the host operating system . The virtual machine user interface typically communicates with the virtualization program such as to specify which virtual machine image file the virtualization program is to use to create the virtual machine . Once the virtual machine is created the virtual machine user interface displays a window which displays outputs from the virtual machine and accepts user inputs for the virtual machine .

The virtual machine typically executes software just as a real computer executes software. For example the virtual machine typically executes an operating system . The operating system executed by the virtual machine need not be the same operating system or version as the host operating system executed by the host computer . The operating system executed by the virtual machine creates an environment in which one or more application programs such as application can execute.

The virtualization program simulates interactions between the software such as the operating system and the applications that executes on the virtual machine and the virtualized hardware such as disk drives and network interface cards NICs . Thus the software executed by the virtual machine has a degree of isolation from software executed by the host computer .

In some circumstances particular software or a particular version of software is required to be executed by a host computer such as to support software being executed by a virtual machine. For example as described in U.S. patent application Ser. No. 11 689 190 software being executed by a virtual machine may need to print a document on a printer that is accessible by a host computer such as on a locally attached printer or on a network attached printer. Support software on the host computer receives and processes print requests sent from the virtual machine. However according to the prior art the host computer may not be managed by an enterprise IT organization thus the IT organization may not have a mechanism for installing and maintaining the required software on the host computer.

As described in the above referenced U.S. patent application and with continued reference to before creating the virtual machine a player opens a listening port. Software being executed by the virtual machine opens a connection to the player s listening port and the software on the virtual machine and the player can thereafter communicate with each other via the connection .

Software being executed by the virtual machine may request the player to load required software or a particular version of software on the host computer or to verify that the required software or version of the software is already loaded on the host computer. The software on the virtual machine sends such a request via the connection to the player and in response the player performs the requested action. The player then sends a reply to the software on the virtual machine to indicate a status of the request. The status may indicate whether the request was successful or not such as whether the requested software was loaded on the host computer or the software is not installed on the host computer and therefore not available for loading.

The software being executed by the virtual machine may upload software to the player via the connection . For example if a request to load a particular software module on the host computer fails such as because the requested module is not installed on the host computer the software on the virtual computer may then upload the requested software to the player and request the player to install and load the software on the host computer.

The uploaded software may be new software i.e. software that has not previously been installed on the host computer or an upgrade to existing software i.e. a new version of software that was previously installed on the host computer. The uploaded software may be one or more complete software modules patches to existing modules configuration or other data files or any other file or data that may be transmitted via the connection . The uploaded software may include instructions to the player regarding how the remainder of the uploaded software is to be processed. For example these instructions may identify existing software or versions of software that are to be augmented or modified using one or more uploaded components.

The player may execute the uploaded software store the uploaded software or use the uploaded software to augment or otherwise modify the player or other software on the host computer. The player may perform one or more of these tasks immediately at a later time or a combination thereof. Modifying the player or other software including all or part of the operating system being executed by the host computer collectively the software being modified includes adding all or a portion of the uploaded software to the software being modified augmenting the software being modified or replacing all or a portion of the software being modified. The uploaded software may include an executable module and the player may spawn a process in which the uploaded module executes. The executing module may then modify the player or other software independently or semi independently of the player.

A virtual machine is created operated and shut down in steps. Exemplary steps include starting execution of the player starting execution of a virtual machine image ending execution of a virtual machine image and ending execution of the player. Other more finely resolved steps may be used. An event module in the virtualization program keeps track of these steps. Uploaded software may be processed at one or more of these steps. For example software on the virtual machine may upload a spyware detection program to a player and request that the spyware detection program be executed by the host computer before a particular or any virtual machine image is used to start a virtual machine.

As noted software being executed by a virtual machine may request a player to load requested software on a host computer. This is referred to as demand loading because the request is made while the virtual machine software is being executed. The requested software is loaded when the request is made. If the virtual machine software does not make such a request the player does not load the software.

On the other hand software or a version of software may be required on a host computer before a virtual machine is started or it may be desirable to pre load the software before the virtual machine is started for performance or other reasons. When a virtual machine image file is created the image file may be marked as requiring the software or version of the software. This is referred to as registering the required software with the image file. Whenever a hosting application processes an image file if the image file lists registered software or versions of software the hosting application loads the registered software before starting the virtual machine.

If the registered software is not installed on the host computer the hosting application may download the registered software such as from a server to which the host computer is connected via a network . The network may be a private network such as a local area network or a private wide area network. The network may be a public network such as the Internet. In one embodiment the hosting application downloads the registered software from a server on the Internet. Once the registered software is downloaded from the server the hosting application may load the registered software as described above.

As described in the above referenced patent applications a virtual private network VPN connection may be established between a virtual machine and an enterprise network. The enterprise s IT organization may manage the virtual machine via the VPN connection including installing and upgrading software on the virtual machine. According to the present invention the IT organization may upload software to the virtual machine from the enterprise and the uploaded software may in turn augment modify or replace software on the host computer as described above. Thus the IT organization may effectively control at least part of the environment provided by the host computer without directly managing the host computer.

The following sections describe demand loading and registering software in various contexts. is a schematic block diagram of components involved in controlling at least part of an environment of a host computer from within a virtual machine when used in a player hosting application according to an embodiment of the present invention. Guest applications exemplified by guest applications A and B and may be executed by the virtual computer .

The player may include a component manager which facilitates loading modifying replacing etc. components on the host computer in response to instructions and or data from a component being executed by the virtual machine as described in more detail below. A component is a software module that may be loaded and executed on demand or as needed. Examples of components include device drivers application extensions DLLs and the like. Components exemplified by Components A B and C and may be stored in local storage on the host computer .

The player manages an isolated component process space in which components exemplified by Running Components A and B and may be executed by the host computer . The player may load a component such as from the local storage into the isolated component process space and pass control to the loaded component. The player or a component being executing within the isolated component space may access configuration data stored on the host computer . As shown a component being executed within the isolated process space such as Running Component B may communicate with and or control physical devices exemplified by physical device connected to the host computer . The player and the virtual machine or software being executed by the virtual machine may communicate via a communication interface as described above.

Upon receiving the response from the hosting application at the guest uploads the UI Module to the hosting environment. Once the upload process is completed via the vThere secure Guest Host application conduit at the hosting application saves the UI component. Once the UI component has been saved at the hosting environment marks the US component as being required upon startup of the hosting application for the current VM Image and to be subsequently restarted on each load or invocation of the VM Image within the hosting application.

Once the hosting application has loaded the UI Module at the newly uploaded UI Module is interrogated by the hosting application to determine the proper way to display the new UI component. Exemplary UI components include a VPN configuration dialog in the vThere VIC and the vThere Printing progress dialog.

Upon searching for the certain version of the UI Module if the hosting environment fails to find the requested version at the hosting environment responds to the guest application indicating that the specified extension module could not be found. At the guest application then uploads the updated UI Module to the hosting application as described above with respect to adding a new UI component.

Once the hosting environment has received the updated UI Module and saved the UI Module at the existing presumably incorrect version UI Module is unloaded. At the hosting application loads and records that the component needs to be loaded on subsequent loads or invocations of the VM Image within the hosting application.

Once the hosting application has loaded the required version of the UI component at the newly uploaded component is interrogated by the hosting application to determine the proper way to display the new UI component. Exemplary UI components include the VPN configuration dialog version 1.2 in the vThere VIC and the vThere Printing version 1.3 progress dialogs.

Once the hosting application receives the request the hosting application searches in the existing set of Extension Modules which have been previously installed. Because the request from the Guest process is for a new Extension Module at the host application responds indicating that the requested Extension Module could not be found.

When the guest process receives the response from the hosting application at the guest process begins a secure upload of the component to the hosting application. Upon successfully receiving the uploaded component at the hosting application saves the new Extension Module.

At the guest process then requests that the newly uploaded Extension Module be loaded into a secured portion of the hosting applications process space. At the hosting application loads the Extension Module and registers the Extension Module into the host s running process. Thereafter at the guest process can use the new functionality of the Extension Module.

Once the hosting application receives the request the hosting application searches in the existing set of Extension Modules. Because the request from the Guest process is for a new functional component at the host application responds by indicating that the Extension Module requested could not be found.

When the guest process receives the response from the hosting application at the guest process begins a secure upload of the component to the hosting application. Upon successfully receiving the uploaded component at the hosting application saves the new Extension Module.

At the hosting application records that the new Extension Module must be loaded on subsequent starts. At the component is loaded and used by a guest process.

Once the hosting application receives the request the hosting application searches in the existing set of Extension Modules for the requested version of the Extension Module. Since this request from the Guest process is for an Extension Module with a version that doesn t exist on the Host Application at the host application responds by indicating that the functional Extension Module requested could not be found.

When the guest process receives the response from the hosting application at the guest process begins a secure upload of the component to the hosting application. Upon successfully receiving the uploaded component at the hosting application saves the new Extension Module.

If applicable at the hosting application then records that the new Extension Module should be started on subsequent restarts of the VM Image. If the edited component is to be demand loaded at the guest process requests that the Extension Module be loaded. At the Extension Module is ready to process requests from the guest process.

Once the hosting application receives the request the hosting application searches the existing set of Extension Modules for the Upgrade Module. Because the request from the Guest process is for a new Upgrade Module at the host application responds by indicating that the requested Upgrade Module could not be found.

When the guest process receives the response from the hosting application at the guest process begins a secure upload of the component to the hosting application. Upon successfully receiving the uploaded component at the hosting application saves the new Upgrade Module.

At the guest process requests that the newly uploaded Upgrade Module be loaded into a secured portion of the hosting applications process space. At the hosting application loads the Upgrade Module and registers it into the host s running process. Thereafter at the guest process can request the Upgrade Module if an upgrade is needed.

Upon notification at that an upgrade is needed at the guest process begins a secure upload to the Upgrade Module. Upon successfully receiving the upload at the Upgrade Module installs the upgrade.

If applicable at the Upgrade Module may signal a need for an immediate restart of the VM Image the Host Application or both.

Upon receiving this setting change request from the guest process at the hosting application uses facilities provided by the hosting application to securely change the requested configuration setting.

At the guest process securely uploads a component containing the configuration settings to the hosting application. Upon successfully receiving the configuration settings at the hosting application saves the newly uploaded configuration settings. At the guest process requests the hosting application to load the configuration settings.

At the hosting application loads the component containing the configuration settings and registers the component into the running host application process as appropriate. At the guest process may utilize the new component and may create a new configuration setting for the hosting application. If appropriate at the hosting application or the guest process shuts down the guest environment . Upon restarting if applicable at the guest process may utilize the new configuration setting. Alternatively the guest environment is suspended and then restarted rather than being shut down and rebooted.

Software described herein may be stored in a memory and executed by a real or virtual processor. The memory may be random access memory RAM read only memory ROM flash memory virtual memory or any other memory or combination thereof suitable for storing control software or other instructions and data. Some of the functions performed by the software have been described with reference to flowcharts. Those skilled in the art should readily appreciate that functions operations decisions etc. of all or a portion of each block or a combination of blocks of the flowcharts may be implemented as computer program instructions software hardware firmware or combinations thereof. Those skilled in the art should also readily appreciate that instructions or programs defining the functions of the present invention may be delivered to a processor in many forms including but not limited to information permanently stored on non writable storage media e.g. read only memory devices within a computer such as ROM or devices readable by a computer I O attachment such as CD ROM or DVD disks information alterably stored on writable storage media e.g. floppy disks removable flash memory and hard drives or information conveyed to a computer through communication media including computer networks. In addition while the invention may be embodied in software the functions necessary to implement the invention may alternatively be embodied in part or in whole using firmware and or hardware components such as combinatorial logic Application Specific Integrated Circuits ASICs Field Programmable Gate Arrays FPGAs or other hardware or some combination of hardware software and or firmware components.

While the invention is described through the above described exemplary embodiments it will be understood by those of ordinary skill in the art that modifications to and variations of the illustrated embodiments may be made without departing from the inventive concepts disclosed herein. Moreover while the preferred embodiments are described in connection with various illustrative data structures one skilled in the art will recognize that the system may be embodied using a variety of data structures. Furthermore disclosed aspects or portions of these aspects may be combined in ways not listed above. Accordingly the invention should not be viewed as limited.

