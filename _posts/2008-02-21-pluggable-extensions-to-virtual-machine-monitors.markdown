---

title: Pluggable extensions to virtual machine monitors
abstract: The functionality of a virtualization layer interposed between computer system hardware and a plurality of applications can be altered by pluggable extensions. According to one embodiment of the present invention, a virtualization layer is divided into a privileged portion and an unprivileged portion. While the privileged portion remains untouched, the functionality of the unprivileged portion can be modified by one or more pluggable extensions. Furthermore, file images operating on top of the virtualization layer, and in some cases unaware of the virtual nature of the virtualization layer, can be supplemented using pluggable extensions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08161477&OS=08161477&RS=08161477
owner: Oracle International Corporation
number: 08161477
owner_city: Redwood City
owner_country: US
publication_date: 20080221
---
This application is related to the subject matter disclosed in U.S. patent application Ser. No. 12 035 132 filed on Feb. 21 2008 for Dynamic Composition of an Execution Environment from Multiple Immutable File System Images now U.S. Pat. No. 7 805 409 and U.S. patent application Ser. No. 12 035 154 filed on Feb. 21 2008 for Dynamic Transactional Instantiation of System Configuration Using a Virtual File System both of which are co assigned to Sun Microsystems Inc. assignee of the present invention and the disclosures of which are herein specifically incorporated by this reference.

Embodiments of the present invention relate in general to systems and methods for computing virtualization and particularly to pluggable extensions to virtual machine monitors.

Virtualization broadly describes the separation of a resource or request for service from the underlying physical delivery of that service. Virtual memory for example allows computer software to gain access to more memory than is physically installed in a computer via background swapping of data to disk storage. Virtualization techniques are applicable to multiple information technology infrastructure layers as they provide a layer of abstraction between computing storage and hardware and the applications running on the storage and hardware.

Virtualization enables multiple operating systems to run on a single physical system and share the underlying hardware resources. This is commonly known as partitioning and is one of many facets of virtualization. There are generally two approaches to partitioning those being a hosted approach and a hypervisor architecture. The hosted approach provides partitioning services on top of a standard operating system and supports a broad range of hardware configurations. A hypervisor architecture uses a virtualization layer. This layer is the first layer installed and has direct access to the hardware resources. Thus this approach is more efficient and enables greater scalability and performance.

One enhancement to virtualization is paravirtualization. In computing paravirtualization is a virtualization technique that presents a software interface to virtual machines that is similar but not identical to that of the underlying hardware. Paravirtualization is a tradeoff between operating system compatibility and performance. For certain central processor unit CPU bound applications running on systems without virtualization hardware paravirtualization assists and allows the virtual machine monitor to be simpler in that virtual machines that run on paravirtualization can achieve performance closer to non virtualized hardware. Thus a paravirtualization model offers potential performance benefits when a guest operating system or application is aware that it is running with a virtualized environment and has been modified to exploit this environment. Operating systems must be explicitly ported to run on top of a paravirtualized virtual machine monitor. However once modified the guest operating system can never be migrated back to run on the physical hardware and thus owners of proprietary operating systems may decline to allow paravirtualization for strategic purposes. In addition to requiring that the operating system be modified to run on the virtualized environment paravirtualization leverages a hypervisor for the underlying technology and may require changes to the operating system kernel.

The functionality of a virtualization layer interposed between computer system hardware and a plurality of applications can be altered by pluggable extensions. According to one embodiment of the present invention a virtualization layer is divided into a privileged portion and an unprivileged portion. While the privileged portion remains untouched the functionality of the unprivileged portion can be modified by one or more pluggable extensions. Furthermore applications and or operating systems operating on top of the virtualization layer and in some cases unaware of the virtual nature of the virtualization layer can be supplemented using pluggable extensions.

According to one embodiment of the present invention the functionality of a virtualization layer is altered via pluggable extensions. The unprivileged portion of the virtualization layer is configured to accept pluggable extensions that can modify or supplement the functionality of the virtualization layer. In other embodiments of the present invention the file images running on top of the virtualization layer can also be supplemented by pluggable extensions. Combining these facets of the present invention provides software vendors with the flexibility to update and optimize their software without impacting the fundamental operations of the virtualization layer.

The features and advantages described in this disclosure and in the following detailed description are not all inclusive and particularly many additional features and advantages will be apparent to one of ordinary skill in the relevant art in view of the drawings specification and claims hereof. Moreover it should be noted that the language used in the specification has been principally selected for readability and instructional purposes and may not have been selected to delineate or circumscribe the inventive subject matter reference to the claims may be necessary to determine such inventive subject matter.

The Figures depict embodiments of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.

Disclosed herein are systems and methods for dynamically altering the functionality of a virtualization layer. According to one embodiment of the present invention a virtualization layer is interposed between computer system hardware and a plurality of applications operating systems or other immutable file images. The virtualization layer is portioned into two portions. A first portion is classified as being privileged and includes legacy code that is maintained in a pristine form. A second portion is classified as being unprivileged and open to modification by pluggable extensions.

For purposes of the present invention the term dynamic is defined to mean when the system is running i.e. during run time. Similarly while the present disclosure is presented using immutable file images one skilled in the art will appreciate that the present invention can be used with or without immutable file images as long as a virtual file system unifies other file systems. While the present disclosure is presented by way of examples using a single computing platform one skilled in the art will recognize that the present invention can be equally applied to network applications and indeed such an application is contemplated.

Specific embodiments of the present invention are hereafter described in detail with reference to the accompanying Figures. Like elements in the various Figures are identified by like reference numerals for consistency. Although the invention has been described and illustrated with a certain degree of particularity it is understood that the present disclosure has been made only by way of example and that numerous changes in the combination and arrangement of parts can be resorted to by those skilled in the art without departing from the spirit and scope of the invention.

According to one embodiment of the present invention the virtualization layer is divided into a privileged portion and an unprivileged portion . The privileged portion includes legacy code of the virtualization layer also referred to as a hypervisor . Legacy code of the virtualization layer is code that operating system and application vendors rely on in creating software that is compatible with a virtual machine.

A VMM as discussed in connection with the present invention is software that runs in a layer between the hypervisor and one or more virtual machines that provides the virtual machine abstraction to the guest operating systems. When full virtualization is in effect as is disclosed herein the VMM exports a virtual machine abstraction identical to a physical machine so that standard operating systems such as Windows Linux and the like can run just as they would on physical hardware. The hypervisor is a thin layer of software that provides virtual partitioning capabilities as discussed with respect to the present invention and runs directly on the hardware but underneath higher level virtualization services. The VMM and the hypervisor are elements of the virtualization layer.

Typically software that is executed in the virtual machine environments is packaged in the form of packages or images. For example collections of Java classes that constitute a Java program or a Java library are packaged as JAR files portable computer files with an internal structure known to the virtual machine. Operating systems and applications that execute within VMware or Xen virtual machines are packaged in the form of disk images portable computer files with an internal layout identical to a computer disk.

Vendors can to some degree configure file images to be more compatible with VMMs and to operate more efficiently. As versions of the image are developed so to are the VMM optimizations. Thus it is advantageous for the VMM to be consistent and reliable. This however provides little flexibility to accept optimization modifications to the VMM. The present invention divides the VMM so as to preserve the legacy portion of the VMM as a reliable and consistent platform while enabling vendors to submit minor modifications that can optimize the performance of particular file images . By minimizing the complexity of the mandatory framework of the virtualization layer the VMM becomes more attractive to a wide variety of vendors. Furthermore the metadata of images used by the privileged portion remains unchanged by the pluggable extension making the VMM from a vendor s perspective a consistent platform from which to operate.

As shown in the virtualization layer includes a privileged portion that includes legacy code and an unprivileged portion that is modifiable. According to one embodiment of the present invention a vendor or similar entity can create a plug in associated with a particular disk image and modify small portions of the code in the unprivileged portion of the virtualization layer . For example the vendor of an operating system can recognize that the operating system may perform more efficiently in conjunction with the virtualization layer if minor modifications occur. A plug in is created. The plug in modifies specific portions of the unprivileged VMM code without altering the code associated with the privileged portion of the virtualization layer . According to another embodiment of the present invention the vendor can also create an operating system plug in that supplements the file image. Thus the file image of the operating system originally installed remains pristine as does the unprivileged portion of the virtualization layer .

According to another embodiment of the present invention a plug in can be added to the virtualization layer so as to enable new hardware capabilities to the virtualization layer such as a new interconnect. Hardware specific extensions can be added to the unprivileged portion of the virtualization layer so as to add new functionality to the VMM. Similarly new application programming interfaces can be introduced to the VMM. According to another embodiment of the present invention the pluggable extensions run on top of existing applications and existing operating systems. The extensions can also be used to paravirtualize selected portions of the operating system or introduce new additional paravirtualized devices.

According to one embodiment of the present invention pluggable extensions are essentially embedded into the package header or image metadata of an application that is running on top of the virtualization layer. The manner in which this is done means that the application image remains unchanged and thus is unaware of the virtualization layer itself. In addition the extensible nature of the plug in also ensures that the application is unaware of any changes introduced to the virtualization layer by the plug in.

The virtualization layer is thereafter logically partitioned divided into a privileged portion and an unprivileged portion . The code associated with fundamental operations of the virtualization layer is associated with the privileged portion and remains unchanged and protected from any attempt to cause its alteration. The unprivileged portion is configured to accept supplements and changes via pluggable extensions.

According to one embodiment of the present invention the vendor of an application or operating system can create one or more plug in extensions designed to modify the code of the unprivileged portion of the virtualization layer. Once applied this extension can add new functionality or alter existing functionality. In addition plug in extensions can be created and applied to supplement the functionality of existing file images. The file image accepting these supplemental functionalities can be aware or unaware of the presence of the virtualization layer. For example the Java application is aware that the Java virtual machine exists but can be unaware of the plug in changes to the virtual machine implementation. The process thereafter terminates . In this manner an operating system can introduce new additional application programming interfaces that would be harmless to the legacy code of the privileged portion of the virtualization layer and at the same time capable of being used through additional packages or modules running on top of the virtualization layer for example system management tools of a particular operating system 

The plug in extension according to one embodiment of the present invention provides the ability to modify the hypervisor itself and can be extended to other VMMs beyond systems that imitate or enable concurrent sharing of a hardware platform. In particular the use of pluggable extensions to a virtualization layer is applicable to a modular design of a file system level hypervisor.

As will be understood by those familiar with the art the invention may be embodied in other specific forms without departing from the spirit or essential characteristics thereof. Likewise the particular naming and division of the modules managers functions systems engines layers features attributes methodologies and other aspects are not mandatory or significant and the mechanisms that implement the invention or its features may have different names divisions and or formats. Furthermore as will be apparent to one of ordinary skill in the relevant art the modules managers functions systems engines layers features attributes methodologies and other aspects of the invention can be implemented as software hardware firmware or any combination of the three. Of course wherever a component of the present invention is implemented as software the component can be implemented as a script as a standalone program as part of a larger program as a plurality of separate scripts and or programs as a statically or dynamically linked library as a kernel loadable module as a device driver and or in every and any other way known now or in the future to those of skill in the art of computer programming. Additionally the present invention is in no way limited to implementation in any specific programming language or for any specific operating system or environment. Accordingly the disclosure of the present invention is intended to be illustrative but not limiting of the scope of the invention.

While there have been described above the principles of the present invention in conjunction with specific computer virtualization architecture it is to be clearly understood that the foregoing description is made only by way of example and not as a limitation to the scope of the invention. Particularly it is recognized that the teachings of the foregoing disclosure will suggest other modifications to those persons skilled in the relevant art. Such modifications may involve other features that are already known per se and which may be used instead of or in addition to features already described herein. Although claims have been formulated in this application to particular combinations of features it should be understood that the scope of the disclosure herein also includes any novel feature or any novel combination of features disclosed either explicitly or implicitly or any generalization or modification thereof which would be apparent to persons skilled in the relevant art whether or not such relates to the same invention as presently claimed in any claim and whether or not it mitigates any or all of the same technical problems as confronted by the present invention. The Applicant hereby reserves the right to formulate new claims to such features and or combinations of such features during the prosecution of the present application or of any further application derived therefrom.

