---

title: Database for financial market data storage and retrieval
abstract: A multi-session write-once computer tick database operable to store financial market data or “tick data.” The tick database stores market information regarding discrete market transactions in individual ticks. For example, information related to stock trades, and quotes may be stored in the database. The individual ticks vary in length dependent on the information available regarding the particular transaction. Null values are not stored in the database. Various field identifiers may be stored in the tick to identify the various metrics or parameters relevant to the transaction that are also stored in the tick. In various embodiments, one metric or parameter is associated with each field identifier. Different transactions may have different number of field identifiers stored within the tick, accordingly, different ticks may differ in length. The information stored within the ticks may be subsequently retrieved. When market data is retrieved using the embedded three-part hierarchal key structure, it may be stored in a cache associated with the tick database. The stored market data may be retrieved from the cache during subsequent requests.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07904363&OS=07904363&RS=07904363
owner: Morgan Stanley
number: 07904363
owner_city: New York
owner_country: US
publication_date: 20080924
---
Investment companies and brokerage houses typically store a tremendous amount of market data. Different database systems exist that can compile and aid one in searching through the historical stock market transactions. These systems permit for example a financial analyst to request the value of a particular stock on a particular date or to request information related to sales on a particular exchange.

Traditionally after the markets have closed for the day data regarding the daily trading information is fed into databases administered by the various brokerage houses and investment companies. This market data regarding the transactions is often referred to as tick data. The data in the database can then be used for analysis and calculations regarding the various transactions that occurred throughout the day or any other desired time period. Due to the incredibly large amounts of data accumulated on a daily basis efficiency with regard to storage techniques and retrieval techniques is critical to these types of database systems.

Current systems for storing and retrieving this tick data such as time series databases relational databases and specialized in memory databases have their downfalls. For example some in memory database systems require large amounts of Dynamic Random Access Memory DRAM in order to provide fast access to the data. Acquiring and maintaining the required memory space is often very costly or impractical due to technological limitations. For example storing tick data from an Options Price Reporting Authority OPRA feed using in memory databases is not possible due to technological limitations and the data volume. As the amount of data regarding the daily market transactions continues to increase the storage space and cost continues to increase as well. Additionally database systems such as relational databases or time series databases while not using high cost DRAM for storage do not allow for fast enough data retrieval functionality. These types of systems may also not be able to handle large volumes of new record insertions inserted as rows fast enough. With the increasing amount of data stored on a daily basis the ability to quickly retrieve the requested data in such systems may decrease thereby decreasing the functionality and usefulness of such data storage system.

Many of the existing specialized in memory databases for storing market data rely on creating various types of data arrays for each transaction. For instance multiple fields each with data regarding a given financial instrument may be stored in memory as an array. Each field in the array is designated to a particular type of data such as trade price quantity or a time stamp. Record based array implementations are typically inflexible with regard to adding more fields such as columns to an existing database. In vector based in memory database systems each column is stored in its own individual array i.e. a vector and each array is stored in a separate file. Accordingly a database table consisting of 60 columns would require over 60 loosely coupled files with this type of implementation. In various in memory database systems a row or record may have dozens or even hundreds of different columns fields to hold the various types of data that may be available for each transaction. If data associated with a particular column is not available or not applicable for a particular transaction however a null value is typically placed in the column. In these systems for any given transaction a multitude of columns may have a plurality of null values. The entire array including the null columns is stored into memory. Thus even though numerous columns with null values do not contain any useful data the columns still consume memory space which consumes resources and adds to data retrieval times. Current systems such as time series databases relational databases or in memory databases require tick data to be normalized in this fashion.

In one general aspect the present invention is directed to a database system for storing massive amounts of financial market data for high speed data retrieval that consumes a relatively small amount of memory such as dynamic random access memory and disk storage. According to one embodiment a computer receives the market data and a multi session write once computer database operable with the computer stores the market data. In various embodiments more data can be appended to the existing database while existing data can not be altered. In various embodiments the market data comprises data regarding individual transactions for investment instruments such as stocks funds currencies bonds or any other type of investment vehicle or instrument. The market data regarding the individual transactions for a particular one of the investment instruments may be stored in one of a plurality of ticks in the database where there is one tick for each transaction. In various embodiments each tick may comprise a plurality of fields including at least one field identifier field and a value field associated with the at least one field identifier field. In some embodiments there is one value field for each field identifier field in the tick wherein the ticks have a variable number of fields including a variable number of field identifier fields depending on the received market data. That way for example the database does not need to store null data only real data needs to be stored. Further using variable length ticks for each transaction accounts for the fact that each transaction may have a different amount of relevant market data.

According to some embodiments the data in the database may be retrieved using at least a three part hierarchal key. The three part hierarchal key may comprise for example a date an exchange and an investment vehicle symbol or other identifier . In various embodiments the database may also comprise a schema a date table an exchange table and a ticker table. Furthermore the database may comprise a tick stack the tick stack comprised of a plurality of individual variably sized ticks. The storage and retrieval techniques allow for efficient use of storage space and quick data retrieval speed. Using the hierarchal key structure certain requests may be achieved without expensive table jointing required by other types of databases such as relational databases.

These and other benefits of the present invention will be apparent from the description that follows.

In one general aspect the present invention is directed to computer implemented database system that provides storage and retrieval access for financial market data or tick data . Tick data refers generally to quote and trade data associated with trades or transactions involving equity fixed income financial derivatives bonds commodities currency or other type of investment instruments or investment vehicles. The term tick data traditionally includes but is not limited to numerical price and trade data reported from trading venues such as various domestic and international stock exchanges. For example for any particular trade transaction the tick data may include a variety of information regarding a transaction such as a time stamp trade size trade price or trade condition code. For various other types of transactions such as quotes calls or asks for example the tick data may include other information such as an bid price ask price bid size ask size and or other pieces of information. As may be appreciated by those skilled in the art the tick data may also include trade conditions such as corrections and cancellations quote conditions and market conditions such as trade halts for example .

With reference to a market data storage system is shown in accordance with various embodiments of the present invention. A feed handler may receive data feed . The feed handler may comprise a programmed computer device or system used to facilitate an interface between the various data feeds and data sources and the down stream components of the market data storage system . The data feed may be comprised of market data . The data feed may receive raw data from various sources such as vendor feeds direct connection to exchanges or market makers. The feed handler may create a log file from the data feed . As understood by those skilled in the art the feed handler may receive data from a plurality of data feeds or other sources. In various embodiments a tick database loader may import the data from the log file and store it in a tick database file for long term storage. In some implementations various components may be added deleted modified or combined. For example the feed handler may be configured to provide information directly to the tick database file .

Referring now to an embodiment utilizing New York Stock Exchange NYSE Trade and Quote TAQ data is illustrated. A cron may routinely download data from a data source such as the NYSE. The data may be downloaded or received from any suitable source such as file transfer protocol FTP or a DVD for example. In various embodiments the data may be in any suitable format such as NYSE TAQ data file formats or comma separate value CSV format for example. As understood by those skilled in the art a cron is generally an automated process that operates at predefined time intervals. A NYSE TAQ file may be created to hold the downloaded data. The tick database loader may then import the data files into the tick database file . As may be appreciated by those skilled in the art some files downloaded from exchanges such as the NYSE may be in a compressed file format such as a ZIP file format. As understood by those skilled in the art the NYSE TAQ files may also be available in DVD format. In various embodiments those compressed files can be decompressed before processing by the tick database .

In various embodiments the tick database file may be a multi session write once database. The database file may be stored in any suitable medium such as an optical disk drive a CDROM or a DVD for example. In various embodiments data may be stored in the tick database file and additional data may be appended to the existing file but the data in the tick database file may not typically be modified after it is stored. In various embodiments the multi session write once database allows a large number of database engines to query the tick database file concurrently without requiring concurrent access control mechanisms during data retrieval such as record locking or other transactions controls.

Data in the tick database may be stored according to a schema as shown in . The schema may establish an organized listing of all the data elements that are pertinent to the system. In this regard the schema may play at least three roles. First the schema may define the database column definitions as in traditional databases. Next the schema may be used for encoding ticks into the proper format. Also the schema may be used for converting ticks from a compact format to a normalized table form. As shown in the illustrated embodiment the schema may be a table or array with columns for a fid num a fid sym a type id and a size . In some embodiments a description column may also be included. An example schema is illustrated in . provides sample definitions for the type id column of . As appreciated by those skilled in the art the schema may comprise additional rows or columns to further define the schema. Additionally other symbols notations or terminologies may be used in various embodiments.

In various embodiments additional database columns to store data may be added at any time after the tick database file has been created. Columns may be added without affecting the validity of the data previously stored and without the need to reorganize or reload the tick database file . In order to add additional information or columns regarding transactions the schema may be updated to reflect the additional type of data. When a new entry is added to the schema the new identifier in fid num may be assigned sequentially and new fields may be appended to schema . In various embodiments similar to traditional SQL tables each entry or identifier in the fid sym column may be unique. Upon data retrieval newly added fields may be populated with NULL values if no data was previously stored in the field for any particular transaction or market event. As understood by those skilled in the art the entries in the fid sym column may be renamed at a later time. In various embodiments the entries associated with the fid num column the type id column and the size column may not be altered after they are defined.

The tick database may also comprise a three part hierarchal key comprising a date table an exchange table and a ticker table . An example embodiment of the date table is illustrated in . The date table may comprise a column for a date time a start offset and an end offset . As understood by those skilled in the art the date table may also comprise additional columns to provide additional information. Furthermore various embodiments may utilize fewer columns in the date table . For example the end offset column may not be used. In the illustrated embodiment the start offset and end offset values for a particular data may provide the range of memory locations in the database for tick data grouped by date. In various embodiments the end offset value may not be used. For example as market data is sequentially stored into memory as discussed in more detail below the date table tracks the beginning memory location start offset and ending memory location end offset for ticks storing information related to trades for a particular date. That way all the trade data from different exchanges for a particular day may be grouped together.

The tick database may also comprise a number of exchange tables an example of which is illustrated in . The exchange tables may comprise a column for an exchange a start offset and an end offset . As understood by those skilled in the art the exchange table may also comprise additional columns to provide additional information. For example information related to exchange holidays or outages that may have occurred affected the exchange on a trading day may be stored in the exchange tables . Furthermore various embodiments may utilize fewer columns in the exchange tables . For example the end offset column may not be used. In the illustrated embodiment the exchange table provides the memory locations in the database for tick data grouped by exchange. There may be one exchange table for each date identified on date table . For example as market data for an exchange such as the NYSE the NASDAQ or the Tokyo Stock Exchange is sequentially stored into memory the exchange table tracks the beginning memory location start offset and ending memory location end offset for the trade data for the particular exchange for the particular date. That way the data can be grouped by exchange and by date.

In addition the tick database may comprise a number of ticker tables an example of which is illustrated in . In various embodiments the ticker table may comprise a column for a ticker symbol a firstTickOffset a tick count a compress size an uncompr size a checksum a status and a compression algo column . In the illustrated embodiment ticker symbol column may be populated with various ticker symbols the firstTickOffset column may be populated with memory locations for the associated ticker symbol the tick count column may be populated with the total number of ticks associated with the ticker symbol the compress size column may be populated with the storage size of the tick after it has been compressed the uncompr size column may be populated with the size of the data segment after it has been uncompressed the checksum column may be populated with a value to check the data integrity the status column may be populated with a status code denoting the quality of the data being stored and the compression algo column may be populated with the type of compression algorithm used to compress the data. Any suitable algorithm may be used to calculate the checksum. For example various embodiments may use the crc32 or the adler32 algorithm. The status column may include status codes such as DB STAT SUSPECT if a technical outage occurred from the data feed affecting the exchange or may include DB STAT INVALIDATED if severe errors were found. Any suitable status code such as OK CLEAR or PARTIAL can be used in status column to represent the quality of the data. A sample table of status codes is provided in .

As understood by those skilled in the art the ticker table may also comprise additional columns to provide additional information. In the illustrated embodiment the ticker table provides the memory locations in the database for tick data grouped by ticker symbol. There may be one ticker table for each exchange table . That way the data can be grouped by symbol by exchange and by date. The ticker table as illustrated also includes other information regarding the various ticker symbols such as the compressed size of the data the uncompressed size of the data and the compression algorithm utilized.

In various embodiments the market data for an individual transaction may be stored in a discrete tick as shown in . A plurality of ticks for a particular ticker symbol may be stored in a tick stack . As may be appreciated by those skilled in the art the tick stack may be configured in any suitable configuration for storing the required data. Since the amount of data stored in each tick is dependent on the amount of the information available regarding any particular market transaction each individual tick may have a variable number of fields and hence a variable size. The ticks may comprise a plurality of fields which may be populated based on market data from the tick database loader . For example there may be three types of fields in a tick a ticksize field a field identifier field and a value field. The ticksize field may be the first field in each tick . The ticksize field may hold information related to the memory size for that particular tick such as the number of bytes required for storing that particular tick. In various embodiments each tick has one and only one ticksize field and it is the first field in the tick . The ticksize field may be used for navigating from one individual tick to the next individual tick by adding the current firstTickOffset value which may be a memory address with the value in the ticksize field to obtain the memory address for the next sequential tick stored in memory.

In such an embodiment the remainder of the tick comprises a number of field identifier fields. The field identifier field may identify a particular metric or parameter for the transaction and the associated value field may provide the corresponding value for that metric or parameter. As such there may be one and only one value field for each field identifier field. Depending on the available data for a particular market event or transaction there may be a number of field identifier fields and value fields. As illustrated by tick a first field identifier may be stored in the tick such as fid . The identifier used may be one established by the schema . The first field identifier may describe the data stored in the first value field stored in the tick . As illustrated a second field identifier may be stored in the tick such as fid . The second field identifier may describe the data stored in the second value field stored in the tick

The size of the tick or the value in ticksize field of the tick will vary depending on the information available regarding the transaction. As illustrated by tick if more information is available the tick may be populated with the additional information. A first field identifier may be stored in the tick such as fid . The first field identifier may describe the data in the first value field stored in the tick . As illustrated a second field identifier may be stored in the tick such as fid . The second field identifier may describe the data in the second value field stored in the tick . A third field identifier may be stored in the tick such as fid . The third field identifier may describe the data in the third value field stored in the tick . As may be appreciated by those skilled in the art the tick may have a multitude of field identifiers and associated values. In some implementations an individual tick or row in the tick stack may include up to 65536 fields which may correspond with the number of entries supported by the schema . The number of field identifiers and associated values used for any particular tick may be dependent on the amount of information available for the particular transaction associated with the tick. If a value is not available for any field identifier the tick does not include that field identifier. Therefore in such embodiments null values do not take up any storage space.

In various embodiments the relative orders of the various fields or columns as they arrive from the data feed may not necessarily be preserved when loaded into the individual ticks . For example if the data comes in to the system with a time stamp data trade size data and a trade price data the tick may be populated with that data in a different relative order. As illustrated by the tick is shown populated with the available data. The first column may include a ticksize the second column may include a time stamp field identifier the third column make include a time stamp value the fourth column may include a trade price field identifier the fifth column may include trade price value the sixth column may include a trade size field identifier and the seventh column make include trade size value . As illustrated by the tick could also be populated in a different order. For example the first column may include a ticksize the sixth column may include a time stamp field identifier the seventh column make include a time stamp value the second column may include a trade price field identifier the third column make include trade price value the fourth column may include a trade size field identifier and the fifth column make include trade size value . As may be appreciated by those skilled in the art due to the use of the field identifiers the market data regarding any investment vehicles may be arranged in the tick in any order.

In various embodiments each tick stores information regarding a discrete market transaction. As each sequential transaction is loaded into the database the next available tick is sequentially populated with the available information. As the tick data is loaded into the tick stack the date table may be populated with the relevant tick offset information for a given time period. The beginning tick offset number or memory location is populated along with the ending tick offset number. The exchange table may also be populated with the relevant tick offset information for a given exchange. The ticker table may be populated with the tick offset number for a particular symbol along with additional information.

In some implementations the data regarding the transactions or trades regarding a particular symbol or investment vehicle for one day is stored sequentially in the tick stack . As illustrated in the tick stack may comprise tick buckets . Each tick bucket may be the sequential data for a particular symbol on a particular exchange for a particular day of trading. Furthermore in various embodiments the data stored in the tick stack may be stored in compressed form to conserve disk storage space. In some embodiments a zlib compression technique may be used. It is understood however that any suitable compression technique may be utilized when storing the market data. Additionally the algorithm for generating the value in the checksum column may be updated as well as the entries in status column .

A time stamp may be one of the fields populated with data in the tick. Transactions having identical time stamps and identical fields may be loaded into the tick database in their original arrival time sequence. Ticks can be uniquely identified since they are grouped together by trading day exchange and ticker symbol and ticks for a given ticker symbol are grouped together and stored sequentially in their original arrival order. Therefore a unique key or identifier such as a unique time stamp for each tick or row in the database table is not needed.

As illustrated in a user may retrieve data from the tick database with a request . In various embodiments the request may utilize the previously mentioned three part key. For example the request may include 1 a date time 2 an exchange and or 3 a ticker symbol. Using the various tables in the tick database the information can be retrieved. The tables provide the tick offsets or range of tick offsets relevant to the query. To retrieve various types of information the request may utilize fewer than all of the keys. For example a request may only include a date which would return all tick data for that particular day. A request could identify only a date range which would return all tick data for that date range. Additionally a request could include for example an exchange such as NYSE and a date such as Aug. 1 2000 which would return all of the tick data for the NYSE from Aug. 1 2000 would be retrieved. Furthermore a request could include all ticks for a given stock symbol on a given day regardless of the exchange it was traded. Results for such a request can be generated efficiently through the use of the three part hierarchal key without expensive table joining operations required by relational database systems.

In various embodiments the data retrieval process may cache database metadata information such as the three part hierarchal key comprising the ticker table the date table and the exchange table in memory for fast access in a cache . The ticker table may also be cached during the data retrieval process. The cache may be created with any suitable storage medium such as Dynamic Random Access Memory DRAM . When the tick database file first accessed the date table may be read from the disk and stored in the cache then the exchange table will be search and cached and then the ticker table will be searched and cached. When ticks for a given symbol are retrieved from the tick stack for the first time the tick stack and the schema table may be cached. As appreciated by those skilled in the art subsequent queries for ticker symbols or other instruments with its intermediate metadata cached i.e. its three part key may require as little as one disk operation to retrieve the data from the tick stack using the firstTickOffset . Furthermore the tick stack and metadata information such as the three party key and the schema table may be implemented as reference counted objects. These reference counted objects may be cached in DRAM as long as needed and may then be freed as soon as their reference counters become zero.

In various embodiments the data retrieval process may support a traditional relational database view and an array vector structure view. In a traditional relational database view the data may be presented in a normalized table as if it were a SQL table with the data organized as rows and columns. The data may be organized as row major with each row containing some of all of the fields columns defined in the schema . In some embodiments the unused fields or columns may be populated with a null value upon retrieval in order to provide a normalized table. In an array vector structure view the data may be presented as column major with each column stored as a vector or array. In some embodiments a generic tick data object such as a tickbucket or an individual tick may be retrieved. As understood by those skilled in the art tickbuckets may be implemented as reference counted memory map objects. Each memory mapped tick stack object may be cached and held in DRAM as long as needed and may be freed as soon as the freed as soon as their reference count becomes zero.

As illustrated in various embodiments may allow a remote user to access the tick database via a network. As appreciated by those skilled in the art any suitable network may be utilized such as a local area network LAN wireless network wireline network internet or intranet connection. In various embodiments a remote Application Programming Interface API may send a request to the tick database daemon process . The request may utilize the three part key. The tick database daemon process may retrieve the requested information from the tick database file and deliver the data to the API via a return feed . In various embodiments the data retrieved by the tick database daemon process will be in the original compressed format from the tick stack i.e. tick bucket . The tick database daemon process may then send the compressed data to the API via a return feed . The API may then uncompress the data and deliver it to the user in the form of a normalized table or as a vector table. Furthermore delta changes to the database may be replicated to a remote server using this remote API mechanism.

In various embodiments the tick database file may be located on a network file system such as a Network File System NFS or an Andrew Filing System AFS allowing for sharing among a group of machines. Machines sharing the database may be on different architectures. For example some machines may be PCs Intel AMD x8664 servers SPARC servers and or PowerPC servers. Furthermore the tick database file may reside on storage area network SAN or a local disk drive for high speed data retrieval.

Using the data stored in the tick stack various historical calculations may also be performed. For example a variety of daily calculations may be computed such as 3 5 50 200 day 50 200 week moving averages 5 21 day Bollinger bands 10 21 63 128 day close close volatilities 21 63 128 day high low open close volatilities 20 90 180 day average daily volumes 5 21 day median daily volumes 5 day time weighted spreads 8 day relative strength indicators back test trading strategies research analysis and or used for legal and compliance purposes. As appreciated by those skilled in the art any other historical calculation may also be performed using the stored market data.

As used herein a computer or computer system may be for example and without limitation either alone or in combination a personal computer PC server based computer main frame server grid computer microcomputer minicomputer laptop personal data assistant PDA cellular phone processor including wireless and or wireless varieties thereof and or any other computerized device capable of configuration for receiving storing and or processing data for standalone applications and or over the networked medium or media.

In general computer readable memory media applied in association with embodiments of the invention described herein may include any memory medium capable of storing instructions executed by a programmable apparatus. Where applicable method steps described herein may be embodied or executed as instructions stored on a computer readable memory medium or memory media. These instructions may be software embodied in various programming languages such as C C Java and or a variety of other kinds of computer programming languages that may be applied to create instructions in accordance with embodiments of the invention. As used herein the terms module and engine represent software to be executed by a processor of the computer system. The software may be stored in a memory medium.

The tick database or any of its associated components or modules may include operatively associated computer readable media such as memory for storing software applications used in obtaining processing storing and or communicating data. It can be appreciated that such memory can be internal external remote or local with respect to its operatively associated computer or computer system. Memory may also include any means for storing software or other instructions including for example and without limitation a hard disk solid state disk optical disk floppy disk DVD compact disc memory stick ROM read only memory RAM random access memory PROM programmable ROM EEPROM electrically erasable PROM and or other like computer readable media.

The examples presented herein are intended to illustrate potential and specific implementations of the embodiments. It can be appreciated that the examples are intended primarily for purposes of illustration for those skilled in the art. No particular aspect or aspects of the examples is are intended to limit the scope of the described embodiments.

The processes associated with the present embodiments may be executed by programmable equipment such as computers or computer systems and or processors. Software that may cause programmable equipment to execute processes may be stored in any storage device such as for example a computer system nonvolatile memory an optical disk magnetic tape magnetic disk or solid state disk. Furthermore at least some of the processes may be programmed when the computer system is manufactured or stored on various types of computer readable media.

While several embodiments of the invention have been described it should be apparent however that various modifications alterations and adaptations to those embodiments may occur to persons skilled in the art with the attainment of some or all of the advantages of the present invention. It is therefore intended to cover all such modifications alterations and adaptations without departing from the scope and spirit of the present invention as defined by the appended claims.

