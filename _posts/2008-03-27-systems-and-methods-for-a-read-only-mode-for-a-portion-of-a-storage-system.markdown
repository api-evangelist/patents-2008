---

title: Systems and methods for a read only mode for a portion of a storage system
abstract: In general, embodiments of the invention relate to reading data from and writing data to a storage system. Specifically, embodiments of the invention relate to a read only mode for a portion of a storage system. In one embodiment, a selective read-only mode for a portion of a storage system is implemented by monitoring a condition that affects a subset of persistent storage in a storage system, by detecting the condition, by entering a read-only mode for the subset, and by enforcing a policy of processing write requests and read requests to the storage system, which includes processing the write requests without modifying user data stored on the subset and processing the read requests, including requests for user data stored on the subset.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07953709&OS=07953709&RS=07953709
owner: EMC Corporation
number: 07953709
owner_city: Hopkinton
owner_country: US
publication_date: 20080327
---
A portion of the disclosure of this patent document includes material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyrights whatsoever.

This application was filed on the same day as the following applications U.S. patent application Ser. No. 12 057 298 entitled SYSTEMS AND METHODS FOR MANAGING STALLED STORAGE DEVICES U.S. patent application Ser. No. 12 057 302 entitled SYSTEMS AND METHODS FOR MANAGING STALLED STORAGE DEVICES and U.S. patent application Ser. No. 12 057 303 entitled SYSTEMS AND METHODS FOR A READ ONLY MODE FOR A PORTION OF A STORAGE SYSTEM all of which are hereby incorporated by reference in their entirety.

In general embodiments relate to reading data from and writing data to a storage system. Specifically embodiments relate to a read only mode for a portion of a storage system.

The increase in processing power of computer systems has ushered in a new era in which information is accessed on a constant basis. In many computing environments storage systems are in continuous or near continuous use. During such use storage systems may experience conditions that negatively affect the durability of data in the storage system. For example servicing a storage system may place certain storage components at risk by creating a possibility of an inadvertent loss of power to one or more of the storage components.

Because only some of the components of the storage system may be affected by the dangerous condition it may be preferable to allow the storage system to isolate its response to the dangerous condition. Hence there is a need for responding to conditions that may negatively affect a portion of the storage system while allowing the remainder of the storage system to operate normally. In general embodiments of the invention relate to reading data from and writing data to a storage system. Specifically embodiments of the invention relate to a read only mode for a portion of a storage system.

In one embodiment a method of implementing a selective read only mode in a storage system is disclosed. The method includes monitoring a condition that affects a subset of persistent storage in a storage system detecting the condition entering a read only mode for the subset and enforcing a policy of processing write requests and read requests to the storage system which policy includes processing the write requests without modifying user data stored on the subset and processing the read requests including requests for user data stored on the subset.

In another embodiment a computer readable medium having instructions stored thereon is disclosed. The instructions including the method of implementing a selective read only mode in storage system described above.

In yet another embodiment a distributed storage system configured to implement a selective read only mode is disclosed. The distributed storage system includes a plurality of storage modules configured to communicate via a network each of the plurality of storage modules configured to process at least one of read and write requests on behalf of the entire distributed storage system wherein the storage modules configured to handle write requests are configured to individually enter a read only mode if at least one condition is detected that affects persistent storage on a respective storage module and an allocation module configured to exclude storage modules operating in read only mode from processing write requests.

In yet another embodiment a storage module configured to communicate with other storage modules and to enter a read only mode is disclosed. The storage module includes persistent storage with user data stored thereon memory with temporary data stored thereon a monitoring module configured to detect at least one condition that affects the persistent storage a read only module configured to place the storage module into a read only mode after the monitoring module detects the at least one condition.

In yet another embodiment a method of implementing a selective read only mode in a storage system with a transaction journal is disclosed. The method includes monitoring a condition that affects data stored in a transaction journal corresponding to a portion of a storage system wherein the transaction journal records in a persistent storage transactions that modify user data stored in the portion detecting the condition entering a read only mode for the portion of the storage system enforcing a policy of processing write requests and read requests to the storage system which policy includes processing the write requests without modifying user data on the portion and processing the read requests including requests for user data stored on the portion.

In yet another embodiment a computer readable medium having instructions stored thereon is disclosed. The instructions including the method of implementing a selective read only mode in storage system with a transaction journal described above.

In yet another embodiment a distributed storage system configured to implement a selective read only mode is disclosed. The distributed storage system includes a plurality of storage modules configured to communicate via a network each of the plurality of storage modules configured to process at least one of read and write requests on behalf of the entire distributed storage system wherein the storage modules configured to handle write requests are configured to individually enter a read only mode if at least one condition is detected that affects data stored in a transaction journal corresponding to a portion of a storage system wherein the transaction journal records in persistent storage transactions that modify user data stored in the portion and an allocation module configured to exclude storage modules operating in read only mode from processing write requests.

In yet another embodiment a storage module configured to communicate with other storage modules and to enter a read only mode is disclosed. The storage module includes a first persistent storage with user data stored thereon a second persistent storage with transaction data stored thereon memory with temporary data stored thereon a monitoring module configured to detect at least one condition that affects the second persistent storage a read only module configured to place the storage module into a read only mode after the monitoring module detects the at least one condition.

In yet another embodiment a method of entering a read only mode for a portion of a storage system is disclosed. The method includes marking as unwritable a transaction journal associated with a portion of a storage system entering a read only mode backing up the transaction journal without writing to the portion continuing to process unresolved transactions affecting the portion by marking as commit deferred without writing to the transaction journal those transactions for which a commit message is received after entering the read only mode and processing those transactions marked commit deferred after leaving the read only mode for the portion by marking each of those transactions as committed in the transaction journal and sending committed messages to other affected portions of the storage system.

In yet another embodiment a computer readable medium having instructions stored thereon is disclosed. The instructions including the method of entering a read only mode for a portion of a storage system described above.

For purposes of this summary certain aspects advantages and novel features are described herein. It is to be understood that not necessarily all such advantages may be achieved in accordance with any particular embodiment. Thus for example those skilled in the art will recognize that the systems and methods may be embodied or carried out in a manner that achieves one advantage or group of advantages as taught herein without necessarily achieving other advantages as may be taught or suggested herein. Furthermore embodiments may include several novel features no single one of which is solely responsible for the embodiment s desirable attributes or which is essential to practicing the systems and methods described herein. Additionally in any method or process disclosed herein the acts or operations of the method or process may be performed in any suitable sequence and are not necessarily limited to any particular disclosed sequence.

These and other features will now be described with reference to the drawings summarized above. The drawings and the associated descriptions are provided to illustrate embodiments of the invention and not to limit the scope of the invention. Throughout the drawings reference numbers may be re used to indicate correspondence between referenced elements. In addition the first digit of each reference number generally indicates that figure in which the element first appears.

Systems and methods which represent one embodiment of an example application of the invention will now be described with reference to the drawings. Variations to the systems and methods which represent other embodiments will also be described.

For purposes of illustration some embodiments will be described in a context of a distributed file system. Embodiments of a distributed file system suitable for accommodating embodiments of a read only mode for a portion of a storage system disclosed herein are disclosed in U.S. patent application Ser. No. 10 007 003 titled SYSTEMS AND METHODS FOR PROVIDING A DISTRIBUTED FILE SYSTEM UTILIZING METADATA TO TRACK INFORMATION ABOUT DATA STORED THROUGHOUT THE SYSTEM filed Nov. 9 2001 which claims priority to Application No. 60 309 803 filed Aug. 3 2001 U.S. patent application Ser. No. 10 281 467 entitled SYSTEMS AND METHODS FOR PROVIDING A DISTRIBUTED FILE SYSTEM INCORPORATING A VIRTUAL HOT SPARE filed Oct. 25 2002 which issued as U.S. Pat. No. 7 146 524 on Dec. 5 2006 and U.S. patent application Ser. No. 10 714 326 entitled SYSTEMS AND METHODS FOR RESTRIPING FILES IN A DISTRIBUTED FILE SYSTEM filed Nov. 14 2003 which claims priority to Application No. 60 426 464 filed Nov. 14 2002 all of which are hereby incorporated by reference herein in their entirety.

The present invention is not limited by the type of environment in which the systems and methods are used however and systems and methods may be used in other environments such as for example other file systems other distributed systems the Internet the World Wide Web a private network for hospitals a broadcast network for a government agency and an internal network for a corporate enterprise an intranet a local area network LAN a wide area network WAN a wired network a wireless network and so forth. Furthermore some embodiments of the invention may include distributed databases and other distributed systems.

Some of the figures and descriptions however relate to embodiments of a distributed file system. It is also recognized that in some embodiments the systems and methods disclosed herein may be implemented as a single module and or implemented in conjunction with a variety of other modules and the like. Furthermore the methods and processes disclosed herein may be embodied in and fully automated via software code modules executed by one or more computers or processors. Computer code modules may comprise computer readable mediums with instructions stored thereon. The code modules may be stored in any type of computer readable medium or other computer storage device. Some or all of the systems and methods may alternatively be embodied in specialized computer hardware. Moreover the specific implementations described herein are set forth in order to illustrate and not to limit the invention.

The word module refers to logic embodied in hardware or firmware or to a collection of software instructions possibly having entry and exit points written in a programming language such as for example C or C and stored in a computer readable medium. A software module may be compiled and linked into an executable program installed in a dynamically linked library or may be written in an interpreted programming language such as for example BASIC Perl or Python. It will be appreciated that software modules may be callable from other modules or from themselves and or may be invoked in response to detected events or interrupts. Software instructions may be embedded in firmware such as an EPROM. It will be further appreciated that hardware modules may be comprised of connected logic units such as gates and flip flops and or may be comprised of programmable units such as programmable gate arrays or processors. The modules described herein are preferably implemented as software modules but may be represented in hardware or firmware. Moreover although in some embodiments a module may be separately compiled in other embodiments a module may represent a subset of instructions of a separately compiled program and may not have an interface available to other logical program units.

In general embodiments relate to reading from and writing to data storage systems. Specifically embodiments implement a read only mode for a portion of a data storage system. In some circumstances it may be advantageous for a data storage system to enforce a read only mode for only a portion of the system. A portion specific read only mode may provide an efficient solution in various circumstances. During a portion specific read only mode read operations may be processed on the entire storage system and write operations may be processed except on the portion in a read only mode. Thus a portion specific read only mode allows for an efficient way to prevent writing to only a portion of a storage system when it may be advantageous to prevent writing to that portion to permit writing to the remaining portions and or to permit reading from the entire storage system.

In some circumstances a portion specific read only mode may be advantageous when it is possible that certain components of the system may affect only a portion of the system without affecting another portion of the system in the same way. For example in a distributed storage system that includes a cluster of data storage nodes a power supply for one of the nodes may affect that node without directly affecting the other nodes. In some circumstances a loss of power may lead to the loss of data that would compromise the reliability and or consistency of a data storage system. Thus it may be advantageous to detect conditions indicating that a subsequent power loss would be likely to result in lost data for a particular node. When such a condition is detected it may then be advantageous to enter a read only mode for that node to prevent such data loss. For example in a read only mode a node might make a permanent backup copy unaffected by a subsequent power loss and then prevent subsequent writes to data that would be affected by a subsequent power loss. Preventing subsequent writes to the jeopardized data ensures that the backup copy is consistent in the event that it is used to restore data following a subsequent power loss. Enforcing the read only mode for just that node allows the remaining portions of the system unaffected by a subsequent power loss to continue as normal and also allows the affected node to participate in read operations. A node level read only mode therefore allows a system for example to take precautionary measures for only the affected portions of the system. Such narrowly tailored responses permit a system for example to provide efficient safety precautions ensuring data integrity while allowing as much functionality as may be prudent in the circumstances. One skilled in the art will appreciate that there are many suitable circumstances in which a portion specific read only mode may be implemented for a data storage system.

A description of an example architecture in which embodiments may be implemented will first be described. Then a problem that arises when a portion of journal data is lost will be described. Next a description of certain conditions that may negatively affect the durability of a portion of storage system will be described. Various embodiments of storage systems with identifiable portions will then be described. Next there will be a description of a process for writing data to a storage system when a portion of the system is operating in a read only mode. Because entering a read only mode with unresolved transactions presents a particular problem this problem and embodiments of a possible solution will then be described. Finally processes for implementing the embodiments described herein will then be described.

The bottom halves manage the distribution of data across the distributed storage system . For example the bottom halves operate the storage of data by distributing portions of a file for example across the nodes . Some of the nodes operate exclusively with the functionality of a top half . These nodes for example handle requests to the file system but do not participate in the storage of data on the distributed storage system . The distributed storage system provides a node level read only mode. When a node is in a read only mode the bottom half participates in answering read requests but does not participate in handling write requests. For write requests the remaining nodes handle the requests. In general top halves are not affected by the node level read only mode. In other embodiments top halves or other portions of nodes may also be affected.

In general the distributed storage system may include a variety of computer systems such as for example a computer a server a smart storage unit and so forth. In one embodiment the computer may be a general purpose computer using one or more microprocessors such as for example an Intel Pentium processor an Intel Pentium II processor an Intel Pentium Pro processor an Intel Pentium IV processor an Intel Pentium D processor an Intel Core processor an xx86 processor an 8051 processor a MIPS processor a Power PC processor a SPARC processor an Alpha processor and so forth. The computer may run a variety of operating systems that perform standard operating system functions such as for example opening reading writing and closing a file. It is recognized that other operating systems may be used such as for example Microsoft Windows 3.X Microsoft Windows 98 Microsoft Windows 2000 Microsoft Windows NT Microsoft Windows CE Microsoft Windows ME Microsoft Windows XP Palm Pilot OS Apple MacOS Disk Operating System DOS UNIX IRIX Solaris SunOS FreeBSD Linux or IBM OS 2 operating systems.

During the operation of a distributed storage system conditions arise that may negatively affect the durability of persistent storage. Persistent storage may be any suitable storage medium for storing the contents of data when a main power supply source is unavailable. For example persistent storage may include non volatile random access memory NVRAM flash memory hard disk drive compact disc read only memory CD ROM digital versatile disc DVD optical storage and magnetic tape drive. Persistent storage itself may depend on power supplies. Thus the term persistent may be a relative term in that some storage is persistent relative to a certain condition such as the loss of a main power supply. For example NVRAM may be battery backed random access memory that persists even when a main power supply is unavailable. Persistent storage may also be independent of power supplies in general such as flash memory hard disk drives CD ROMs DVDs optical storage devices and tape drives. One skilled in the art will appreciate many suitable mediums for persistent storage.

When the durability of persistent storage is negatively affected a storage system may become unreliable. For example some persistent storage components may store a write journal that keeps track of write transactions in a storage system. illustrates one embodiment of a problem that arises when a component storing journaled data loses power and the contents of the journal are lost. Data journals keep records of write transactions until the respective data has been completely written to a permanent storage location. For example many hard disk drives employ write caches to temporarily store data while the disk drive rotates the magnetic disks and encodes data values. If a hard disk drive loses power before the contents of its write cache have been written to the disk platters then the hard disk drive will be in an inconsistent state because the storage system expects that the data has been written but in reality the data has been lost. By keeping a data journal the contents of the hard disk drive can be written again after a power failure. This is because a data journal may be kept in non volatile memory which persists even after a power failure. Embodiments of a data journal for accommodating embodiments of a read only mode for a portion of a storage system disclosed herein are disclosed in U.S. patent application Ser. No. 11 506 597 titled SYSTEMS AND METHODS FOR PROVIDING NONLINEAR JOURNALING filed Aug. 18 2006 U.S. patent application Ser. No. 11 507 073 titled SYSTEMS AND METHODS FOR PROVIDING NONLINEAR JOURNALING filed Aug. 18 2006 U.S. patent application Ser. No. 11 507 070 titled SYSTEMS AND METHODS FOR PROVIDING NONLINEAR JOURNALING filed Aug. 18 2006 and U.S. patent application Ser. No. 11 507 076 titled SYSTEMS AND METHODS FOR ALLOWING INCREMENTAL JOURNALING filed Aug. 18 2006 all of which are hereby incorporated by reference herein in their entirety.

If the contents of a data journal are lost however the data storage system may reach an inconsistent state even if the remaining components are not affected. In some embodiments data journals kept in non volatile memory are subject to failure if the batteries supplying the non volatile memory are interrupted. For example many non volatile memory components are backed up with power supplies such as batteries that are independent from the power source of the storage system or from a portion of the storage system. Separate batteries for example may supply power to the non volatile memory allowing the contents to persist even when other components of the data storage system lack power. If these independent batteries are interrupted however then the journaled data may be lost when for example there is a loss of main power supply and there is no backup power supply.

Journal reports that transaction Thas been aborted. In some embodiments an aborted transaction may be marked aborted in its respective transaction block . Furthermore in some embodiments an aborted transaction may be unlinked from a transaction list. In the illustrated embodiment the aborted transaction is unlinked from the list and marked aborted for clarity though one skilled in the art will appreciate that an unlinked transaction may not be marked as aborted. If the information that transaction Taborted is lost during for example a power failure affecting Journal Nodeand Nodewill be unaware. Furthermore when Nodecomes back on line Nodeand Nodewill not be able to communicate to Nodethat transaction Taborted. With respect to transaction T only Journal reported that the transaction had committed. One of its data blocks has also been flushed to disk meaning that the permanent contents of the disk record the data corresponding to the transaction. If the journaled data in Journal is lost Nodeand Nodewill not know that transaction Tcommitted. Thus the data storage system will be in an inconsistent state.

Because losing journaled data may affect the reliability and or consistency of a data storage system it may be advantageous to detect conditions that may negatively affect the persistent storage components that stores journaled data. Furthermore once such a condition is detected it may be advantageous to take actions that would prevent the permanent loss of journaled data in the event that the persistent storage components lose their data. For example it may be advantageous for a node in a distributed storage system to enter a read only mode when a condition is detected that may lead to the failure of that nodes persistent storage for journaled data. A read only mode may provide a consistent state to which the journal may be restored after a failure affecting the persistent storage storing the journal. In some embodiments a read only module may cause a portion of a storage system to enter a read only mode.

For example entering the read only mode may include waiting until transactions in the node s journal sufficiently resolve marking the node s journal as unwritable and backing up the contents of the node s journal. In read only mode subsequent write transactions are prevented from modifying the node s journal. Processing write transactions in a data storage system implementing a portion specific read only mode is discussed in greater detail below with respect to . If that node s persistent storage for the journal then fails the backup copy of the journal can be used because the backup is consistent with the lost journal data which was not modified during the read only mode.

As discussed above entering a read only mode may include waiting until transactions in the node s journal sufficiently resolve. Determining when a transaction has sufficiently resolved may depend on the transaction protocol used to resolve the transactions. Transaction protocols suitable for implementing the embodiments described herein are disclosed in U.S. patent application Ser. No. 11 262 306 titled NON BLOCKING COMMIT PROTOCOL SYSTEMS AND METHODS filed Oct. 28 2005 which is incorporated by reference herein in its entirety. In some embodiments transactions have sufficiently resolved when they are either aborted or committed. In some embodiments if a transaction has not resolved into an aborted or committed state that is the transaction is in for example a prepared state it may be disadvantageous to prevent writes to the journal during the read only mode. For example if a transaction is in a prepared state when a journal is marked unwritable the transaction may not resolve during the read only mode which may prevent the other nodes from processing the transaction. Thus it may be advantageous to allow transactions to resolve before marking a node s journal as unwritable and saving a backup copy.

Enforcing a node level read only mode is advantageous because it allows a portion of the system to respond to conditions that may only affect journal data for a portion of the system. During the read only mode the node may continue to participate in read transactions and the remainder of the system can participate in both read and write transactions. One skilled in the art will appreciate that a portion specific read only mode may be advantageous for other circumstances in addition to possible loss of journaled data.

As described above it may be advantageous to enter a portion specific read only mode when certain conditions are detected that affect a particular portion of a storage system. In some embodiments a monitoring module may detect certain conditions that trigger a read only mode.

In some embodiments it may be advantageous to respond to conditions that may affect the durability of power supplies providing back up power to non volatile random access memory NVRAM . One skilled in the art will appreciate that there are various suitable ways to provide a backup power supply including batteries. Furthermore it will be appreciated by one skilled in the art that there are many ways in which the durability of NVRAM may be negatively affected. For example the power supply of NVRAM may be hot swappable meaning that for example batteries can be replaced without interrupting the use of the memory. During a hot swap the non volatile memory effectively becomes volatile memory and the contents of the memory are temporarily unprotected. Opening the chassis of a storage node is another condition that creates the possibility for NVRAM to be negatively affected. For example while the chassis is opened in order to service cooling fans there is a possibility that the backup power supply for the NVRAM may become disconnected. Once disconnected the non volatile memory effectively becomes volatile memory and the contents of the memory are temporarily unprotected should power to the node cease. Weak or failing power supplies such as weak or failing batteries are another condition that may negatively affect the durability of NVRAM. If the backup power supply for NVRAM becomes too weak or ceases to function altogether then the non volatile memory effectively becomes volatile memory and the contents are unprotected in the event of a power failure which would cause the loss of data.

Although the conditions described above are directed to detecting conditions that negatively affect backup power supplies there are also other conditions that may negatively affect the durability of a portion of a storage system as well as other conditions that might trigger entry into a read only mode. In general embodiments described herein may include any relevant hardware failure that could negatively affect the durability of a portion of a storage system as well as any other relevant reason for entering a read only mode such as a decision by a user to enter a read only mode. For example in some embodiments an NVRAM component may be backed up with flash memory. Thus some embodiments may monitor for conditions that negatively affect the back up flash memory. As another example non volatile memory components may have support for auto correcting single bit errors. If the number of single bit errors being corrected is high enough it may indicate a higher likelihood of device failure. Thus some embodiments may monitor for high error rates. Furthermore although the conditions described above are directed to detecting conditions that negatively affect backup power supplies some embodiments may monitor conditions related to the health of the main power supplies. For example in some embodiments storage system devices may have redundant power supplies. If one of the power supplies fails then there is an increased likelihood of relying on the backup power supplies supporting the non volatile memory. Thus some embodiments may monitor for conditions related to the health of the main power supplies.

One skilled in the art will appreciate that there are various suitable ways to use a bit string in connection with transitioning a portion of a storage system to a read only mode. For example a bit string may reflect the current status of conditions. Various processes may evaluate the bit string in order to execute appropriate operations in response to the presence or absence of particular conditions. Additionally and or alternatively various processes may set the bits in the string after detecting the condition and initiating operations in response to the presence or absence of particular conditions. Bitwise operations such as the logical OR command may be used for example to determine whether to execute certain operations. One skilled in the art will appreciate that other suitable operations on the bit string may be used and that there are other suitable uses for the bit string than those enumerated herein.

In state write process determines whether the data block to be written corresponds to a read only mode. In other words state determines whether the write request would include a portion of the data storage system that is currently in a read only mode. For example a write transaction may involve three data blocks distributed across three nodes Node Node and Node. If Nodeis in a read only mode then the write process determines that the data block corresponding to Nodeis on a read only node. Because the data blocks corresponding to a node in a read only mode may not be written the write process must find an alternative way in which to write the data request. If the data block does not correspond to a read only mode then in state the write process writes the data block in its defined location. For example the data blocks on Nodeand Nodemay be executed because the respective nodes are in a read write mode. Thus the data blocks corresponding to Nodeand Nodeare written to their respective locations on Nodeand Node.

With respect to nodes in a read only mode the write process in state writes the data block in a newly allocated location. This newly allocated location may be in an available location on another node that is not in a read only mode. For example write process could write the data block corresponding to Nodeon one of the other nodes such as on Nodeor on Node or also on Nodeor on Node and so forth so long as these nodes are in a read write mode. Because the data block previously corresponding to Nodehas been written to a newly allocated location the metadata corresponding to the data block may be updated to reflect the new location. In other words prior to the write request the data block corresponding to Nodewas stored at a location on Node and this location may have been recorded in various places in the data storage system to track the location of the data block. This metadata may be updated once the data block has been redirected to a new location.

As discussed above with reference to when a data block corresponding to a read only mode is reallocated to an available location on another node the metadata corresponding to the respective data block is updated. illustrates one example embodiment of updating metadata to reflect the new location for a data block. File X includes three data blocks Data Block Data Block and Data Block . These three data blocks are spread across the distributed storage system which includes data storage nodes connected via switch . Specifically Data Block is located on Node at block location . Data Block is located on Node at block location . Data Block is located on Node at block location . At some point after Data Block has been written to Node at block location Nodeenters a read only mode. Accordingly Data Block can no longer be modified. If a write request corresponding to File X attempts to modify Data Block data storage system allocates a new location for Data Block and writes the updated value to the newly allocated location. The metadata for File X is then updated to indicate the newly allocated location of Data Block . Thus Data Block is now located on Node at block location which is reflected in the metadata for File X . The location of Data Block can be modified for File X even though the old location of Data Block was on a node in a read only mode because the metadata for File X may be stored on different nodes than those on which the data blocks are stored. For a more detailed explanation of how the metadata and data of a file may be distributed among different nodes see U.S. patent application Ser. No. 10 007 003 titled SYSTEMS AND METHODS FOR PROVIDING A DISTRIBUTED FILE SYSTEM UTILIZING METADATA TO TRACK INFORMATION ABOUT DATA STORED THROUGHOUT THE SYSTEM filed Nov. 9 2001 which claims priority to Application No. 60 309 803 filed Aug. 3 2001 and which was incorporated above by reference in its entirety.

As described above with respect to a portion of a storage system may enter a read only mode by waiting until relevant transactions have sufficiently resolved marking the portion unwritable and backing up the portion. In some circumstances it may be disadvantageous and or not possible to wait for transactions to resolve as part of entering a read only mode. For example in some circumstances it may be advantageous to enter a read only mode when a file system mounts without waiting for the relevant transactions to resolve further. Thus in some embodiments a portion specific read only mode may be entered by marking the portion unwritable and backing up the portion without first waiting for the relevant transactions to resolve. illustrate one embodiment of a problem that arises when a portion enters a read only mode with unresolved transactions such as when the file system is mounted. In some embodiments a node in a read only mode can defer operations associated with resolving the transactions until after leaving the read only mode. illustrate embodiments of deferring transactions until after leaving a read only mode.

In a storage system is illustrated. Two portions of the data storage system are illustrated communicating with one another. These portions are referred to as nodes which are storage modules with processors and at least one storage device. Node has a special role as the initiator coordinator and participant of two transactions being processed by data storage system . Node is a participant of the two transactions. The roles of the initiator coordinator and participants are described in greater detail in the above mentioned application incorporated herein it its entirety. While processing the two transactions Nodeexperiences a power failure that temporarily interrupts its ability to process the transactions. illustrate embodiments of mounting a file system after a temporary power failure in read write and read only modes respectively. Although recovering from a temporary power failure is one circumstance in which a portion of a storage system might remount a file system there are other possible circumstances. For example a storage node might be disconnected from a cluster of nodes and might then be unmounted from the file system. One skilled in the art will appreciate that there are other suitable scenarios in which a storage node may remount a file system following certain circumstances.

In state Node replays the contents of its journal. In other words Node traverses the transactional information recorded in the journal and begins to process the respective transactions. While in the process of replaying the journal Node recognizes that transactions Tand Thave been prepared. Node702 then communicates to Node that the transactions have been prepared. In state these Prepared messages are communicated to Node. In state Node instructs Node to abort transaction Tand to commit transaction T. In some embodiments the message communicated may request that the recipient return a communication once it has finished processing the respective command. For example Node sends a Committed message to Node which informs Node to return a Committed message once transaction Thas been committed. In state Node aborts transaction T. In state Node commits transaction T. In state Node communicates to Node that transaction Thas been committed.

In state Node transitions to a read write mode. In state Node empties the DWQ. Processing the operations associated with emptying the DWQ are described in greater detail above with reference to . In state Node marks transaction Tas committed in the journal. Marking a transaction as committed is described in greater detail above with reference to . In state Node sends a Committed message to Node.

If a condition exists the monitor process proceeds to state which sets the bit corresponding to the detected condition via a state change process described below with reference to . After the state has been changed in state the monitor process sleeps temporarily for a certain amount of time. The amount of time may be defined or may be randomly determined. In state the monitor process determines whether the system is shutting down. If the system is shutting down then the monitor process terminates. If the system is not shutting down the monitor process determines whether the already detected condition still exists. If the already detected condition still exists then the monitor process returns to state to await another period of testing for the condition. If the already detected condition does not exist then the monitor process proceeds to state in order to clean the bit corresponding to the no longer detected condition via state change process described in greater detail below with reference to .

If in state the monitor process detected that the condition did not exist then monitor process proceeds to state to clear the bit corresponding to the tested for condition via a state change process described in greater detail below with reference to . In state the monitor process sleeps temporarily. The amount of sleep time may be a defined value determined at random or dynamically changed. In state the monitor process determines whether the system is shutting down. If the system is shutting down then the monitor process terminates. If the system is not shutting down then in state the monitor process determines whether the previously tested for condition exists. If the previously tested for condition still does not exist then the monitor process returns to state until it tests again. If the previously tested for condition now exists then the monitor process proceeds to state in order to set the bit corresponding to the now detected condition via a state change process described in greater detail below with reference to .

In some embodiments there is more than one condition that may trigger the read only state. Thus even when a condition is detected the relevant portion of the storage system may not transition to a read only mode because the relevant portion is already in the read only mode due to another condition. Furthermore in some embodiments a Disallow condition may prevent entry into the read only mode. Therefore in some embodiments when a condition is detected the data storage system may not enter the read only mode because it is presently disallowed. It will be appreciated by one skilled in the art that there are various suitable ways to detect conditions and then to transition into a read only mode.

In state the state change process determines whether the node has transitioned into a read only mode. If the node has not transitioned into a read only mode then the state change process terminates. If the node has transitioned into a read only mode then the state change process proceeds to state . In state the state change process determines whether the file system is mounted. If the file system is not mounted then the state change process proceeds to state . If the file system is mounted then the state change process proceeds to state . In state the state change process notifies the file system process of a state change. The file system process is described in greater detail below with reference to . In state the state change process waits for the journal to be locked. In some embodiments waiting for the journal to be locked includes waiting for the relevant transactions in the journal to sufficiently resolve. In some embodiments waiting for the relevant transactions in the journal to sufficiently resolve comprises draining the journal of prepared transactions. Once the journal has been locked in state a backup of the journal is saved and the state change process terminates. In some embodiments saving a backup of the journal also includes marking the journal as unwritable.

In state file system process determines whether the relevant node is in a read only mode. If the node is not in a read only mode then the file system process in state mounts the file system to the relevant node in read write mode. Mounting the file system in read write mode is described below in greater detail with reference to . In state the file system process waits for notification of a state change. When the notification of a state change is received then the file system process in state determines whether the file system is still mounted. If the file system is not still mounted then the file system process terminates. If the file system is still mounted then the file system process in state terminates. If the node has not entered a read only mode then the file system process returns to state and waits for notification of a state change. As described in greater detail above with respect to and some state changes will not cause a node to enter a read only mode even if the node is in a read write mode. If the node is in a read only mode then file system process in state drains the journal of prepared transactions. Then in state file system process locks the journal preventing any changes to transaction states as well. The file system process then proceeds to state .

If after receiving a request from a user to mount the file system the file system process determines that the relevant node is in a read only mode then file system process in state mounts the file system as a read only node. Mounting the file system for a read only node is described in greater detail below with reference to . In state the file system process waits for notification of a state change. In state file system determines whether the file system is still mounted. If the file system is not still mounted then the file system process terminates. If the file system is still mounted then file system in state determines whether the node is still in a read only mode. If the node is still in a read only mode then the file system process returns to state and wait for notification of a state change. As described in greater detail above with reference to and some state changes may not cause a node to exit a read only mode. If the node is no longer in a read only mode then file system process in state invalidates the backup of the Journal for the node. Then in state the file system process processes any deferred operations related to aborted and committed transactions. In some cases it is possible that there are no deferred operations. Processing deferred operations related to aborted and committed transactions is described in greater detail below with reference to . In state file system process collects any garbage. In other words file system process collects any data blocks that were invalidated during the read only mode. For example as described in greater detail above with reference to data blocks that correspond to read only nodes are re written to other nodes. The previous data block values stored on the nodes in read only mode are then invalidated. Once the relevant node has exited the read only mode the invalid data blocks may then be collected.

In state the mount process rebuilds the global transaction list from the journal data. In state mount process establishes a connection with other nodes. The operations between states and are executed for the prepared transactions in the global transactions list. In state mount process communicates to other nodes that the relevant transaction has been prepared. In state the mount process receives Committed and Aborted messages from other nodes. The operations between states and state are executed for the aborted transactions. In state mount process determines whether the node is in a read only mode. If the node is in a read only mode the mount process defers the abort of the relevant transaction by queuing writes into a DWQ. The DWQ is described in greater detail above with reference to . If the node is not in a read only mode then the relevant transaction is aborted and the aborted transaction is unlinked in the journal in state . The operations between state and are executed for the committed transactions. In state the mount process determines whether the node is in a read only mode. If the node is in a read only mode the mount process defers the commit of the relevant transaction by marking the transaction as commit deferred in memory. Marking a transaction as commit deferred in memory is described in greater detail above with reference to . If the node is not in a read only mode then the mount process sets the transaction state to committed and sends out Committed messages to the other nodes participating in the transaction.

While certain embodiments of the invention have been described these embodiments have been presented by way of example only and are not intended to limit the scope of the present invention. For example certain illustrative embodiments of the disclosed systems and methods have been described with reference to a read only mode for a portion of a clustered storage system. The disclosed systems and methods are not limited by the illustrative examples. For example in other embodiments the disclosed systems and methods may implement a read only mode for a portion of a non distributed storage system. Many variations are contemplated.

For example some embodiments may be directed to a distributed block device which might resemble in functionality for example a large hard disk drive. A distributed block device might be implemented on a cluster of nodes that provide the block level functionality for example of a hard disk drive. Thus a distributed block device may be organized at the block level rather than the file level. A cluster of processing nodes may work together to process read and write requests at specified block offsets for example. Client processes may deliver read and write requests with an interface for block addresses rather than filenames. In these embodiments it may be advantageous to offer a read only mode for member nodes of a cluster implementing a distributed block device. The embodiments described herein encompass such a distributed system as well as other possible storage systems.

Embodiments of the disclosed systems and methods may be used and or implemented with local and or remote devices components and or modules. The term remote may include devices components and or modules not stored locally for example not accessible via a local bus. Thus a remote device may include a device which is physically located in the same room and connected via a device such as a switch or a local area network. In other situations a remote device may also be located in a separate geographic area such as for example in a different location country and so forth.

