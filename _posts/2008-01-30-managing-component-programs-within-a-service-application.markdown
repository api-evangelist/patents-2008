---

title: Managing component programs within a service application
abstract: Methods, systems, and computer-storage media having computer-executable instructions embodied thereon that, when executed, perform methods in accordance with embodiments hereof, for managing component programs within a service application according to a service model. Initially, configuration settings, which can be administered to the component programs, are extracted from the service model. An instantiation process is initiated to manage the service application in accordance with the changes to a level of load on the service application and/or to specifications within the service model. The instantiation process includes deploying, or identifying as available, the component programs within the data center, and automatically propagating formalized values derived from the configuration settings throughout the deployed component programs. These derived formalized values are installed into the component programs, thereby providing for functionality of the service application consistent with the service model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08112771&OS=08112771&RS=08112771
owner: Microsoft Corporation
number: 08112771
owner_city: Redmond
owner_country: US
publication_date: 20080130
---
Typically software applications are written to allow for many degrees of freedom in their configuration. When leveraging this characteristic various users are able to set up a particular software application to perform in a manner that is specific to each of the users. Thus these freedoms incorporated in a single software application enable the software application to produce disparate results.

This type of software application is utilized by application service providers ASPs that allow users to remotely manipulate the application via the Internet. Because the software application includes degrees of freedom the user may provide performance requirements to the ASPs to manually program into the application. Further most software applications include separate underlying elements that must be individually identified and manually programmed so that the software application may express the performance requirements. The process of manually programming the underlying elements according to received performance requirements is labor intensive and error prone. Accordingly this ad hoc method for customizing a software application introduces brittleness into the provision of the software application from the ASPs. These shortcomings of manual programming are exaggerated when a multitude of users are continually offering and changing their respective performance requirements.

This Summary is provided to introduce concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Embodiments of the present invention provide a service modeling approach that reduce the shortcomings of manual programming by providing a structure e.g. instantiation scheme for automatically managing component programs within a service application according to a service model. Initially a trigger to instantiate the component programs within the service application is detected. In embodiments the trigger is based on an indication of a change to a level of load on the service application e.g. by monitoring traffic at a website hosting the service application or an indication of a change to the specifications within a service model e.g. by amending the a service description contract established between an application service provider and a client .

Incident to detecting the trigger configuration settings are extracted from the specifications of the service model where the configuration settings e.g. addresses of component programs algorithm identifiers service locations memory resource addresses and the like are utilized to configure parameters within the component programs. In one instance the component programs are deployed at various computing devices within a data center that executes the service application. In another instance previously established component programs residing on various computing devices are identified as being available for instantiation. These deployed and or identified component programs are configured according to an instantiation process that includes the following logical steps accessing maps e.g. transformation map structure map deriving formalized values from the configuration settings according to the transformation map automatically propagating formalized values throughout the component programs locating parameters corresponding to the formalized values according to the structure map and installing the formalized values at the appropriate parameters. This robust instantiation process configures the component programs automatically thus substantially reducing the shortcomings discussed above inherent in manual programming.

The subject matter of embodiments of the present invention is described with specificity herein to meet statutory requirements. However the description itself is not intended to limit the scope of this patent. Rather the inventors have contemplated that the claimed subject matter might also be embodied in other ways to include different steps or combinations of steps similar to the ones described in this document in conjunction with other present or future technologies. Moreover although the terms step and or block may be used herein to connote different elements of methods employed the terms should not be interpreted as implying any particular order among or between various steps herein disclosed unless and except when the order of individual steps is explicitly described.

Embodiments of the present invention relate to methods systems and computer storage media having computer executable instructions embodied thereon that when executed perform methods in accordance with embodiments hereof for automatically managing component programs within a service application according to a service model. Initially a trigger to instantiate the component programs within the service application is detected. In embodiments the trigger is based on an indication of a change to a level of load on the service application e.g. by monitoring traffic at a website hosting the service application or an indication of a change to the specifications within a service model e.g. by amending the service description contract established between an application service provider and a client .

Incident to detecting the trigger configuration settings are extracted from the specifications of the service model where the configuration settings e.g. addresses of component programs algorithm identifiers service locations memory resource addresses and the like are utilized to configure parameters within the component programs. In one instance the component programs are deployed at various computing devices within a data center that executes the service application. In another instance previously established component programs residing on various computing devices are identified as being available for instantiation. These deployed and or identified component programs are configured according to an instantiation process that includes the following logical steps accessing maps e.g. transformation map structure map deriving formalized values from the configuration settings according to the transformation map automatically propagating formalized values throughout the component programs locating parameters corresponding to the formalized values according to the structure map and installing the formalized values at the appropriate parameters.

Accordingly in one aspect embodiments of the present invention relate to one or more computer storage media having computer executable instructions embodied thereon that when executed perform a method for managing one or more component programs within a service application according to a service model. The method includes determining a level of load on the service application where the service application includes the component programs that are executable on separate computing devices within a data center extracting from the service model configuration settings that can be administered to the component programs and initiating an instantiation process for managing the service application in accordance with the level of the load. The instantiation process includes deploying the component programs within the data center automatically propagating formalized values derived from the configuration settings throughout the deployed component programs and at least temporarily installing the formalized values into the component programs thereby providing for functionality of the service application consistent with the service model. In embodiments the method additionally includes executing the service application according to the installed formalized values.

In another aspect embodiments of the present invention relate to a computer system embodied on one or more computer storage media having computer executable instructions embodied thereon for performing a method for instantiating a service application by propagating configuration settings to component programs thereby promoting functionality of the service application. The computer system includes a first computing device and a second computing device. The first computing device executes the component programs that support the operation of the service application. The second computing device initiates an instantiation process for implementing the service application according to a service model. The instantiation process includes extracting configuration settings from specifications within the service model identifying the component programs residing on the first computing device as being available for instantiation interrogating parameters within the component programs to establish whether some of the component programs are compatible with the configuration settings automatically propagating formalized values derived from the configuration settings throughout the compatible component programs and configuring the parameters of the compatible component programs according to the formalized values.

In yet another aspect embodiments of the present invention relate to a computerized method for configuring component programs of a service application operating in a data center according to an instantiation scheme. The computerized method includes at least the following steps determining configuration settings by interrogating a service model accessing the instantiation scheme where the instantiation scheme indicates which component programs to deploy in order to satisfy the service model and where the instantiation scheme provides a transformation map deploying the indicated component programs on a plurality of computing devices within the data center converting the configuration settings to formalized values based in part on the transformation map automatically distributing the formalized values to the deployed component programs and at least temporarily storing the distributed formalized values in association with the deployed component programs.

Having briefly described an overview of embodiments of the present invention an exemplary operating environment suitable for implementing embodiments of the present invention is described below.

Referring to the drawings in general and initially to in particular an exemplary operating environment for implementing embodiments of the present invention is shown and designated generally as computing device . Computing device is but one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of embodiments of the present invention. Neither should the computing environment be interpreted as having any dependency or requirement relating to any one or combination of components illustrated.

Embodiments of the present invention may be described in the general context of computer code or machine useable instructions including computer executable instructions such as program components being executed by a computer or other machine such as a personal data assistant or other handheld device. Generally program components including routines programs objects components data structures and the like refer to code that performs particular tasks or implements particular abstract data types. Embodiments of the present invention may be practiced in a variety of system configurations including hand held devices consumer electronics general purpose computers specialty computing devices etc. Embodiments of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network.

With continued reference to computing device includes a bus that directly or indirectly couples the following devices memory one or more processors one or more presentation components input output I O ports I O components and an illustrative power supply . Bus represents what may be one or more busses such as an address bus data bus or combination thereof . Although the various blocks of are shown with lines for the sake of clarity in reality delineating various components is not so clear and metaphorically the lines would more accurately be grey and fuzzy. For example one may consider a presentation component such as a display device to be an I O component. Also processors have memory. The inventors hereof recognize that such is the nature of the art and reiterate that the diagram of is merely illustrative of an exemplary computing device that can be used in connection with one or more embodiments of the present invention. Distinction is not made between such categories as workstation server laptop hand held device etc. as all are contemplated within the scope of and reference to computer or computing device. 

Computing device typically includes a variety of computer readable media. By way of example and not limitation computer readable media may comprise Random Access Memory RAM Read Only Memory ROM Electronically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technologies CDROM digital versatile disks DVDs or other optical or holographic media magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to encode desired information and be accessed by computing device .

Memory includes computer storage media in the form of volatile and or nonvolatile memory. The memory may be removable non removable or a combination thereof. Exemplary hardware devices include solid state memory hard drives optical disc drives etc. Computing device includes one or more processors that read data from various entities such as memory or I O components . Presentation component s present data indications to a user or other device. Exemplary presentation components include a display device speaker printing component vibrating component etc. I O ports allow computing device to be logically coupled to other devices including I O components some of which may be built in. Illustrative components include a microphone joystick game pad satellite dish scanner printer wireless device etc.

Turning now to a block diagram is illustrated in accordance with an embodiment of the present invention showing a computing system configured to manage component programs and within a service application according to a service model. It will be understood and appreciated by those of ordinary skill in the art that the computing system shown in is merely an example of one suitable computing system environment and is not intended to suggest any limitation as to the scope of use or functionality of embodiments of the present invention. Neither should the computing system be interpreted as having any dependency or requirement related to any single component or combination of components illustrated therein. Further although the various blocks of are shown with lines for the sake of clarity in reality delineating various components is not so clear and metaphorically the lines would more accurately be grey and fuzzy.

The computing system includes a client computing device dependent service providers and a data center all in communication with one another via a network not shown . The network may include without limitation one or more local area networks LANs and or wide area networks WANs . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet. Accordingly the network is not further described herein.

Each of client computing device dependent service providers and data center shown in can be any type of computing device such as for example computing device described above with reference to . By way of example only and not limitation each of client computing device and dependent service providers can be a personal computer a desktop computer a laptop computer a handheld device a mobile handset consumer electronic device and the like. In embodiments data center can be a server a collection of computing devices or other machines capable of executing the service application . Additionally client computing device can further include a web browser application residing thereon to access service application via wired or wireless network paths to data center . It should be noted however that embodiments of the present invention are not limited to implementation on such computing devices but may be implemented on any of a variety of different types of computing devices within the scope of embodiments hereof.

As shown in client computing device is configured to execute web browser application to access the service application . Service application can be accessed in a generally direct manner via communication path or by way of dependent service providers . In embodiments access through dependent service providers includes conveying user provided credentials thereto. Typically user provided credentials are login data passwords or any other information provided by a client to satisfy security protocol implemented at dependent service providers . In turn dependent service providers exchange credentials within messages with one or more of components and .

In embodiments dependent service providers are located external to data center and managed by an entity separate from an application service provider that maintains service application . However dependent service providers are able to coordinate activities with the component programs and by exchanging messages therebetween. Coordinating activities between dependent service providers and component programs and is facilitated by resource locations that target dependent service providers . These resource locations are typically established according to specifications within a service model.

Generally the service model is an interface blueprint that provides instructions for managing component programs and of service application . Accordingly the service model includes specifications that identify such aspects of managing as which maps to employ during instantiation which computing devices to utilize during propagation of component programs and where the communication paths and between component programs and are located and any other information that describes the particular way service application will be executed by data center . In one instance the service model is generated in part according to a service description contract established between a client and an application service provider. As a result of the service description contract the client is provided with access to the service application and other software maintained by the application service provider.

Further the service model provides hooks within the specifications that allow implicit and explicit configuration settings to be extracted therefrom. In embodiments implicit configuration settings provide structural information e.g. component addresses resource locations and memory resource addresses to facilitate interaction between each of component programs and and or other components e.g. dependent services providers memory resources . Additionally the implicit configuration settings provide application programming interfaces APIs for consuming and translating messages between the above components thereby allow the components to communicate harmoniously. In embodiments explicit configuration settings provide instructions e.g. algorithm identifiers and other configuration values to parameters within component programs and that influence the functionality thereof. By way of example only specified credentials for logging a client into service application are memorialized in the service model. Hooks in the service model provide these credentials to the explicit configuration settings which distribute the credentials to component as expected values. These expected values are compared against user provided credentials that are conveyed from dependent service providers in message . Upon receipt of message component compares user provided credentials against the expected values. If the comparison results in a match the client is provided access to service application .

Data center is provided for executing service application among other things. Service application includes a set of component programs and that can be scaled to usage e.g. number of client hits per hour or by amendments to the service model. Typically service application is characterized by being composed of many different components e.g. component programs and which are similar to traditional applications. In an exemplary embodiment service application manages the different components such that these components function together as a combined Internet service. By way of example service application is a blog service that allows a variety of clients to post comments at a particular website. Because there could be potentially thousands of clients all accessing the blog service multiple components are deployed to which by the blog service to support its continued operation. These components coordinate actions with each other to function as a single application thus the deployment and dismissal of components is transparent to the clients.

Although one instance of the service application has been shown and described it should be understood and appreciated by those of ordinary skill in the art that multiple service applications may be executed within the data center and that embodiments of the present invention are not limited to those the service application shown and described. In the embodiments having more than one service application the service application and other service applications not shown may operate independently and or in cooperation with each other. In one instance service applications running concurrently on the data center share the set of component programs and . By way of example only the set of component programs and can be consumed by a new service application e.g. reprovisioned according to usage requirements or shared between service applications e.g. a plurality of service applications accessing a program component . Thus the resources on the data center in embodiments provide for the interoperability of many interdependent or independent service applications.

In embodiments data center includes various machines such as first computing device and second computing device and memory resources . Computing devices and may be any type of computing device such as for example computing device see a personal computer server a collection of computing devices or other machines capable of executing service application . Additionally computing devices and are capable of storing and executing component programs and . Component programs and embody several components of an array of component programs that are managed by service application . In embodiments component programs and are developed or written according to specifications within the service model. In one instance one or more of component programs and are developed according to a set of rules within the service model that permits parameters to reconfigure automatically upon determining that an update to the configuration settings has occurred. Although four component programs are depicted in and described herein embodiments of the present invention contemplate utilizing any number of component programs to support operation of service application . In an exemplary embodiment the number of component programs relates to a level of client load on service application where the higher the level of the load climbs the more component programs that are deployed.

Parameters typically reside on component programs and or on elements and residing on components and respectively. Generally parameters fine tune the decisions that each of the components make internally thereby refining coordinated performance of the components. Parameters are exemplary in number and in nature. That is although certain parameters are shown on specific component programs or elements embodiments of the present invention contemplate zero to many parameters residing on any of the component programs or elements.

Memory resources typically reside on data center and are configured to store data. In embodiments memory resources is searchable for one or more of the items stored in association therewith. It will be understood and appreciated by those of ordinary skill in the art that the data stored in the data store may be configurable and may include any information relevant to execution of service application . The content and volume of such information are not intended to limit the scope of embodiments of the present invention in any way. Further though illustrated as a single independent component memory resources may in fact be a plurality of data stores for instance a database cluster. In addition the data stored at memory resources is accessible by component programs and . In one embodiment the configuration settings are provided with memory resource addresses that permit one or more of component programs and to locate memory resources or another appropriate memory allocation in order to access data therefrom.

In operation service application is configured to manage component programs and . One aspect of managing involves establishing and configuring component programs and upon detecting a trigger event. The trigger event alerts service application to instantiate component programs and within service application upon detecting the trigger event. In embodiments the trigger is based on an indication of a change to a level of load on service application e.g. by monitoring traffic from one or more client computing device or an indication of a change to the specifications within a service model e.g. by amending the service description contract established between an application service provider and a client as more fully discussed below with reference to .

Incident to detecting the trigger configuration settings are extracted from the specifications and or hooks of the service model. Generally configuration settings facilitate properly managing service application . In embodiments configuration settings can be implicit or explicit configuration settings as more fully discussed above. In particular instances configuration settings include addresses of component programs algorithm identifiers service locations memory resource addresses or any other data string utilized to configure parameters within the component programs.

Incident to or concurrently with extracting configuration settings component programs and are established to meet the load satisfy the updated service model or for any other reason that pertains to operation of service application . In one instance establishing component programs and includes deploying component programs and at various computing devices and within data center . In another instance establishing component programs and includes identifying as being available for instantiation previously established component programs residing on various computing devices and and are identified. Although two different ways of establishing component programs and have been shown it should be understood and appreciated by those of ordinary skill in the art that other methods for establishing component programs and can be utilized and that embodiments of the present invention are not limited to those ways shown and described herein.

These deployed and or identified component programs and are configured according to an instantiation process that includes the following logical steps accessing maps e.g. transformation map structure map deriving formalized values from configuration settings according to the transformation map automatically propagating formalized values throughout component programs and locating parameters corresponding to formalized values according to the structure map and installing formalized values at the appropriate parameters . In an exemplary embodiment parameters are interrogated by service application to determine whether each of components and are compatible with configuration settings prior to installing formalized values .

Turning now to a flow diagram is illustrated that shows an overall method for managing components within a service application according to a service model in accordance with an embodiment of the present invention. Initially as indicated at block an indication e.g. trigger event is received at a service application. Trigger events are discussed more fully with reference to . Typically the indication alerts the service application that more or fewer component programs should be established to maintain uniform operation of the service application. In an exemplary embodiment the addition and subtraction of component programs is transparent to a client who is presently accessing the service application. As indicted at block configuration settings are extracted from hooks upon interrogating specifications within a service model. As more fully discussed above various types of configuration settings can be extracted such as implicit and explicit configuration settings.

As indicated at block an instantiation process for managing the service application in accordance with the trigger events is initiated. In embodiments the instantiation process includes at least the following logical steps establishing component programs deriving formalized values automatically propagating the formalized values and installing the formalized values. In particular as indicated at block the component programs are established by deploying e.g. generating new component programs or identifying as available existing component programs on machines within the data center. In an exemplary embodiment of identifying available existing component programs parameters within the existing component programs are interrogated to determine whether they are compatible with the configuration settings. Accordingly these compatible component programs receive formalized values during propagation.

In embodiments these component programs are located at one or various computing devices within a data center. This style of remote deployment is enabled by instructions e.g. component addresses provided to the component devices by the configuration settings. In addition the configuration settings include instructions for configuring an API at some of the component programs thereby allowing each component program to coordinate with other types and instances of component programs memory resources and remote dependent service providers e.g. service maintained by communication partners .

As indicated at block formalized values are derived from the configuration settings. In embodiments the formalized values are derived according to a transformation map a determined state of each of the component programs or a combination thereof. These formalized values are automatically propagated to the deployed component programs the compatible component programs or a combination thereof as indicated at block . These steps e.g. blocks and may be taken in any order or concomitantly. As indicated at block the formalized values are installed at the parameters of the component programs. In other embodiments the formalized values are temporarily stored in association with a corresponding parameter. Incident to installing the parameters the service application is executed according to the formalized values as indicated at block .

Turning now to flow diagrams are illustrated showing methods and for installing the formalized values into appropriate parameters of the component programs in accordance with an embodiment of the present invention. With respect to initially a map structure is accessed by the service application as indicated at block . In other embodiments the structure map is accessed by the configuration settings or stored therein. As indicated at block the parameters within the component programs are located according to logic within the structure map. Accordingly the logic of the structure map assists in directing the formalized values to the appropriate parameters thereby promoting a proper installation of the formalized values as indicated at block .

With reference to a state of each of the established component programs is established as indicated at block . In embodiments the state generally relates to an instance or type of component program or the existing configuration of the component program. As indicated at block a transformation map is accessed. In an exemplary embodiment the transformation map includes logic that provides for expressing the configuration settings as formalized values upon entering the determined state of each of the component programs. Based on the logic formalized values are derived that correspond to each instance of a component program.

However if the determinations of blocks and indicate that a trigger event has occurred e.g. a substantial change to the level of the load occurred or an amendment to the specification has driven a substantial effect the updated configuration settings are updated according to the service model as indicated at block . Utilization of the service model to create updated configuration settings is discussed more fully above with reference to . As indicated at block the formalized values are derived from the updated configuration settings. As indicated at block the component programs are reconfigured with the derived formalized values. In embodiments reconfiguration includes the steps listed in .

Embodiments of the present invention have been described in relation to particular embodiments which are intended in all respects to be illustrative rather than restrictive. Alternative embodiments will become apparent to those of ordinary skill in the art to which embodiments of the present invention pertain without departing from its scope.

From the foregoing it will be seen that this invention is one well adapted to attain all the ends and objects set forth above together with other advantages which are obvious and inherent to the system and method. It will be understood that certain features and sub combinations are of utility and may be employed without reference to other features and sub combinations. This is contemplated by and is within the scope of the claims.

