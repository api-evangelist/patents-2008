---

title: Intelligent analysis based self-scheduling browser reminder
abstract: A computer-implemented method for reminding a user to browse a regularly visited website comprising tracking websites visited by the user and ranking each website by visitation frequency and browsing duration. An average recurring time each website is visited is calculated and it is determined whether the current time is equal to the average recurring time for a particular website. The user is reminded to visit the particular website if it is determined that the user is not currently browsing the particular website when the current time equals the average recurring time for the particular website.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07669136&OS=07669136&RS=07669136
owner: International Business Machines Corporation
number: 07669136
owner_city: Armonk
owner_country: US
publication_date: 20081117
---
This application relates generally to computer software and more particularly to an intelligent self scheduling browser reminder to view content based on previous web browsing behavior.

People throughout the world use the Internet daily to read news and obtain information from a wide variety of sources. The Internet is inundated with information catering to diverse interests.

People often view content on specific websites on a regular schedule or frequency. For example an investor may check the stock prices on a particular website in the investor s portfolio each day after the market closes or a sports fan may regularly view a particular sports website on a particular day for scores or list of players.

The web browsers used to search the Internet may be accompanied with computer programs that interact with the browser to provide specific functions on demand. These computer programs e.g. plug ins extensions etc. add new features not foreseen when the browser was initially developed. The source code may be kept separate from the browser s source code allowing third party developers to create new capabilities for the browser notwithstanding incompatible software licenses.

In one aspect of this disclosure a computer implemented method is disclosed for reminding a user to browse a regularly visited website. The method comprises tracking websites visited by the user and ranking each website by visitation frequency and browsing duration. An average recurring time each website is visited is calculated and it is determined whether the current time is equal to the average recurring time for a particular website. The user is reminded to visit the particular website if it is determined that the user is not currently browsing the particular website when the current time equals the average recurring time for the particular website.

The foregoing has outlined generally the features and technical advantages of one or more embodiments of this disclosure in order that the following detailed description may be better understood. Additional features and advantages of this disclosure will be described hereinafter which may form the subject of the claims of this application.

This disclosure describes a system and method for implementing an intelligent analysis based self scheduling browsing reminder that will prompt users to browse their favorite websites or other applications at particular recurring times. As will be appreciated by one skilled in the art the present application may be embodied as a system method or computer program product. Accordingly the present application may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a system. 

Furthermore the present application may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium. Any combination of one or more computer usable or computer readable medium s may be utilized. The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory a read only memory an erasable programmable read only memory e.g. EPROM or Flash memory an optical fiber a portable compact disc read only memory an optical storage device a transmission media such as those supporting the Internet or an intranet or a magnetic storage device. Note that the computer usable or computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory. In the context of this document a computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer usable medium may include a propagated data signal with the computer usable program code embodied therewith either in base band or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium including but not limited to wireless wire line optical fiber cable RF etc.

Computer program code for carrying out operations of the present application may be written in any combination of one or more programming languages including an object oriented programming language such as Java Python Delphi C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

This application is described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to one or more embodiments. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks. The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Referring to an illustrative computer system is shown for implementing an intelligent analysis based self scheduling browsing reminder that tracks the uniform resource locators URL visited by a user prepares a web browsing profile for that user and prompts the user to visit one of her favorite websites based on the data gathered in her profile. While the reminder is preferably embodied as a plug in it is understood that the reminder may be encoded as an extension or a separate program. The profile will preferably contain a list of visited websites ranked by visitation frequency and browsing duration. The accumulated data will provide plug in with the intelligence needed to remind users to visit one of their favorite websites or other applications. The reminder schedule for each website may be determined by for example averaging the time the user visits the website. While plug in is shown to interact with web browser it is understood that plug in may interact with any other application to gather frequency data and remind users to open that application at certain times. Computer system may be implemented on a stand alone device or within a network environment via network interface .

Computer system preferably includes at least a processing unit memory input output I O interface storage device and system clock all which operate in a conventional manner. Plug in provides the function of the present disclosure by preferably loading into memory and having its instructions executed by processor . Plug in may be part of the operating system for best efficiency. Alternatively the operating system may invoke one or more separate software applications to employ plug in . One skilled in the art will recognize that an implementation of an actual computer may contain additional components and that contains a high level representation of some of the components of such a computer for illustrative purposes.

Referring to a preferred logical arrangement between plug in and web browser is illustrated. Web browser preferably provides services that plug in can use such as for example a mechanism for plug in to register with plug in manager and a protocol by which data may be exchanged between web browser and plug in . Plug in preferably utilizes an application programming interface API to communicate with web browser .

Once plug in registers with plug in manager plug in may start monitoring the user s web browsing activity via the API interface. Plug in may use conventional web tracking techniques e.g. cookie tracking URL query string tracking etc. . Plug in may store the tracking information in a user web profile on a computer storage device e.g. storage device . User web profile may contain the URL the user browsed accompanied by a timestamp indicating the date and time the user visited the URL. Additionally each URL may be associated with the average amount of time the user spent browsing the URL. Plug in preferably scans the data accumulated in web profile and preferably ranks the websites based on visitation frequency and browsing duration.

If there is already a web profile for the user in step or after a web profile has been created in step plug in preferably reads in the accumulated data from the user profile and begins ranking the URLs by for example frequency and browsing duration in step . In step the plug in preferably calculates the average recurring time the favorite websites or other applications are visited. Plug in may use a variety of known data structures within memory e.g. arrays linked lists etc. to sort the ranking of the websites and to store the average time the websites are visited.

In step plug in preferably compares the current time provided by system clock to the average time calculated in step to confirm whether to remind the user to check her favorite website. If the time has not yet arrived plug in preferably loops back to step and continues tracking the user s web behavior. If the time has arrived plug in preferably verifies whether the user is currently visiting that site in step . If the user is currently visiting the site plug in preferably loops back to step and continues to track the user s web behavior. If the user is not currently visiting that site plug in preferably initiates a reminder to the user to check that particular site at step . It is understood that plug in may use a variety of different ways to remind the user to check the website e.g. pop up screen voice sound etc. . The user may be given an option to go to the particular URL associated with the website or application cancel the reminder if the user does not wish to go to that URL and or delay the operation via a snooze function to permit the plug in to remind the user again in a predetermined time e.g. 5 minutes . Once the reminder is dispatched at step plug in preferably loops back to step to continue the process. Plug in is preferably executed indefinitely until computer system is turned off the user exits web browser the user turns off plug in or the number of reminders exceed a predefined threshold in a given period of time.

While this disclosure has been described in terms of tracking a user s history of regularly visiting websites it is understood that this disclosure is equally applicable to tracking a user s application software usage to remind a user to timely work on a particular application software.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present application. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

Having described and illustrated the principles of this application by reference to one or more preferred embodiments it should be apparent that the preferred embodiment s may be modified in arrangement and detail without departing from the principles disclosed herein and that it is intended that the application be construed as including all such modifications and variations insofar as they come within the spirit and scope of the subject matter disclosed herein.

