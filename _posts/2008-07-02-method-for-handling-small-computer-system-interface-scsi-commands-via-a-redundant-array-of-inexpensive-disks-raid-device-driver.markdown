---

title: Method for handling small computer system interface (SCSI) commands via a redundant array of inexpensive disks (RAID) device driver
abstract: The present invention is a method for handling an operation system kernel-provided command via a software-based device driver. The method includes receiving the operation system kernel-provided command from an operation system kernel. The method further includes determining if a kernel virtual address is required for responding to the command. The method further includes initiating a Direct Memory Access (DMA) operation for providing data to the operating system kernel in response to the command when a kernel virtual address is not required for responding to the command. The method further includes allocating a device driver buffer with a DMA address and a virtual address when a kernel virtual address is required for responding to the command.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08041849&OS=08041849&RS=08041849
owner: LSI Corporation
number: 08041849
owner_city: Milpitas
owner_country: US
publication_date: 20080702
---
The present invention relates to the field of electronic data storage and particularly to a method for handling Small Computer System Interface SCSI commands via a Redundant Array of Inexpensive Disks RAID device driver.

Currently available methods by which software based device drivers handle operating system kernel provided commands may not be conducive to allowing said software based device driver to have a desired level of portability across various operating system environments.

Therefore it may be desirable to provide a method for operating system kernel provided commands which addresses the above referenced shortcomings of currently available methods.

Accordingly an embodiment of the present invention is directed to a method for handling an operating system kernel provided command via a software based device driver said method including receiving the operating system kernel provided command from an operating system kernel determining if a kernel virtual address is required for responding to the command when a kernel virtual address is not required for responding to the command initiating a Direct Memory Access DMA operation for providing data to the operating system kernel in response to the command and when a kernel virtual address is required for responding to the command allocating a device driver buffer with a DMA address and a virtual address.

A further embodiment of the present invention is directed to a computer readable medium having computer executable instructions for performing a method for handling an operating system kernel provided command said method including receiving the operating system kernel provided command from an operating system kernel determining if a kernel virtual address is required for responding to the command when a kernel virtual address is not required for responding to the command initiating a Direct Memory Access DMA operation for providing data to the operating system kernel in response to the command and when a kernel virtual address is required for responding to the command allocating a device driver buffer with a DMA address and a virtual address.

An additional embodiment of the present invention is directed to a method for handling an operating system kernel provided command via a software based device driver said method including receiving the operating system kernel provided command from an operating system kernel determining if a kernel virtual address is required for responding to the command when a kernel virtual address is not required for responding to the command initiating a Direct Memory Access DMA operation for providing data to the operating system kernel in response to the command when a kernel virtual address is required for responding to the command allocating a device driver buffer with a DMA address and a virtual address and based upon the operating system kernel provided command populating the device driver buffer with data.

It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not necessarily restrictive of the invention as claimed. The accompanying drawings which are incorporated in and constitute a part of the specification illustrate embodiments of the invention and together with the general description serve to explain the principles of the invention.

Reference will now be made in detail to the presently preferred embodiments of the invention examples of which are illustrated in the accompanying drawings.

A software based Redundant Array of Inexpensive Disks RAID device driver stack may implement virtual disk drives. The virtual disk drives may be exported to an operating system kernel as devices which follow Small Computer System Interface SCSI protocol. Because the virtual disk drives exported by the RAID device driver stack are SCSI ex. follow SCSI protocol said exported virtual disk drives may be required to honor all SCSI commands issued by the operating system kernel.

Modern operating systems may employ a data transfer technique called Direct Memory Access DMA for transferring information data from devices and system memory. Since the above referenced disk drives disk devices exported by the RAID device driver stack RAID stack are virtual disk drives only a subset of SCSI commands may actually be able to be fulfilled by the RAID device driver stack by using DMA operations. For example the subset of SCSI commands which may be able to be fulfilled using DMA operations may include SCSI READ SCSI WRITE SCSI SYNCHRONIZE CACHE etc. Alternatively a large subset of SCSI commands may not be able to be fulfilled completed by the RAID device driver stack by using DMA operation s . For instance the subset of SCSI commands which may not be able to be fulfilled completed using DMA operations may include SCSI INQUIRY SCSI READ CAPACITY etc.

For the SCSI commands which cannot be completed using DMA the RAID device driver stack may have to generate appropriate data for the operating system kernel. Due to the nature of modern operating system device drivers RAID device driver stacks device drives may be unable to trivially access the addresses used by the operating system s for DMA. The ability to access such addresses may be limited to hardware chips which can perform DMA operations. Said limitation may put the software based RAID device drivers at risk because said software based RAID device drivers may be unable to achieve the basic functionality of transferring data to the operating system kernels.

A number of solutions have been implemented by various modern operating system kernel developers for addressing the above referenced limitations problems. For example a number of operating system kernels may provide Application Programming Interfaces APIs which may be used by device drivers software based RAID device driver stacks for generating kernel virtual addresses for given DMA addresses. Device drivers such as software based RAID device driver stacks may invoke APIs selectively based on the SCSI command type and may obtain generate a driver accessible kernel virtual address. Once an appropriate address is generated a device driver may use it to transfer data to from the operating system kernel.

A disadvantage associated with the above referenced existing solution s may be a lack of general availability. For instance not all operating system vendors have employed implemented the above referenced solutions techniques in their operating systems respective device drivers. Further for a given operating system vendor its operating system may have multiple versions of kernels not all of which may have implemented said solution s . Operating systems which do not implement said solution s features may attach quite a number of strings on how when said features may be used. Additionally limitations faced while implementing a software based RAID device driver stack may include the API to get a kernel virtual address for a given DMA address may not be invoked by the device driver in many contexts such as when a SCSI command is submitted to the device driver by the operating system kernel for immediate execution or in an interrupt context the use of APIs may consume important kernel resources and therefore may be prone to a higher failure rate which may require implementation of an elaborate recovery mechanism in the software based RAID device driver stack and in some cases an operating system kernel may put a limitation on how many such translations may be outstanding ex. this may sometimes be as low as one which may be a significant design limitation for an aspiring high performance stack such as a software based RAID device driver stack . Since APIs may be specific to operating system kernels portability of the RAID device driver stack between operating systems may be affected.

The system method of the present invention allows for removal of the above referenced limitations of existing solutions. For example the present invention because it is operating system independent and or operating system kernel independent does not suffer from a low resource condition and may allow for device driver portability across various operating system environments.

Referring generally to is a flowchart illustrating a method for handling an operating system kernel provided command via a software based device driver in accordance with an exemplary embodiment of the invention. is a block diagram schematic illustrating an operating system within with which a software based device driver may be implemented in accordance with an exemplary embodiment of the present invention. In exemplary embodiments the method may include receiving a command from an operating system kernel . For example the operating system kernel of an operating system may be communicatively coupled with a software based device driver ex. a Redundant Array of Inexpensive Disks RAID software based device driver . Further the operating system may provide the command ex. a Small Computer System Interface SCSI command which may be received by the software based device driver . In current embodiments of the present invention virtual disk drive s implemented by the software based device driver may be exported to the operating system kernel .

In further embodiments the method may further include determining if a kernel virtual address is required for responding to fulfilling the operating system kernel provided command . For instance after receiving the operating system kernel provided command the software based device driver may determine if kernel virtual addresses are required for fulfilling the command. In additional embodiments when it is determined that a kernel virtual address is not required for responding to fulfilling the command the method may further include initiating a Direct Memory Access DMA operation for providing data ex. relevant data for fulfilling the operating system kernel provided command to the operating system kernel in response to the operating system kernel provided command .

In current embodiments of the present invention when it is determined that a kernel virtual address is required for responding to fulfilling the command the method may further include allocating a device driver buffer ex. a private buffer with a DMA address es and a virtual address es . In further embodiments the method may further include populating the device driver buffer with data ex. relevant data for fulfilling the operating system kernel provided command .

In exemplary embodiments the method may further include initiating ex. submitting via a Write Completion Handler a write command for writing the data ex. the relevant data for fulfilling the operating system kernel provided command from the device driver buffer to a reserved area of a physical disk drive . For example the physical disk drive which includes the reserved area may be a RAID physical disk drive of a RAID configuration and said RAID physical disk drive may be communicatively coupled with one or more of the operating system the operating system kernel and the device driver .

In further embodiments the method may further include initiating a read command for reading the data from the reserved area of the physical disk drive to a buffer of the operating system kernel ex. which may result in completing the SCSI command wherein the data relevant to fulfilling the operating system kernel provided command is provided to the operating system kernel via the read command . For example the read command request may be submitted via a Read Completion Handler such that the data ex. the relevant data for fulfilling the operating system kernel provided command may be read from the reserved area of the physical disk drive to the operating system kernel ex. a buffer of the operating system kernel an original DMA address of the operating system kernel . For instance the read command may a DMA based read command. The above described method of the present invention may allow for handling fulfillment of operating system kernel provided commands via a software based device driver without requiring the software based device driver to generate kernel virtual addresses via APIs. One or more of the above referenced steps of the method of the present invention may be performed by the software based device driver .

It is to be noted that the foregoing described embodiments according to the present invention may be conveniently implemented using conventional general purpose digital computers programmed according to the teachings of the present specification as will be apparent to those skilled in the computer art. Appropriate software coding may readily be prepared by skilled programmers based on the teachings of the present disclosure as will be apparent to those skilled in the software art.

It is to be understood that the present invention may be conveniently implemented in forms of a software package. Such a software package may be a computer program product which employs a computer readable storage medium including stored computer code which is used to program a computer to perform the disclosed function and process of the present invention. The computer readable medium may include but is not limited to any type of conventional floppy disk optical disk CD ROM magnetic disk hard disk drive magneto optical disk ROM RAM EPROM EEPROM magnetic or optical card or any other suitable media for storing electronic instructions.

It is understood that the specific order or hierarchy of steps in the foregoing disclosed methods are examples of exemplary approaches. Based upon design preferences it is understood that the specific order or hierarchy of steps in the method can be rearranged while remaining within the scope of the present invention. The accompanying method claims present elements of the various steps in a sample order and are not meant to be limited to the specific order or hierarchy presented.

It is believed that the present invention and many of its attendant advantages will be understood by the foregoing description. It is also believed that it will be apparent that various changes may be made in the form construction and arrangement of the components thereof without departing from the scope and spirit of the invention or without sacrificing all of its material advantages. The form herein before described being merely an explanatory embodiment thereof it is the intention of the following claims to encompass and include such changes.

