---

title: Reproducing apparatus, system LSI, and initialization method
abstract: Hardware of a playback apparatus includes a drive and a decoder, and firmware of the playback apparatus accesses a BD-ROM loaded on a drive, according to a BD-J application, to bring the decoder into AV playback operations. The drive unit constitutes a local storage. A benchmark score is built in the firmware in advance. The benchmark score shows a turn-around time from when a processing request is made to the hardware via the firmware to when a response returns. Such a benchmark score is written into an application data area in the local storage when the firmware is initially executed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08522339&OS=08522339&RS=08522339
owner: Panasonic Corporation
number: 08522339
owner_city: Osaka
owner_country: JP
publication_date: 20080229
---
The application execution technique is a technique to cause a virtual machine to execute an application program described in an object oriented language. This is realized through generation of a class object from a class structure described in an object oriented language and providing of the class object to a platform of the virtual machine. The class object is an instance of the class structure. Industrial products as applications of the technique include for example playback apparatuses that have a Bluray Disc Read Only Memory BD ROM playback function.

Such playback apparatuses are developed by various manufacturing enterprises called manufacturers and remodeled almost every year. Accordingly the playback apparatuses have different microprocessor units MPUs memory sizes bus band widths and hardware parts such as graphic accelerator and the application processing speeds of the playback apparatuses vary widely due to the differences.

Since the apparatuses are different in performance from each other it is necessary to change the processing load when the application programs run. For example the number of images of animation for a graphical user interface GUI should be increased or decreased. Since a playback apparatus equipped with high performance hardware is capable of loading and expanding graphics data for GUI at a high speed the number of the animation images should be increased. On the other hand for a playback apparatus equipped with low performance hardware the number of the animation images should be decreased. Through such an adjustment of the number of images it is possible to maintain the speed of responses to user s operations at a certain level without being influenced by the hardware performance differences. To realize such an adjustment of the processing load it is necessary for application programs to estimate the performance of the hardware as the subject of the execution. For this purpose when started up applications may firstly execute a benchmark test for estimating the performance.

Patent Document 1 discloses an example method for such changing of the processing load with use of a benchmark test.

By the way BD ROM playback apparatuses have a variety of functions. Accordingly it is necessary to conduct a benchmark test on many hardware processing procedures to change the processing load on BD ROM playback apparatuses. If such a benchmark test on the variety of functions is performed before the execution of the application program a delay time from the startup of the application by the user to the actual start of the processing i.e. starting delay will be long because it takes a very long time to complete the benchmark test.

To solve this problem the first method that comes to mind is reuse of benchmark results. Specifically a benchmark test is performed on the application that has been officially authorized by a standards promotion group of playback apparatuses the results of the test is written into a storage and other applications use the results. Since the benchmark test is performed on the authorized application other applications can reuse the results without performing the test and reduce the starting delay for each application. If the benchmark test on the authorized application covers many of the required functions precise load adjustment can be realized.

However a firmware program which intervenes between hardware and applications is updated irregularly. A firmware program is a type of software that is built into apparatuses to perform basic controls of hardware. Even if the benchmark test on the authorized application covers many of the required functions the results are useless if the target of the benchmark test is an old firmware program. This is because the speed of execution of the functions largely depends on the overhead of the firmware program. Also the functions of the playback apparatuses might change when the calculation algorithms are changed.

In this way it is problematic that if benchmark test that covers many of functions are performed before execution of applications a large delay might occur before the execution of the original processing procedures. Also in the case of reusing the results of benchmark test performed on the authorized application the results of the benchmark test might not be effective after an irregular update of the firmware occurs.

The object of the present invention is to provide a playback apparatus that enables applications to reuse the results of benchmark test that covers many functions while eliminating the delay at the startup of the application.

To solve the problems explained above the present invention provides a playback apparatus comprising a hardware part that includes i a drive unit operable to read data including a benchmark program and audiovisual AV data from a recording medium ii a playback unit operable to play back the AV data and iii a processing unit operable to execute a program a firmware program for use in control of the hardware part an initializer operable to perform initialization when the processing unit executes the firmware program and a storage having a recording area wherein a benchmark score is included in the firmware program the benchmark score indicates processing capability of the hardware part and is a result of prescribed processing that the hardware part executes according to an instruction received from the benchmark program via the firmware program and at initial execution of the firmware program by the processing unit the initializer enables an application program to access the benchmark score by writing the benchmark score into the recording area of the storage.

With the stated structure the initializer writes the benchmark score in the recording area in the storage at the initial execution of the firmware to prevent the starting delay of the application. Although a delay is caused by the writing of the benchmark score into the recording area at the initial execution of the firmware no delay is caused at the startup of the application. Thus the starting delay at the startup of the application does not occur.

In this way by eliminating the effect of the starting delay it is possible to provide quick response to the user s operations.

It is unnecessary for the application to execute the benchmark test by itself. Instead the application acquires information relating to the hardware parts of the playback apparatus from the benchmark score written in the recording area of the storage. Thus it is possible to shorten the time required for the application s operations by the time required for the benchmark test.

Here in the case the benchmark score is built in the firmware there is a possibility that the application destroys the firmware by directly accessing the benchmark score in the firmware. To prevent the application from destroying the firmware the initializer writes the benchmark score in the application data area before the application starts up.

This prevents the benchmark score built in the firmware of the playback apparatus from being directly accessed by the application. As a result it is possible to prevent the destroying of the firmware or a recording medium that stores the firmware such as a memory due to unnecessary accesses by the application and exposure of the firmware.

Further the writing of the benchmark score is performed at the initial execution of the firmware not at every startup of the firmware. The number of times the writing of the benchmark score is performed is therefore considerably reduced compared to the case of writing the benchmark score at every startup of the firmware.

Also as the application uses this benchmark score it is possible to more precisely determine the load of the rendering of animations on the playback apparatus. Thus it is possible to allow the playback apparatus to perform necessary processing with a suitable load level according to the hardware performance.

In a case where the firmware program is updated the initializer may write the benchmark score included in the updated firmware program into the recording area when the processing unit initially executes the updated firmware program.

The benchmark score is built in the firmware included in the playback apparatus. Thus as the old firmware is overwritten with the new firmware at the updating of the firmware the benchmark score is updated accordingly. Moreover at the initial execution of the new firmware program the benchmark score written in the recording area in the storage is updated as well.

The benchmark score in the playback apparatus is updated together with the firmware when the firmware is updated from the old version to the new version. Thus even if the firmware is updated irregularly the version confliction which is inconsistency between the version number of the firmware and the version number of the benchmark score does not happen. In other words even if the firmware is updated irregularly it is possible to maintain the validity of the benchmark score.

The writing of the benchmark score is performed at the initial execution of the firmware after the updating of the firmware by the user instead of at every startup of the firmware. The number of times the writing of the benchmark score is performed is therefore considerably reduced compared to the case of writing the benchmark score at every startup of the firmware. Although a delay is caused by the writing of the benchmark score into the recording area at the initial execution of the firmware no delay is caused at the startup of the application. Thus the starting delay at the startup of the application does not occur. In this way by eliminating the effect of the starting delay it is possible to provide quick response to the user s operations.

The playback apparatus may further comprise a judgment unit operable when an application program makes a request to access the benchmark score written in the recording area to judge validity of a credential corresponding to the application program and if the credential is valid further judge whether to permit the application program to access the benchmark score according to access right information of the application program which is included in the credential.

With the stated structure it becomes possible to check whether the application that makes a request to read the benchmark score has a valid right to access the benchmark score. Moreover since the checking is performed with use of the digital signature technology it is possible to realize the mechanism for the judgment of the right without any major modification to the standard model of the Blu ray Disc Java BD J application terminal.

The recording area may be identified by a file path that includes an identifier of a provider of the benchmark program and an identifier of the benchmark program.

For example the benchmark test with use of an authorized application is performed according to the standard defined by a standards promotion group the benchmark scores will be highly reliable meaningful information. However as the reliability is high if it is possible to use the benchmark score unlimitedly the benchmark score can be used for undermining the credibility of the playback apparatus so called negative campaign by for example publicizing the score on a Web page. To prevent such a negative campaign the stated structure allows only applications that have been given the access right authorized by the provider of the benchmark program to read the benchmark score. For example the stated structure allows only applications that have been authorized by the organization promoting standardization of recording media to read the benchmark score. As a result the manufacturer can safely build the benchmark score into the firmware and allow applications to use the score.

The firmware program may include an input output I O program that returns the benchmark score to the application program in response to an access request from the application program and when the application program makes the access request with designation of the file path of the benchmark score the I O program may return the benchmark score based on the designation of the file path.

With the stated structure since the application uses such a benchmark score it is possible to more precisely determine the load for rendering animations on the playback apparatus. Thus it is possible to allow the playback apparatus to perform necessary processing with a suitable load level according to the hardware performance. Further it is possible to prevent the application from directly accessing the benchmark score.

In a case where the benchmark score included in the firmware program is loaded into the second recording area the I O program may generate positional information that includes information of a file path of an original recording position of the benchmark score in the storage and information of an actual recording position in the second recording area into which the benchmark score is loaded and on receipt of the designation of the file path from the application program the I O program may refer to the positional information read the benchmark score loaded in the second recording area and return the benchmark score to the application program.

With the stated structure the application can acquire the benchmark score without knowing the actual recording position of the benchmark score.

The initializer may judge whether the recording area identified by the file path stores the benchmark score and if the recording area does not store the benchmark score the initializer may write the benchmark score into the recording area identified by the file path.

With the stated structure even if the benchmark score in the recording area determined by the path is overwritten and deleted accidentally checking on whether the benchmark score has been deleted is performed when the firmware is started up. If the benchmark score has been deleted the benchmark score will be read from the firmware again and be written in the recording area in the storage. Thus at the startup of the firmware it is possible to check whether the benchmark score has been deleted and prepare for the case of such deletion. As a result the playback apparatus can promptly respond to the request from the application to read the benchmark score.

In a case where the firmware program is updated the initializer may compare a version of the benchmark score incorporated in the updated firmware program with a version of the benchmark score stored in the recording area and if the version of the benchmark score incorporated in the updated firmware program is newer than the other the initializer may write the benchmark score included in the updated firmware into the recording area that is identified by the file path.

With the stated structure in the case no change has been made to the benchmark score included in the firmware even after the firmware is updated i.e. the version of the benchmark score after the updating is the same as the benchmark score before the updating the writing of the benchmark score into the recording area in the storage indicated by the file path can be suppressed. Thus for example in the case where the recording area is a memory area on a semiconductor memory card that has a limitation on the number of writings to the recording area the stated structure extends the operating life of the semiconductor memory card.

In addition to the method of writing the benchmark score into the application data area there is another way to provide the application with the benchmark score. For this purpose the initializer may be structured as follows.

Namely the benchmark score may be loaded in the memory so that the application can use the benchmark score. With the stated structure it is possible to reduce the delay time caused by the copying of the benchmark score into the application data area in the local storage. Also in the case the application data area is structured from the semiconductor memory card it is possible to reduce the number of writings into the semiconductor memory card.

The following explains an embodiment of a playback apparatus. First of all among various acts of practicing a playback apparatus of the present invention an act of using is described. shows a utilization example of a playback apparatus installed in a user s house. As shows the playback apparatus is provided to be used by the user together with a BD ROM a WWW server also called a Web server a TV and a removable medium .

The WWW server is a server apparatus for managing an official website of the provider of the movie work. The WWW server provides the user with contents that realize partial replacement of or addition to the movie work recorded on the BD ROM via the Internet or the like.

The playback apparatus constitutes a home theater system together with the TV and so on and plays the BD ROM .

The TV displays a played video of the movie work a menu and so on in order to provide the user with an interactive operational environment.

The removable medium is to be coupled to the playback apparatus and is to be used for storing contents distributed from the WWW server of the movie provider. Thus it is possible to expand update the contents recorded on the BD ROM by combining them with the contents downloaded from the WWW server via the Internet and stored in the removable medium . In order to load such a removable medium the playback apparatus is equipped with a loading slot for loading a removable medium which is a representative of a SD memory card a memory stick a Compact Flash a smart media a multimedia card and so on.

This concludes the description of the act of using the playback apparatus of the present invention. The following explains the recording medium that is a playback target of the playback apparatus pertaining to the present invention. The recording medium to be played back by the playback apparatus pertaining to the present invention is the BD ROM which is an optical recording medium.

The logical address space stores therein various types of video data following area management information for a file system. The file system is for example UDF and ISO 9660. Extension 2.3 format is adopted in the present embodiment.

The third tier in shows the directory file structure that has been built based on the file system shown in the second tier. As shown in a BD.ROOT.CERTIFICATE and a Blu ray Disc Movie BDMV directory are placed directly below a ROOT directory ROOT of the BD ROM.

The BD.ROOT.CERTIFICATE the disc root certificate is encoded in for example the X.509 format. The detailed specifications of X.509 are recited in CCITT Recommendation X.509 1988 The Directory Authentication Framework issued from the International Telegraph and Telephone Consultative Committee. The lead line f in indicates the usage of the BD.ROOT.CERTIFICATE. As indicated by this lead line the BD.ROOT.CERTIFICATE is used for the purpose of extracting an ID called Cert ID unique to the certificate.

The BDMV directory is a directory in which data that can be stored in the BD ROM such as AV contents and management information are recorded. Under the BDMV directory five sub directories a PLAYLIST directory a CLIPINF directory a STREAM directory a BDJA directory and a JAR directory exist. Also two types of files index.bdmv and Movieobject.bdmv exist under the BDMV directory.

The STREAM directory stores files forming the main digital stream. Files with the extension mt2s xxx.m2ts where xxx is variable and extension mt2s is fixed exist under the STREAM directory.

Files with the extension mpls xxx.mpls where xxx is variable and extension mpls is fixed exist under the PLAYLIST directory.

Files with the extension clip xxx.clpi where xxx is variable and extension clip is fixed exist under the CLIPINF directory.

Files with the extension jar xxx.jar where xxx is variable and extension jar is fixed exist under the JAR directory.

Files with the extension bdjo xxx.jar where xxx is variable and extension bdjo is fixed exist under the BDJO directory.

The files with the extension m2ts are digital AV streams in the MPEG TS format TS stands for Transport Stream each of which is obtained by multiplexing a video stream one or more audio streams and one or more graphics streams. The video stream represents the video part of the movie the audio stream represents the audio part of the movie and the graphics stream represents the subtitle of the movie.

The files with the extension clip are management information called Clip information which correspond to the digital AV streams on a one to one basis. The Clip information being management information contains information such as the encoding format frame rate bit rate and resolution of the digital AV stream and EP map that indicates starting positions of GOPs.

The files with the extension mpls store therein PlayList PL information. The PlayList information includes MainPath information Subpath information and PlayListMark information.

1 The MainPath information is information that defines a logical playback section by defining one or more combinations of In Time and Out Time which are time points on a playback time axis of an AV stream. The MainPath information includes a stream number table and STN table where the stream number table indicates which elementary streams among those multiplexed in the AV stream are validated to be played back. With the STN table it is possible to define which elementary streams among those multiplexed in the AV stream are permitted to be played back and which elementary streams are not permitted to be played back.

2 The PlayListMark information includes specification of a time point at which a chapter starts within a part of the AV stream that is specified by a combination of In Time and Out Time.

3 The Subpath information includes specification of an elementary stream that is to be played back in synchronization with the AV stream and one or more combination of In Time and Out Time which are time points on a playback time axis of the elementary stream. An AV playback is started when a Java application instructs a Java virtual machine to generate a JMF player instance for playing back the piece of PlayList information. The JMF player instance is actual data that is generated on a heap memory of the virtual machine based on the JMF player class.

The combination of the AV stream and the PlayList information constitutes a playback unit called Title . The AV playback in the BD ROM is performed in the unit of Title.

The files with the extension jar are Java archive files in which exist class files of Java applications for performing dynamic scenario control using the Java virtual machine. The Java applications defined by the class files are Java Xlets that are controlled via an Xlet interface. The Xlet interface provides four states loaded paused active and destroyed . The applications mentioned in the present description are instances for class files recorded on a recording medium such as BD ROM.

The files with the extension bdjo are files storing BD J Objects. The BD J Object is information that defines a Title by a relationship between an AV stream indicated by the PlayList information and an application. The BD J Object includes application management table and a list of PlayLists that can be played back in the Title. The application management table AMT is a table that is used to achieve application signaling where the application signaling is a control that manages the Title in the BD ROM as a life cycle of the application and takes charge of the start and end of the application. It should be noted here that the life cycle means a cycle during which an application lives on the heap memory of the virtual machine on a time axis of the entire content recorded on the BD ROM. Here the term live refers to the state where the application has been read out onto the heap memory such that the application can be executed by the virtual machine. The application management table indicates an application whose life cycle is the Title by showing the identifier of the application application ID and the IDs of the Java archive files that belong to the application. That is to say one application is constituted by one or more Java archive files.

A Java application whose controls are defined by the application management table in the BD J Object is called a BD J application .

The index.bdmv fixed file name is management information regarding the BD ROM as a whole. After a BD ROM is inserted into the playback apparatus the index.bdmv is read first so that the disc is recognized uniquely by the playback apparatus . In addition to this the index.bdmv includes a table that shows relationships between a plurality of playable Titles in the BD ROM and BD J Objects respectively defining the playable Titles. The lead line f in indicates the close up of the internal structure of index.bdmv. As indicated by the lead line f the index.bdmv includes information such as an Organization ID 32 bits that is an identifier of the provider of the movie work.

The MovieObject.bdmv fixed file name includes a scenario program in which a scenario is written the scenario being used to dynamically change the progress of the playback of each Title when it is played back in the HDMV mode which will be described later .

The second layer is a layer of the AV stream. The second layer defines what decoding method is used to decode the stream supplied by the first layer.

The third layer BD management data is a layer that defines a static scenario of the stream. The static scenario includes the playback path information and the stream management information that are preliminarily defined by the disc creator. The third layer defines a playback control based on the information.

The fourth layer BD playback program is a layer that defines a dynamic scenario of the stream. The dynamic scenario is a program that executes at least one of a playback procedure of the AV stream and a control procedure regarding the playback. The playback control by the dynamic scenario varies depending on the user operation made onto the apparatus and has a characteristic of a program. The dynamic playback control here has two modes.

The following explains the internal structure of the local storage. The local storage includes a persistent area that has the directory file structure shown in . shows the internal structure of the persistent area in the local storage.

The disc additional data area is an area corresponding to each of BD ROMs with which the playback apparatus was loaded in the past. The disc additional data area stores therein additional data to the contents of each BD ROM. The disc additional data area includes BUDA directory Cert ID directory Organization ID directory and Disc ID directories .

The BUDA directory is located immediately under the root directory of the local storage for example. The BUDA directory indicates the root of the additional content area. The directory name is a fixed value BD BUDA composed of eight or less characters.

The Cert ID directory is a directory whose name is an ID obtained from the BD.ROOT.CERTIFICATE on the BD ROM for example. The name is composed of eight characters in hexadecimal notation represented by the first 32 bits of 160 bits which represent the SHA 1 digest value of the BD.ROOT.CERTIFICATE.

The Organization ID directory is a directory whose name is composed of eight characters in hexadecimal notation represented by a 32 bit identifier Organization ID identifying the provider of the movie work. The Organization ID is written in the BD management information index.bdmv on the BD ROM for example.

The Disc ID directories are composed of four directories for example. Each of the four directories is assigned with a directory name that is represented in hexadecimal notation and composed of eight characters. The names of these four directories can be obtained by dividing the Disc ID which is consisted of 128 bits and identifies the BD ROM into four sets of 32 bits in order from the head of the Disc ID.

The application data area is an area for storing data required by the application to operate for example. The application data area stores therein user configurations cookies game scores passwords and so on which are required by the application to operate.

The application data area includes an ADA Application Data Area directory a Cert ID directory an Organization ID directory and an Application ID directory.

The application data area directory ADA directory is located immediately under the root directory of the local storage and indicates the root of the application data area. The directory name is a fixed value ADA .

The Cert ID directory is a directory whose name is an ID obtained from the BD.ROOT.CERTIFICATE on the BD ROM. The name is composed of eight characters in hexadecimal notation represented by the first 32 bits of 160 bits which represent the SHA 1 digest value of the BD.ROOT.CERTIFICATE.

The Organization ID directory is a directory whose name is composed of eight characters in hexadecimal notation represented by a 32 bit identifier Organization ID identifying the provider of the movie work. The Organization ID is written in the index.bdmv on the BD ROM.

The Application ID directory is a directory whose name is a 32 bit identifier Application ID of an application represented in hexadecimal notation. The Application ID is used as a file name of an archive file. The Application ID directory stores therein a text file that includes a benchmark score.

The text file is stored in the application data area. The application data area can be identified by a fixed file path which is a combination ADA Cert ID Organization ID Application ID . Thus the BD J application can read the benchmark score via the API Java I O method for file I O.

The left frame shows the case the processing load has been changed to increase. In the left frame a cat character is displayed in full animation i.e. 24 pictures per second .

The right frame shows the case the processing load has been changed to decrease. In the right frame the cat character is displayed in half animation i.e. 12 pictures per second . Such a change is made according to the value of the benchmark score stored in the application data area which can be accessed via a fixed file path ADA Cert ID Organization ID Application ID . The prerequisite for the processing load change shown in the left frame is for example that the benchmark score is a predetermined threshold value or greater. The prerequisite for the processing load change shown in the right frame is for example that the benchmark score is less than the predetermined threshold value. In this way the service applications provided from a BD ROM are made to change the processing load according to the benchmark score stored in the application data area. Due to such a change the response time from when the user instructs the BD J application via the GUI to perform processing to when the processing completes does not depend on the rendering capability of the playback apparatus and can be kept at a certain level.

This concludes the explanation of the BD ROM . The following explains the details of the playback apparatus .

The BD ROM drive performs loading ejection of the BD ROM that has the internal structure shown in and accesses the BD ROM. The BD ROM drive stores TS packets read from the BD ROM into the read buffer .

The read buffer is a FIFO memory and stores therein TS packets read from the BD ROM on a first in first out basis. The TS packets constitute an AV stream in MPEG2 TS format.

The demultiplexer demultiplexes the AV stream in the MPEG2 TS format recorded on a BD ROM a removable medium and a Built In medium to obtain video frames and audio frames constituting a GOP. The demultiplexer outputs the video frames to the video decoder and the audio frames to the audio decoder . The demultiplexer stores the graphics stream into the graphics memory . The demultiplexing performed by the demultiplexer includes conversion from TS packets to PES packets.

The video decoder decodes video frames output from the demultiplexer and writes pictures in uncompressed format into the plane memory for video.

The audio decoder decodes audio frames output from the demultiplexer and outputs audio data in uncompressed format.

The graphics memory is a buffer for storing therein graphics data and image files read from the BD ROM the removable medium and the Built in medium.

The plane memory is a SD RAM or the like having an area for storing one screen worth of data and the memory allocation differs between the HDMV mode and the BD J mode. According to the memory allocation in the HDMV mode the plane memory has an 8 bit area of 1920 1080. Such a memory allocation means that each pixel can store an 8 bit index value when the resolution is 1920 1080 pixels. The raster graphics stored in the plane memory is displayed through conversion of the index color with use of the CLUT Color Lookup Table . On the other hand according to the memory allocation in the BD J mode the plane memory has a 32 bit area of 1920 1080. Such a memory allocation means that each pixel can store 32 bit RGB value when the resolution is 1920 1080 pixels. The BD J application can directly display the graphics for the GUI by directly writing the 32 bit RGB values.

The graphics decoder expands graphics data and image files stored in the graphics memory and writes the resultant data into the plane memory . As a result of the decoding of the graphics stream various menus and graphics appear on the screen.

The adder outputs the result of synthesizing images expanded in the plane memory for graphics with uncompressed format picture data stored in the plane memory for video.

The resultant image shown in is output by the adder synthesizing the graphics in the plane memory and the picture data in the plane memory for video.

The network I F unit executes a protocol stack for network connection. The network I F unit enables the playback apparatus to recognize a drive of a computer on the network as a network drive . As the protocol stack the network I F unit preferably uses the TCP IP for transferring BD management data which requires reliability and uses the UDP IP for transferring AV stream which requires a high speed.

The switch selectively writes files read from the BD ROM drive the HD drive and the card drive into the RAM .

The HD drive is a hard disk drive that can store therein class files provided via the BD ROM and other similar class files.

The card drive is a drive device that can load a SD memory card or the like that stores therein the class files provided via the BD ROM and other similar class files.

The RAM is structured from a static RAM or the like and stores therein necessary data for MPU performing data processing. The RAM includes a firmware resident area where the firmware remains. The firmware resident area is accessible only in the privilege mode of the MPU and programs running in the normal mode can not access the firmware resident area. This is for preventing the firmware from being destroyed unexpectedly.

The areas other than the firmware resident area are under management of a memory pool management function and a heap area management function.

The memory pool management function is to manage empty memory areas provide a required memory area having a requested size to the BD J application and restore the memory area when the use of the provided memory area completes. The heap area management function is to set a memory pool to empty areas of the memory and provide a required memory area having a requested size to the BD J application. Such heap management allows the areas on the RAM to be used as a heap memory .

The MPU is the core of the playback apparatus . The MPU includes as the minimum necessary components a fetch circuit for fetching native codes from the instruction memory and the cache a decoder circuit for decoding instruction codes and an arithmetic operation circuit for performing arithmetic operations on values stored in the registers. Also the MPU has a privilege mode as an operation mode. Applications that can operate in this privilege mode can access the firmware stored in the RAM and the flash ROM .

The user interface detects and notifies user operations input from input devices such as a remote control and a front panel of the playback apparatus . This notification is made as generation of a UOP in accordance with an interruption generated by an interruption handler provided in a device driver corresponding to the input device. The UOP is an event UO event that occurs when a key included in a key matrix provided on a remote control or a front panel is depressed and the depression of the key is detected. The UO has an attribution corresponding to the depressed key. More specifically when the interruption handler provided in the device driver corresponding to the remote control or the front panel detects a depression of a key by a key sense for the key matrix the interruption handler generates an interruption signal based on the key depression. The UO event is generated by the generation of the interruption signal.

The flash ROM is an EEPROM and stores therein built in programs that have been built in the playback apparatus in advance. Such built in programs include for example a boot loader and firmware . The flash memory is accessible only in the privilege mode of the MPU and programs running in the normal mode can not access the flash ROM . This is for preventing the boot loader and the firmware from being destroyed unexpectedly.

This concludes the explanation of the hardware structure of the playback apparatus . The following explains the software structure that is based on the hardware structure explained above.

Among these files the class files and the executable files are components of the firmware and define controls performed by the playback apparatus . is a layer model showing the controls performed by the playback apparatus .

As shows the controls performed by the playback apparatus can be represented with a usual layer model in which the firmware is placed on the hardware. The firmware is hierarchized with for example a virtual file system an access control mechanism a playback engine a playback control engine a class loader and a system application .

Also the firmware includes as essential software components for accessing the persistent area a file I O program that realizes the Java I O method for example. This I O program performs for example operations for returning a benchmark score written in the persistent area to a BD J application that has made a request for accessing the benchmark score written in the persistent area. The following explains these components. Note that more precisely the software structure of the playback apparatus includes an HDMV module for the HDMV mode and a module manager for switching between the BD J mode and the HDMV mode. However since these components are not the main features of the present invention the explanations of these components are omitted here.

The virtual file system is a virtual file system for handling the download content stored in the local storage integrally with the disc content stored in the BD ROM. Here the download content stored in the local storage includes the clip information and the playlist information as shows. The playlist information of the download content is different from the playlist information on the BD ROM in that it can specify the clip information regardless of whether the clip information is on the BD ROM or in the local storage. Regarding this specification the playlist information on the virtual file system does not necessarily use a full path to specify files on the BD ROM or in the local storage. This is because the file system on the BD ROM and the file system on the local storage are recognized as a single virtual file system i.e. the virtual file system . Thus the playlist information can specify the file system AV streams on the BD ROM by specifying a value as the file body of the files stored in the clip information. Via the virtual file system the contents of the local storage are read and dynamically combined with the contents of the BD ROM so that the playback can be realized in various manners. The disc contents as the combination of the local storage and the BD ROM and the disc contents on the BD ROM are handled in equality. Thus it is assumed that the BD ROM mentioned in this application includes a virtual recording medium consisted of a combination of the local storage and the BD ROM.

The access control mechanism performs forcible controls such that only BD J applications that have been validly authorized called signed applications can access the application data area in the local storage. As a result of such forcible controls only BD J applications having a valid digital credential can access the benchmark scored stored in the application data area.

Specifically when a BD J application makes a read request for accessing the application data area in the local storage with use of a fixed file path the access control mechanism checks the access right of the digital credential of the BD J application. If judged that the application has an access right the access control mechanism reads desired data from the application data via the API Java I O method for file I O in the file system and passes the read data to the service application.

The playback engine performs AV playback functions. The AV playback functions of the playback apparatus are conventional functions inherited from DVD players and CD players including playback start Play playback stop Stop pause Pause On cancellation of the pause Pause Off cancellation of Still function still off fast forward with speed specification Forward play speed rewind with speed specification Backward play speed switching of audios Audio Change switching of sub videos Subtitle Change switching of angles Angle Change and so on. To realize the AV playback functions the playback engine controls the decoder to decode the part that corresponds to the desired time point included in the AV stream read into the buffer. The playback engine can play back the AV stream from the given time point by causing the decoder to perform the decoding from the desired time point.

The playback control engine performs functions such as i playback control on the playlist information and ii acquisition setting of the state of the playback apparatus . The playback control on the playlist information is to cause the playback engine to perform among AV playback functions thereof playback start and playback stop according to the current playlist information and the clip information. The playback control engine performs these functions i and ii according to an API call from the upper layer. The pair of the playback engine and the playback control engine is called AV playback library and is implemented in the playback apparatus as a library used particularly for the AV playback.

The BD J module is a Java platform and includes a Java virtual machine a configuration and a profile. The Java virtual machine is an interpreter that interprets and executes byte codes included in the instances of the class files. The Java virtual machine translates the byte codes to native codes and causes the MPU to execute them. This interpreter is an important part that directly affects the execution speed of the BD J application. Specifically the BD J module can be implemented as an interpreter that is equipped with a JIT compiler that converts byte codes to native codes. With such a JIT compiler it is possible to speed up the interpretation. Also part of the interpreter may be implemented as hardware.

System application is a system program defined with class files and is located in the heap memory of the RAM . System applications include for example class loader for converting object oriented language structure stored in the class file to byte codes and loading the byte codes onto the heap memory application manager user event manager for processing events to be output to the application benchmark score setting unit and so on.

This concludes the explanation of the system application . The following explains the details of the benchmark score.

The text files shown in contains for example benchmark scores of the hardware and the firmware which are incorporated in the playback apparatus . The benchmark score is a barometer of performances of the hardware and the firmware incorporated in the playback apparatus. The benchmark test is a test for calculating or measuring the barometer. The benchmark program is a program used for the benchmark test. The benchmark test for the playback apparatus pertaining to the present invention is performed before shipment of the playback apparatus . The manufacturer executes the benchmark application on the playback apparatus before the shipment. The text files incorporated in the firmware is the results of the benchmark text by an authorized application for example. The results are written in the text files as the benchmark scores. At this moment the digital certificate for the benchmark score the organization ID of the organization that has issued the benchmark program used for the calculation of the benchmark program and the application ID of the benchmark program.

The incorporated benchmark score is for example a turn around time from when a processing request is made to the hardware via the firmware and when the hardware completes the processing and returns a response. When the firmware is executed for the first time the benchmark score is stored into the application data area with use of the fixed path. This fixed path is for example the combination shown in that is ADA Cert ID Organization ID Application ID. The Cert ID the Organization ID and the Application ID can be respectively identified based on the digital credential for the benchmark score the organization ID of the organization that has issued the benchmark program used for calculating the benchmark score and the application ID of the benchmark program. The benchmark score is identified by the fixed file path after checking of whether it is tampered with and checking of the validity of the digital credential for example. The fixed file path is identified based on the combination of the Cert ID of the root certificate e.g. held in the playback apparatus corresponding to the provider root certificated identified based on the digital credential mentioned above the organization ID mentioned above and application ID of the benchmark program. Thus even if the firmware is updated the fixed file path does not change. Also the benchmark score does not change as long as the firmware is not updated. If the firmware is updated a new benchmark score as new test results will be written into the application data area.

Before the shipment of the playback apparatus the manufacturer conducts a benchmark test on the playback apparatus with the firmware incorporated therein. The benchmark score as the result of the benchmark test will be incorporated into the firmware . The benchmark score incorporated in the firmware will be written into the application data area. Further for example if the firmware of the playback apparatus installed in the user s house is updated the benchmark score incorporated in the firmware will be recorded at an intended location in the application data areas at the first execution of the updated firmware . The location is specifically the application data area identified by the fixed file path ADA Cert ID Organization ID Application ID which is shown in .

For example the following are included in the hardware processing procedures of the benchmark test performed via the firmware 

 a expansion of compressed image data such as JPEG and PNG loading of such compressed image data to the memory loading of audio data to the memory and loading of font data 

 c calculations such as floating point operations and trigonometric function operations rectangular image rendering including or not including a blending image magnification and minification polygon rendering sprite rendering character strings rendering and so on.

These processing procedures are officially authorized as processing procedures that can be used for the benchmark test and can be identified by unique IDs. In the case such processing procedures correspond to available API methods the function names of the API methods may be used as the IDs.

1 the turn around time between a request for expanding compressed image data such as JPEG data and PNG data and completion of the processing 

4 the turn around time between a request for switching of AV streams and completion of the processing 

6 the turn around time between a request for floating point operations trigonometric function operations etc. and the completion of the processing 

7 the turn around time between a request for rectangular image rendering and completion of the processing and

8 the turn around time between a request for image magnification and minification polygon rendering sprite rendering character strings rendering etc. and completion of the rendering

are to be incorporated into the firmware as the benchmark scores. These incorporated results of the benchmark test can be used as barometers showing the amount of the load on the playback apparatus when the playback apparatus presents in the BD J mode the combination of the character animation and the movie to the user as shows for example. According to the barometers the playback apparatus can dynamically change the processing load due to the character animation as shows.

The benchmark scores are structured from for example IDs of processing procedures used for the benchmark test and the measured turn around times in one to one association. The texts files incorporated in the firmware are in list form including pairs of an ID of a processing procedure used for the benchmark test and a measured turn around time. Using the IDs it is possible to acquire the turn around time of any of the processing procedures.

If such IDs are officially defined the service applications can make a request for reading of the text files containing the benchmark scores by using the IDs as arguments. With such a structure it is also possible to pass any of the benchmark scores contained in the text files corresponding to the arguments to the service applications.

It is preferable that the turn around times are represented with time accuracy at 45 kHz level. This is because each of PES packets included in the AV stream is given a PTS Presentation Time Stamp and a DTS Decode Time Stamp and the playback apparatus includes an STC System Time Clock that operates with time accuracy of 1 45 000 sec. The benchmark scores created with the time accuracy for the STC realize precise synchronization with the playback of the AV stream. Note that since the In Time and Out Time of the playlist information is defined with the time accuracy of 45 kHz the turn around times represented with time accuracy corresponding to 45 kHz are preferable for changing the processing load on the playback.

Such benchmark scores are incorporated into the firmware by the manufacturer when the firmware is completed in the development environment for the playback apparatus . The following explains how the manufacturer has obtained the benchmark scores.

The development computer is equipped with software including IDE and ADK and provides development environment via the LAN for the firmware to the users. The IDE Integrated Development Environment is structured from for example a compiler for building a system application.

The ADK Application Development Kit is a development environment for realizing debugging of the system application with use of the mechanism of the JPDA Java Platform Debugger Architecture .

The data transfer between the playback apparatus and the computer is performed via the serial port and Socket between them. The Socket is a communication path in the session layer located on the IEEE 802.3 Ethernet IP TCP UDP. Since the IEEE 802.3 Ethernet IP TCP UDP is adopted in the system application the Socket can be used as the transmission path for the debugging as a matter of course.

This drawing is based on and the differences from the layer model shown in is that the benchmark application runs on the BD J module and the computer is connected with the playback apparatus . The benchmark application is read from for example one of the BD ROM drive the HD drive and the card drive and runs on the BD J module . The computer is operated by an operator belonging to the manufacturer.

The U shaped arrow in this drawing schematically shows the process performed from when the benchmark application makes a request for processing to the hardware via the firmware to when the processing completes and a response is returned to the benchmark application . The benchmark application measures the turn around time at the time that is before the shipment of the playback apparatus for each of the various functions that the hardware can perform and exports the measured turn around times to the computer connected externally. The computer accumulates the measured values on a database on the hard disk and generates text files containing a plurality of measured values step by step. When the benchmark test completes for all the series of functions and the accumulation of the measured values completes the computer integrates the obtained text files with the executable files and the class files to obtain the firmware .

As explained above the firmware of the playback apparatus completes through the measurement of the turn around times and the incorporation of the benchmark scores as the results of the measurement.

The text files which contain the benchmark scores are integrally managed with the executable files and the class files that constitute the firmware . These files namely the text files the executable files and the class files may be stored in a single ZIP file for example.

At the booting the text files which contain the benchmark scores are read from the firmware to the RAM together with the executable files and the class files and allocated in the resident areas in the RAM and mapped in the memory space of the MPU . The text files which contain the benchmark scores are integrated with the executable files and the class files and such a state of the benchmark scores is described as incorporated in the firmware in this Description.

As a removable medium for storing the new firmware an SD memory card and a CD R are available for example.

A WWW site on a WWW server managed by the manufacturer which is an official WWW site of the manufacturer notifies bugs and the latest update state of the firmware of the playback apparatus . In the case the playback apparatus is connected with a network the playback apparatus always monitors the update state. When the update of the firmware is notified the playback apparatus downloads a ZIP file containing the new firmware via the network and writes it into the removable medium. As described above the executable files the class files and so on constituting the firmware are contained in the Zip file together with the text files. Thus the playback apparatus can complete the preparation of the updating by writing the ZIP file containing the new firmware into the removable medium.

In the case the playback apparatus is not connected with the network and is used standalone the personal computer that belongs to the user monitors for the playback apparatus the update state of the firmware of the playback apparatus . Such monitoring can be automatically performed by the personal computer if a software kit provided together with the playback apparatus has been installed in the personal computer. When the update of the firmware is notified the personal computer downloads the ZIP file containing the new firmware via the network and writes it into the hard disk thereof.

The preparation for the updating of the firmware completes when the ZIP file containing the new firmware is written into the removable medium. The ZIP file containing the new firmware is given a particular characters numbers magic numbers as the file name so that it can be distinguished from other files. The playback apparatus updates the firmware when a removable medium storing the file having the magic numbers is mounted. This concludes the explanation of the updating of the firmware by the user.

The following explains the boot loader which is one of the software components of the playback apparatus .

When the flag indicates 2 it shows that the initial execution of the firmware and the writing of the benchmark scores into the application data area have been completed.

The firmware startup unit is one of programs that can operate in the privilege mode of the MPU . When the power switch of the apparatus is pressed and accordingly the power unit supplies the power to the MPU and the devices and these pieces of hardware are started up the firmware startup unit loads the firmware stored in the flash ROM into a memory e.g. the firmware resident area in the RAM shown in so that the MPU can executes the firmware . At this loading the firmware startup unit judges whether the value of the flag is 0 or not in order to judge whether the execution of the firmware is the initial execution or not. If the execution is the initial execution the firmware startup unit sets 1 to the flag. The initial execution of the firmware is the initial execution of the firmware by the manufacturer after the completion of the firmware by the manufacturer and the initial execution of the firmware after the updating of the firmware by the user.

The firmware update unit is one of programs that can operate in the privilege mode of the MPU . When the power switch of the apparatus is pressed and accordingly the power unit supplies the power to the MPU and the devices and these pieces of hardware are started up the firmware update unit judges whether a removable medium containing the new firmware is mounted or not. If such a removable medium is mounted the firmware update unit checks whether the removable medium contains a files whose file name is a magic number. A magic number is a particular number showing that the removable medium contains the updated firmware . If the removable medium contains a file having such a magic number the firmware update unit reads the new firmware from the removable medium and overwrites the firmware with the new firmware . After the overwriting the firmware update unit updates the flag to 0 .

This concludes the explanation of the boot loader . The following explains the details of the system application again with reference to . The system application shown in FIG. C includes descriptions of an application manger and a benchmark score setting unit . Among the components of the system application the explanations of the class loader and the user event manager are omitted here because they have been explained above.

The application manager performs the application signaling based on the application management table AMT of the BD J object. Specifically when switching between playback target titles occurs during the playback by the playback apparatus the application manager refers to the application management table of the BD J object that corresponds to the new title and judges which BD J application whose life cycle is defined by the new title. Then the application manager instructs the class loader to load the judged BD J application. As processing procedures particular to the present embodiment the application manager runs the benchmark score setting unit so as to be executed by the BD J module when a BD ROM is loaded to the playback apparatus and the playback apparatus is started up.

The benchmark score setting unit which corresponds to the initialization unit is one of programs that can operate in the privilege mode of the MPU . The benchmark score setting unit judges whether the flag which indicates whether the execution of the firmware is the initial execution or not is 0 or not. If the flag shows 0 the benchmark score setting unit reads the benchmark scores from the firmware in the flash ROM and writes the scores into the application data area.

The arrow schematically shows the paths via which the benchmark scores are provided from the flash ROM to the benchmark score setting unit . The benchmark scores are read from the flash ROM according to issuance of a particular read command read request that can be executed only in the privilege mode of the MPU and are passed to the benchmark score setting unit .

The arrow schematically shows the paths via which the benchmark scores are provided from the benchmark score setting unit to the persistent area i.e. application data area . The benchmark scores are written into the application data area according to a write request that uses a fixed file path ADA Cert ID Organization ID Application ID . The service application issues the write request by calling the API method for file reading. The access destination pertaining to the write request can be specified by a fixed file path.

As explained above the benchmark scores that are incorporated in the firmware are provided to the playback apparatus and to be stored into the application data area when the firmware is executed for the first time.

In the case the Cert ID is 0g1a24ed the Organization ID is 4 and the Application ID is 5 the benchmark scores having the directory file structure shown in will be stored. shows an example directory file structure in the case the Cert ID is 0g1a24ed the Organization ID is 4 and the Application ID is 5 .

In the case 4 of the Organization ID shows an example standards promotion group of the BD playback apparatuses and 5 of the Application ID is an example of the benchmark application the benchmark scores will be read via the file path represented as the combination of the ID of the organization and the ID of the benchmark application .

The arrow shows the provision path of the read request issued by the service application. The service application issues the read request by calling the API method for file reading. The access destination pertaining to the read request can be specified by a fixed file path. The drawing shows that the read request using the fixed file path is passed to the access control mechanism and used by the access control mechanism to perform the authorization check.

The arrow schematically shows the paths via which the service application provides the digital credential to the access control mechanism . The digital credential will be passed to the access control mechanism .

The arrow schematically shows the provision paths of the benchmark scores from the application data area to the service application. If the service application has found to have a valid right the system application accesses the persistent area in the local storage according to the read request. As a result the benchmark scores will be passed to the service application as the arrow shows.

This concludes the explanation of the components of the system application . The following explains the processing procedures performed by the firmware update unit and the firmware startup unit .

After that the firmware startup unit initializes the MPU Step S initializes the basic devices Step S and transfers the firmware from the flash ROM to the RAM Step S . Finally the firmware startup unit initializes the firmware and starts up the firmware Step S .

The processing procedures of Steps S to S is for reading text files containing the benchmark scores from the firmware Step S writing the read text files into the application data area by using the fixed file path represented as the combination ADA Cert ID Organization ID Application ID Step S and setting 2 to the flag Step S .

The processing procedures of Steps S and S are for checking whether the benchmark scores exist or not by using the file path Step S and if the benchmark scores exist finishing the processing but if the benchmark scores do not exist reading benchmark scores from the firmware and writing them into the application data area Step S to Step S .

According to this example as explained above the benchmark scores are incorporated in the firmware and when the firmware is executed for the first time the benchmark scores are written into the application data area. Thus the BD J application can change the processing load according to the performance of the hardware simply by accessing the application data area.

Since the benchmark scores are incorporated in the firmware even if the firmware is irregularly updated the benchmark scores corresponding to the latest firmware will be provided to the playback apparatus .

The present embodiment specifically discloses how the access control mechanism checks the access right. Such an access right check is performed on the digital credential.

The digital credential is provided by a distributor of a benchmark program or benchmark scores or a digital credential to a content author application creator that requests the digital credential. For providing the digital credential the following distribution operations are required.

B The content author requests the distributor that the public key is provided together with the digital credential. At this moment the content author provides the distributor with a certificated hash value.

Through these operations the distributor can obtain a valid digital credential. The BD J application having the valid digital credential can access the benchmark scores stored in the application data area. However no BD J application not having the valid the valid digital credential can access the benchmark scores stored in the application data area.

Such a digital credential is incorporated in an archive file and recorded on the BD ROM and provided to the playback apparatus . For the verification of the functional segments the BD.ROOT.CERTIFICATE disc root certificate shown in and other files included in the archive file are required in addition to the digital credential explained above. The following explains the internal structure of the archive file.

The Java archive file xxx.JAR stores a plurality of files in a directory structure. illustrates an example internal structure of the contents of a Java archive file. In this structure the root directory has XXXX.class files and a META INF directory immediately below the root directory. The META INF directory contains files called MANIFEST.MF SIG BD.SF SIG BD.RSA and bd.XXXX.perm. Hereinafter these files will be described one by one.

The class files contain a class structure described in an object oriented language such as the Java language.

The manifest file is provided in correspondence with a digital certificate. The manifest file contains the attributes of the Java archive file and the hash values of the class files and data files contained in the Java archive file. The attributes of the Java archive file include an application ID assigned to a BD J application which is an instance of the class files and the name of a class file to be executed first for execution of the Java archive file. In the case where the manifest file does not contain the two attributes of the Java archive file described above the BD J application which is an instance of the class files contained in the Java archive file is not executed.

The signature data contained in the SIG BD.SF is generated by applying a signature process to the SIG BD.SF. The signature process is carried out using a secret key that corresponds to a public key in the digital certificate chain contained in the SIG BD.RSA.

The digital certificate chain refers to a sequence of digital certificates. The first certificate root certificate in the sequence sings the second certificate. Similarly the n th certificate in the sequence signs the n 1 th certificate. The last certificate in the digital certificate sequence is referred to as a leaf certificate . With the digital certificate chain each certificate verifies the next certificate in the root to leaf order. Thus all the certificates in the chain are verified.

The root certificate is identical to the disc root certificate contained in the BD.ROOT.CERTIFICATE file.

The leaf certificate includes an organization ID. The SIG BD.SF is stored in the format called PKCS 7 which is a file format used to store one or more signatures and digital certificates. The PKCS 7 format is described in RFC2315 published by IETF Internet Engineering Task Force . RFC2315 is available for reference at http www.ietf.org rfc rfc2315.txt.

Normally the SIG BD. SF contains one digital certificate chain. Yet in the case where authorization is provided as in a later described example two digital certificate chains are generated. The two digital certificate chains are referred to as first and second digital certificate chains. Regarding the first digital certificate chain the root certificate is the disc root certificate of the organization that receives the authorization recipient organization whereas the leaf certificate includes the organization ID of the recipient organization. Regarding the second digital certificate chain the root certificate is the disc root certificate of the organization that gives the authorization provider organization whereas the leaf certificate includes the organization ID of the provider organization. In the case where no authorization is provided the SIG BD. RSA contains a single digital certificate chain first digital certificate chain .

The detailed description of the manifest file the SIG BD. SF and the SIG BD. RSA is found in the specifications of Java archive files. The manifest file the SIG BD.SF and the SIG BD.RSA are used for the signature process and signature verification. Finally the BD J application which is an instance of the class files contained in the Java archive file and a permission request file can be singed using digital certificates. Hereinafter the manifest file the SIG BD.SF and the SIG BD.RSA are collectively referred to as signatures using digital certificates .

The bd.XXXX.perm contains information indicating what permission is given to the BD J application to be executed. More specifically the permission request file stores the following information 

Hereinafter a description of a digital credential is given. The digital credential is information used for sharing files in a specific directory belonging to a specific organization. The file sharing is enabled by giving authorization to access the files used by an application belonging to a specific organization to an application belonging to another organization. For this purpose the digital credential includes a provider organization ID identifying the organization that gives authorization to use their applications files and a recipient organization ID identifying the organization that receives the authorization.

Next b Interprocess Communication will be described. Normally a BD J application included in one Java archive file is not permitted to communicate with any other BD J applications included in other Java archive files i.e. interprocess communication is not permitted . Yet interprocess communication is possible if the bd.XXXX.perm indicates that such permission is given.

The digital credential needs to be singed to be valid. The digital credential may be singed in the PKCS 7 format. The PKCS 7 format is described in RFC2315 published by IETF Internet Engineering Task Force . RFC2315 is available for reference at http www.ietf.org rfc rfc2315.txt. The result of such a signature process is to be stored in the SIG BD.SF as a hash value of the provider root certificate.

This concludes the description of the bd.XXXX.perm. Now root certificates are described in greater detail.

The MANIFEST.MF contains a hash value acquired by performing the signature process on the class file XXXX.class. The SIG BD.SF contains a hash value acquired by performing the signature process on the MANIFEST.MF. The SIG BD.RSA contains a hash value acquired by performing the signature process on the SIG BD.SF arrow h . Thus by verifying the hash values and checking whether the hash values are identical the playback apparatus is enabled to judge whether the Java archive file is valid or has been tampered. Since no authenticity is provided in this specific example the bd.XXXX.perm file is not illustrated in the figure.

The root certificate of the provider organization included in the digital credential that is contained in the bd.XXXX.perm file is identical to the root certificate in the second digital certificate chain contained in the SIG BD.SF file arrow d . Further the provider organization ID included in the digital credential is identical to the organization ID indicated in the leaf certificate of the second digital certificate chain in the SIG BD. SF arrow d . The recipient application ID included in the digital credential is identical to an application ID that is contained in the bd.XXXX.perm file but not in the digital credential arrow d .

The MANIFEST.MF file contains a hash value calculated from the XXXX.class file. The SIG BD.SF file contains the hash value calculated from the MANIFEST.MF file. The SIG BD.RSA file contains a hash value calculated from the SIG BD.SF file arrow h . Thus by verifying the signatures and checking whether the hash values are identical the playback apparatus is enabled to judge whether the Java archive file is valid or has been tampered. It should be noted that the present embodiment judges whether the two root certificates are identical by comparing hash values calculated from the respective root certificates to see if the two hash values match. In addition it is a common practice that once calculated the hash values are stored in memory or the like and supplied for further use without another calculation. The calculation of a hash value and fetching of a hash value from memory are both referred to as acquisition of a hash value.

Step S is for judging whether there has been the access request that uses a fixed file path represented as a combination of ADA Cert ID Organization ID Application ID . If judged affirmatively the BD J application executes the Steps S to S. If judged negatively operations according to the request will be performed. Steps S to S are for extracting digital credential from the archive file of the request source BD J application Step S checking the access right of the request source service application by using the digital credential Step S and judging whether the verification has succeeded or not Step S . If the verification has succeeded the text files as the request target will be read via the file I O of the virtual file system and passed to the request source BD J application Step S . If the verification has failed the request source BD J application is not allowed to read the text files as the request target via the file I O of the virtual file system and the processing finishes as an exceptional case.

With the structure explained above whether the access request that uses the fixed file path represented as a combination of ADA Cert ID Organization ID Application ID has been made or not is judged. However it is acceptable that the an access request that uses a fixed file path represented as a combination of Organization ID Application ID has been made or not is judged and in the case the verification succeeds the file I O of the virtual file system specifies the Cert ID by using the certificate ID of the provider root certificate specified based on the digital credential and passes to the request source BD J application the text files that correspond to the fixed file path represented as the combination of ADA Organization ID Application ID by using the specified Cert ID and the combination of Organization ID Application ID described above.

With the stated structure it is possible to restrict applications from accessing the request target text files and to increase the confidentiality level of the certificate ID and the provider root certificate corresponding to the certificate ID or the leaf certificate .

Step S is performed for checking whether the hash value of the recipient root certificate of the digital credential is the same as the disc root certificate included in the BD.ROOT.CERTIFICATE of the BD ROM.

Step S is performed for checking whether the recipient organization ID of the digital credential is the same as the recipient organization ID described in the leaf certificate of the chain whose root is the disc root certificate.

Step S is performed for checking whether the recipient application ID of the digital credential is the same as the application ID of the service application.

Step S is performed for checking whether the directory name located at the beginning of the file path that specifies the provided file is the same as the provider organization ID.

Step S is performed for checking whether the signature included in the digital credential namely the hash value of the provider root certificate is correct or not. This check is realized with calculation of the hash value of the digital credential and judgment on whether the obtained hash value is the same as the hash value of the provider root certificate included in the digital credential.

Step S is performed for checking whether the hash value of the root certificate of the SIG BD.SF which is the signature of the digital credential is the same as the hash value of the provider root certificate described in the digital credential.

Step S is performed for checking whether the organization ID of the leaf certificate of the SIG BD.SF which is the signature of the digital credential is the same as the provider organization ID described in the digital credential.

Through these judgment steps if the verification of the digital credential succeeds the service application that has made the access request will be allowed to access the benchmark scores recorded in the application data area according to the access method described in the digital credential.

In the digital credential in permits access to the file that contains two types of benchmark scores namely 4 5 scores.txt and 4 5 scores2.txt . The certificate permits only read access to the 4 5 scores.txt and read and write access to the 4 5 etc scores2.txt .

In this way by permitting the service application verified based on the digital credential to have not only read access but also write access it is possible to execute the benchmark test without keeping the user waiting and enable the service applications that have the digital credential to share the scores of the test.

The first embodiment reads the benchmark scores incorporated in the firmware and writes the scores into the application data area. On the other hand the second embodiment does not copy the benchmark scores incorporated in the firmware into the application data area of the local storage. Instead the benchmark application expands the scores in the memory e.g. the RAM in at the startup of the firmware .

Such expansion is performed in the following manner for example Using the heap area management function the benchmark application secures a heap memory in an empty area of the memory and writes the benchmark scores in the secured heap memory. Afterwards the benchmark application notifies the other service applications about that the benchmark scores have been written through the interprocess communication and enables the other service applications to use the benchmark scores in the heap memory.

Such a data flow reduces the delay time caused by the copying of the benchmark scores to the application data area in the local storage. Also in the case the application data area is structured as an SD memory card or the like it is possible to reduce the number of writings into the SD memory card.

In the example explained above the benchmark scores are written into the heap memory of the RAM shown in for example. However since the benchmark scores are incorporated in the firmware the benchmark scores may be loaded into the resident area for the firmware in the RAM together with the firmware at the time of loading of the firmware from the flash ROM when the power switch of the present apparatus is pressed and accordingly the power unit supplies the power to the MPU and the devices and these pieces of hardware are started up.

Also in the example explained above the benchmark application notifies the other service applications about that the benchmark scores have been written through the interprocess communication and enables the other service applications to use the benchmark scores in the heap memory. However the structure of the present invention is not limited to such a structure. Upon writing the benchmark scores into the RAM the benchmark application may create position management information not illustrated that contains the recording position e.g. address of the benchmark scores in the RAM . When an application program makes a request for accessing the benchmark scores the benchmark application may read the benchmark scores in the RAM according to the position management information and pass the benchmark scores to the application program.

If this is the case upon receipt of the file path specified by the BD J application program the file I O program that realizes the Java I O method described in the first embodiment refers to the position management information and reads the benchmark scores expanded in the RAM and returns the benchmark scores to the BD J application program.

In addition to the recording position of the benchmark scores in the RAM the position management information not illustrated may also include information showing correspondence with the original recording position e.g. the position specified by the fixed file path represented by the combination ADA Cert ID Organization ID Application ID .

With the stated structure even in the case the application program designates the original recording position e.g. the position specified by the fixed file path represented by the combination ADA Cert ID Organization ID Application ID to make a request for reading the benchmark scores the file I O of the virtual file system of the firmware can read the benchmark scores from the flash ROM with reference to the position management information not illustrated and pass the read benchmark scores to the application program that has made the request.

As a result it is possible to reduce the number of writings into the local storage in the case the local storage including the application data area as the original recording position e.g. the position specified by the fixed file path represented by the combination ADA Cert ID Organization ID Application ID has a limitation of the number or writings.

Also it is possible to reduce the delay time caused by the copying of the benchmark scores to the application data area in the local storage. Further in the case the application data area as the original recording position is structured from a semiconductor memory card it is possible to reduce the number of overwritings into the semiconductor memory card.

In the second embodiment in the case the new firmware is provided via the removable medium the benchmark scores in the application data area are automatically overwritten. On the other hand the present embodiment compares the version of the benchmark scores already stored in the application data area and the version of the benchmark scores incorporated in the new firmware when the firmware is updated. Only in the case the benchmark scores written in the RAM is newer the benchmark scores in the new firmware will be written into the application data area. Since the benchmark scores incorporated in the firmware are in the form of text files the time and date of the creation or the update of the text files may be used as the version of the benchmark scores. Alternatively the time and date at which the benchmark is performed may be recorded in the text files and this time and date may be used as the version of the benchmark scores.

With the stated structure in the case the application data area as the original recording position is structured from a semiconductor memory card it is possible to reduce the number of overwritings into the semiconductor memory card.

The present embodiment specifically discloses the processing procedures of the benchmark test performed by the benchmark application . is a flowchart showing the processing procedures of the benchmark test performed by the benchmark application .

This flowchart has a loop structure in which Steps S to S are repeated for each of the processes performed by the hardware shown in the first embodiment.

Calls for the API methods for executing the hardware processes are described in the benchmark application and Steps S to S are repeated for each of the calls for the API methods.

In the following explanation the target process among the processes to be covered is called process X and a measurement time namely the turn around time for the process X is called measurement time X. In Step S the benchmark application determines the process X and initializes the measurement time X to be 0. In Step S the benchmark application calls the API method for executing the process X. Specifically the benchmark application calls the API method for reading the data for benchmark score evaluation from the BD ROM and the local storage to the RAM the API method for decoding such data and the API method for making the MPU calculate a computation for the benchmark score execution.

Next the benchmark application executes the loop from Step S to Step S. Step S is for judgment on whether the process requested with the API method call has been completed or not. If the process has not been completed the benchmark application waits for a unit time W of the turn around time Step S .

The unit time W is for example the clock time used for the MPU executing several hundreds of instructions which is determined based on the accuracy of the turn around times of the benchmark scores. For example in the case the time accuracy of the turn around times corresponds to 47 kHz the operation clock time of the MPU is smaller than the accuracy level of the turn around time divided by several hundreds. Thus the benchmark application waits for the unit time W of the turn around time in Step S.

On elapse of the unit time the benchmark application adds the unit time to the measurement time X to update the measurement time X and returns to Step S. While the benchmark application waits for the completion of the process X with repeating Steps S to S the measurement time X the measurement time X increase by the unit time W increments.

On completion of the process X when receiving a notification event showing the completion the benchmark application exports the measurement time X to which the unit times W have been added to the development computer in association with an identifier of the process X. The development computer acquires the benchmark score of the process X by listing the identifier of the process X and the measurement time X. Repetition of these procedures results in the text files in which the identifiers of the processes and the measurement times are listed. In such a benchmark test the time accuracy of the benchmark scores is determined by the unit time W.

Here the Java platform as the subject of the execution of the BD J application is of an event driven type. In some cases the Java platform returns a response immediately after decoding the API method and issuing an instruction to a sub layer even if the hardware process has not been completed. As a result the benchmark application can not perform precise time measurement for the benchmark test. To avoid this it is preferable that an API method for the benchmark test is prepared and the Java platform returns an event precisely at the completion of the process when this API method is called. This structure allows more precise measurement of the turn around times.

As explained above the present embodiment is capable of acquiring benchmark scores with the time accuracy at the certain level due to the benchmark application measuring the clock time between the calling of the API method and the completion of the requested process.

In this embodiment a real time operating system real time OS is included in the firmware as a component thereof. Real time OSs are capable of estimating the worst case execution time. This feature is suitable for realizing the real time AV playback.

The following explains the components of the real time OS incorporated in the firmware . The real time OS includes a kernel middleware and a device driver. The kernel the middleware and the device driver are the components of the firmware .

The kernel performs system call processing handler input processing for starting up an interruption handler by using an interruption signal and handler output processing. The kernel has a task scheduler. In the real time OS the BD J application which is explained in each of the embodiments above is handled as an application task by the kernel. In the real time operation system calling of an API method by the application task is realized with use of a system call mentioned above. The task scheduler sequentially generates tasks and the MPU is provided with the tasks and executes them. To generate the tasks the task scheduler generates a task control block for a program to be executed and puts the block in the waiting queue.

When the task issues the system call for the device input output request the kernel secures the memory block in the memory pool and generates within the memory block a parameter block used for the calling. The kernel calls the device driver by using as the arguments the start address of the parameter block and the address of a device table that describes device information.

The middleware includes a group of APIs Application Programming Interfaces for realizing the system calls. On assumption of the existence of the kernel the middleware realizes functions of for example a browser a files system video playback and audio playback. The application can control the devices such as a decoder via the middle ware. In the real time OS the virtual file system the access control mechanism the playback engine the playback control engine and the BD J module explained in the first embodiment are regarded as this middleware.

The device driver includes interruption handler unit interruption task unit and request processing unit . The device driver is mapped in the system area in the memory space and operates in the privilege mode.

The request processing unit registers the parameter block with the input output cue and enables interruption and then transfers control to the kernel.

The interruption handler unit receives interruption signal from the hardware and performs requested inputs outputs with the devices. On completion of the scheduled inputs outputs the interruption handler unit disables interruption and starts up the interruption task. If the inputs outputs have not been completed the interruption handler transfers control to the device driver. When another input output request is made the interruption handler is started up again and the rest of the inputs outputs will be completed.

The interruption task notifies the kernel of the completion of the inputs outputs by a system call that uses as an argument input completion information. Upon receipt of such a notification the kernel starts up the request source task.

In the case the calling of the API methods is realized with the system call it is preferable that the benchmark application measures each turn around time from when the application task requests the system call to when the device executes the processing and returns a response. The manufacturer incorporates the measured times as the benchmark scores into the firmware .

As described above accesses to the drive and the AV playback are realized with the system calls of the real time OS. Thus it is possible to retain the real time performance. As the benchmark application measures the benchmark scores by using the real time OS the benchmark scores will be accurate based on the real time AV playback.

In the explanations above when the power switch of the apparatus is pressed and accordingly the power unit supplies the power to the MPU and the devices and these pieces of hardware are started up the firmware startup unit loads the firmware stored in the flash ROM into a memory e.g. the firmware resident area in the RAM shown in so that the MPU can executes the firmware . However the structure of the present invention is not limited to that. The MPU may directly read the firmware stored in the flash ROM and execute it.

In this regard the benchmark application may notify the other service applications of the benchmark scores incorporated into the firmware stored in the flash ROM through the interprocess communication and enable the other service applications to use the benchmark scores in the flash ROM .

Also the benchmark application may create position management information not illustrated that contains the recording position e.g. address of the benchmark scores in the flash ROM . When an application program makes a request for accessing the benchmark scores the benchmark application may read the benchmark scores in the flash ROM according to the position management information and pass the benchmark scores to the application program.

In addition to the recording position of the benchmark scores in the flash ROM the position management information not illustrated may also include information showing correspondence with the original recording position e.g. the position specified by the fixed file path represented by the combination ADA Cert ID Organization ID Application ID .

With the stated structure even in the case the application program designates the original recording position e.g. the position specified by the fixed file path represented by the combination ADA Cert ID Organization ID Application ID to make a request for reading the benchmark scores the file I O of the virtual file system of the firmware can read the benchmark scores from the flash ROM with reference to the position management information not illustrated and pass the read benchmark scores to the application program that has made the request.

As a result it is possible to reduce the number of writings into the local storage in the case the local storage including the application data area as the original recording position e.g. the position specified by the fixed file path represented by the combination ADA Cert ID Organization ID Application ID has a limitation of the number or writings.

The present invention has been explained above based on the best mode for carrying out the invention at the time of the application. However following technical features can be further improved or modified. It should be noted that whether to implement the present invention as shown in the embodiments above or improve modify the present invention as follows depends on the person who carries out the invention.

In the first embodiment the benchmark scores are contained in text files. However there is a problem that the text filers are easy to read. When incorporating the benchmark scores into the firmware it is preferable that the benchmark scores are contained in binary files.

As an arbitrary component the playback apparatus may include a rendering engine. A rendering engine includes pieces of basic software such as Java 2D and OPEN GL and renders computer graphics according to instructions from the BD J applications and outputs the computer graphics to the plane memory. To speed up the rendering it is preferable that the playback apparatus additionally includes a graphics accelerator as an arbitrary hardware component. Also a coprocessor that performs floating point operations i.e. Floating Pointed Coprocessor may be included.

In the embodiments above the analysis and the verification of the digital credential is performed when the BD J application makes a request for accessing the benchmark scores. However such verification of the digital credential may be performed in advance at the startup of the BD J application the startup of the firmware and so on.

In the explanations above it is assumed that the recipient organization is a creator of contents including service applications of the BD ROM and so on. However the recipient organization may be any organization as long as it signs the BD J applications that access the benchmark scores independently from the contents creator. In such cases the recipient organization ID is the ID number indicating the organization. In this way it is obvious that any organization independent from the organization that creates contents can be determined as the recipient organization.

In the explanations above the firmware startup unit the firmware update unit and the benchmark score setting unit are adopted in the playback apparatus that plays BD ROMs. However the application range of the devices is not limited to such a BD ROM playback apparatus . For example they may be applied to a playback apparatus that has a recording function. If this is the case the benchmark scores may be shared among the playback function and other functions. For example in the case the firmware startup unit the firmware update unit and the benchmark score setting unit are adopted in a personal computer that has the playback function the benchmark scores under that state where the web browser and the word processor are used may be incorporated in the firmware .

The incorporation and the writing of the benchmark scores explained above are applicable to any apparatuses that can display the video playback in association with execution of BD J application. For example they are applicable to a playback apparatus to which BD J applications that are incorporated in a broadcast wave or a network stream are provided.

In the embodiments above the Java language is used as an object oriented programming language. However instead of the Java language another programming language used in the UNIX OS and so on such as B Shell Perl script and ECMA script may be used.

In view of accesses from BD J applications the benchmark scores in the above embodiment are located in the application data area. However the recording device for storing the benchmark scores may be realized in any form. That is the recording device may be realized as a non volatile recording device such as a hard disk and a flash memory or a volatile recording device such as the DRAM .

The benchmark application that use the benchmark application may be downloaded from a WWW server instead of a BD ROM and be written into the local storage of the playback apparatus . In such downloading a root certificate that is included in the BD.ROOT.CERTIFICATE and is identical with the root certificate written as the disc root certificate is to be stored in the SIG BD.SF and included in the Java archive file. As a result also in the case the playback apparatus is provided with the Java archive file by downloading it the playback apparatus can confirm the validity of the Java archive file by using the disc root certificate assigned to the BD ROM.

In the embodiments above it is assumed that the BD J applications recorded on the BD ROM constitutes a movie work. However they may constitute other than a movie work as long as the applications are not those installed in the local storage for use but are to be used on the BD ROM. For example they may be applications that constitute game software. Also although BD ROMs are adopted as recording media in this embodiment other recording media may be adopted as along as they are with copyright protection.

Also although it is assumed that the prerecording technique is used for recording of the AV stream and the playlist information onto a BD ROM and provided to the user the real time recording technique may be used for the recording and the AV stream and the playlist information may be recorded onto a BD RE.

If this is the case the AV stream may be a transport stream resultant from real time encoding of analogue input signals performed by the recording apparatus or a transport stream result from partializing of the transport stream that is input from the recording apparatus.

For the real time recording the recording apparatus generates on the memory the Clip information and the playlist information explained in the embodiments above while recording the AV stream. After completing the recording of the AV stream the recording apparatus writes the generated Clip information and playlist information into the recording medium. Through these operations it is possible to allow home use recording apparatuses and personal computers having a recording apparatus function to generate the Clip information and the playlist information explained in the embodiments above without use of an authoring system. The generated AV stream Clip information and playlist information may be written into a write once type recording medium.

In the case the service application is a client program and makes a request for processing to the server apparatus on the network it is preferable that the benchmark score is represented as a turn around time from when the request is made to when the processing completes and a response is returned. The processing request to the server apparatus mentioned above causes overheads in the protocol stack of the client and overheads in the protocol stack in the server apparatus. These overheads affect the turn around time. In this way in the case such overheads occur in the client and the server the service application can adjust the processing load according to the amount of traffic on the network by incorporating into the firmware the benchmark scores to which the effect of the overheads has been added and writing them into the application data area.

Here in the protocol stack each layer has its own buffer and copies a packet received from an upper layer to itself and adds to the packet data that is unique to the layer. Examples of such protocol stack are one consisted of Socket TCP UDP IP and Ethernet IEEE 802.3 one consisted of SPX IPX token ring IEEE 802.5 and one consisted of NetBEUI FDDI TPDDI ANSI X3T9.5 . The service applications acquire network file system information via the protocol stack so that they can accesses drives on the network in the same manner as the local drive.

The benchmark scores are not limited to those measured by the benchmark application . For example values derived from a standard player model of the playback apparatus may be adopted. In the standard player model of the playback apparatus the transfer rates for transferring TS packets from the BD ROM to the buffer are described in detail. Thus many of the benchmark scores can be uniquely derived from the transfer rates that have been defined.

Also the benchmark scores may be categorized into a plurality of classes such as a class of scores unique to the manufacturer a class of scores unique to the product and a class of standardized scores and the service applications may use these classified scores.

The benchmark scores incorporated in the firmware may be written into the application data area every time the playback apparatus is powered on and the firmware is started up. As a result it is possible to ensure that the application data area always contains benchmark scores. Although this increases the frequency of writing of the benchmark scores the starting delay of the service application is still shorter than the case of executing the benchmark every time the application is started up.

Each hash value used in the present embodiment is generated by applying a secure hash function such as SHA 1 and MD5. With a secure hash function it is practically impossible to find different data pieces that would result in the same hash value.

The hash value of a root certificate described in the present embodiment may not have to be calculated from the entire root certificate. The hash value may be calculated at least from a public key contained in the root certificate. The disc creator can explicitly select one or more secure hash functions used to calculate hash values to be contained in the MANIFEST.MF SIG BD.SF SIG BD.RSA files.

According to the present embodiment it is always the same secure hash function that is applied to calculate the hash values and of the provider and recipient root certificates respectively. Yet it is possible that the digital credential contained in the bd.XXXX.perm file indicates a secure hash function used in the hash value calculation.

The comparison of root certificates in Step SA may be made so as to judge whether the two root certificates are identical or whether public keys contained in the respective root certificates are identical. Alternatively it is applicable to ignore the first certificate root certificate in the SIG BD.RSA and to judge whether the second certificate subsequent to the root certificate is singed by the disc root certificate. In either way it is ensured that the disc root certificate sings the second one of the digital confiscates contained in the SIG BD.RSA. Thus the same effect is achieved in terms of security.

An attack may be made through malicious use of interprocess communication with a BD ROM illicitly created in the following manner.

1. A malicious hacker attempting an attack makes read access to an authentic BD ROM created by a BD ROM creator to fetch a Java archive file singed by a digital certificate. The Java archive file is targeted for attack.

3. The hacker writes onto the illicit BD ROM the authentic Java archive file targeted for attack and the illicit Java archive file created for making attack.

The two Java archive files are both singed by digital certificates but the respective root certificates are mutually different. If an playback apparatus gives permission for interprocess communication to BD J applications that are created by instantiating the respective Java archive files the illicit Java archive file have access to the authentic Java archive file being the attack target. As a result under control by the hacker the authorized Java archive file ends up making unexpected processing to the memory area assigned thereto.

In order to protect against such an attack as described above the comparison of root certificates is necessary. It is applicable that a single BD ROM has a plurality of disc root certificates. It is applicable to prohibit interprocess communications between BD J applications that use different root certificates. In this regard it is applicable that a single BD ROM has a plurality of disc root certificates .

The benchmark scores may be represented as turn around times with time accuracy at 45 kHz level. This is because each of TS packets included in the AV stream is given an ATS Arrival Time Stamp having a time ATC of 27 MHz and the playback apparatus includes an ATC Arrival Time Clock that operates with time accuracy of 1 27 000 000 sec. The benchmark scores created with the time accuracy for the ATC allows the processing load to be changed in synchronization with the processing of the ATS.

It is preferable that the buffer shown in the embodiments above is realized as a DPRAM. A DPRAM Dual Port RAM has two input output interfaces and either of these two interfaces can be used for data read and data write. In a DPRAM exclusive control is performed to avoid data inconsistency with use of hardware. To obtain the benchmark scores it is necessary to precisely evaluate the times required for the reading from and the writing to the buffer.

It is preferable that each of the video decoder and the audio decoder are structured from a DSP Digital Signal Processor . DSPs include fixed point type DSPs and floating point type DSPs each equipped with a sum of product arithmetic unit that includes a barrel shifter a register a multiplier and an adder. This sum of product arithmetic unit realizes smoothing processing and digital signal processing at high speed. The decoders for the compression coded video and audio are required to perform floating point operations with use of DCT coefficients. Thus such DSPs are adopted as the decoders it is possible to realize real time AV playback. To obtain the benchmark scores it is necessary to precisely evaluate the times required for the decoders to perform the arithmetic operations.

It is preferable to implement the logical device part of the hardware of the playback apparatus of excluding the mechanical elements i.e. the BD drive the HD drive and the card drive and elements to be implemented with large size memories the plane memory for video and the plane memory as a single system LSI. This is because the logical device part can be integrated in a high density. In the part to be realized as a single system LSI is illustrated in a frame. However shows only an example of the implementation as a single system LSI. The elementary buffer the video decoder the audio decoder and the graphics decoder may also be included in the single system LSI.

Generally a system LSI is composed of a bare chip packaged on a high density substrate. Alternatively a system LSI may be composed of a plurality of bare chips that is packaged on a high density substrate and has an external structure just as a single LSI this type system LSI may be referred to also as a multi chip module .

Focusing on the types of packaging there are different types of system LSIs called QFP quad flat package and PGA Pin Grid Array . QFP is a type of system LSI with pins extending from all four sides of the package. PGA is a type of system LSI package with an array of pins that are arranged on entire surface of the base of the package.

The pins act as an I O interface with other circuits. Since the pins of the system LSI act as interface by connecting other circuits to the pins the system LSI plays a roll as the core of the application executing device.

In addition to the playback apparatus such a system LSI may be incorporated into various apparatuses that is capable of playing videos such as a TV a game machine a personal computer a one segment mobile telephone and so on which expands the applicability of the present invention.

In the case where the elementary buffer the video decoder the audio decoder and the graphics decoder are also implemented as a single system LSI it is preferable that the architecture of the system LSI complies with the Uniphier architecture standard.

The system LSI complies with the Uniphier architecture standard includes the following circuit blocks.

This processor is an SIMD type processor in which a plural element processors operate identically. The computing units respectively included in the element processors operate at the same time according to a single instruction so that the decoding of pixels constituting a picture is performed in parallel.

This processor includes Local Memory Controller which includes an instruction RAM an instruction cache a data RAM and a data cache Processing Unit which includes an instruction fetch unit a decoder an execution unit and register files and Virtual Multi Processor Unit which causes the Processing Unit to perform parallel execution of a plurality of applications.

This block includes peripheral circuits such as an ARM core an external bus interface Bus Control Unit BCU a DMA controller a timer and a vector interruption controller and peripheral interfaces such as a synchronization serial interface. The firmware explained in the embodiments above is implemented as this MPU block on the system LSI.

This block performs data input output with a drive apparatus connected to an external bus a hard disk drive apparatus and an SD memory card drive apparatus via an USB interface an ATA packet interface and so on.

This block includes an audio input output a video input output and an OSD controller and performs data input output with an AV amplifier.

This block realizes reading writing of SD RAM connected via an external bus. The memory control block includes an internal bus connection unit for controlling internal connection among blocks an access control unit which performs data transfer with the SD RAM connected external of the system LSI and an access schedule unit which controls requests from the blocks to access the SD RAM .

The following shows detailed manufacturing procedures. First the manufacturer creates a circuit diagram of the part to be realized as a system LSI based on the structure diagram explained in the above embodiments and realizes the elements shown in the diagram with circuit elements ICs and LSIs.

After realizing the elements the manufacturer defines a bus which is for connecting the circuit devices the ICs the LSIs and so on and their peripheral circuits interfaces to the outside and so on. Further the manufacturer defines a connection lines power source lines grand lines clock signal lines and so on. According to these definitions the manufacturer adjusts operation timings of the elements and secures bandwidths required for the elements in view of the spec of the LSIs and completes the circuit diagram.

After completing the circuit diagram the manufacturer conducts implementation designing. Implementation designing is a substrate layout creation for determining the location on the substrate of the parts e.g. the circuit devices the ICs and the LSIs shown on the circuit diagram created by the circuit designing. Also the implementation designing determines how to realize on the substrate the wiring of the circuit diagram.

When the layout on the substrate is determined as a result of the implementation designing the manufacturer converts the result of the implementation designing to CAM data and outputs the data to an NC machine tool or the like. The NC machine tool performs SOC implementation and SiP implementation according to the CAM data. In a SoC System on Chip approach multiple circuits are integrated on a single chip. In a SiP System in Package approach multiple chips are joined into a single package with for example resin. Through the above processes a system LSI according to the present invention can be produced based on the internal structure of the playback apparatus referenced in the above embodiments.

Note that integrated circuits produced in the above manner may be referred to as IC LSI super LSI or ultra LSI depending on the packaging density.

It is also possible to achieve the system LSI by using the FPGA Field Programmable Gate Array . In this case a lot of logic elements are to be arranged lattice like and vertical and horizontal wires are connected based on the input output combinations described in LUT Look Up Table so that the hardware structure described in each embodiment can be realized. The LUT is stored in the SRAM. Since the contents of the SRAM are erased when the power is off when the FPGA is used it is necessary to define the configuration information so as to write onto the SRAM the LUT for realizing the hardware structure described in each embodiment.

Since the plane memory requires a large memory size it is not preferable to realize the plane memory with the SRAM built in the system LSI. It is preferable to realize the plane memory with an external SDRAM. Also in the case there are a plurality of plane memories it is preferable to adopt the bank memory method and map the plane memories in a part of the memory space of the MPU. To obtain the benchmark scores it is necessary to precisely evaluate the times required for the reading from and writing to the plane memories.

The target of AV playback is not limited to the one defined for the BD ROM but may be any content that is composed of a digital stream map information and PlayList information. The digital stream is a multiplexed stream obtained by multiplexing the encoded video stream and encoded audio stream that have been encoded by the encoding method such as MPEG2 or MPEG4 AVC. The digital stream is called VOB in the DVD Video Recording standard.

The map information is information that indicates relationships between the address information of the access unit referring to a playback unit that can be decoded independently in the above described video stream and the playback time on the playback time axis of the video stream. The map information is called Time Map in the DVD Video Recording standard.

The PlayList information is information that defines one or more playback sections by a pair of time information as a start point and time information as an end point.

In the case of developing the playback apparatus as a multi disc support apparatus the times required for reading the BOV from the DVD Video and decoding it may be precisely evaluated to obtain the benchmark scores. Such benchmark scores for playback of a DVD video may be incorporated in the firmware.

Since the playback apparatus pertaining to the present invention can be industrially manufactured according to the internal structure explained in the embodiments above the present invention can be used in production industries.

