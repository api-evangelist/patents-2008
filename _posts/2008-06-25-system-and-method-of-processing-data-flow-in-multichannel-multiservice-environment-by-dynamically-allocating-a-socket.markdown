---

title: System and method of processing data flow in multichannel, multi-service environment by dynamically allocating a socket
abstract: A method and system for processing a data flow in a multi-channel, multiservice environment is described. In one embodiment, a socket is dynamically allocated, the socket including a dynamically allocated service. Further, the server processes the data flow based upon the type of data being processed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07809832&OS=07809832&RS=07809832
owner: Broadcom Corporation
number: 07809832
owner_city: Irvine
owner_country: US
publication_date: 20080625
---
This patent application is a continuation of U.S. patent application Ser. No. 11 056 557 filed on Feb. 11 2005 now U.S. Pat. No. 7 428 593 which is a continuation of U.S. patent application Ser. No. 09 565 580 filed on May 4 2000 now U.S. Pat. No. 6 912 576. U.S. patent application Ser. Nos. 11 056 557 and 09 565 580 are incorporated by reference herein in their entirety.

The present invention relates to processing data and more specifically to processing a data flow in a multi channel multi service development environment.

Traditionally Digital Signal Processors DSPs have been used to run single channels such as for example a single DSO or time division multiplexing TDM slot that handle single services such as modem vocoder or packet processing. Multiple services require multiple channels and multiple DSPs each running its own small executive program small kernel and application. The executive programs reserve some area in memory for application code. When applications need to be switched these executive programs overlay this memory with the new application.

Channels may take one of the following forms one channel carried on a 20 physical wire or wireless medium between systems also referred to as a circuit timed divisional multiplexed TDM channels in which signals from several sources such as telephones and computers are merged into a single stream of data and separated by a time interval and frequency division multiplexed FDM channels in which signals from many sources are transmitted over a single cable by modulating each signal on a carrier at different frequencies.

Recent advances in processing capacity now allow a single chip to run multiple channels. With this increase in capacity has come a desire to run different services simultaneously and to switch between services.

A current method to implement multiple services or multiple channels involves writing all control overlay and task switching code for each service or channel. This requirement causes additional engineering overhead for development and debugging of the applications. In addition not all services may fit into the memory available to the DSP and the services must be swapped in from the host system. This swapping overlaying adds significant complexity to the implementation of the DSP services. The extra development activity consumes DSP application development time.

A method and system for processing a data flow in a multi channel multi service environment is described. In one embodiment a socket is dynamically allocated the socket including a dynamically allocated service. Further the server processes the data flow based upon the type of data being processed.

A method and system for processing a data flow in a multi channel multi service environment is described. In one embodiment a socket is dynamically allocated the socket including a dynamically allocated service. Further the server processes the data flow based upon the type of data being processed.

In the following detailed description of the present invention numerous specific details are set forth in order to provide a thorough understanding of the present invention. However it will be apparent to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed descriptions that follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions and each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

TDM is a base band technology in which individual channels of data or voice are interleaved into a single stream of bits or framed bits on a communications channel. Each input channel receives an interleave time segment in order that all channels equally share the medium that is used for transmission. If a channel has nothing to send the slot is still dedicated to the channel and remains empty.

In one embodiment an operating system running within multi channel multi service system supports telecommunication and data communication applications. These applications involve running multiple channels of protocol stacks built from multiple services. Multi channel multi service system enables the dynamic configuration of services within the embedded telecommunication and data communication environment. In addition the operating system automatically defines the allocation of resources for the channels within system .

In one embodiment the operating system running within multi channel multi service system supports monitoring of channels in realtime. If a particular service within a channel is not responding as expected the host system may request the operating system to send the state of one or all of its services to an off chip application at prespecified events. For example after processing every frame worth of data. The data is collected without affecting the socket s realtime performance. The off chip application may then analyze the cause of the problem by inspecting the data in non realtime.

Processing chip also includes a shared static random access memory shared SRAM . Shared SRAM may be accessed directly by all the cluster processors and main processor . An instruction store contained within the PEs can also access shared SRAM . Shared SRAM is used for storing operating system and application code as well as hosting the data for code running on main processor .

Each cluster contains cluster SRAM . Cluster SRAM is responsible for maintaining channel data running on each individual cluster . Cluster SRAM includes I O buffers and programming stacks. The operating system of system enforces memory protection to prevent a channel from inadvertently corrupting another channel s data or code.

External dynamic random access memory DRAM may be used for application data too large to fit on the on chip cluster SRAM or shared SRAM and may be used as a swap area for application code. In one embodiment applications may need more data than the on chip memory may support. In this case the data and program for some of the services may be stored in off chip memory for example DRAM . The program and data is loaded onto the on chip memory as the channel s data processing begins. In this manner the service is not aware of where the data and program resides on external memory. This is done without affecting the realtime performance of the applications.

Each processing chip includes two line side ports and two system bus ports . These ports are used for packet side data and control transport. In addition host port is used to communicate with the host and is accessible only from main processor and serial boot port that is used to send the boot stream to the chip.

Socket is a virtual construct that provides a set of services in the form of a service stack . The operating system processes services that are encapsulated in socket including connecting the traffic flow. The number of services is dynamically adjustable and definable such that the need for multitasking is eliminated. Processing within socket is data driven. That is services are invoked by sockets only after the required data has arrived at socket . In one embodiment applications may build protocol stacks by installing a service stack into a socket . Services service stacks and sockets are allocated and de allocated as required by system .

A CS is defined by the external physical interface end points and and the data flowing through the CS . Each end point may be different physical devices or the same physical interface or device. The flow of information is directed by the manner in which the packet formats are created. The header information within the packets indicate the unique end points that the information is being sent to and whether the information is going in or out of system . For example CS services may perform a conversion of data. The CS mechanism allows a service stack to be built into the information flow in which services may direct or process the data as it flows through the system. For example if a first service outputs a 40 byte data frame and a second service uses an 80 byte frame in one embodiment the second service waits until the first service outputs enough data in order for the second service to process the data. In an alternate embodiment the first service delays sending data to the second service until it accumulates enough data. Services are independent modules and are standalone plug ins. Thus in one embodiment services may be dynamically downloaded into shared SRAM in real time to build CSs as required by the data.

Because sockets may be dynamically allocated and deallocated by the operating system applications may be written to access dedicated single channel processors however the dedicated channels will run on multiple physical channels. Thus the CS mechanism provides single channel programming with multiple channel execution. In addition an application may be written to provide flow of information between end points independent of the operating system and independent of the type of data being processed. CS functions whether they are signal processing functions or packet processing functions are independent of both the operating system and the hardware configuration. The mechanism also relieves applications of the management of channels and places the management into the operating system thus producing channel independent applications. In addition the CS mechanism allows the applications and services to be platform independent.

In one embodiment a host sends a request to allocate a new DAS specifying a maximum number of inputs the specific services to run and frame size. For example the host may send a request to allocate DAS for a teleconference. Prior to the initialization of DAS a host application also allocates appropriate sockets as described above. Sockets all connect specific data input to the teleconferencing . When both the DAS and sockets are allocated the host connects sockets with DAS . In one embodiment the host application switches pointers within the software to connect to DAS . Once a frame of data is available DAS receives the information and processes the information through the services within DAS . DAS outputs the aggregated data to each of the sockets . DAS may be allocated and de allocated dynamically. The connection between DAS and individual sockets may be established or disconnected dynamically.

In one embodiment each service is assigned a type. When data is run through the socket the control information for the data may be configured to be processed only by a given type of service for example a type service . In addition service can instruct a socket to not run or unplug certain services further along in the socket just for this frame of data. After the frame of data is processed sockets are plugged in for subsequent frames of data.

In addition during the operation of a socket it is sometimes necessary for one service to communicate with another service in the service stack . Services may communicate with one another using a socket wide shared memory . Services may pass control information and data to other services within a socket via shared memory . For example if a dial tone detect is found in an initial socket service the socket should not run the voice decode service. Thus the initial tone detect service may place the information that the tone has been detected in shared memory . When a subsequent service is initialized or run the service reads the shared memory and determines that a tone detect has been found and the service is bypassed. Shared memory is allocated at the time a socket is allocated. A pointer to shared memory is passed to the initializing routine of each service . Service uses this pointer as necessary to communicate with other services . The size of shared memory is the same for all sockets and is specified within a configuration setup.

PCS is a specialized socket that runs on the main processor when the system boots. It is the only socket that has knowledge of system wide resources. PCS manages all resources including allocating the SCSs to clusters allocating TDM time slots and allocating bus channels. Applications may not allocate or deallocate any services within PCS . Specifically PCS boots clusters and chips loads and unloads services creates and destroys SCSs sends a heartbeat to the host and detects if a cluster is inoperative.

PCS monitors the resources on the chip including instruction memory available. As the traffic pattern of acquired services changes the operating system may unload and load services as required. This is done without affecting the channels that are running on the system.

Once channel socket is allocated data is received by channel socket . In one embodiment channel socket may receive control information for the processing of the data from SCS . Data may be received from any physical device interface connected to system . The data is processed by services within a socket . The operating system within system may change the flow of information through different channel sockets depending on the need of the physical devices attached to the channel sockets . If a service stack within channel socket is incompatible with the incoming data channel socket notifies the operating system to change the flow of information. Operating system then redirects the flow to another existing channel socket with the proper service stacks or creates a new channel socket .

At processing block the data frame is processed by services within channel socket . In one embodiment services are dynamically allocated when the first frame of data is received by channel socket . In an alternate embodiment services may be allocated at the time channel socket is allocated. Services process the data depending on the requirements of the data. For example service may be dynamically allocated to process telephone voice data. In one embodiment data may be aggregated using a data aggregation socket to combine the data. The data aggregation socket may be utilized in a telecommunications teleconferencing application.

At processing block the processed data frames are output to the appropriate device interfaces. Processing blocks and are executed as long as data frames are supplied. After all data frames have been processed system may dynamically deallocate the channel socket . System dynamically allocates and deallocates services and sockets as required by system in order to fully take advantage of the limited physical channels within system . Thus system operates as a multi channel multi service platform within a single channel development environment.

At processing block PCS determines if any SCSs with the same service stack already exist. If the SCSs already exist processing continues at processing block . If the SCS does not exist processing continues at processing block .

At processing block PCS allocates the appropriate SCS for the service configuration. In one embodiment PCS loads the appropriate control services into shared SRAM in the order required by the service stack.

At processing block after PCS sets up the new SCS the PCS notifies the host application that the SCS is set up. PCS then sets up CS. SCS then completes the channel service socket allocation by sending socket parameters to the socket. Such parameters may include for example tail length of echo cancellation EC .

At processing block CS initializes services by calling their initialization functions. In an alternate embodiment services may be allocated at the time the first data frame is received by CS . When host is ready to begin processing data through a given socket host instructs SCS to start CS . This initializes the data handling of the socket . SCS starts CS and informs host that CS is configured and running.

Independent of the channel socket allocation host also requests that the DAS be allocated. At processing block the host sends a request to allocate a new DAS with a maximum number of inputs the specific services to be run and the frame size. The frame size is the number of samples on each of the connected inputs. When both DAS and some number of channel sockets are allocated processing continues at processing block . At processing block the host connects channel sockets with the DAS.

At processing block DAS aggregates the data by invoking service handlers within DAS once a frame s worth of data is available on each of the connected inputs from the channel sockets . DAS aggregates the data and outputs the specific data. The data is aggregated by server within a socket . In one embodiment aggregation is defined by a customer or user prior to fabrication.

At processing block the output of the last DAS service broadcasts the data to the inputs of all connected channel sockets . The aggregated data is processed by the individual channel sockets . DAS may be created or destroyed dynamically and the connection between the DAS and channel sockets may be established dynamically.

At processing block channel socket removes or de allocates all its preexisting services. At processing block PCS communicates with host to assign a socket to a different SCS . PCS assigns a socket to a different SCS based on the new service stack . If the service stack does not exist PCS may create a new SCS based on the new service stack requirements.

At processing block SCS sends the service stack information to the socket . At processing block socket allocates the new service stack and informs SCS that the stack is available for processing.

Thus channel sockets may be dynamically created as required. SCS controls the physical or hardware channel while the channel sockets process the data. Resource management for determining the cost of n channel sockets and determining the availability resources to see if n channel sockets may be run may be calculated by the PCS or by more remote resources with the knowledge of the resources within system . The operating system thus may use a single hardware channel for the processing of multiple channel data types.

In one embodiment there are three types of channel sockets utilized line to packet packet to packet and line to line. Line to packet sockets are always connected to the line side at one end of the packet and the packet side at the other end of the channel. Some voice and modem stacks use line to packet sockets. These sockets process a frame s worth of data. The frame size is specified in terms of a number of bytes in the line side. One of the services will be responsible for setting the frame size. For example the codes are expected to set the frame size in the case of a voice processing. The frame size may be changed at any time during the life of the socket. The socket reads a frame s worth of data. The data received from the line side may be in different format from the format expected by the services. In this case the operating system performs the appropriate conversion of the data. After the data conversion the socket calls the data processing functions of each service in order. The arguments to these functions are the pointers to the data in the shared memory and the data length in bytes.

After the data processing functions of all the services are called the socket expects a packet of input data from the packet network. If a packet has arrived the socket converts the cell base data to flat data and calls the data processing functions of all the services. The arguments to these functions are the pointers to the data and the data length in bytes. If however no packets have arrived the socket calls these functions with the data length set to zero. This allows a socket to send meaningful data on the line even if no packet is available at the time. Both the voice stack and modem stack require this mechanism.

Packet to packet sockets are always connected to the packet side at both ends of the socket. However the packet length may be different in each direction of data flow. Both ends of the sockets process packet size data and processing occurs whenever data appears on either end.

Line to line sockets are connected to the line side at both ends of the socket. The socket processes a frame s worth of data in both directions of data flow. The frame size in each direction is the same. Line to line sockets may perform standard line side coding and decoding transformations on the data on both ends. The conversion setting on both ends does not need to be the same.

In the foregoing specification the invention has been described with reference to specific exemplary embodiments thereof. It will however be evident that various modifications and changes may be made thereto without departing from the broader sprit and scope of the invention as set forth in the appended claims. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

