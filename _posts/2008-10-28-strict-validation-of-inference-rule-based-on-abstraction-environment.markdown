---

title: Strict validation of inference rule based on abstraction environment
abstract: An article of manufacture for processing rule sets and, more particularly, for processing abstract rule sets. One embodiment provides a computer-readable storage medium containing a program which, when executed by a processor, performs operations for managing execution of an analysis routine. The operations comprise accessing an analysis routine configured to process one or more inputs. The analysis routine is defined by at least one abstract rule set having one or more abstract rules each having a conditional statement and a consequential statement. The operation further comprises determining, from the retrieved analysis routine, a predefined validating condition that needs to be satisfied by at least one of the inputs, and validating a particular data value defining the at least one of the inputs on the basis of the predefined validating condition. If the particular data value is not validated, a predefined action configured to avoid execution of the analysis routine on invalid inputs is performed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08145628&OS=08145628&RS=08145628
owner: International Business Machines Corporation
number: 08145628
owner_city: Armonk
owner_country: US
publication_date: 20081028
---
This application is a continuation of U.S. patent application Ser. No. 11 272 588 filed Nov. 10 2005 now U.S. Pat. No. 7 444 332 which is herein incorporated by reference in its entirety.

The present invention generally relates to rule sets and more particularly to abstract rule sets having one or more abstract rules.

Databases are computerized information storage and retrieval systems. A relational database management system is a computer database management system DBMS that uses relational techniques for storing and retrieving data. The most prevalent type of database is the relational database a tabular database in which data is defined so that it can be reorganized and accessed in a number of different ways. A distributed database is one that can be dispersed or replicated among different points in a network. An object oriented programming database is one that is congruent with the data defined in object classes and subclasses.

Regardless of the particular architecture a DBMS can be structured to support a variety of different types of operations for a requesting entity e.g. an application the operating system or an end user . Such operations can be configured to retrieve add modify and delete information being stored and managed by the DBMS. Standard database access methods support these operations using high level query languages such as the Structured Query Language SQL . The term query denominates a set of commands that cause execution of operations for processing data from a stored database. For instance SQL supports four types of query operations i.e. SELECT INSERT UPDATE and DELETE. A SELECT operation retrieves data from a database an INSERT operation adds new data to a database an UPDATE operation modifies data in a database and a DELETE operation removes data from a database.

Data that is collected and stored in a database can be used as input to analysis routines for various purposes including know how management decision making and statistical analysis. For instance in a broad variety of applications analysis routines are executed on query results obtained in response to execution of corresponding queries against an underlying database.

Analysis routines can be defined by rule sets including one or more rules each having predicates and actions. A rule predicate is evaluated in a rules engine and if the predicate is satisfied then the associated rule action is executed. In other words a set of rules can be used to implement an analysis routine and a rules engine will run on the set of rules to evaluate predicates and fire or execute actions defined in the rules. Where actions of rules are defined to provide recommendations for users such as treatment recommendations for doctors in medical institutions the rules can be defined such that corresponding predicates reflect expert based knowledge of possible diagnoses and evaluations of patient conditions. In other words rules can be implemented to assist doctors by making diagnosis recommendations drug recommendations providing reminders of required verifications and checks etc.

However the creation of rules is generally a complex and difficult process which requires detailed knowledge of a corresponding database s . More specifically a predicate of a given rule frequently defines a condition on a column in an underlying database table. In order to create the predicate the name or some other identifier of the column must be known to the user. In other words for each predicate and each action of the given rule that the user wants to create the user requires an understanding of the database schema in order to look up a corresponding column name in the underlying database table s . Accordingly the creation of rules is often time consuming and cumbersome.

Therefore there is a need for an effective technique for creating rules that are suitable to implement analysis routines.

The present invention generally is directed to an article of manufacture for processing rule sets and more particularly for processing abstract rule sets having one or more abstract rules.

One embodiment provides a computer readable storage medium containing a program which when executed by a processor performs operations for managing execution of an analysis routine. The operations comprise accessing an analysis routine configured to process one or more inputs. The analysis routine is defined by at least one abstract rule set having one or more abstract rules each having a conditional statement and a consequential statement. The consequential statement defines a particular recommendation that is returned when the conditional statement is satisfied. The conditional statement and the consequential statement are defined using logical field definitions defined in an abstraction model that models underlying physical data in a manner making a schema of the physical data transparent to a user of the abstraction model. The operations further comprise determining from the retrieved analysis routine a predefined validating condition that needs to be satisfied by at least one of the inputs and validating a particular data value defining the at least one of the inputs on the basis of the predefined validating condition. If the particular data value is not validated a predefined action configured to avoid execution of the analysis routine on invalid inputs is performed.

The present invention is generally directed to a method system and article of manufacture for processing rule sets and more particularly for processing abstract rule sets having one or more abstract rules. In the context of the invention a rule is a set of logical statements including a conditional statement and a consequential statement. The conditional statement defines at least one requirement that must be satisfied by inputs to the rule and the consequential statement defines a predefined action that is executed by the rule when the conditional statement is satisfied. According to one aspect an abstract rule is a rule having a conditional statement and a consequential statement that are created using logical field definitions defined in an abstraction model. The abstraction model models underlying physical data in a manner making a schema of the physical data transparent to a user of the abstraction model.

In one embodiment a rules engine is used to generate a recommendation by executing an abstract rule having a conditional statement and a consequential statement on suitable inputs. To this end the consequential statement of the abstract rule is configured to return a particular recommendation s when the conditional statement is satisfied. For execution the abstract rule is transformed into a transformed rule that is executable on the suitable inputs by the rules engine. The transformed rule is then executed on the suitable inputs and if the conditional statement is resolved to true for the executed transformed rule the particular recommendation s is returned.

In one embodiment the suitable inputs are determined by selecting suitable field values from a query result set which is obtained in response to execution of a query against a database. The query can be created by a user using a query creation form that is displayed to the user in response to selection of a required abstract rule for execution. Specifically the query creation form can be configured to guide the user through selection of result fields for the query that are configured to retrieve the suitable field values.

In the following embodiments of the invention may be described with respect to abstract queries. However it should be noted that the invention is not limited to abstract queries and that embodiments of the invention may use any suitable queries known or unknown in order to generate query result sets having result data that is suitable as input s to abstract rules according to embodiments of the invention.

In the following reference is made to embodiments of the invention. However it should be understood that the invention is not limited to specific described embodiments. Instead any combination of the following features and elements whether related to different embodiments or not is contemplated to implement and practice the invention. Furthermore in various embodiments the invention provides numerous advantages over the prior art. However although embodiments of the invention may achieve advantages over other possible solutions and or over the prior art whether or not a particular advantage is achieved by a given embodiment is not limiting of the invention. Thus the following aspects features embodiments and advantages are merely illustrative and unless explicitly present are not considered elements or limitations of the appended claims.

One embodiment of the invention is implemented as a program product for use with a computer system such as for example computer system shown in and described below. The program s of the program product defines functions of the embodiments including the methods described herein and can be contained on a variety of computer readable media. Illustrative computer readable media include but are not limited to i information permanently stored on non writable storage media e.g. read only memory devices within a computer such as CD ROM disks readable by a CD ROM drive or ii alterable information stored on writable storage media e.g. floppy disks within a diskette drive or hard disk drive . The latter embodiment specifically includes information to from the Internet and other networks. Such computer readable media when carrying computer readable instructions that direct the functions of the present invention represent embodiments of the present invention.

In general the routines executed to implement the embodiments of the invention may be part of an operating system or a specific application component program module object or sequence of instructions. The software of the present invention typically is comprised of a multitude of instructions that will be translated by the native computer into a machine readable format and hence executable instructions. Also programs are comprised of variables and data structures that either reside locally to the program or are found in memory or on storage devices. In addition various programs described hereinafter may be identified based upon the application for which they are implemented in a specific embodiment of the invention. However it should be appreciated that any particular nomenclature that follows is used merely for convenience and thus the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

In any case it is understood that is merely one configuration for a computer system. Embodiments of the invention can apply to any comparable configuration regardless of whether the computer is a complicated multi user apparatus a single user workstation or a network appliance that does not have non volatile storage of its own.

The computer could include a number of operators and peripheral systems as shown for example by a mass storage interface operably connected to a storage device by a video interface operably connected to a display and by a network interface operably connected to the plurality of networked devices which may be representative of the Internet via a suitable network. Although storage is shown as a single unit it could be any combination of fixed and or removable storage devices such as fixed disc drives floppy disc drives tape drives removable memory cards or optical storage. The display may be any video output device for outputting viewable information.

Computer is shown comprising at least one processor which obtains instructions and data via a bus from a main memory . The processor could be any processor adapted to support the methods of the invention. In particular the computer processor is selected to support the features of the present invention. Illustratively the processor is a PowerPC processor available from International Business Machines Corporation of Armonk N.Y.

The main memory is any memory sufficiently large to hold the necessary programs and data structures. Main memory could be one or a combination of memory devices including Random Access Memory nonvolatile or backup memory e.g. programmable or Flash memories read only memories etc. . In addition memory may be considered to include memory physically located elsewhere in the computer system for example any storage capacity used as virtual memory or stored on a mass storage device e.g. direct access storage device or on another computer coupled to the computer via bus . Thus main memory and storage device could be part of one virtual address space spanning multiple primary and secondary storage devices.

Referring now to a relational view of software components in one embodiment is illustrated. The software components illustratively include a user interface a DBMS one or more applications only one application is illustrated for simplicity a rules engine an abstract model interface and an abstract rule translator . The abstract model interface illustratively includes a data abstraction model and a runtime component . The DBMS illustratively includes a database and a query execution unit having a query engine .

The database is shown as a single database having the data for simplicity. However the database can also be implemented by multiple databases which can be distributed relative to one another. Moreover one or more databases can be distributed to one or more networked devices e.g. networked devices of . The database is representative of any collection of data regardless of the particular physical representation of the data. A physical representation of data defines an organizational schema of the data. By way of illustration the database may be organized according to a relational schema accessible by SQL queries or according to an XML schema accessible by XML queries . However the invention is not limited to a particular schema and contemplates extension to schemas presently unknown. As used herein the term schema generically refers to a particular arrangement of the data .

According to one aspect the application and more generally any requesting entity including at the highest level users issues queries against the data in the database . In general the queries issued by the application are defined according to an application query specification and may be predefined i.e. hard coded as part of the application or generated in response to input e.g. user input . The application query specification s is further described below with reference to .

Illustratively the queries issued by the application are created by users using the user interface which can be any suitable user interface configured to create submit queries. According to one aspect the user interface is a graphical user interface. However it should be noted that the user interface is only shown by way of example any suitable requesting entity may create and submit queries against the database e.g. the application an operating system or an end user . Accordingly all such implementations are broadly contemplated.

In one embodiment the requesting entity accesses a suitable database connectivity tool such as a Web application an Open DataBase Connectivity ODBC driver a Java DataBase Connectivity JDBC driver or a Java Application Programming Interface Java API for creation of a query. A Web application is an application that is accessible by a Web browser and that provides some function beyond static display of information for instance by allowing the requesting entity to query the database . An ODBC driver is a driver that provides a set of standard application programming interfaces to perform database functions such as connecting to the database performing dynamic SQL functions and committing or rolling back database transactions. A JDBC driver is a program included with a database management system e.g. DBMS to support JDBC standard access between the database and Java applications. A Java API is a Java based interface that allows an application program e.g. the requesting entity the ODBC or the JDBC that is written in a high level language to use specific data or functions of an operating system or another program e.g. the application .

Accordingly the queries issued by the application can be in physical form such as SQL and or XML queries which are consistent with the physical representation of the data for execution against the database . Alternatively the queries issued by the application are composed using the abstract model interface . Such queries are referred to herein as abstract queries . The abstract model interface is further described below with reference to . The abstract queries are transformed into a form consistent with the physical representation of the data for execution against the database . In the illustrated example an abstract query is created on the basis of logical fields defined by the data abstraction model .

In one embodiment the abstract query is translated by the runtime component into a concrete i.e. executable query. The executable query is submitted to the query execution unit for execution. It should be noted that the query execution unit illustratively only includes the query engine for simplicity. However the query execution unit may include other components such as a query parser and a query optimizer. A query parser is generally configured to accept a received query input from a requesting entity such as the application s and then parse the received query. The query parser may then forward the parsed query to the query optimizer for optimization. A query optimizer is an application program which is configured to construct a near optimal search strategy known as an access plan for a given set of search parameters according to known characteristics of an underlying database e.g. the database an underlying system on which the search strategy will be executed e.g. computer system of and or optional user specified optimization goals. But not all strategies are equal and various factors may affect the choice of an optimum search strategy. However in general such search strategies merely determine an optimized use of available hardware software components to execute respective queries. The query optimizer may then forward the optimized query to the query engine for execution.

Illustratively the executable query is executed by the query engine against the data of the database to determine a result set for the abstract query . The result set includes field values which can be used as inputs to an abstract rule . However it should be noted that the present invention is not limited to use of field values obtained from query results as inputs to the abstract rule . Instead any suitable inputs to the abstract rule are broadly contemplated including for instance input data provided by a user using the user interface .

In one embodiment the abstract rule is created by a user using a suitable user interface configured to create abstract rules e.g. the user interface . By way of example the user interface can be configured to display a graphical user interface that guides the user through creation of the abstract rule . An exemplary graphical user interface is illustrated in .

According to one aspect creation of the abstract rule is similar to creation of the abstract query . More specifically the abstract query is created by creating a results specification and if required selection criteria having one or more query conditions as explained in more detail below with reference to . The abstract rule is created by creating a conditional statement and a consequential statement as explained in more detail below with reference to . According to one aspect the conditional statement and the consequential statement of the abstract rule are created by performing operations which are used to create the query conditions of the abstract query . Accordingly software components such as the application query specification and the abstract model interface that are used to create the abstract query are also used to create the abstract rule . More specifically the abstract rule is also defined according to the application query specification and may be predefined i.e. hard coded as part of the application or generated in response to input e.g. user input . Furthermore the abstract rule is also composed using the abstract model interface i.e. on the basis of the logical fields defined by the data abstraction model .

The abstract rule is transformed into a transformed rule which is executable by the rules engine . More specifically the abstract rule is transformed by the abstract rule translator using the data abstraction model . Transformation of the abstract rule into the transformed rule by the abstract rule translator is described in more detail below with reference to .

In one embodiment the transformed rule is configured for execution on the result set which is obtained in response to execution of the abstract query . In order to guarantee that the result set includes field values for all required inputs of the abstract rule to enable execution of the transformed rule the abstract query can be created using a suitable data request form . The data request form is configured to guide the user through selection of suitable result fields for the abstract query for which fields corresponding field values are required as the inputs to the transformed rule. Thus it can be guaranteed that the rules engine executes the transformed rule on a valid result set.

It should be noted that the abstract rule translator and the rules engine are illustratively shown as separate software components. However the functionality of the abstract rule translator can also be implemented by the abstract model interface or the rules engine . Furthermore the functionality of the rules engine can alternatively be implemented by the DBMS . All such implementations are broadly contemplated.

In response to execution of the transformed rule on the result set the rules engine outputs a rule output to the application . By way of example assume that all required inputs provided by the result set to the transformed rule describe aspects of a medical condition of a patient of a medical institution. Assume further that the abstract rule and thus the transformed rule is configured to provide a recommendation for treatment of the patient if the medical condition of the patient satisfies the conditional statement of the transformed rule. In other words the recommendation is returned as the rule output by the rules engine if the conditional statement is satisfied. Exemplary methods illustrating operation of the rules engine are described below with reference to FIGS. and .

As was noted above the logical fields specified by the application query specification and used to compose the abstract query are defined by the data abstraction model . In general the data abstraction model exposes information as a set of logical fields that may be used within a query e.g. the abstract query issued by the application to specify criteria for data selection and specify the form of result data returned from a query operation. Furthermore the logical fields may be used within a rule e.g. abstract rule of to specify a conditional and a consequential statement. The logical fields are defined independently of the underlying data representation being used in a corresponding database e.g. database of thereby allowing queries to be formed that are loosely coupled to the underlying data representation.

In one embodiment illustrated in the data abstraction model comprises a plurality of field specifications and seven shown by way of example collectively referred to as the field specifications also referred to hereinafter as field definitions . Specifically a field specification is provided for each logical field available for composition of an abstract query. Each field specification may contain one or more attributes. Illustratively the field specifications include a logical field name attribute collectively field name and an associated access method attribute collectively access methods . Each attribute may have a value. For example logical field name attribute has the value FirstName and access method attribute has the value Simple . Furthermore each attribute may include one or more associated abstract properties. Each abstract property describes a characteristic of a data structure and has an associated value. In the context of the invention a data structure refers to a part of the underlying physical representation that is defined by one or more physical entities of the data corresponding to the logical field. In particular an abstract property may represent data location metadata abstractly describing a location of a physical data entity corresponding to the data structure like a name of a database table or a name of a column in a database table. Illustratively the access method attribute includes data location metadata Table and Column . Furthermore data location metadata Table has the value contact and data location metadata Column has the value f name . Accordingly assuming an underlying relational database schema in the present example the values of data location metadata Table and Column point to a table contact having a column f name .

It should be noted that various other attributes are contemplated for the field specifications . For instance each field specification may include particular metadata such as timeline metadata. Providing field specifications with timeline data allows for creation of measurement fields in abstract queries such as the abstract query . A measurement field is a result field that corresponds to a logical field of an underlying data abstraction model and that can be associated in an abstract query with a chronological condition that specifies a requested point in time for which values for the result field should be retrieved from an underlying database. More generally timeline metadata can be used to order data elements for a logical field according to a chronological sequence. By way of example commonly owned U.S. patent application Ser. No. 11 083 208 filed Mar. 17 2005 entitled SEQUENCE SUPPORT OPERATORS FOR AN ABSTRACT DATABASE which is incorporated herein by reference in its entirety describes timeline metadata which includes type metadata and time ordering metadata. The timeline type metadata indicates that data retrieved for a given logical field may be ordered into a sequence of discrete events based on the order in which the events occurred or when the data came into being. The time ordering metadata specifies where to locate the data used to order data elements for the given logical field into a sequence. Other examples of timeline metadata are described in commonly owned U.S. patent application Ser. No. 11 035 710 filed Jan. 14 2005 entitled TIMELINE CONDITION SUPPORT FOR AN ABSTRACT DATABASE which is also incorporated herein by reference in its entirety.

In one embodiment groups i.e. two or more of logical fields may be part of categories. Accordingly the data abstraction model includes a plurality of category specifications and four shown by way of example collectively referred to as the category specifications. In one embodiment a category specification is provided for each logical grouping of two or more logical fields. For example logical fields and are part of the category specifications and respectively. Furthermore logical field is part of the category specification and logical field is part of the category specification . A category specification is also referred to herein simply as a category . The categories are distinguished according to a category name e.g. category names and collectively category name s . In the present illustration the logical fields are part of the Demographic category logical fields are part of the Birth and Age category the logical field is part of the Gene Expression category and the logical field is part of the Recommendations category.

The access methods generally associate i.e. map the logical field names to data in the database e.g. database of . As illustrated in the access methods associate the logical field names to a particular physical data representation . . . in the database. By way of illustration two data representations are shown an XML data representation and a relational data representation . However the physical data representation indicates that any other data representation known or unknown is contemplated. In one embodiment a single data abstraction model contains field specifications with associated access methods for two or more physical data representations . In an alternative embodiment a different single data abstraction model is provided for each separate physical data representation .

Any number of access methods is contemplated depending upon the number of different types of logical fields to be supported. In one embodiment access methods for simple fields filtered fields and composed fields are provided. The field specifications and exemplify simple field access methods and respectively. Simple fields are mapped directly to a particular entity in the underlying physical representation e.g. a field mapped to a given database table and column . By way of illustration as described above the simple field access method shown in maps the logical field name FirstName to a column named f name in a table named contact . In one embodiment a simple field access method may include an enumeration of possible values for the mapped particular entity in the underlying physical representation. By way of example the simple field access method shown in includes an enumeration that defines as possible values for a column named endothlin 1 in a table named tests the values up weak and down . The simple field access method shown in includes an enumeration that defines as possible values for a column named primary drug in a table named recommendations the values 5FU 6 MP 6TG and 53 . The field specification in exemplifies a filtered field access method . Filtered fields identify an associated physical entity and provide filters used to define a particular subset of items within the physical representation. An example is provided in in which the filtered field access method maps the logical field name AnyTownLastName to a physical entity in a column named I name in a table named contact and defines a filter for individuals in the city of Anytown . Another example of a filtered field is a New York ZIP code field that maps to the physical representation of ZIP codes and restricts the data only to those ZIP codes defined for the state of New York. The field specification exemplifies a composed field access method . Composed access methods compute a logical field from one or more physical fields using an expression supplied as part of the access method definition. In this way information which does not exist in the underlying physical data representation may be computed. In the example illustrated in the composed field access method maps the logical field name AgeInDecades to AgeInYears 10 . Another example is a sales tax field that is composed by multiplying a sales price field by a sales tax rate.

It is contemplated that the formats for any given data type e.g. dates decimal numbers etc. of the underlying data may vary. Accordingly in one embodiment the field specifications include a type attribute which reflects the format of the underlying data. By way of example field specification in has a type attribute having a value Integer that indicates that the underlying data of the logical field AgeInYears is defined as integer values. The field specifications and in have type attributes both having a value Categorical that indicates that the underlying data of the logical fields Endothlin 1 and Primary Drug is defined using categorical values. However in another embodiment the data format of the field specifications is different from the associated underlying physical data in which case a conversion of the underlying physical data into the format of the logical field is required.

By way of example the field specifications of the data abstraction model shown in are representative of logical fields mapped to data represented in the relational data representation shown in . However other instances of the data abstraction model map logical fields to other physical representations such as XML.

An illustrative abstract query corresponding to the abstract query shown in is shown in Table I below. By way of illustration the illustrative abstract query is defined using XML. However any other language may be used to advantage.

Illustratively the abstract query shown in Table I includes a selection specification lines 004 008 containing selection criteria and a results specification lines 009 013 . In one embodiment a selection criterion consists of a field name for a logical field a comparison operator 

An illustrative data abstraction model DAM corresponding to the data abstraction model shown in is shown in Table II below. By way of illustration the illustrative Data Abstraction Model is defined using XML. However any other language may be used to advantage.

By way of example note that lines 004 008 correspond to the first field specification of the DAM shown in and lines 009 013 correspond to the second field specification .

As was noted above the abstract query of Table I can be transformed into a concrete query for query execution. An exemplary method for transforming an abstract query into a concrete query is described below with reference to .

Referring now to an illustrative runtime method exemplifying one embodiment of the operation of the runtime component of is shown. The method is entered at step when the runtime component receives as input an abstract query such as the abstract query shown in Table I . At step the runtime component reads and parses the abstract query and locates individual selection criteria and desired result fields. At step the runtime component enters a loop defined by steps and for processing each query selection criteria statement present in the abstract query thereby building a data selection portion of a concrete query. In one embodiment a selection criterion consists of a field name for a logical field a comparison operator 

After building the data selection portion of the concrete query the runtime component identifies the information to be returned as a result of query execution. As described above in one embodiment the abstract query defines a list of result fields i.e. a list of logical fields that are to be returned as a result of query execution referred to herein as a result specification. A result specification in the abstract query may consist of a field name and sort criteria. Accordingly the method enters a loop at step defined by steps and to add result field definitions to the concrete query being generated. At step the runtime component looks up a result field name from the result specification of the abstract query in the data abstraction model and then retrieves a result field definition from the data abstraction model to identify the physical location of data to be returned for the current logical result field. The runtime component then builds at step a concrete query contribution of the concrete query that identifies physical location of data to be returned for the logical result field. At step the concrete query contribution is then added to the concrete query statement. Once each of the result specifications in the abstract query has been processed the concrete query is executed at step .

One embodiment of a method for building a concrete query contribution for a logical field according to steps and is described with reference to . At step the method queries whether the access method associated with the current logical field is a simple access method. If so the concrete query contribution is built step based on physical data location information and processing then continues according to method described above. Otherwise processing continues to step to query whether the access method associated with the current logical field is a filtered access method. If so the concrete query contribution is built step based on physical data location information for a given data structure s . At step the concrete query contribution is extended with additional logic filter selection used to subset data associated with the given data structure s . Processing then continues according to method described above.

If the access method is not a filtered access method processing proceeds from step to step where the method queries whether the access method is a composed access method. If the access method is a composed access method the physical data location for each sub field reference in the composed field expression is located and retrieved at step . At step the physical field location information of the composed field expression is substituted for the logical field references of the composed field expression whereby the concrete query contribution is generated. Processing then continues according to method described above.

If the access method is not a composed access method processing proceeds from step to step . Step is representative of any other access method types contemplated as embodiments of the present invention. However it should be understood that embodiments are contemplated in which less than all the available access methods are implemented. For example in a particular embodiment only simple access methods are used. In another embodiment only simple access methods and filtered access methods are used.

Referring now to an exemplary graphical user interface GUI is described which illustrates one embodiment of the user interface of . According to one aspect the GUI displays a plurality of GUI screens which are configured for composing abstract queries such as the abstract query of and or abstract rule sets having one or more abstract rules such as the abstract rule of . The GUI may further display a plurality of GUI screens which are configured for accessing and or processing existing abstract queries and or existing abstract rule sets. In one embodiment the GUI is implemented using Web based technologies such as hyperlinks.

Referring first to the exemplary GUI screen is shown illustrating an exemplary welcome screen with a display area that is configured to inform the user about available functionalities. The area includes four selectable graphical elements and each being configured to allow selection of the available functionality and having an associated short description of an available functionality. Illustratively the elements are shown as hyperlinks each pointing to an underlying application. For example the hyperlink points to an application e.g. the application of that generates GUI screens for creating a new query and the hyperlink points to an application that generates GUI screens for processing existing i.e. persistently stored queries. Accordingly when the user selects the hyperlink the corresponding application is launched and a plurality of GUI screens is displayed which guide the user through creation of a new abstract query. Exemplary GUI screens which are configured for composing abstract queries are by way of example illustrated in commonly owned U.S. patent application Ser. No. 10 083 073 filed Feb. 26 2002 entitled GRAPHICAL USER INTERFACE FOR BUILDING QUERIES WITH HIERARCHICAL CONDITIONS which is incorporated herein by reference in its entirety. Selection of the hyperlink is not described in more detail for brevity.

The hyperlink points to an application that generates GUI screens for creating a new abstract rule set and the hyperlink points to an application that generates GUI screens for processing existing i.e. persistently stored rule sets. Selecting the hyperlink is also not described in more detail for brevity.

Assume now that the user selects the hyperlink to create a new abstract rule set. Accordingly an underlying application is launched for displaying a plurality of GUI screens for creation of the new abstract rule set as described below with reference to .

Referring now to the illustrative GUI screen is shown displaying a panel after selection of the hyperlink Create a new Rule Set in . The panel is configured to allow user specification of a new rule set and includes at its top left end a selectable tab Define Rules . By way of example two other selectable tabs are shown a Modify Input tab and a Manage Rule Set tab . When the Modify Input tab is selected a panel for user modification of created abstract rules is displayed. When the Manage Rule Set tab is selected a panel is displayed which allows the user to manage the created abstract rules as described below with reference to .

Illustratively the panel includes a display area Rule Set Summary that displays summary information with respect to the new empty rule set object. The display area includes graphical selection elements and illustrated as drop down lists for selection of a rule specification method and a requested use of the new abstract rule set. By way of example the rule specification method is set to Script using the graphical selection element such that the new abstract rule set is created in script form. All rules of a given rule set that is created in script form are executed in order from top to bottom as a program block or set of scripting language commands would normally be. However other rule specification methods are also broadly contemplated and include by way of example the so called backward chaining technique. Backward chaining is a technique well known in the art that involves running through all rules of the given rule set repeatedly until a steady state is reached or a so called goal is accomplished. A goal in a backward chaining algorithm is the setting of a specific variable. Upon reaching a given value for the specific variable the given rule set can terminate and return the given value. This is a class of algorithms used in technologies such as inference engines. By way of example assume a series of lab tests and demographic characteristics which are input to an underlying analysis routine created in the form of a backward chaining algorithm. The lab tests and demographic characteristics allow for making preliminary diagnosis assertions using a first plurality of rules of the given rule set. As each assertion is made other factors may become significant and other rules of the given rule set can be fired. Eventually a point is reached where a given rule can identify a preliminary diagnosis which is the goal of the algorithm and the analysis routine returns at that point. Again it should be noted that backward chaining algorithms and other similar artificial intelligence techniques are well known in the art. Using the graphical selection element the requested use is set to required indicating that use of the new abstract rule set is required.

The panel further includes a rule summary area displaying summaries of all rules which are created for the new abstract rule set. In the given example no abstract rule was created for the new abstract rule set. Accordingly the rule summary area merely includes an indication that The Rule Set has no rules currently defined . In order to create an abstract rule for the new abstract rule set a pushbutton New Rule can be clicked.

Illustratively the GUI screen further includes three pushbuttons and . By clicking the pushbutton Save a new rule set data object can be created for the new abstract rule set and persistently stored. If the pushbutton Save and Close is clicked a new rule set data object is created for the new abstract rule set and persistently stored and the GUI screen is closed. The pushbutton Close can be used to close the GUI screen without taking any further action.

Referring now to the illustrative GUI screen is shown displaying a panel Define Conditions for creation of an abstract rule after clicking the pushbutton New Rule in . More specifically the panel is configured to allow user specification of a conditional statement for the abstract rule. The conditional statement consists of one or more abstract conditions that are defined using logical fields of an underlying data abstraction model e.g. data abstraction model of . Accordingly the panel is configured to allow user specification of the one or more abstract conditions for the conditional statement.

In one embodiment the panel is implemented using a panel that is configured for creation of a query condition s for an abstract query e.g. abstract query of . Accordingly the panel includes a first display area Select Condition Field that is configured to allow user selection of a condition field for creation of an abstract condition. The first display area displays a list of user selectable condition fields each corresponding to a logical field of the underlying data abstraction model. Illustratively the list is represented as a tree of folders and files each folder representing a category of the underlying data abstraction model and each file representing a logical file included with a given category. The files of a given folder can be viewed by selecting the given folder. By way of example the tree includes a folder which represents a Demographic category e.g. category of and a folder which represents a Gene Expression category e.g. category of and some other exemplary folders. By selecting the folder illustratively three files respectively representing logical fields ID Gender and Age e.g. logical field specifications of are displayed.

The panel further includes a second display area Condition Summary which displays summary information with respect to the conditional statement that is created using the panel . However in the given example no abstract condition was created for the conditional statement. Accordingly the second display area merely includes an indication that No conditions are defined for this rule . In order to create an abstract condition for the conditional statement the user needs to select a condition field from the tree in the first display area .

Referring now to the illustrative GUI screen is shown displaying a condition definition window Condition Details for specification of an abstract condition after selection of the file corresponding to the condition field Age in the tree of . The window displays an indication Age of the condition field that was selected for creation of the abstract condition. The indication is associated with a checkbox which is marked as being selected to indicate that the Age field is selected for specification of the abstract condition.

The window further displays a descriptor of a requested condition type for the abstract condition. Illustratively the requested condition type is defined by a comparison operation Compare that is performed on the selected Age field. Furthermore the descriptor is associated with a radio button which when selected enables the user to create a comparison condition using the Age field. In particular when the user selects the radio button as shown the additional elements are enabled allowing the user to specify a comparison operator and a value. It should be noted that only a single available condition type is shown in the window for simplicity. Accordingly the radio button is selected by default in one embodiment. However in one embodiment different possible condition types are displayed in the window and can thus be selected using associated radio buttons. Such different possible condition types are similar to possible query condition types. One example is a range condition in which a given value is included within two other values. From a free text perspective there can be contains conditions and a host of others such as contains a synonym of one value same sentence as another value the latter finds any data for which two values can be found within the same sentence etc. Another possible condition type is exist which requires that a corresponding value is not null. All such different possible condition types are broadly contemplated. To this end each possible condition type has an associated radio button and only a single condition type can be selected for the abstract condition using a corresponding associated radio button. All such implementations are broadly contemplated.

In order to allow user specification of parameters defining the comparison operation that should be performed on the basis of the abstract condition on field values which are provided for the Age field an operation definition area is displayed in the window . The operation definition area displays i the indication of the condition field Age for which the comparison operation is defined ii a drop down list which is configured for selection of a comparison operator and iii a text field for specification of a requested comparison value. By way of example assume that the user selects 

Illustratively the GUI screen further includes two pushbuttons and . By clicking the pushbutton Apply the abstract condition is created on the basis of the selections specifications which have been determined using the window . If the pushbutton Cancel is clicked the window is closed without taking any further action.

Referring now to the illustrative GUI screen is shown displaying the panel Define Conditions after selection of the pushbutton Apply in . According to the second display area Condition Summary of the panel now displays summary information with respect to the abstract condition which was created for the conditional statement using the window of . More specifically the second display area includes an indication which represents the created abstract condition i.e. Age

The second display area further displays a pushbutton Delete and another pushbutton NOT . The pushbutton can be clicked to delete a selected abstract condition from the conditional statement and the pushbutton can be clicked to negate a selected abstract condition. In other words the user needs to select the created abstract condition using the checkbox in order to perform an operation according to one of the pushbuttons and thereon.

If the user has specified all abstract conditions that are required for the conditional statement the user may click a pushbutton DONE to return to display of the panel of to continue specification of the abstract rule. Otherwise the user may specify one or more additional abstract conditions for the conditional statement. To this end the user simply needs to select another condition field from the tree in the first display area in order to create a next abstract condition for the conditional statement.

Referring now to the illustrative GUI screen is shown displaying the panel Define Conditions after specification of a next abstract condition. For instance assume that the user selected as condition field a file Endothlin1 from the folder representing the category Gene Expression in the tree displayed in the first display area . In response to selection of the condition field Endothlin1 a GUI screen is displayed that is similar to the GUI screen of . For brevity this GUI screen is not described in more detail. However assume now that the user specifies as comparison operator equal to and as comparison value Down using this GUI screen.

Accordingly the second display area Condition Summary of the panel now displays i the indication which represents the abstract condition Age

The second display area further includes a group operator indication AND which indicates that both abstract conditions are logically combined using a Boolean AND operator. Illustratively the AND operator can be selected by clicking a pushbutton Group AND . However other operators can be selected and are thus broadly contemplated. By way of example the user may click a pushbutton Group OR to combine the abstract conditions using a Boolean OR operator or a pushbutton Ungroup to ungroup selected abstract conditions.

Assume now that the user has specified all abstract conditions that are required for the conditional statement. Accordingly the user clicks pushbutton DONE to return to display of the panel of to continue specification of the abstract rule.

Referring now to the illustrative GUI screen is shown displaying the panel after selection of the pushbutton Done in . According to the rule summary area now displays an indication of the abstract rule which is in the process of being created. More specifically the rule summary area displays an indication of the conditional statement hereinafter referred to as the conditional statement for brevity that was created for the abstract rule of the new abstract rule set according to . However in the given example no consequential statement was created for the abstract rule. Accordingly the rule summary area includes an indication that prompts the user to Add a consequence to this condition . . . . The indication is illustratively implemented as a hyperlink which upon selection causes display of a plurality of GUI screens described below with reference to . The screens of are configured for specification of a consequential statement for the abstract rule.

Referring now to the illustrative GUI screen is shown displaying the panel Define Conditions after selection of the hyperlink Add a consequence to this condition . . . in . In one embodiment the panel is configured to allow user specification of a consequential statement for the abstract rule. The consequential statement consists of one or more abstract recommendations also referred to herein as consequences that are defined using logical fields of an underlying data abstraction model e.g. data abstraction model of . Each abstract recommendation can be defined in a manner that is similar to defining an abstract condition for a conditional statement of an underlying abstract rule. Accordingly the panel which was used for creation of the conditional statement according to can be used for creation of the consequential statement in one embodiment. However according to the second display area Condition Summary of the panel now displays summary information with respect to the consequential statement that is created using the panel .

In the given example no abstract recommendation was created for the consequential statement. Accordingly the second display area merely includes an indication that No consequences are defined for this rule . In order to create an abstract recommendation for the consequential statement the user needs to select a condition field from the tree in the first display area . Assume now that the user selects a file from a folder of the tree . Illustratively the folder corresponds to a category Recommendations e.g. category of and the file corresponds to a condition field Primary Drug e.g. logical field specification of FIG. B .

Referring now to the illustrative GUI screen is shown displaying the condition definition window Condition Details of after selection of the condition field Primary Drug in . According to the window now displays an indication Primary Drug of the condition field that was selected for creation of the abstract recommendation. The indication is associated with a checkbox which is marked as being selected to indicate that the Primary Drug field is selected for specification of the abstract recommendation.

The window further displays a descriptor of a requested condition type for the abstract recommendation which is illustratively defined by a comparison operation Compare . The descriptor is associated with a radio button which is shown as being selected by default as described in more detail above with reference to . However it should be noted that with respect to the abstract recommendation the comparison operation is merely used to assign a recommended value to the selected condition field. In other words in the given example the comparison operation is used to assign a recommended value to the Primary Drug field as explained in more detail below. To this end the comparison operation is set by default to the assignment parameter i.e. equal to in one embodiment.

In order to allow user selection of the recommended value for the selected condition field a list of available values e.g. values of is displayed for the field each having an associated radio button for selection thereof. Illustratively a radio button was selected by the user to assign a value 5FU to the selected condition field Primary Drug . Then by clicking the pushbutton Apply the abstract recommendation is created on the basis of the selections specifications which have been determined using the window of .

Referring now to the illustrative GUI screen is shown displaying the panel Define Conditions after selection of the pushbutton Apply in . According to the second display area Condition Summary of the panel now displays summary information with respect to the abstract recommendation which was created for the consequential statement using the window of . More specifically the second display area includes an indication which represents the created abstract recommendation i.e. Primary Drug 5FU . The indication is associated with a checkbox which allows the user to indicate whether the abstract recommendation according to the indication should be included with the consequential statement. If not the pushbutton Delete can be clicked to delete a selected abstract recommendation from the second display area .

If the user has specified all abstract recommendations that are required for the consequential statement the user may click the pushbutton DONE to return to display of the panel of to continue and or complete specification of the abstract rule. However in one embodiment the user may specify one or more additional abstract recommendations for the consequential statement as described above with reference to .

Referring now to the illustrative GUI screen is shown displaying the panel after selection of the pushbutton Done in . According to the rule summary area now displays the conditional statement and an indication of the consequential statement hereinafter referred to as the consequential statement for brevity that was created for the abstract rule of the new abstract rule set according to .

The conditional statement is associated with a checkbox and the consequential statement is associated with a checkbox . The checkboxes and allow separate selection of the conditional and or the consequential statement for a required processing. For instance if the checkbox is selected and a pushbutton Delete is clicked the conditional statement is deleted. If a pushbutton Edit is clicked a GUI screen is opened which allows editing of the conditional statement. Furthermore if a pushbutton Copy is clicked the conditional statement is copied for instance for an additional abstract rule for the new abstract rule set. The provision of copying functions made available by e.g. the pushbutton allows the user to reuse previously composed statements in building other abstract rules. Such additional abstract rules can also be created by selecting the pushbutton New Rule . In this case the additional abstract rules can be created as described above with reference to .

However for simplicity assume that the new abstract rule set should only include the abstract rule that was created as described above with reference to . An exemplary abstract rule corresponding to this abstract rule is shown in Table III below which for simplicity is described in natural language without reference to a particular encoding language.

Illustratively the exemplary abstract rule shown in Table III includes in lines 002 003 the conditional statement which was created according to . The consequential statement that was created according to is shown in line 005. By way of example the exemplary abstract rule of Table III is implemented as an IF THEN rule. In other words if the conditional statement in lines 002 003 is resolved to true with respect to underlying inputs to the exemplary abstract rule then the recommendation included with the consequential statement in line 005 is returned.

As was noted above with reference to the user may now click one of the pushbuttons Save Save and Close or Close . If one of the pushbuttons or is clicked after creation of a new abstract rule s or if the selectable tab Manage Rule Set is clicked the GUI screen of is displayed.

Referring now to the illustrative GUI screen is shown displaying a panel after selection of the selectable tab Manage Rule Set in . The panel is configured to allow the user to manage the new abstract rule set which has been created as described above with reference to .

Illustratively the panel includes a first input field and a second input field . The first input field is configured to receive user input specifying a name for the new abstract rule set. Illustratively My RuleSet was entered into the first input field as name for the new abstract rule set. The second input field is configured to receive user input for a short description of the new abstract rule set. Illustratively This is a demo rule set that will set a primary drug recommendation based on a very simple rule. was entered into the second input field as short description for the new abstract rule set.

The user may then again click one of the pushbuttons and . Assume now that the user clicks the pushbutton Save to create a new rule set data object. Accordingly in the given example a rule set data object My RuleSet is created which is persistently stored. The persistently stored rule set data object My RuleSet includes the abstract rule illustrated in . Subsequently the rule set data object My RuleSet can be retrieved for execution on suitable inputs as explained in the following with reference to .

Referring now to an illustrative GUI screen is shown displaying a query result and a graphical selection element for selection of an analysis routine. By way of example the query result defines a medical condition of a patient of a medical institution. Assume now that a doctor in the medical institution wants to determine a treatment recommendation for the patient on the basis of the medical condition which is defined by the query result .

According to one aspect the query result was obtained in response to execution of an abstract query e.g. abstract query of against an underlying database e.g. database of having required result data. The abstract query may have been created using a suitable data request form e.g. data request form of as described above with reference to . Accordingly the abstract query was configured for retrieval of field values from the required result data for each condition field of the conditional statement of the exemplary abstract rule of Table III. However it should be noted that the invention is not limited to execution of an abstract query in order to determine a suitable query result. Instead any suitable query type including SQL and XML queries is broadly contemplated.

Illustratively the query result includes only a single data record having three different result fields ID Age and Endothlin1 . In the given example the data record includes a field value 30 for the result field Age which corresponds to the condition field Age in line 002 of Table III. The data record further includes a field value Down for the result field Endothlin1 which corresponds to the condition field in line 003 of Table III.

The query result can be stored deleted or otherwise processed. To this end the GUI screen illustratively displays suitable pushbuttons which are configured to initiate a requested processing. Furthermore CSV and or XML output can be created on the basis of the query result by clicking a corresponding one of displayed hyperlinks .

In one embodiment the query result is used as input to a requested analysis routine that is defined by one or more abstract rule sets. However it should be noted that in one embodiment the input to the analysis routine is provided without execution of a query against an underlying database. For instance the input is provided by a user using the user interface of . All such different implementations are broadly contemplated.

Illustratively the requested analysis routine can be selected by selecting an underlying abstract rule set from the graphical selection element which is illustratively implemented as a drop down list. The drop down list includes a list of available persistently stored abstract rule sets which can be selected for execution on the query result . By way of example the abstract rule set My RuleSet that was created according to above is selected. Assume now that the abstract rule set My RuleSet is configured to return a suitable treatment recommendation. Assume further that the doctor in the given medical institution executes the requested analysis routine which is defined by the abstract rule set My RuleSet on the query result to determine the treatment recommendation for the given patient.

The requested analysis routine is executed on the query result by clicking a pushbutton RUN . As was noted above the abstract rule set My RuleSet which defines the requested analysis routine only includes the exemplary abstract rule of Table III. In other words in the given example execution of the exemplary abstract rule of Table III is initiated by clicking the pushbutton . An exemplary method of executing the abstract rule of Table III on the query result is described below with reference to .

It should be noted that the GUI screen is merely illustrated by way of example and that various other implementations are possible. For instance in one embodiment the user may initially select the requested analysis routine by selecting the underlying abstract rule set from the drop down list . Then in response to clicking the pushbutton RUN a data request form e.g. data request form of is displayed to the user. As was noted above the data request form can be configured to guide the user through selection of suitable result fields for an abstract query which are configured to retrieve all field values that are required as inputs to the selected analysis routine. After user specification of the abstract query using the data request form the abstract query is executed and the query result is obtained. The selected analysis routine is then executed on the query result as described above. It is understood that all such different implementations are broadly contemplated.

Referring now to an exemplary method of generating recommendations using a suitable rules engine e.g. rules engine of is illustrated. At least part of the steps of method are performed using an abstract rule translator e.g. abstract rule translator of an application e.g. application of and an abstract model interface e.g. abstract model interface of . In one embodiment the method is performed in response to a click on pushbutton of the exemplary GUI screen of . Method starts at step .

At step all abstract rules defining a selected analysis routine are retrieved for execution on provided inputs. Each retrieved abstract rule has a conditional statement and a consequential statement. In the given example the selected analysis routine is defined by the abstract rule set My RuleSet and the provided inputs are defined by the field values and of the query result according to . Accordingly only the abstract rule of Table III is retrieved for execution on the field values 30 and Down . By way of example the following steps of the method are explained with reference to the given example.

At step the abstract rule of Table III is transformed into a transformed rule. In one embodiment the transformed rule is executable by the suitable rules engine. An exemplary method of transforming an abstract rule into a transformed rule is described in more detail below with reference to .

According to one aspect transforming the abstract rule into the transformed rule includes generating an output template for the selected analysis routine. The output template includes a plurality of tags one for each possible output of the selected analysis routine. Thus the output template can be completed with suitable outputs defined by the selected analysis routine after execution of the selected analysis routine on the provided inputs and returned as analysis result. However any suitable implementation that allows an obtained analysis result to be returned is broadly contemplated.

At step the transformed rule is executed on the query result of Table III by the suitable rules engine. At step it is determined whether the conditional statement in lines 002 003 of the abstract rule of Table III resolves to true with respect to the field values and of . If the conditional statement is not resolved to true method exits at step . If however the conditional statement is resolved to true method continues at step . In the given example the field values and of the query result satisfy the conditional statement of lines 002 003 of Table III i.e. the Age is less than 40 years and the Endothlin 1 gene is down. Accordingly the conditional statement is resolved to true and the method continues at step .

At step the abstract rule of Table III fires. In other words a particular recommendation defined by the consequential statement of the abstract rule of Table III is returned. In the given example the recommendation of line 005 of Table III is returned to the doctor i.e. the recommendation to prescribe for the patient as primary drug the drug 5FU. Method then exits at step .

Referring now to an exemplary method of transforming an abstract rule e.g. abstract rule of into a transformed rule is illustrated. At least part of the steps of method are performed using a suitable abstract rule translator e.g. abstract rule translator of and an underlying data abstraction model e.g. data abstraction model of . In one embodiment the method is entered from step of the method of . By way of example the method is explained with respect to transformation of the abstract rule of Table III above into a transformed rule that is accepted by a suitable rules engine e.g. rules engine of . The transformed rule is described with reference to the ABLE rule language ARL which is accepted by a multiplicity of available rules engines. However any other suitable language is broadly contemplated. Method starts at step .

At step the abstract rule of Table III is retrieved for transformation. For instance the suitable abstract rule translator retrieves the abstract rule from an underlying database e.g. database of . In one embodiment the retrieved abstract rule is defined in a computer readable language such as XML. However any suitable computer readable language is broadly contemplated.

At step all conditions fields are identified from the conditional statement in lines 002 003 and the consequential statement in line 005 of the exemplary abstract rule of Table III. In the given example the condition fields Age and Endothlin1 are identified from the conditional statement. The condition field Primary Drug is identified from the consequential statement. Furthermore all logical field specifications from the underlying data abstraction model which are referenced by the identified condition fields are determined. For instance the logical field specification Endothlin1 of is determined with respect to the condition field Endothlin1 and the logical field specification Primary Drug of is determined with respect to the condition field Primary Drug .

At step a variable declaration is created for each identified condition field. To this end all data types of the referenced logical field specifications are determined from the underlying data abstraction model. In the given example the data type Categorical is determined for the logical field specifications Endothlin1 and Primary Drug according to the type attributes and in . Assume further that the data type Integer is determined for the logical field specification Age e.g. data type of . Furthermore any retrievable enumeration of valid values for each one of the referenced logical field specifications is determined from the underlying data abstraction model. For instance the valid values up weak and down are determined from the Endothlin 1 field specification of . On the basis of the determined referenced logical field specifications the determined data types and enumerations of valid values corresponding variable declarations are generated as described in more detail below with reference to .

At step an inputs specification is created for the identified condition fields of the conditional statement on the basis of the referenced logical field specifications. Furthermore at step an outputs specification is created for the identified condition fields of the consequential statement. Creation of the inputs specification and the outputs specification in the given example is described in more detail below with reference to .

At step a rule specification is created for the IF THEN statement defined by the abstract rule of Table III. Creation of the rule specification in the given example is described in more detail below with reference to .

The variable declaration the inputs specification the outputs specifications and the rule specification define the transformed rule which is accepted by the suitable rules engine. Method then exits at step .

Referring now to a schematic diagram is shown which illustrates generation of variable declarations for the identified condition fields Age Endothlin1 and Primary Drug in the given example. The schematic diagram includes an illustration of the abstract rule of Table III above having the conditional statement according to and the consequential statement according to . The schematic diagram further includes a schematic illustration of the data abstraction model of with the logical field specifications and . Furthermore the schematic diagram includes a variable declaration for the identified condition fields. As was noted above the variable declaration is generated in the ABLE rule language ARL by way of example.

The variable declaration includes a generic section which indicates that all enclosed code in the declaration defines variables of the transformed rule. For each condition field which has no enumeration of valid values a variable is declared according to the determined data type of the field. In the given example a variable Integer Age is declared for the condition field Age as illustrated by an arrow . For each condition field which has an enumeration of valid values a corresponding definition including the enumeration of valid values is declared according to the determined data type. In the given example a definition Categorical Endothlin1 new Categorical new String Down Up Weak is created for the condition field Endothlin1 as illustrated by an arrow . Similarly a definition is created for the condition field Primary Drug as illustrated by an arrow . The definitions and include enumerations of corresponding valid values which are retrieved from the referenced logical field specifications and as illustrated by arrows and .

Referring now to a schematic diagram is shown which illustrates generation of an inputs and an outputs specification for the identified condition fields Age Endothlin1 and Primary Drug in the given example. The schematic diagram includes the illustration of the abstract rule having the conditional statement and the consequential statement according to . The schematic diagram further includes an inputs and outputs declaration for the identified condition fields. As was noted above the inputs and outputs declaration is generated in the ABLE rule language ARL by way of example.

The inputs and outputs declaration illustratively includes an inputs specification and an outputs specification . In the inputs specification all logical field specifications that are referenced by condition fields included with the conditional statement are declared as illustrated by arrows and . Accordingly in the given example the inputs specification is defined as inputsAge Endothlin1 . In the outputs specification all logical field specifications that are referenced by condition fields included with the consequential statement are declared as illustrated by an arrow . Accordingly in the given example the outputs specification is defined as outputsPrimary Drug .

Referring now to a schematic diagram is shown which illustrates generation of a rules specification for the IF THEN statement that is defined by the abstract rule of Table III in the given example. The schematic diagram includes the illustration of the abstract rule having the conditional statement and the consequential statement according to which form the IF THEN statement. The schematic diagram further includes a rules specification of the IF THEN statement in the ABLE rule language ARL by way of example.

The rules specification illustratively includes a generic section which indicates that all enclosed code in the specification defines IF THEN statements of the transformed rule. Furthermore the specification includes a statement defining the IF THEN statement that is defined by the abstract rule of Table III in the given example. More specifically the statement includes a specification of the conditional statement as illustrated by an arrow and a specification of the consequential statement as illustrated by an arrow .

It should be noted that rule creation using the ABLE rule language is well known in the art. Therefore a more detailed description of the transformation of the abstract rule into the transformed rule is not necessary.

Referring now to an exemplary method of managing execution of an analysis routine on a query result e.g. query result of is illustrated. At least part of the steps of method are performed using a suitable user interface e.g. user interface of . Method starts at step .

At step a query e.g. abstract query of is executed against an underlying database e.g. database of to obtain a query result e.g. result set of . By way of example assume that a user such as a doctor in a medical institution creates a query to obtain age information for a given patient from a database of the medical institution. Accordingly if the doctor identifies the given patient using an associated patient identifier such as 2 and if the given patient is 30 years old the exemplary query result of Table IV below can be obtained.

Illustratively the exemplary query result shown in Table IV comprises identifier ID and age Age information for the given patient in line 002.

At step user selection of an analysis routine for execution on the query result is received. For simplicity assume that the analysis routine is selected as described above with reference to . In other words in the given example the selected analysis routine is defined by the abstract rule set My RuleSet which is defined by the abstract rule of Table III above.

At step the selected analysis routine is executed on the query result. In other words in the given example the abstract rule of Table III is executed on the query result of Table IV. An exemplary method for managing execution of the selected analysis routine on the query result is described in more detail below with reference to . Method then exits at step .

Referring now to an exemplary method of managing execution of a selected analysis routine is illustrated. By way of example method is explained with reference to the given example in which the abstract rule of Table III is executed on the query result of Table IV.

Method starts at step where all required inputs are identified for each abstract rule defining the selected analysis routine. As was noted above in the given example required inputs to the abstract rule of Table III are field values for the condition fields Age line 002 of Table III and Endothlin1 line 003 of Table III .

At step it is determined whether the query result includes result data for all required inputs. If the query result includes result data for all required inputs corresponding field values are determined from the result data for each required input. Processing then continues at step . If however the query result does not include result data for each required input step is performed for all field values included with the result data which can be used as inputs to the abstract rule and processing then continues at step . In the given example only the field value 30 for the Age field according to line 002 of the exemplary query result of Table IV can be determined as input to the Age condition field of the abstract rule of Table III line 002 at step before processing continues at step .

At step suitable data is retrieved for inputs of the abstract rule for which no field values can be determined from the query result. In the given example the exemplary query result of Table IV does not include a field value which is suitable as input to the condition field Endothlin1 of the abstract rule of Table III line 003 . In one embodiment this field value can be determined by issuing a suitable query against the underlying database. In the given example a query which requests for Endothlin1 gene expression values for the given patient having the identifier 2 can be generated and issued against the database of the medical institution. Thus suitable data having at least one data value which can be used as field value defining the input to the Endothlin1 condition field of the abstract rule of Table III line 003 can be retrieved.

At step the field value defining the input to the Endothlin1 condition field is determined from the suitable data. Assume now that the suitable data only includes a single data value Down which is thus determined as the field value. Processing then continues at step . However it should be noted that the suitable data may include a multiplicity of data values which may potentially be used as the field value defining the input. Accordingly in one embodiment the user i.e. in the given example the doctor can be prompted to select one of the multiplicity of data values as the field value. In another embodiment a point in time of current execution of the analysis routine can be identified. Then a data value of the multiplicity of data values that was obtained at a point in time being the closest point in time before the identified point in time can be identified as the field value defining the required input. Still another embodiment is described below with reference to . All such implementations are broadly contemplated.

At step the selected analysis routine is run on all determined field values which define the required inputs to the analysis routine. In the given example the abstract rule of Table III is run on the field value 30 for the Age condition field and the field value Down for the Endothlin1 condition field as described above. Processing then returns to step of .

Referring now to an exemplary method of managing execution of a selected analysis routine on one or more inputs is illustrated. The method is configured to validate at least one of the one or more inputs as valid input s to the selected analysis routine.

In one embodiment the method is performed when the pushbutton Run in the exemplary GUI screen of is clicked as described above. In this case the one or more inputs are defined by the query result of and the selected analysis routine is defined by the abstract rule of Table III. In the following the method is exemplified with respect to this example. However it should be noted that the one or more inputs can be any suitable inputs such as inputs provided by a user using the user interface of . All such implementations are broadly contemplated. Method starts at step .

At step the selected analysis routine which is configured to process the one or more inputs is accessed. In the given example the abstract rule of Table III is retrieved e.g. from an underlying database e.g. database of and accessed.

At step a predefined validating condition that needs to be satisfied by at least one of the one or more inputs is determined from the analysis routine. In one embodiment the predefined validating condition is determined from at least one abstract rule of an abstract rule set defining the selected analysis routine. For instance assume that in the given example the abstract rule of Table III includes a predefined validating condition on the Endothlin1 condition field line 003 of Table III . Assume further that the predefined validating condition requests that only a most recent field value of an available series of field values should be used as input to the selected analysis routine with respect to the Endothlin1 condition field. Alternatively the predefined validating condition may request that the field value which is used as the input should be included within a predefined valid value range. All such embodiments are broadly contemplated.

At step a particular data value defining the at least one of the one or more inputs is validated using the predefined validating condition. In the given example assume that the particular data value is the field value of i.e. the value down which is determined by the query result as input to the selected analysis routine with respect to the Endothlin1 condition field in line 003 of Table III. An exemplary method of validating a data value using a predefined validating condition is described in more detail below with reference to .

At step it is determined whether the particular data value was validated using the predefined validating condition i.e. whether the particular data value is a valid value. If the particular data value is a valid value processing continues at step where the selected analysis routine is executed on the one or more inputs. For instance assume that in the given example the predefined validating condition is configured to validate the particular data value only if the value is a most recent value. Accordingly if the particular data value Down is the most recent value the abstract rule of Table III is executed on the query result of . Executing the abstract rule of Table III on the query result of is described in above. Method then exits at step .

If however the particular data value is not a valid value processing continues at step . By way of example assume that in the given example the most recent value which can be retrieved with respect to the Endothlin1 condition field is Up . Accordingly the particular data value Down is an invalid value.

At step a predefined action is performed that is configured to prevent execution of the selected analysis routine on an input that is defined by the invalid value Down . By way of example the predefined action includes i disabling execution of the selected analysis routine on the invalid value ii issuing a notification indicating that the particular data value is invalid and iii replacing the particular data value with a valid data value that satisfies the predefined validating condition as explained in more detail below with reference to . Method then exits at step .

Referring now to an exemplary method of validating the particular data value using the predefined validating condition according to step of the method of is illustrated. By way of example method is explained with reference to the given example in which the predefined validating condition is configured to validate the particular data value down as input to the selected analysis routine with respect to the Endothlin1 condition field only if the value is a most recent value.

Method starts at step where a query e.g. abstract query of against an underlying database e.g. database of is generated. In one embodiment the generated query includes a specific result field that corresponds to the condition field that is referenced by the predefined validating condition. The query is configured to retrieve a most recent value for the specific result field. Accordingly in the given example the query is configured to retrieve a most recent value with respect to an Endothlin1 result field. In one embodiment timeline type metadata such as described in commonly owned U.S. patent application Ser. No. 11 035 710 filed Jan. 14 2005 entitled TIMELINE CONDITION SUPPORT FOR AN ABSTRACT DATABASE which is also incorporated herein by reference in its entirety can be used to retrieve the most recent value for the specific result field.

At step the generated query is executed against the underlying database to retrieve the most recent value. Assume now that in the given example the value up is retrieved as the most recent value for the Endothlin1 result field as described above.

At step the retrieved most recent value is compared to the particular data value in order to determine whether the particular data value is the most recent one. If the particular data value is the most recent value the particular data value is validated at step and processing continues at step of the method of . If however the particular data value is not the most recent value processing continues at step .

At step the particular data value is replaced with the most recent value and validated. However other operations can be performed instead of or together with replacing the particular data value with the most recent value. For instance the user can be prompted to indicate whether the particular data value should be replaced. Furthermore the user can be notified that the particular data value is not valid without replacing the particular data value. All such implementations are broadly contemplated. Processing then continues at step of the method of .

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

