---

title: Efficient caching for dynamic webservice queries using cachable fragments
abstract: A method and apparatus for intelligent caching is provided. A thin layer of business logic on a web server receives URL requests sent to the web server from clients and resolves the URLs into URLs corresponding to component parts of the requested document according to the rules of a rule set. Thus only the component resources of a composite document are cached in the web server's caching layer. The rule set defines a format for the requests sent to the web server, the manner in which properly formatted requests should be resolved, and the manner in which the component resources should be assembled into the composite document.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07962502&OS=07962502&RS=07962502
owner: Yahoo! Inc.
number: 07962502
owner_city: Sunnyvale
owner_country: US
publication_date: 20081118
---
The present invention relates to caching resources at a web server and more specifically to techniques for using an Application Programming Interface to cache component resources comprising a composite resource.

The Internet is a powerful tool for disseminating information. Many times the information that can be found on the Internet is in the form of documents composed of many component resources. When a composite document non limiting examples of which are a HyperText Markup Language HTML document an Extensible Markup Language XML document a Wireless Markup Language WML document a compact HyperText Markup Language cHTML document or an Extensible HyperText Markup Language XHTML is requested by a particular client generally the requested document is compiled by web applications and sent to the client via a web server. Clients can be browser based or clients can comprise non browser applications that have the capability to request information over the Internet.

As illustrated in an example cache layer associated with web server stores several documents . Each of these documents is stored for an amount of time that is negotiated by web server and web application which is called Time To Live TTL . Once a document has been stored in cache layer for longer than the document s TTL the document is considered expired. An expired document is evicted from the cache. After a resource such as a document has been evicted in this way a request for the resource must go through the web application . Documents in the cache generally are indexed in cache layer by each document s URL.

For example a request for a document with the URL URL1 might be sent to web server from a client such as client of . Cache layer associated with web server has cached resources that have not expired and that are associated with URL1 URL2 URL3 and URL4 respectively. Web server sends URL1 into cache layer to check if resource associated with URL1 is in cache layer and unexpired. Because cache layer has an unexpired copy of cached resource associated with URL1 web server simply returns resource to the client from cache layer without having to make a request to web application .

Still referring to if the client then sends a request for URL5 to web server then web server will check to see if resource associated with URL5 is cached in cache layer . Because cache layer does not have resource associated with URL5 cached web server requests resource from web application . Web application returns resource to web server . As illustrated in web server then caches resource associated with URL5 in cache layer . Thus any subsequent request for URL5 before resource expires will be fetched from cache layer without involvement of web application .

Storing requested resources in cache layer may save time for subsequent requests. However one problem with this caching system is that the TTL value for a composite document is generally equal to the shortest TTL of the resources making up the composite document. If for example a composite document is composed of a video clip with a TTL of one week a description of the video clip with a TTL of one week and viewer commentary about the video clip with a TTL of five minutes then the TTL of the composite document will be only five minutes. As a result the entire document will be retrieved from the web application rather than cache layer once the document has been evicted from cache layer after five minutes though the video clip and the description of the video clip are technically unexpired and only the viewer commentary needs to be refreshed. Also business logic running on web server that processes the request for the composite document might be written to rebuild the entire composite document from the document s component parts after the document expires in the cache layer . Thus the nature of this business logic running on web server can result in unnecessary calls to web application to fetch components of the composite document that have not expired.

Another problem with previous approaches is that if three different resources contain the same news story but are indexed by different URLs then the cache layer caches each resource separately indexed by its respective URL. The result is that three separate instances of the same news story are held in the cache which is a waste of cache space.

The approaches described in this section are approaches that could be pursued but not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

One embodiment of the invention illustrated in comprises a front end application a thin layer of business logic running on a web server . In another embodiment of the invention front end application is implemented on a different machine from web server . In this embodiment either front end application or web server can have access to rule set .

Front end application receives URL requests sent to web server from clients and resolves the URLs into URLs corresponding to component parts of the requested document according to the rules of a rule set . For example composite document in comprises title image genre director user commentary and critical acclaim resources . Front end application resolves a request for composite document into URLs corresponding to resources . Front end application requests from web server resources and not composite document itself. In another embodiment of the invention front end application receives the component parts of composite document fetched by web server and uses a template associated with rule set to construct composite document from the component parts. Composite document constructed by front end application is sent to client which requested composite document . Client knows the format of requests that can be properly interpreted according to the rules of rule set . Client also knows the format of the response indicated by the template associated with rule set .

Thus through use of rule set front end application can be configured to cause web server on which front end application runs to cache only the component parts of a composite document rather than the document as an indivisible whole. Caching the component resources of a composite document allows each component resource to be fetched only as often as the component resource s particular TTL indicates. Also resources that are common to several different composite documents are not stored separately with each of the composite documents a common resource is cached only once under its own component specific URL. As such these embodiments of the invention leverage the built in capability of cache layer with minimal overhead. Additionally because rule set is known to both front end application and client configuration of rule set allows for sophisticated handling of resource requests.

All resources including composite documents are identified by a unique URL. Client uses the URL of a resource to request the resource from web server and in return client receives a representation of the resource from web server . Each of documents and in is associated with a unique URL. Additionally these documents are related because each of them shows a different level of information about the same film A Cactus Blooms. In the case of composite documents and the associated URLs have a common base URL because documents and are related. A base URL of related composite documents is a part of the URL that each of the related documents and have in common. Thus if the URL associated with document is http yahoo.com video 123 response fullcommentary the URL associated with document is http yahoo.com video 123 response director genre the URL associated with document is http yahoo.com video 123 and the URL associated with document is http yahoo.com video 123 response about then one base URL common to the three documents is http yahoo.com video 123. Also http yahoo.com video and http yahoo.com could be base URLs for documents and .

Rule set indicates which part of a URL corresponding to a composite document represents the component resources of the composite document. Rule set also indicates the form for the URLs corresponding to those component resources. In one embodiment of the invention front end application running on web server has access to a configuration file that embodies rule set . In another embodiment of the invention each base URL maps to a unique configuration file embodying rule set rules pertaining to the particular URL. In yet another embodiment of the invention one configuration file contains rule set rules for multiple distinct base URLs. In such an embodiment each base URL in the one configuration file maps to a portion of the configuration file with the rules pertaining to the particular URL. In each of these embodiments configuration files have the capability to refer to rules in other configuration files.

Rule set also defines a template of how to assemble the component resources of a composite document to form the composite document. In one embodiment of the invention this template is in the same configuration file as the rules for resolving URLs from rule set . In another embodiment of the invention the template couples each component resource of a composite document with an XQuery criterion identifying a position in an XML file. Front end application assembles the representations of the component resources in the XML file according to the template and returns the XML file to client as the requested composite document. In another embodiment of the invention the representation of the particular component resource returned by web server is in XML.

In one embodiment of the invention the web application front end application and client are Representational State Transfer REST based web services and the configuration files to which front end application has access embodying the template and the rules of rule set for resolving URLs are written in an extension of the Web Application Description Language WADL . WADL is a computer language that can be used to create a machine readable definition of an interface like rule set . One of the advantages of this embodiment of the invention is that the implementation at front end application is obscured from client . This allows front end application or the configuration file to change as long as the interface used by client as defined by rule set remains the same.

The following is an example configuration file Table 1 containing the rule set rules for composite documents and of . Following Table 1 is a description of how front end application would a use the rules in the configuration file to resolve requests for composite documents and and b use the template in the configuration file to assemble the pieces of the documents.

The structure and implementation of the Configuration File of Table 1 is presented as a non limiting example though it could be structured and implemented any number of ways according to the embodiments of this invention. More specifically the implementation of the Configuration File is inherently flexible to meet varying goals within the scope of the embodiments of the invention. The Configuration File of Table 1 is a fragment of a file written in an extension of WADL. Thus the majority of the XML nodes in the Configuration File are found in the WADL specification. The param parts and response parts nodes and the children of those nodes comprise a portion of the extension to WADL. The param parts node and the representation parts node have an attribute xmlns http frag cache which indicates a name space from which definitions for the configuration file may be obtained. Extensions and implementations other than those shown may be made to WADL to facilitate the implementation of embodiments of this invention.

The Configuration File is mapped to the base URL http yahoo.com video as indicated by the path attribute of the resource node path video id. However this configuration file could also be mapped to any number of URLs such as http yahoo.com video 123 or http yahoo.com. The specific mapping of the configuration files to base URLs is flexible according to the need of the situation. Because the Configuration File is mapped to http yahoo.com video rule set embodied in the configuration file will be applied to any URL with that base. If a separate configuration file were mapped to http yahoo.com video 123 then a request for a video with the id 123 would use the rules in the separate configuration file and the requests with the base http yahoo.com video corresponding to any other video would map to the Configuration File. Thus in one embodiment of the invention front end application uses the most specific base URL found in the requested URL that maps to a configuration file.

Referring to the flowchart of at step client sends the URL request http yahoo.com video 123 to web server with front end application . Then in step front end application initiates identification of a configuration file that corresponds with a base of the URL if any. Assuming that front end application has access to the Configuration File of Table 1 and no other configuration file maps to the more specific URL http yahoo.com video 123 the application will identify the Configuration File of Table 1 as the applicable rule set .

The application then uses rule set to resolve the URL request into component resource requests as in step by first identifying the portion of the configuration file that will be used to resolve the requested URL. Because the URL is a request to retrieve a resource the pertinent method is GET which is identified in the method tag of the configuration file. The method tag has a two attributes fc origin decorators and fc origin decorators param. The value of the fc origin decorators attribute base defines the default set of resources to request from web server when there are no parameters in the requested URL. The value of the fc origin decorators param attribute is the name of the parameter to insert into the URLs of the component resources to be requested from web server . Thus in the present example front end application resolves the requested URL http yahoo.com video 123 into http yahoo.com video 123 parts base and sends that URL to web server at step .

At step web server determines if a resource corresponding to http yahoo.com video 123 parts base is in cache layer as web server would do with any other request for a resource. If the resource associated with the URL is cached and unexpired then web server sends the resource to front end application directly from the cache in steps and . If the resource is not cached or has expired then web server makes a request for the resource to the appropriate web application as in step and returns that resource to front end application in step . Thus the web application returns the base information for the video which comprises only title and image as in document of . This set of base information is programmed into web application as are the responses to all other valid requests.

The front end application uses the template found in the Configuration File to format an XML response to client in step . Specifically front end application finds the response part node corresponding to base which is the response part node with the attribute determinant that has a value of response base because response is the name of the parameter used to request the composite document comprising the resource. The xquery attribute of that response part node indicates that the position of the representation of the resource received from web server is video base. The value immediately after the double slash is defined by the XQuery criterion to be the root node of the subject XML file. Thus the root node of the XML response document is video and the representation of the resource is to be placed under a child node of video called base. The front end application creates the document prescribed by the template and returns the document to client in step . Those of skill in the art will recognize that these implementation details can be varied while still being in keeping with the embodiments of this invention.

In a related example client requests the URL http yahoo.com video 123 response base from web server . Again the applicable method is GET because the URL is a request for a resource. However unlike the previous example the requested URL contains a parameter response base which instructs front end application to search for this parameter in the configuration file. In this example the parameter consists of everything after the question mark in the requested URL as is customary in REST based applications but those of skill in the art will understand that parameters can be indicated in URLs by other methods.

The param tag under the method tag describes the format of parameters that conform to rule set . The param tag indicates that the name of the parameter in the requested URL response is a valid parameter name. Under the param node is a set of param part nodes that indicate possible values that could be associated with the parameter name response according to rule set . Specifically a URL parameter conforming to rule set in the Configuration File could include genre director fullcommentary base or any combination of these values. In the instant example the parameter is response base which is a valid value. The param part node corresponding to the value base does not have any child nodes which indicates to front end application that the value base is to be included in the URL to be sent to web server . Thus front end application will resolve http yahoo.com video 123 response base into http yahoo.com video 123 parts base. As in the previous example parts is the name of the parameter to be included in the URL for the component resource that is to be sent to web server .

As with the preceding example front end application submits http yahoo.com video 123 parts base to web server and web server returns a representation of the corresponding resource. Also as before front end application forms an XML document with video as the base node and base as a child node of video and includes the representation of the resource in the XML file under the base node. This XML document is then returned to client .

If front end application receives a request for http yahoo.com video 123 response fullcommentary which represents the composite document of then application goes through a similar process as with the immediately preceding example. Front end application will identify the Configuration File to be the applicable rule set because the base of the requested URL includes http yahoo.com video. Application parses out the parameter in the requested URL response fullcommentary and identifies fullcommentary to be a valid value for the parameter response. However unlike the previous example the param part node associated with the value fullcommentary has child nodes. These child nodes indicate that the URL containing the value fullcommentary as a parameter corresponds to a composite document comprising several resources. As such the requested URL will be resolved into several URLs requesting the several component resources that make up the composite document.

In one embodiment of the invention component resources of a composite document are requested from different web applications. For example a resource part node that has no origin url attribute such as those nodes under the param part node corresponding to fullcommentary with the origin decorators values of base genre director and critics are requested using the same base URL as the original request. That base URL corresponds to a particular web application. Furthermore those resource part nodes having an origin url attribute such as the resource part node corresponding to usercomments are requested using the URL specified by the origin url attribute. Thus in response to the request for http yahoo.com video 123 response fullcommentary mentioned above front end application submits to web server multiple requests corresponding to each of the resource part nodes under the param part node having the value of fullcommentary http yahoo.com video 123 parts base http yahoo.com video 123 parts genre http yahoo.com video 123 parts director http yahoo.com video 123 parts critics and http vitality.yahoo.com v1.5 comments type video amp id request.template.id amp user request.caller.id. It will be understood by those skilled in the art that the above example is non limiting and that rule set can be configured in many ways to request and compile resources from one or many web applications.

Each of the component URLs corresponds to a unique component resource with a separate TTL value. The TTL value for each component resource is set by the web service from which the component resource originates. Thus web server deals with each resource separately if a particular resource expires in the cache layer then the cache layer fetches only that particular resource. The resources are each delivered to front end application by web server . Front end application uses the template to formulate the composite document. As with the preceding examples front end application creates an XML file with a root node video. However unlike with the preceding examples front end application creates several child nodes under video as indicated by the Configuration File base genre director usercomments and critics. The representation for each corresponding resource is placed as a child node of the appropriate child of video to create the finished composite document to be returned to client .

As a further example client requests http yahoo.com video 123 response director genre which represents composite document of . Front end application recognizes that http yahoo.com video is a base URL of the requested URL which maps to the Configuration File of Table 1. The parameter in the URL response director genre has two values for response which indicates that client is requesting the information corresponding to both director and genre. 

The values director and genre are both valid values of response under rule set in the Configuration File. The resource part nodes under the param part node corresponding to director indicate that base and director are to be requested from web server . The resource part nodes corresponding to genre indicate that base and genre are to be requested. In one embodiment of the invention front end application requests the union of what is indicated by rule set . Thus in the present example application will request http yahoo.com video 123 parts director http yahoo.com video 123 parts base and http yahoo.com video 123 parts genre from web server .

As with the preceding examples the resources returned by web server are placed in an XML file according to the template in the Configuration File. Specifically a root node video is formed and child nodes base director and genre are formed under the root node. The representations of the requested resources are placed under the appropriate child nodes of the response XML comprising the composite document. The composite document is returned to client .

As a final example client requests http yahoo.com video 123 response about which represents composite document of . Front end application recognizes that http yahoo.com video is a base URL of the requested URL which maps to the Configuration File of Table 1. Application parses out the parameter in the requested URL response about and identifies about to be a valid value for the parameter response. The param part node corresponding to about has child nodes including one resource part node. This resource part node has an origin url attribute which as demonstrated above indicates an absolute path with which to request the resource part in which the origin url attribute is found. This resource part node is the only resource indicated that comprises the composite document about. Thus front end application resolves the requested URL into the URL of the origin url attribute which is http api.del.icio.us v1 posts get url request.url. 

Front end application submits http api.del.icio.us v1 posts get url request.url to web server and web server returns a representation of the corresponding resource. To form the composite document for return to client front end application forms an XML document with video as the base node and about as a child node of video as indicated by the Configuration File of Table 1. The representation of the resource is included in the XML file under the about node. This XML document is then returned to client .

The above examples are non limiting in that the examples illustrate the nuances of one implementation of front end application and rule set . Rule set provides a known set of rules to client and application through which the advantages of the embodiments of the invention may be accomplished.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

The invention is related to the use of computer system for implementing the techniques described herein. According to one embodiment of the invention those techniques are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another machine readable medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus embodiments of the invention are not limited to any specific combination of hardware circuitry and software.

The term machine readable medium as used herein refers to any medium that participates in providing data that causes a machine to operation in a specific fashion. In an embodiment implemented using computer system various machine readable media are involved for example in providing instructions to processor for execution. Such a medium may take many forms including but not limited to storage media and transmission media. Storage media includes both non volatile media and volatile media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications. All such media must be tangible to enable the instructions carried by the media to be detected by a physical mechanism that reads the instructions into a machine.

Common forms of machine readable media include for example a floppy disk a flexible disk hard disk magnetic tape or any other magnetic medium a CD ROM any other optical medium punchcards papertape any other physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM any other memory chip or cartridge a carrier wave as described hereinafter or any other medium from which a computer can read.

Various forms of machine readable media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are exemplary forms of carrier waves transporting the information.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution. In this manner computer system may obtain application code in the form of a carrier wave.

In the foregoing specification embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. Thus the sole and exclusive indicator of what is the invention and is intended by the applicants to be the invention is the set of claims that issue from this application in the specific form in which such claims issue including any subsequent correction. Any definitions expressly set forth herein for terms contained in such claims shall govern the meaning of such terms as used in the claims. Hence no limitation element property feature advantage or attribute that is not expressly recited in a claim should limit the scope of such claim in any way. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

