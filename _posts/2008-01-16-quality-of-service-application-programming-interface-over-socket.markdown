---

title: Quality of service application programming interface over socket
abstract: Disclosed is a Quality of Service (QoS) control mechanism for QoS-aware network applications running on computer devices. The mechanism provides IP socket-based QoS Application Program Interfaces (APIs) for QoS-aware applications for accessing MAC layer QoS function of network access devices. In various embodiments, the QoS mechanism utilizes QoS API over Socket (QAoS) handler and/or a MAC layer QAoS handler wrapper at the network access device to control and monitor the QoS data being transmitted by the application over the active network interface(s).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07830804&OS=07830804&RS=07830804
owner: Sierra Wireless, Inc.
number: 07830804
owner_city: Richmond, BC
owner_country: CA
publication_date: 20080116
---
This application claims benefit of Provisional Application No. 60 881 104 filed on Jan. 17 2007 which is incorporated by reference herein in its entirety.

This present disclosure relates to the field of communication networks and more specifically to the Quality of Service QoS support for network applications.

As network enabled computing systems and networks become ubiquitous and more diverse so do the data communication requirements of applications that utilize these networks. With this proliferation of computing devices there is a growing need to provide the necessary Quality of Service QoS for these communications services. QoS is generally referred to a resource reservation control mechanisms that allows network applications to maintain the guaranteed level of performance for the data flowing over various networks. Using QoS mechanisms network access devices such as modems routers switches and network servers can provide different priority to different applications users or data flows or to guarantee a certain level of performance.

Application network traffic types that may require a specific QoS include streaming multimedia IP telephony gaming and others. Each type of network traffic may requires a different type of data delivery service. For example streaming multimedia typically requires a high guaranteed throughput with reliable data delivery and a low level of variability of delay. On the other hand IP telephony typically require strict limits on delay and jitter but is much more tolerant of data loss. Therefore it is desirable for the networks to provide different QoS to each application in order to meet the user s expectations and provide a good user experience for that specific application.

One know approach for a QoS aware application to establish and maintain the necessary QoS for its network traffic is though QoS Application Programming Interfaces API of the computing device on which the application runs. Typically computing devices provide QoS APIs as part of an Operating Systems OS or platform specific library or service. Therefore such QoS APIs are inherently OS or platform specific. Given this it is difficult to design network applications with a QoS support across various OS platforms and networks. Attempts to do so typically result in an very complicated APIs or APIs with level of QoS coarseness and transparency that is too abstracted to provide any meaningful specification of QoS levels to the application.

This abstraction invariably results with the QoS API forgoing detailed control monitoring of the MAC layer functions. In the ISO OSI architecture Medium Access Control MAC functions govern the device s ability to access the network and have a significant impact on the overall QoS of the data communications service. In addition MAC functions measure dynamic conditions of the network such as level of interference and signal strength and thus crucial in monitoring levels of QoS of the network traffic. Therefore to ensure effective and successful support of QoS for network applications it is desirable for the MAC functions to be part of the QoS service solution.

Disclosed is a QoS control mechanism which provides QoS APIs for QoS aware applications running on computer devices for accessing the QoS functions of network devices via IP sockets. In one example embodiment the APIs associated with the non QoS aware operating systems may be replaced with the QoS APIs. The QoS API may cooperate with QoS functions of the network devices to achieve improved QoS support for the application. In one embodiment the QoS support may be implemented in the firmware of the physical network device and or in the device driver s for the device. In another embodiment an implementation of a higher level device driver to manage communications across multiple network devices and coordinate data communications across multiple networks to ensure the desired QoS service level may be provided.

In one example embodiment a novel QoS control mechanism utilizes QoS API over Socket QAoS handler and or a MAC layer QAoS handler wrapper to control and monitor the QoS of the data being transmitted and received by the application over the active network interface or interfaces. This mechanism allows support for network access devices connected directly to the system bus of the computer device or indirectly through an external interface. This support is provided in a largely OS and platform independent manner. OS or platform specific QoS API support or usage in the application may not be required. In addition the disclosed QoS control mechanism provides scalability to attach to future revisions for new network and MAC layer QoS schemes without requiring a change to the OS or platform. Other advantages of the disclosed QoS control mechanism will become apparent to those skilled in the art.

In one example embodiment a system for QoS control comprises one or more QoS aware applications and one or more QoS supporting network access devices. The system further comprises a QoS management and reporting communications protocol that operates between the one or more QoS aware applications and the one or more QoS supporting network access devices. The protocol is exchanged through a bi directional connection such as an Internet Protocol IP socket. The QoS aware applications control and manage QoS of data communications streams through a network access device.

In another example embodiment a method for QoS control comprises communicating data between one or more QoS aware applications and one or more QoS supporting network access devices using a QoS management and reporting communications protocol. The method further comprises controlling and managing the QoS for one or more data communications streams through a network access device. The management and reporting communications protocol is exchanged through a bi directional connection such as an IP socket.

Yet in another example embodiment a method for QoS control comprises establishing a bi direction connection between a QoS aware application and a QoS supporting network access device and communicating QoS related data through the established bi direction connection. The bi direction connection may be an IP socket. The connection may be established between a QoS aware application and a MAC layer of the QoS supporting network access device. The QoS related data may be communicated using a QoS management and reporting communications protocol.

Those of ordinary skill in the art will realize that the following description of a QoS control system and methods are illustrative only and is not intended to be in any way limiting. Other embodiments will readily suggest themselves to such skilled persons having the benefit of this disclosure. Reference will now be made in detail to implementations of the example embodiments as illustrated in the accompanying drawings. The same reference indicators will be used to the extent possible throughout the drawings and the following description to refer to the same or like items.

In the interest of clarity not all of the routine features of the implementations of QoS control mechanism are shown and described. It will of course be appreciated that in the development of any such actual implementation of the network access mechanism numerous implementation specific decisions must be made in order to achieve the developer s specific goals such as compliance with application system network and business related constraints and that these specific goals will vary from one implementation to another and from one developer to another. Moreover it will be appreciated that a development effort might be complex and time consuming but would nevertheless be a routine undertaking of engineering for those of ordinary skill in the field of telecommunication networks having the benefit of this disclosure.

In accordance with this disclosure the components process steps and or data structures described herein may be implemented using various types of operating systems computing platforms network devices computer programs and or general purpose machines. In addition those of ordinary skill in the art will recognize that devices of a less general purpose nature such as hardwired devices field programmable gate arrays FPGAs application specific integrated circuits ASICs or the like may also be used without departing from the scope and spirit of the inventive concepts disclosed herein. Where a method comprising a series of process steps is implemented by a computer or a machine and those process steps can be stored as a series of instructions readable by the machine they may be stored on a tangible medium.

The block diagram in illustrates one example embodiment of computer system with the capability to perform data communications over one or more communication networks in accordance with principles described herein. Computer system may include but is not limited to a personal computer a laptop computer a tablet computers a notebook computer an ultra mobile personal computer a server a cellular phone a personal digital assistant a multimedia device such as audio player video player gaming machine console digital camera video camera and any other computer controlled devices that is capable of data communications over a network .

Communication network may include but is not limited to a wired communication network and a wireless communication network . For example communication network may include but is not limited to a Wireless Local Area Network WLAN that utilizes Ethernet IEEE 802.3 IEEE 802.11 or other current or future LAN systems Wireless Wide Area Network WWAN that utilize 3GPP e.g. UMTS HSDPA LTE 3GPP2 e.g. CDMA EVDO or other current or future WWAN systems Wireless Metropolitan Area Network WMAN systems that utilize WiMAX IEEE 802.16 or other current or future WMAN systems Wireless Personal Area Network WPAN that utilize IEEE 802.15 Bluetooth and other WPAN systems.

In one example embodiment computer system may include a general purpose computer device which includes a processing unit such as an Intel Dual Core or Pentium processors an AMD Turion 64 processor or other types of CPU. It further includes a system bus that interconnects components of device . Device further includes a system memory that stores the Operation System OS . The system memory may also store one or more QoS aware applications to be run on the processing unit and other types of data . The system memory may include a random access memory RAM a read only memory ROM a programmable ROM PROM an erasable PROM EPROM a FLASH EPROM and other types of dynamic volatile and nonvolatile information storage medium. Device further includes one or more wired and or wireless networking interface devices connected directly to the computer device through the system bus and one or more external device interfaces such as a USB serial bus a serial port and IEEE 1394.

In one example embodiment the external device interface such as interface may be connected to one or more computer devices capable of performing data communication over a network on behalf of the computer system . Such an external device may be a modem device such as a dial up modem a cable modem a DSL model or other network access devices such a router a switch a wireless access point and the like. The modem device includes a corresponding external device interface such as a USB interface to provide a connection to the computer device for exchanging control and networking traffic data and one or more wireless and or wired networking interface devices . Such modem device may also include internal system memory with a standalone OS and other data as well as an internal system bus depending upon the complexity of the modem device .

It will be appreciated by those skilled in the art that in order for a QoS aware application to achieve the desired QoS for data communication over a network assuming the application requires a level of QoS higher than best effort that the computer device can achieve and guarantee the desired level of QoS without an interface to the QoS capability of the communication network an interface must exist between the application and the element in the MAC layer of a network interface device that is responsible for accessing the QoS capability of a communication network . Accordingly there is a need for a unique socket based or other type of bi directional link between the QoS aware application and QoS functions of the network interface devices .

In one example embodiment a novel QoS control mechanism provides QoS APIs for QoS aware application running on computer device for accessing the MAC layer QoS functions of network interface devices . In one example embodiment the QoS control mechanism provides support for network access devices connected directly to the system bus of the computer device or indirectly through an external interface such as USB interface . This support is provided in a largely OS and platform independent manner. It will be appreciated by those skilled in the art that OS or platform specific QoS API support in application may not be required.

In one example embodiment the network access mechanism may include an easily and well recognizable data communications interface such as sockets IP based or others to be used to transport QoS API messages. These QoS API messages may be transported between the application and the MAC layer of a directly or indirectly connected network interface devices . Since the existence of such a data interface is typically used between the application and the MAC layer of the network device in order to transmit or receive any network traffic data the data stack required to carry the QoS API over Socket QAoS messaging will typically be present in such a computing device and in the network interface devices .

In one example embodiment of the network access mechanism the QAoS capability of the MAC layer of a network interface device may be embodied in a MAC layer QAoS handler MQA . The MQA may be created in either the actual MAC layer of a networking interface device or as a wrapper around one or more MAC layers for one or more corresponding network interface devices. In the case where the MQA exists as a wrapper around a MAC layer that may or may not support a MQA natively the MQA may exist within the network interface device within a device or intermediate device driver for one or more network interface devices to interface with the computer device as part of the OS or in other ways. The latter cases may be used when a computer system supports more than one network simultaneously and it is desirable to maintain QAoS sockets between the application and the MQA when the data communication is being handed off amongst different networks over time.

In one example embodiment a QAoS capable application may include a QAoS handler . Handler is configured to initiate maintain and remove QAoS sockets over the same or similar socket interfaces used for communication of non QAoS data in attempt to meet the QoS requirements of the application . Therefore there is very little additional development required for application to support the usage of a QAoS interface for an OS and platform for which application already supports non QAoS data communication across a QAoS capable networking interface device. In addition the level of effort for porting support for QAoS across different OSs and platforms should be largely limited to the effort for porting support for non QAoS data communication across the same set of different OSs and platforms.

In one embodiment a MAC QAoS API handler MQA is provided for terminating any QAoS socket from the application . MQA facilitate server type management of the establishment maintenance and termination of QAoS sockets. MQA enable translation and forwarding the QAoS socket messaging requests received by the application to the MAC layer protocol messaging of the underlying network and network interface device . MQA translate and report any relevant MAC layer QoS status and event notifications to the application through a QAoS socket . MQA translate and forward any responses received from the MAC layer QoS management element for any requests previously forwarded to the MAC layer from the application . MQA are also configurable to provide other functions known to those skilled in the art.

In one example embodiment MQA may exist natively in the MAX layer . However in another example embodiment if the MAC layer of a networking interface device does not natively include a MQA a MAC QAoS handler MQA wrapper may exists somewhere between the networking stack of the computer device that application is running on and the MAC layer of the network interface devices so that there will be an interface for the QAoS messaging to the QoS management element of the MAC layer . Those of skill in the art may recognize that the above examples are not limiting and that MQA may exist in other forms and other locations of the computer system.

In one example embodiment MQA wrapper may be located in the device drivers provided for the networking interface device so that the device appears as if it natively provides MQA support to the OS platform and application as long as the drivers that are required for non QAoS data communication are present and installed on the OS and platform of the computer device that application is running on. However it is possible that the MQA could be located at a protocol layer higher than the device drivers of a networking interface device thus creating more QAoS dependency on the OS and platform of the computer device that application is running on. Though this is less desired there are other benefits to this approach that will be made apparent from further description of various embodiments.

In the case that a computer system supports connectivity with several networks simultaneously e.g. wired and wireless application may be configured to maintain its QAoS sockets with MQA while the data communication is being handled off over time and or dynamically or statically distributed amongst different networks simultaneously via two or more different network interface devices . To that end a Multi MAC QAoS handler arbitrator MMQAA may be provided to terminate and maintain a single set of QAoS sockets between application and two or more MQAs and or MQA wrappers so that the QoS related operations caused by the handoff between networks and corresponding network interface devices or dynamic or static distribution of data across the same networks is transparent to the application that utilizes the QAoS sockets if this seamless QoS operation across multiple network connections is desired by the application .

In one example embodiment MMQAA may be contained within an intermediate device such as an intermediate driver which may be directly or indirectly associated with the networking interface devices . In this manner MMQAA is relatively independent from the OS and underlying computing platform. Furthermore MMQAA may be configured to arbitrate QAoS sockets and operations carried thereon so that the intermediate driver must be present as long as the drivers that are required for non QAoS data communication arbitration across the network interface devices are present and installed on the OS and platform of the computer device that application is running on.

In another example embodiment MMQAA may be contained within an OS or platform specific portion of the computer device the application is running on. In this case the MMQAA can be embodied to maintain seamless and transparent QAoS sockets and operations with an application across any available networking interface device connected to the computer system for which the MMQAA has the ability to arbitrate QAoS operation between the MQA of the network interface device and the MQA s of one or more network interface devices connected to the same computer system. Those of skill in the art may recognize that the above examples are not limiting and that MMQAA may exist in other forms and other locations of the computer system.

In order to provide for any legacy applications that already utilize an OS or platform specific QoS API for which the OS or platform is to deprecate the existing OS or platform specific QoS API a QAoS shim may be provided in accordance with one example embodiment. The QAoS shim may perform any necessary translations between the OS or platform specific QoS API and the MQAs over the QAoS messaging sockets of any connected MQA capable network interface device . For example the format of the QoS requests and responses provided by the QoS API may not correspond map 1 to 1 to the QoS requests and response messages supported in the MQA in use i.e. they may be speaking different QoS control and status messaging protocol languages APIs . In this case the QAoS Shim may perform the translation of the QoS API language between the OS Platform and the MQA in use. In another example the OS Platform specific QoS API may only provide high level e.g. service Layer QoS APIs to the QoS aware application and the QAoS shim may translate between the upper level QoS APIs to the lower level e.g. network layer QoS APIs supported by the MQA in use. Yet in another example the QoS service flow classification etc. attributes to be specified by the application through the OS Platform specific QoS API may not support the same granularity ranges enumerations etc. that are supported by the MQA of the associated network interface device s in use. Therefore the QAoS shim would translate between these API attribute differences. In another example the OS platform specific QoS API may only be designed to specify the QoS capabilities of the radio access technologies available in the industry at the time of inseption of the OS platform e.g. 802.3 and 802.11 . In this case for scalability the QAoS shim may provide the necessary translation for the new QoS capability supported in new radio access technologies e.g. 802.16m as they became available without having to upgrade the OS Platform specific QoS API. Those of skill in the art may recognize that there are other methods for integrating the embodiments of the disclosed QoS control mechanism with the legacy applications or computer systems.

Those of skill in the art may recognize that when the MQA enabled network device has an IP address messages sent to this IP address by the QoS aware application may be looped back by the OS of the computer device on which QoS aware application is running. In order to avoid this problem an additional entry may be made in the OS routing table to accommodate for the MQA enabled network device. The MQA may monitor the incoming data traffic filtering on its assigned IP address. If there is a match and it is not a QAoS message it will be looped back to the OS this maintains backward compatibility . If there is a match and it is a valid QAoS message then it is processed by the MQA. The QoS aware application may monitor or register for OS call backs indicating when a network device has obtained an IP address. This will be the trigger to the application to start a QAoS session with the MQA enabled network device by generating a QAoS packet with destination address set to that of the new network device. A unique port number may be determined by the normal TCP session methods.

Accordingly the assigned IP addresses are used by the application to identify each MQA enabled network device and the unique port numbers are used by the MQA to uniquely define the QoS aware applications. In this manner each socket between a specific QoS aware application and a MQA of one or more associated network interface devices is unique so that MQA can identify and differentiate the requesting application from any other application and the requesting application can identify and differentiate a particular MQA and associated network interface device s for which a QAoS message was received from. Furthermore the OS routing table updates guarantee that application packets always get routed to the appropriate MQA enabled network devices regardless of the default routing table entry or whether a VPN is being used.

In one example embodiment a QoS API messaging protocol is provided. depicts one example embodiment of the QAoS message format. A message may comprise an Internet protocol header a transport protocol header a QAoS header and QAoS data . The QAoS header may include QAoS version number and QAoS protocol code which identify the particular type of QAoS protocol used by the system. As indicated the protocol messages may be encapsulated in a QAoS packet header . This encapsulation mechanism allows for specification and negotiation of the actual data payload formats of the QAoS messaging between the applications and the MQA. This allows for both standardized and proprietary QoS API messaging protocols and multiple revisions of such protocols to be supported for transport of QoS API messaging between the applications and the MQA.

Once a socket is established over QAoS and the QoS API messaging protocol and revision is negotiated with the MQA the application can use QAoS to receive QoS notifications and send QoS requests. The QoS notifications may include information on current availability of different levels and types of QoS in the network the set of available and or active network service flows the corresponding available and or active classifier s of each of the service flows the current and available service flow data marking schemes supported by the network any defined and or active network filtering or throttling of data and other services. The QoS requests may be used to negotiate add modify delete attach to detach from activate and deactivate QoS service flows classifiers data filtering shaping and data throttling features of the MAC layer of the network interface device s and the corresponding network s .

The QAoS link between the application and MQA can also be used to report QoS attribute and status changes in the corresponding network s . In one example embodiment the network device may be constantly monitoring the network characteristics and if these characteristics change such that the agreed upon QoS service level is no longer achievable communicate with the QoS aware application and inform it of the change so that the QoS aware application may decide whether to take any necessary action. In response to a QoS request from a QoS aware application the network device may insert attach the Network Layer tags or Network Layer messages thereby instructing downstream network routing devices to implement Network Layer QoS mechanisms requested by the given QoS aware application.

In one example embodiment the MQA of the network interface device may send broadcast QoS API event notifications to all listening QoS aware applications over an easily recognizable and unique multicast socket. QoS aware applications may register and de register for such a multicast QAoS socket. In another example embodiment the application may re register and or the MQA may ping the application in order to provide a method for the MQA to determine when it is allowable to free a stale QAoS socket and the acquired network QoS resources of the associated socket. In various alternative embodiments the MQA may provide other functions known to those of skill in the art.

Systems and modules described herein may comprise software firmware hardware or any combination s of software firmware or hardware suitable for the purposes described herein. Software and other modules may reside on servers workstations personal computers computerized tablets PDAs and other devices suitable for the purposes described herein. Software and other modules may be accessible via local memory via a network via a browser or other application in an ASP context or via other means suitable for the purposes described herein. Data structures described herein may comprise computer files variables programming arrays programming structures or any electronic information storage schemes or methods or any combinations thereof suitable for the purposes described herein.

While embodiments and applications have been shown and described it would be apparent to those skilled in the art having the benefit of this disclosure that many more modifications than mentioned above are possible without departing from the inventive concepts disclosed herein. The invention therefore is not to be restricted except in the spirit of the appended claims.

