---

title: Regaining control of a processing resource that executes an external execution context
abstract: A scheduler in a process of a computer system allows an external execution context to execute on a processing resource allocated to the scheduler. The scheduler provides control of the processing resource to the external execution context. The scheduler registers for a notification of an exit event associated with the external execution context. In response to receiving the notification that the exit event has occurred, the scheduler regains control of the processing resource and causes a task associated with an execution context controlled by the scheduler to be executed by the processing resource.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09417914&OS=09417914&RS=09417914
owner: Microsoft Technology Licensing, LLC
number: 09417914
owner_city: Redmond
owner_country: US
publication_date: 20080602
---
Processes executed in a computer system may include execution context schedulers that schedule tasks of processes for execution in the computer system. A scheduler may create execution contexts e.g. threads fibers or child processes in order to execute tasks. During execution the scheduler maintains control over these execution contexts and maintains control of the processing resources allocated to the scheduler.

A scheduler typically does not have control over execution contexts created outside of the scheduler i.e. external execution contexts . If a scheduler allows an external execution context to execute with a processing resource of the scheduler then external execution context gains control of the processing resource. The external execution context may not include a mechanism for returning control of the processing resource to the scheduler. As a result the scheduler may lose the processing resource that executes the external execution context.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

A scheduler in a process of a computer system allows an external execution context to execute on a processing resource allocated to the scheduler. The scheduler provides control of the processing resource to the external execution context. The scheduler registers for a notification of an exit event associated with the external execution context. In response to receiving the notification that the exit event has occurred the scheduler regains control of the processing resource and causes a task associated with an execution context controlled by the scheduler to be executed by the processing resource.

In the following Detailed Description reference is made to the accompanying drawings which form a part hereof and in which is shown by way of illustration specific embodiments in which the invention may be practiced. In this regard directional terminology such as top bottom front back leading trailing etc. is used with reference to the orientation of the Figure s being described. Because components of embodiments can be positioned in a number of different orientations the directional terminology is used for purposes of illustration and is in no way limiting. It is to be understood that other embodiments may be utilized and structural or logical changes may be made without departing from the scope of the present invention. The following detailed description therefore is not to be taken in a limiting sense and the scope of the present invention is defined by the appended claims.

It is to be understood that the features of the various exemplary embodiments described herein may be combined with each other unless specifically noted otherwise.

Referring to runtime environment represents a runtime mode of operation in a computer system such as a computer system shown in and described in additional detail below where the computer system is executing instructions. The computer system generates runtime environment from a runtime platform such as a runtime platform shown in and described in additional detail below.

Runtime environment includes an least one invoked process an operating system OS a set of hardware threads M where M is an integer that is greater than or equal to one and denotes the Mth hardware thread M and a resource management layer . Runtime environment allows tasks from process to be executed along with tasks from any other processes that co exist with process not shown using OS resource management layer and hardware threads M . Runtime environment operates in conjunction with OS and or resource management layer to allow process to obtain processor and other resources of the computer system e.g. hardware threads M .

Runtime environment includes a scheduler function that generates scheduler . In one embodiment the scheduler function is implemented as a scheduler application programming interface API . In other embodiments the scheduler function may be implemented using other suitable programming constructs. When invoked the scheduler function creates scheduler in process where scheduler operates to schedule tasks of process for execution by one or more hardware threads M . Runtime environment may exploit fine grained concurrency that application or library developers express in their programs e.g. process using accompanying tools that are aware of the facilities that the scheduler function provides.

Process includes an allocation of processing and other resources that hosts one or more execution contexts viz. threads . Process obtains access to the processing and other resources in the computer system e.g. hardware threads M from OS and or resource management layer . Process causes tasks to be executed using the processing and other resources.

Process generates work in tasks of variable length where each task is associated with an execution context in scheduler . Each task includes a sequence of instructions that perform a unit of work when executed by the computer system. Each execution context forms a thread that executes associated tasks on allocated processing resources. Each execution context includes program state and machine state information. Execution contexts may terminate when there are no more tasks left to execute. For each task runtime environment and or process either assign the task to scheduler to be scheduled for execution or otherwise cause the task to be executed without using scheduler .

Process may be configured to operate in a computer system based on any suitable execution model such as a stack model or an interpreter model and may represent any suitable type of code such as an application a library function or an operating system service. Process has a program state and machine state associated with a set of allocated resources that include a defined memory address space. Process executes autonomously or substantially autonomously from any co existing processes in runtime environment . Accordingly process does not adversely alter the program state of co existing processes or the machine state of any resources allocated to co existing processes. Similarly co existing processes do not adversely alter the program state of process or the machine state of any resources allocated to process .

OS manages processing and other resources of the computer system and provides a set of functions that allow process and other processes in the computer system to access and use the components. In addition OS offers execution contexts to scheduler and process in the computer system. As shown in OS offers execution contexts N and a set of execution contexts to scheduler where N is an integer greater than or equal to one and denotes the Nth execution context N . OS also offers execution contexts P to process where P is an integer greater than or equal to one and denotes the Pth execution context P .

Hardware threads reside in execution cores of a set or one or more processor packages e.g. processor packages shown in and described in additional detail below of the computer system. Each hardware threads is configured to execute instructions independently or substantially independently from the other execution cores and includes a machine state. Hardware threads may be included in a single processor package or may be distributed across multiple processor packages. Each execution core in a processor package may include one or more hardware threads .

Resource management layer allocates processing resources to process by assigning one or more hardware threads to process . Resource management layer exists separately from OS in the embodiments of . In other embodiments resource management layer or some or all of the functions thereof may be included in OS .

Process implicitly or explicitly causes scheduler to be created via the scheduler function provided by runtime environment . Scheduler instance may be implicitly created when process uses APIs available in the computer system or programming language features. In response to the API or programming language features runtime environment creates scheduler with a default policy. To explicitly create a scheduler process may invoke the scheduler function provided by runtime environment and specify one or more policies for scheduler .

Scheduler interacts with resource management layer to negotiate processing and other resources of the computer system in a manner that is transparent to process . Resource management layer allocates hardware threads to scheduler based on supply and demand and any policies of scheduler .

In the embodiment shown in scheduler manages the processing resources by creating virtual processors that form an abstraction of underlying hardware threads . Scheduler includes a set of virtual processors N where N is an integer greater than or equal to one and denotes the Nth virtual processor N . Scheduler multiplexes virtual processors onto hardware threads by mapping each virtual processor to a hardware thread . Scheduler may map more than one virtual processor onto a particular hardware thread but maps only one hardware thread to each virtual processor . In other embodiments scheduler manages processing resources in other suitable ways to cause instructions of process to be executed by hardware threads .

The set of execution contexts in scheduler includes a set of execution contexts N with respective associated tasks N that are being executed by respective virtual processors N and at any point during the execution of process a set of zero or more execution contexts . Each execution context and includes state information that indicates whether an execution context or is executing runnable e.g. in response to becoming unblocked or added to scheduler or blocked. Execution contexts that are executing have been attached to a virtual processor and are currently executing. Execution contexts that are runnable include an associated task and are ready to be executed by an available virtual processor . Execution contexts that are blocked also include an associated task and are waiting for data a message or an event that is being generated by another execution context or will be generated by another execution context .

Each execution context executing on a virtual processor may generate in the course of its execution additional tasks which are organized in any suitable way e.g. added to work queues not shown in . Work may be created by using either application programming interfaces APIs provided by runtime environment or programming language features and corresponding tools in one embodiment. When processing resources are available to scheduler tasks are assigned to execution contexts or that execute them to completion on virtual processors before picking up new tasks. An execution context executing on a virtual processor may also unblock other execution contexts by generating data a message or an event that will be used by other execution contexts .

Each task in scheduler may be realized e.g. realized tasks and which indicates that an execution context or has been or will be attached to the task and the task is ready to execute. Realized tasks typically include unblocked execution contexts and scheduled agents. A task that is not realized is termed unrealized. Unrealized tasks e.g. tasks may be created as child tasks generated by the execution of parent tasks and may be generated by parallel constructs e.g. parallel parallel for begin and finish . Scheduler may be organized into a synchronized collection e.g. a stack and or a queue for logically independent tasks with execution contexts i.e. realized tasks along with a list of workstealing queues for dependent tasks i.e. unrealized tasks as illustrated in the embodiment of described below.

Upon completion blocking or other interruption e.g. explicit yielding or forced preemption of an execution context running on a virtual processor the virtual processor becomes available to execute another realized task or unrealized task . Scheduler searches for a runnable execution context or an unrealized task to attach to the available virtual processor for execution in any suitable way. For example scheduler may first search for a runnable execution context to execute before searching for an unrealized task to execute. Scheduler continues attaching execution contexts to available virtual processors for execution until all tasks and execution contexts of scheduler have been executed.

In one embodiment process organizes tasks into one or more schedule groups and presents schedule groups to scheduler . is a block diagram illustrating an embodiment of a schedule group for use in scheduler .

Schedule group includes a runnables collection a realized task collection a work collection and a set of zero or more workstealing queues . Runnables collection contains a list of unblocked execution contexts . Scheduler adds an execution context to runnables collection when an execution context becomes unblocked. Realized task collection contains a list of realized tasks e.g. unstarted agents that may or may not have associated execution contexts . Scheduler adds a realized task to realized task collection or when a new runnable task is presented to scheduler by process . Work collection contains a list of workstealing queues as indicated by an arrow and tracks the execution contexts that are executing tasks from the workstealing queues . Each workstealing queue includes one or more unrealized tasks .

Using the embodiment of scheduler may first search for unblocked execution contexts in the runnables collection of each schedule group in scheduler . Scheduler may then search for realized tasks in the realized task collection of all schedule groups in scheduler before searching for unrealized tasks in the workstealing queues of the schedule groups .

In one embodiment a virtual processor that becomes available may attempt to locate a runnable execution context in the runnables collection in the schedule group from which the available virtual processor most recently obtained a runnable execution context i.e. the current schedule group . The available virtual processor may then attempt to locate a runnable execution context in the runnables collections in the remaining schedule groups of scheduler in a round robin or other suitable order. If no runnable execution context is found then the available virtual processor may then attempt to locate an unrealized task in the workstealing queues of the current schedule group before searching the workstealing queues in the remaining schedule groups of scheduler in a round robin or other suitable order.

Referring back to scheduler creates and manages execution contexts and . When an execution context is executed to completion on a virtual processor the execution context returns control of the virtual processor to scheduler . Scheduler may then cause the virtual processor to search for another execution context to execute until all execution contexts and tasks have been executed to completion.

In addition to executions contexts and created and managed by scheduler scheduler allows external execution contexts created by process and external to scheduler to directly execute on virtual processors belonging to scheduler . When external execution contexts directly execute on virtual processors belonging to scheduler scheduler turns control of the virtual processors over to external execution contexts . By doing so scheduler may avoid potentially expensive context switching and allow scheduling policies of scheduler to be applied to the external execution contexts .

Because external execution contexts are not under the control of scheduler however external execution contexts do not return virtual processors to scheduler . Instead external execution contexts continue using virtual processors until external execution contexts stop execution by exiting runtime environment or the operating system environment created by operating system . When external execution contexts stop execution scheduler reclaims virtual processors used by external execution contexts .

In order to reclaim virtual processors used by external execution contexts scheduler registers for notifications of exit events associated with external execution contexts with runtime environment or OS . In response to receiving notifications that exit events have occurred from runtime environment or OS scheduler regains control of the virtual processors and causes tasks or associated with execution contexts or controlled by scheduler to be executed by the virtual processors .

In scheduler determines whether an external execution context is being included in scheduler as indicated in a block . As used herein the term external execution context refers to an execution context created by process and not scheduler . Process therefore controls the execution of external execution contexts. An external execution context may be included in scheduler in response to generating tasks for execution by scheduler or by explicitly creating scheduler .

With reference to the example of scheduler determines whether any of external execution contexts are being included in scheduler . Process creates external execution contexts by providing a request to OS . Because these external execution contexts were created by process process rather than scheduler controls the execution of external execution contexts . In contrast scheduler creates execution contexts and by providing a request to OS . Accordingly scheduler controls the execution of execution contexts and .

If an external execution context is being included in scheduler then scheduler converts the external execution context into an autonomous execution context as indicated in a block . As used herein an autonomous execution context is an execution context that executes on a processing resource of scheduler but is not under the control of scheduler . Accordingly scheduler provides a processing resource of scheduler for use by an autonomous execution context to allow the autonomous execution context to execute on the processing resource. By doing so scheduler relinquishes control of the processing resource such that the processing resource is under control of the autonomous execution context and not under control of scheduler .

With reference to the example of scheduler determines that external execution context is being included in scheduler . Scheduler converts external execution context into an autonomous execution context and provides virtual processor to autonomous execution context . Virtual processor executes at least one task of autonomous execution context .

Scheduler registers for a notification of an exit event associated with the autonomous execution context as indicated in a block . The autonomous execution context executes tasks of process in scheduler and may not include a mechanism for returning control of the processing resource to scheduler . The autonomous execution context continues to execute on the processing resource of scheduler unless the autonomous execution context explicitly detaches from scheduler e.g. via an API provided by runtime environment . The autonomous execution context may exit runtime environment and or the operating system environment created by OS at any time. Accordingly scheduler provides a signal to runtime environment or OS to register for a notification of an exit event associated with the autonomous execution context. For example scheduler provides a signal to OS as shown in . Where OS is a Windows Operating System scheduler may cause a handle of the autonomous execution context to be added a wait array and wait for a signal from OS . In other embodiments scheduler may cause the handle to be provided to or stored in other suitable data structures.

Referring to a determination is made by runtime environment or OS as to whether a request for notification of an exit event associated with an autonomous execution context has been received as indicated in a block . Runtime environment or OS receives a request from scheduler for a notification of an exit event associated with an autonomous execution context executing on a processing resource allocated to scheduler . For example OS receives signal from scheduler in the example of . In response to receiving the request runtime environment or OS adds a handle identifying the autonomous execution context to wait array as indicated in a block . In other embodiments runtime environment or OS may store the notification request in other suitable data structures.

Referring back to the autonomous execution context executes on a processing resource of scheduler as indicated in a block . In the example of autonomous execution context executes on virtual processor of scheduler . Prior to autonomous execution context executing virtual processor executes execution context as shown in . Virtual processor may become available to execute autonomous execution context in response to completion blocking or other interruption e.g. explicit yielding or forced preemption of execution context . Other virtual processors in scheduler may continue executing execution contexts of scheduler while virtual processor executes autonomous execution context . The autonomous execution context may cease executing on virtual processor and exit runtime environment and or the operating system environment created by OS at any time.

Referring back to a determination is made by runtime environment or OS as to whether an exit event associated with the autonomous execution context has occurred as indicated in a block . Runtime environment or OS detect the exit event when the autonomous execution context exits or otherwise terminates and stops executing on the processing resource of scheduler . As shown in the example of virtual processor is no longer executing autonomous execution context . In response to determining that an exit event has occurred runtime environment or OS provides a notification of the exit event to scheduler as indicated in a block . For example OS provides signal to scheduler in the example of .

Referring back to scheduler determines whether the notification of the exit event corresponding to the autonomous execution context has been received as indicated in a block . In response to receiving the notification of the exit event e.g. receiving signal from OS scheduler identifies and regains control of the processing resource that executed the autonomous execution context. Scheduler executes another task on the processing resource used by the autonomous context as indicated in a block .

In the example of scheduler regains control of virtual processor and causes a task associated with an execution context to be executed on virtual processor subsequent to regaining control of virtual processor . Execution context may be an unblocked or new execution context.

Using the methods of scheduler allows external execution contexts to be executed with processing resources of scheduler while ensuring that the processing resources are reclaimed by scheduler subsequent to the external execution contexts exiting.

Computer system includes one or more processor packages a memory system zero or more input output devices zero or more display devices zero or more peripheral devices and zero or more network devices . Processor packages memory system input output devices display devices peripheral devices and network devices communicate using a set of interconnections that includes any suitable type number and configuration of controllers buses interfaces and or other wired or wireless connections.

Computer system represents any suitable processing device configured for a general purpose or a specific purpose. Examples of computer system include a server a personal computer a laptop computer a tablet computer a personal digital assistant PDA a mobile telephone and an audio video device. The components of computer system i.e. processor packages memory system input output devices display devices peripheral devices network devices and interconnections may be contained in a common housing not shown or in any suitable number of separate housings not shown .

Processor packages include hardware threads M . Each hardware thread in processor packages is configured to access and execute instructions stored in memory system . The instructions may include a basic input output system BIOS or firmware not shown OS also shown in a runtime platform applications and resource management layer also shown in . Each hardware thread may execute the instructions in conjunction with or in response to information received from input output devices display devices peripheral devices and or network devices .

Computer system boots and executes OS . OS includes instructions executable by hardware threads to manage the components of computer system and provide a set of functions that allow applications to access and use the components. In one embodiment OS is the Windows operating system. In other embodiments OS is another operating system suitable for use with computer system .

Resource management layer includes instructions that are executable in conjunction with OS to allocate resources of computer system including hardware threads as described above with reference to . Resource management layer may be included in computer system as a library of functions available to one or more applications or as an integrated part of OS .

Runtime platform includes instructions that are executable in conjunction with OS and resource management layer to generate runtime environment and provide runtime functions to applications . These runtime functions include a scheduler function as described in additional detail above with reference to . The runtime functions may be included in computer system as part of an application as a library of functions available to one or more applications or as an integrated part of OS and or resource management layer .

Each application includes instructions that are executable in conjunction with OS resource management layer and or runtime platform to cause desired operations to be performed by computer system . Each application represents one or more processes such as process as described above that may execute with scheduler as provided by runtime platform .

Memory system includes any suitable type number and configuration of volatile or non volatile storage devices configured to store instructions and data. The storage devices of memory system represent computer readable storage media that store computer executable instructions including OS resource management layer runtime platform and applications . The instructions are executable by computer system to perform the functions and methods of OS resource management layer runtime platform and applications described herein. Examples of storage devices in memory system include hard disk drives random access memory RAM read only memory ROM flash memory drives and cards and magnetic and optical disks.

Memory system stores instructions and data received from processor packages input output devices display devices peripheral devices and network devices . Memory system provides stored instructions and data to processor packages input output devices display devices peripheral devices and network devices .

Input output devices include any suitable type number and configuration of input output devices configured to input instructions or data from a user to computer system and output instructions or data from computer system to the user. Examples of input output devices include a keyboard a mouse a touchpad a touchscreen buttons dials knobs and switches.

Display devices include any suitable type number and configuration of display devices configured to output textual and or graphical information to a user of computer system . Examples of display devices include a monitor a display screen and a projector.

Peripheral devices include any suitable type number and configuration of peripheral devices configured to operate with one or more other components in computer system to perform general or specific processing functions.

Network devices include any suitable type number and configuration of network devices configured to allow computer system to communicate across one or more networks not shown . Network devices may operate according to any suitable networking protocol and or configuration to allow information to be transmitted by computer system to a network or received by computer system from a network.

The above embodiments allow a task scheduler to use external execution contexts i.e. contexts that are outside of the control of the scheduler in order to schedule work without depleting virtualized processing resources when the external execution contexts terminate. By doing so a potentially expensive context switching may be avoided and desired scheduling policies of scheduler may be applied to selected external execution contexts.

Although specific embodiments have been illustrated and described herein it will be appreciated by those of ordinary skill in the art that a variety of alternate and or equivalent implementations may be substituted for the specific embodiments shown and described without departing from the scope of the present invention. This application is intended to cover any adaptations or variations of the specific embodiments discussed herein. Therefore it is intended that this invention be limited only by the claims and the equivalents thereof.

