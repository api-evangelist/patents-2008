---

title: Method and systems for redundant server automatic failover
abstract: A method and systems for a redundant server automatic fail-over system is provided. The system includes a plurality of client devices communicatively coupled to a network wherein the plurality of client devices each includes an active server identification location. The system also includes a first server system communicatively coupled to the network that is configured to operate as the active server on the network wherein messages sent to the first server system are addressed to the first server system using the active server identification location on each client device. The system further includes a second server system communicatively coupled to the network that is configured to operate as a standby server on the network and is configured to switch to being the active server on the network when it is determined that the first server system is unable to operate as the active server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08700760&OS=08700760&RS=08700760
owner: GE Fanuc Intelligent Platforms, Inc.
number: 08700760
owner_city: Charlottesville
owner_country: US
publication_date: 20080818
---
This invention relates generally to process control networks and more particularly to systems and a method for automatic failover of redundant servers in a process control network.

At least some known process control networks include a plurality of HMI clients connected to a pair of redundant SCADA servers via Local Area Networks LAN . One SCADA server is in control as an active server while the other SCADA server is in standby mode. The data between the SCADA servers are synchronized. When the active server fails or is disconnected from the network for various reasons the standby SCADA switches to the active role. The plurality of HMI clients need to switch to the newly active SCADA server to query and process the process data with minimal interruption. One of the problems with redundant schemes is that each client needs to have a connection to the active SCADA server of the logical pair. In such known networks to maintain continuous connection to the active SCADA server a custom script or application running on each HMI client polls the status of the SCADA server pair and switches between them when the active connection failed. However such polling increases the computational overhead of each of the HMI clients and causes increased traffic on the network. Additionally managing custom scripts or applications at the HMI client introduces a probability of configuration errors and compatibility issues.

In one embodiment system for a redundant server automatic fail over system includes a plurality of client devices communicatively coupled to a network wherein the plurality of client devices each includes an active server identification location. The system also includes a first server system communicatively coupled to the network that is configured to operate as the active server on the network wherein messages sent to the first server system are addressed to the first server system using the active server identification location on each client device. The system further includes a second server system communicatively coupled to the network that is configured to operate as a standby server on the network and is configured to switch to being the active server on the network when it is determined that the first server system is unable to operate as the active server. The active server identification location is configured to receive an active server identification when the first server system is unable to operate as the active server.

In another embodiment a method for automatic failover includes operating a first server system as an active server on a network wherein the first server system is configured to communicate with a plurality of clients. Messages sent to the first server system are addressed to the first server system using an active server identification location on the sending client. The method also includes operating a second server system as a standby server on the network switching the second server to being the active server on the network when it is determined that the first server system is unable to operate as the active server and changing the active server identification location on the plurality of clients to the identification of the second server system.

In yet another embodiment a redundant server system includes a network a first server system communicatively coupled to said network operable as an active server on said network a second server system communicatively coupled to said network operable as a standby server on said network and a plurality of clients communicatively coupled to said network at least some of the plurality of clients comprising an active server identification location containing an identification of the active server on the network. The second server system is configured to switch to being the active server and at least one of the plurality of clients is programmed to receive a message including an identification of the active server and to change the active server identification location associated with that client using the message.

The following detailed description illustrates embodiments of the invention by way of example and not by way of limitation. It is contemplated that the invention has general application to redundant control systems in industrial commercial and residential applications.

As used herein an element or step recited in the singular and proceeded with the word a or an should be understood as not excluding plural elements or steps unless such exclusion is explicitly recited. Furthermore references to one embodiment of the present invention are not intended to be interpreted as excluding the existence of additional embodiments that also incorporate the recited features.

In the exemplary embodiment each of the plurality of view nodes and servers and includes active server in their respective active server identification locations. Accordingly active server is referred to as the master and standby server is referred to as the slave. All nodes such as plurality of view nodes and servers and should point to the master in the exemplary embodiment server . Nodes that do not point to the master or include an identification of active server in their respective active server identification location may not receive all the first failover logic module services available from active server or the services may be delayed. For example standby server operating as the slave does not run an I O driver but is getting database synchronization from active server which operates as the master consequently data read from standby server may not be the most current. The nodes pointing to the salve cannot write data to or configure the slave. Additionally because the slave is not running a module referred to as scan alarm and control SAC the node will not receive any new alarms. The SAC program is responsible for looking through the process database and deciding what locations need to be updated and when.

Further nodes that direct communications to and subsequently receive communications from the slave may not receive up to date information regarding changes to for example setpoint changes when a user makes a setpoint change to active server . Moreover information entered by the user may not update an alarm file of active server if the view node from which it was entered is pointing to standby server .

To ensure all nodes point to the master or active server active server pulls view nodes to it. On failover and at a predetermined time period and or event the master pulls all view nodes to itself To pull one of the plurality of view nodes to active server active server tells the view node failover to active server . Active server periodically checks the active connections of view nodes and writes the identification of the active server for each view node that is not connected to active server .

Such a failover connection between view nodes and active server of the logical pair is fast and automatic for the user in that view nodes are pulled by active server to communicate with it rather than each view node having to poll servers and to determine which is the current active server and then having to switch itself to the new active server in the event of a failover. The active server pulling each of the plurality of view nodes facilitates minimizing configuration errors eliminating the need for custom scripts or applications and providing maximum availability.

Having the scada server pull clients to it when the server status becomes active permits retrofitting the automatic failover using software executing on the servers rather than software and hardware on the plurality of view nodes . The active failover also facilitates minimizing the amount of time that view nodes attempt to retry communications to the newly disabled or disconnected server.

Servers and each maintain a list of HMI clients or view nodes having active connections to server . When standby server is assigned an active status the now active server cycles through the client list and switches the logical connection on each to the newly active server. In the exemplary embodiment the logical connections are switched sequentially. In an alternative embodiment the logical connections are switched simultaneously using for example but not limited to a broadcast message. The newly active server creates a bi directional connection back to each view node verifies which server the view node is connected to and calls a remote procedure to set the logical connection to the newly active server.

A first failover logic module executes on server . A second failover logic module executes on server . Likewise when more servers are present each may execute a respective failover logic module. Each of the plurality of view nodes executes logic that causes each to failover on connection loss to the master or active server . If one of the plurality of view nodes loses a connection to the master view node fails to the slave or standby server . The view node logic may be disabled by modifying a configuration field. Additionally a view node may be manually or programmatically failed to point at slave. View node fails back to master within a predetermined time period as first failover logic module pulls all view nodes to it on a periodic or event driven cycle. A server status manager monitors redundant server system to determine a status of at least one of the operating and connected servers on a network . Typically all servers that are operating and connected to network are either in a standby or an active mode. However the status of a server that is not connected but operating a server that is shutdown or server with a loss of power may be determined to be in an unknown state.

Additionally view nodes execute logic that periodically reads network status display NSD fields on servers and to determine which server is the master. The NSD fields are a collection of numeric and ASCII values that are used to view various information on network status. View node ensures it is pointing to the master by writing the identification of the determined active server into the respective active server identification location.

During startup each server determines whether it is operating as active server or standby server . Each server then builds an easy data access EDA group for further processing. EDA is an application programming interface layer used to access real time process data. An EDA group is a reference to one or more data locations that are read as a group. If the server determines it is operating as the master or active server at a predetermined time period or predetermined event server sets its own active server identification location to itself for each connection that is at least incoming could be both incoming and outgoing server either transmits its own server identification to each of the connected view nodes active server identification location or requests the view nodes to transmit the server location in each view nodes active server identification location. In the exemplary embodiment reading of the EDA is sequential. In an alternative embodiment reading of the EDA is parallel.

If the server determines it is operating as the slave or standby server at a predetermined time or event server determines the identification of the master if necessary and then writes the identification of the master into its own active server identification location thereby saving the master from having to write its identification into the slave s own active server identification location.

During a manual failover first failover logic module writes the identification of the slave into the slave s active server identification location and into the master s active server identification location . The master then drops offline or is switched to being the slave and the slave assumes the role of master. The master formerly slave transmits its identification to the plurality of view nodes to pull them into communication with the new master. The identification is written into each respective active server identification location and for each connected view node . Any new view nodes can connect to either server or but will be pulled to the master at the first predetermined time period when the master pulls all view nodes to itself.

During a loss of power to the master second failover logic module determines that active server can no longer serve as the master and switches standby server to an active mode. View nodes connected to active server automatically failover to the new master either by network timeout logic executing on view nodes or by second failover logic module pulling each view node to the new active server. All connected view nodes then request a boot queue update. The boot queue is a list of current alarms that occurred prior to view node connected to server . When a view node re connection occurs view nodes request active server to re send the current active alarms. The boot queue is sent to view nodes so any current alarms can be displayed.

If a connection between one or more of the plurality of view nodes and the master are lost the affected view nodes failover to the slave if it is present. If the affected view nodes can only connect to the slave the affected view nodes will maintain the connection to the slave because there is no logic on the affected view node or the slave to cause the affected view node to connect to another server. The logic in first failover logic module that executes the pullover of the view nodes executes only on the master. If the master doesn t pull the affected view nodes to itself the slave will not affect the connection of the affected view nodes to itself. If the affected view nodes reconnect to master first failover logic module on master will pull the affected view nodes back to itself. By connecting to the slave when a connection to the master is lost the affected view nodes have access to data that is relatively old depending upon the synchronism rate between the slave and the master. If any of the plurality of view nodes loses a connection to the slave there will be no effect on the operation of the plurality of view nodes until a failover occurs. In such a case the effect on the plurality of view nodes is similar to the loss of connection to the master described above after the failover.

The term processor as used herein refers to central processing units microprocessors microcontrollers reduced instruction set circuits RISC application specific integrated circuits ASIC logic circuits and any other circuit or processor capable of executing the functions described herein.

As used herein the terms software and firmware are interchangeable and include any computer program stored in memory for execution by processors and or processors executing on view nodes including RAM memory ROM memory EPROM memory EEPROM memory and non volatile RAM NVRAM memory. The above memory types are exemplary only and are thus not limiting as to the types of memory usable for storage of a computer program.

As will be appreciated based on the foregoing specification the above described embodiments of the disclosure may be implemented using computer programming or engineering techniques including computer software firmware hardware or any combination or subset thereof wherein the technical effect is having a newly active server of a redundant server pair use an existing network connection to create a dynamic bi directional connection to one or more clients and sending a command to each client to switch the logical connection to the newly active server. Any such resulting program having computer readable code means may be embodied or provided within one or more computer readable media thereby making a computer program product i.e. an article of manufacture according to the discussed embodiments of the disclosure. The computer readable media may be for example but is not limited to a fixed hard drive diskette optical disk magnetic tape semiconductor memory such as read only memory ROM and or any transmitting receiving medium such as the Internet or other communication network or link. The article of manufacture containing the computer code may be made and or used by executing the code directly from one medium by copying the code from one medium to another medium or by transmitting the code over a network.

The above described embodiments of a method and systems for automatic failover of redundant servers in a process control network provides a cost effective and reliable means for having a newly active server of a redundant server pair use an existing network connection to create a dynamic bi directional connection to one or more clients and sending a command to each client to switch the logical connection to the newly active server. More specifically the method and systems described herein facilitate ensuring minimal disruption in the operation of the process controlled by the active server. In addition the above described method and systems facilitate upgrading existing system because there is no code modification to older versions of the client required to implement the automatic failover as the software resides on the servers or may reside on an external system. Furthermore the method and systems described herein facilitate reducing client computational overhead because the clients do not have to periodically discover which server is currently the active server. As a result the method and systems described herein facilitate automatic failover of redundant servers in a process control network in a cost effective and reliable manner.

While the disclosure has been described in terms of various specific embodiments it will be recognized that the disclosure can be practiced with modification within the spirit and scope of the claims.

