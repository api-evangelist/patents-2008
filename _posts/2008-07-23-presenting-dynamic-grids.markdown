---

title: Presenting dynamic grids
abstract: Grids are commonly used to provide an environment for users to orient objects within a drawing program. The properties of a grid are usually defined and set at the time the grid is created and do not change. An effective way to provide a useful grid that can adapt to objects a user has drawn is provided herein by presenting a dynamic grid on a display. The dynamic grid may adjust grid properties, such as the position of the origin, the angle of the grid, the size of gridline spacing, the coordinate mode, etc. The new grid properties are adjusted to accommodate what the user may draw next, based upon what the user previously drew.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09400597&OS=09400597&RS=09400597
owner: MICROSOFT TECHNOLOGY LICENSING, LLC
number: 09400597
owner_city: Redmond
owner_country: US
publication_date: 20080723
---
Grids are commonly used in drawing programs to aid in creating precise figures. Grids provide a coordinate system on which a user may spatially orient objects within the drawing program. Grids are useful when determining the size and position of objects. Traditional grids have fixed grid size and orientation. The gridline spacing overall grid size and grid orientation are determined when the grid is created. Once the grid is created the gridline spacing orientation and or position of the grid does not change. Many times users may have to reset grid properties before drawing new objects within the drawings program.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

This disclosure relates to presenting a grid on a display. The display may be a drawing program operating within a computer environment. When presenting the grid a previously drawn object e.g. the last line drawn by a user is identified. A determination may be made as to the properties of the previously drawn object e.g. angle and dimensional unit length of the previously drawn object . Once the previously drawn object s properties are determined the grid can dynamically adjust the properties of the grid such as position of the origin point angle of the grid gridline spacing coordinate mode etc. The resulting grid is relative in measurements and orientation to the previously drawn object. This makes sketching graphical elements e.g. lines a set of lines a polygonal shape an image etc. more efficient faster for example when absolute dimensions do not matter. The dynamic grid is context sensitive based upon a previously drawn object and adaptive automatically or manually change to what the user is drawing.

The grid may adjust grid properties automatically in response to an object being drawn on the grid. When a user draws a new object the properties of the grid may adjust to provide a more desirable layout based upon the previously drawn object. An example is where a user has a grid with 300 pixel gridline spacing. If the user begins to draw an object e.g. line segments of 25 pixels the grid may automatically change the gridline spacing to a fraction or multiple of 25 pixels instead of 300 pixels to provide the user with a more useful measurement reference.

The grid may also adjust grid properties in response to user input. This allows a user to specify at any time when the coordinate mode is to change when the grid is to rotate to match an angle of a previously drawn object when to recenter the grid to a position of a previously drawn object and or what multiplier e.g. 3 2 1 0.5 0.25 etc. is to be applied to determine the gridline spacing of the grid.

To the accomplishment of the foregoing and related ends the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects advantages and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.

The claimed subject matter is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances structures and devices are shown in block diagram form in order to facilitate describing the claimed subject matter.

This disclosure relates to presenting a grid on a display. Grids are commonly used in computer drawing programs to help create precise figures. Traditional grids use Cartesian coordinate mode X Y grid with a fixed grid size and orientation. Some grids may also use a radial mode to help facilitate drawing angles. To aid in drawing many grids will snap a user s object e.g. line shape and any other set of coordinate points to a point on the grid. The grid s properties were fixed at the time the grid was created. For example the origin of the grid the mode Cartesian radial of the grid gridline spacing and the orientation angle of the grid were all fixed and may not change after the grid was created.

An issue arises when an object does not correspond to the fixed spacing of the grid. A user will spend time thinking about an actual measurement of the object that is drawn e.g. the gridline spacing is 300 pixels but the next line to be drawn of the object is only 5 pixels . Drawing objects that do not fit the original fixed gridline spacing man be accomplished much easier when the grid can dynamically adjust to what the user is drawing.

A dynamic grid can adjust gridline spacing based upon a previously drawn object. An example of a previously drawn object is a line segment that a user just drew. The line segment may be a part of a larger object that the user is drawing. Adjusting gridline spacing allows the grid to adapt to what the user is currently drawing instead of having fixed gridline spacing set when the grid was first created. Once a previously drawn object is identified a dimensional unit of the previously drawn object is determined. The dimensional unit may be a size vector of the last line segment drawn. The dynamic grid adjusts the gridline spacing as a function of the dimensional unit. This may be accomplished by making the gridline spacing the same as the dimensional unit making the gridline spacing a fraction of the dimensional unit and or adjusting the gridline spacing to a multiplier e.g. 3 2 1 0.5 0.25 etc. of the dimensional unit.

Adjusting gridline spacing provides a user the ability to quickly change a grid s gridline spacing to an appropriate size thereby facilitating quick and efficient drawing. For example a user may design a layout for a website by starting with a grid having gridline spacing at 100 pixels. The user may begin drawing larger objects within the website e.g. tables buttons lists etc. . The user may draw an object corresponding to the 100 pixel gridline spacing making the grid convenient for facilitation objects of this size . The user may then transition into drawing smaller objects within the website e.g. thumbnails status bars etc. . The user may draw an object have a dimensional unit line segment length of 20 pixels. The dynamic grid may detect the dimensional unit of 20 pixels and adjust the gridline spacing based upon the dimensional unit of the previously drawn object. Now the user is provided with a grid having smaller gridline spacing that is more appropriate to what the user is currently drawing smaller object .

Gridline spacing may be detected and adjusted automatically by the grid. The gridline spacing may automatically adjust based upon a default multiplier of the dimensional unit. A default multiplier may be a value chosen within a settings option of the grid a value calculated by the grid and or any other appropriate value. The user also has the option of specifying what the multiplier value may be. One implementation could be to map multipliers e.g. 3 2 1 0.5 etc. to hotkeys on the keyboard. The user can then use a hotkey to quickly switch between multipliers that may be applied to the dimensional unit of a previously drawn object. For example a user can draw an object then quickly adjust the gridline spacing to half 0.5 of the length dimensional unit of what was just drawn without having to think about absolute sizing. Gridline spacing adjustment may be done with a grid in Cartesian mode radial mode or another coordinate mode.

A dynamic grid can also orient the grid based upon an angle of a previously drawn object. In one example a previously drawn object e.g. line segment is identified the angle at which the previously drawn object was drawn is determined and the grid is then oriented based upon the angle. One method of orienting the grid is by rotating the grid a number of degrees equal to the angle. The grid may be reoriented automatically when an object is drawn. The orientation may also be done in response to user input indicating how the grid is to be oriented. Orienting the grid allows a user to quickly draw objects at angles without extra calculations.

In one example a user draws a line perpendicular to the X axis of a grid. A second line is drawn at a 35 degree angle from the X axis of the grid. The grid may automatically orient or the user can manually adjust the grid based upon the 35 degree angle. The orientation may be accomplished by rotating the grid X Y axis 35 degrees. The rotation may be done by rotating the grid at an angle using the origin as a pivot point. Now the X axis is perpendicular to the second line allowing for further objects to be drawn in relation to the new grid orientation. Angle orientation may be done with a grid in Cartesian mode radial mode or another coordinate mode.

A dynamic grid may be recentered upon a position of a previously drawn object. The position may be a coordinate of the last vertex drawn the center position of the last object created and or any other appropriate position. The origin of the grid may be recentered to match the coordinates of the previously drawn object. The recentering may be done automatically after objects are drawn. The recentering may also be done manually in response to a user input indicating that the grid is to be recentered. This provides a user the ability to start drawing objects from a center e.g. 0 0 or origin coordinate of the grid. Recentering may be done with a grid in Cartesian mode radial mode or another coordinate mode.

A dynamic grid may be switched dynamically while drawing between coordinate modes based upon some criteria. The criteria may be a user input or an automatic response to an event e.g. the completion of drawing an object . The mode switching may be done in response to user input indicating the mode is to be switched. The mode may also be switched automatically when a previously drawn object fits more appropriately in a different coordinate mode. Dynamic mode switching provides an adaptive environment that facilitates X Y drawing and or angular drawing for example.

One embodiment of presenting a grid on a display is illustrated by an exemplary method in . At the method begins. At a previously drawn object is identified. The previously drawn object may be a line segment shape or any other object with at least two coordinate points. The previously drawn object may be the last drawn object or any other previously drawn object.

Once the previously drawn object is identified a determination is made as to a dimensional unit of the previously drawn object at . The dimensional unit may be the difference between two coordinate points of the object the size of a line segment the distance between the center and a vertex the length of the previously object and or any other appropriate dimensional unit of the previously drawn object.

At the gridline spacing is adjusted as a function of the dimensional unit. Gridline spacing may be the distance between the lines of a grid. The gridline spacing may be adjust based upon a user defined or default multiplier of the dimensional unit. For example a grid may begin with a gridline spacing of 500 pixels. A user may draw a line that is 300 pixels in length the dimensional unit is therefore 300 pixels . The user may specify that a multiplier is to be 0.5. Once the previously drawn object line and the dimensional unit 300 pixels are determined a new gridline spacing is computed. The new gridline spacing is equal to the dimensional unit the user specified multiplier 300 pixels 0.5 150 pixels . Now the new grid has gridline spacing at 150 pixels providing the user with gridlines that are half the length of the line the user previously drew.

A default multiplier may be defined automatically or a user may specify a multiplier at any time. A user specified multiplier may be implemented through the use of a user input e.g. hotkeys of a keyboard . The method of adjusting gridline spacing may be done automatically at any time e.g. after every time an object is drawn or when a user input indicates that gridline spacing is to be adjusted. At the method ends.

One embodiment of presenting a grid on a display is illustrated by an exemplary method in . At the method begins. At a previously drawn object is identified. Once the previously drawn object is identified a determination is made as to an angle of the previously drawn object at . The angle may represent a number of degrees from the X axis that an object e.g. last vertex line segment etc. is drawn at. At the grid is oriented based upon the angle. The grid may be oriented by rotating the grid a number of degrees corresponding to the angle. The method may be done automatically e.g. after every time an object is drawn or when a user input indicates that the grid is to be oriented. At the method ends.

The drawing monitoring component may be configured to identify a previously drawn object within the grid . The previously drawn object is a line segment drawn at an angle . The previously drawn object has a length L distance between the start coordinate and end coordinate . The drawing monitoring component may be configured to determine a dimensional unit at which the previously drawn object was drawn. In this example the dimensional unit may be L the length of the previously drawn object . The drawing monitoring component may also be configured to determine the angle at which the previously drawn object is drawn at.

The drawing monitoring component may be configured to send the dimensional unit L and or the angle that was determined from the previously drawn object to components comprised within the grid adjusting component . The drawing monitoring component may send the dimensional unit L to the resizing component and or send the angle to the orienting component .

The resizing component may be configured to adjust gridline spacing S of the grid . The resizing component may adjust gridline spacing S as a function of the dimensional unit L . The resizing component may select automatically or in response to user input a multiplier from a set of default multipliers or from a user specified multiplier. The gridline spacing S may be adjusted to correspond to the dimensional unit L the multiplier. The resizing component may be configured to adjust gridline spacing S of the grid automatically or in response to user input.

The orienting component may be configured to orient the grid based upon the angle . The orienting component may orient the grid by rotating the grid a number of degrees corresponding to the angle . The orienting component may be configured to orient the grid automatically or in response to user input.

The centering component may be configured to adjust the position of the grid based upon a position of the previously drawn object . The centering component may adjust the position of the grid by recentering the origin 0 0 coordinate of the grid to a last drawn vertex of the previously drawn object . The centering component may be configured to recenter the grid automatically or in response to user input. The coordinate adjusting component may be configured to adjust the mode Cartesian radial etc. of the grid. The coordinate adjusting component may be configured to adjust the grid mode automatically or in response to user input.

Example illustrates the grid in Cartesian mode having an origin 0 0 . A user has drawn different objects set of lines . A previously drawn object may be the last line object drawn by the user. The previously drawn object comprises an angle at which the previously drawn object was drawn at. The previously drawn object may also comprise a last vertex drawn . The last vertex drawn may be the last coordinate point drawn ending point or vertex of a line within the previously drawn object .

Example illustrates the grid once it has been oriented and recentered. The grid has been oriented to correspond to the angle of the previously drawn object . The grid is rotated a number of degrees equal to the angle . The grid has also been recentered. The position of the origin of the grid is recentered to match the position of the previously drawn object . The recentered position of the origin may be the last vertex drawn in the previously drawn object .

Example illustrates the grid in Cartesian mode having a gridline spacing S and an origin 0 0 . A user has drawn different objects sets of lines . A previously drawn object may be the last line drawn by the user. The previously drawn object comprises a dimensional unit L which may represent the length of the previously drawn object .

Example illustrates the grid that has been recentered and the gridline spacing adjusted. The grid has new gridline spacing S . The new gridline spacing S may be determined based upon the dimensional unit L of the previously drawn object and a multiplier. A default multiplier or a user specified multiplier may be used to determine the new gridline spacing S . For example the grid has gridline spacing S of 100 pixels. The dimensional unit L may be 200 pixels. The user specifies a multiplier of 1. The new gridline spacing S is now 200 pixels dimensional unit multiplier . The dimensional unit L length of the previously drawn object does not change when the gridline spacing is adjusted.

The grid is also recentered. The position of the origin of the grid is recentered to match the position of the previously drawn object . The previously drawn object comprises a last vertex drawn . The recentered position of the origin may be the last vertex drawn in the previously drawn object .

Example illustrates the grid in Cartesian coordinate mode X Y having an origin 0 0 . The grid comprises a previously drawn object with a last drawn vertex . It may be advantageous to a user to switch from Cartesian coordinate mode to radial mode because the previously drawn object was drawn at an angle. The next object the user may draw might also be at an angle. Radial mode is conducive to drawing objects at angles because of the gridline layout.

Example illustrates the grid in radial coordinate mode. The grid may be switched between radial and Cartesian or Cartesian to radial modes automatically or in response to user input. The grid is also recentered. The position of the origin of the grid is recentered to correspond to the last vertex drawn .

The orient grid button allows the user to orient the grid corresponding to an angle of a previously drawn object. The grid may be rotated a number of degrees corresponding to the angle. The set of multiplier buttons allows the user to specify a multiplier. The multiplier is then used when resizing changing gridline spacing the grid . The keyboard and functionality comprised within the buttons of the keyboard may be invoked by the user at any time.

Still another embodiment involves a computer readable medium comprising processor executable instructions configured to implement one or more of the techniques presented herein. An exemplary computer readable medium that may be devised in these ways is illustrated in wherein the implementation comprises a computer readable medium e.g. a CD R DVD R or a platter of a hard disk drive on which is encoded computer readable data . This computer readable data in turn comprises a set of computer instructions configured to operate according to one or more of the principles set forth herein. In one such embodiment the processor executable instructions may be configured to perform a method such as the exemplary method of for example. In another such embodiment the processor executable instructions may be configured to implement a system such as the exemplary system of for example. Many such computer readable media may be devised by those of ordinary skill in the art that are configured to operate in accordance with the techniques presented herein.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

As used in this application the terms component module system interface and the like are generally intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a controller and the controller can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Furthermore the claimed subject matter may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

Although not required embodiments are described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like. Computer readable instructions may be loaded in memory for execution by processing unit for example.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allows device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC an integrated network interface a radio frequency transmitter receiver an infrared port a USB connection or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB firewire IEEE 1394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments provided herein. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device .

Various operations of embodiments are provided herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment provided herein.

Moreover the word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as advantageous over other aspects or designs. Rather use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application the term or is intended to mean an inclusive or rather than an exclusive or . That is unless specified otherwise or clear from context X employs A or B is intended to mean any of the natural inclusive permutations. That is if X employs A X employs B or X employs both A and B then X employs A or B is satisfied under any of the foregoing instances. In addition the articles a and an as used in this application and the appended claims may generally be construed to mean one or more unless specified otherwise or clear from context to be directed to a singular form.

Also although the disclosure has been shown and described with respect to one or more implementations equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components e.g. elements resources etc. the terms used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. that is functionally equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes having has with or variants thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising. 

