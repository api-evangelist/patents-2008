---

title: Processing, forming, modifying, and comparing packet data structures
abstract: Packet data structure formation methods include receiving a request to create a data structure for representing a packet. The request may refer to two or more fields to be included in the packet. The methods further include determining bit values and packet positions associated with the fields and, based on the determining, creating a set of bits comprising the packet. The set of bits include the bit values in the packet positions. The method further includes storing the set of bits using the data structure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08045553&OS=08045553&RS=08045553
owner: Ciena Corporation
number: 08045553
owner_city: Linthicum
owner_country: US
publication_date: 20080804
---
The present invention in various embodiments relates to processing forming modifying and comparing packet data structures.

During the process of testing a packet switch it may be helpful to generate a test packet using software. Creating the test packet typically involves specifying binary values for many if not all of the bits of the test packet. Doing so may not only be tedious and time consuming but may also require significant training and expertise.

Often new packet switch features involve adding new fields to a packet removing existing fields from a packet or modifying values of existing fields of a packet. Testing such features may involve a test engineer manually searching through binary or hexadecimal values representing the bits of a packet that has been processed by the packet switch to verify that the packet switch properly modified the packet.

For example a feature may add a field to packets received by the packet switch prior to forwarding the received packets. Verification of such a feature may involve manually searching through binary or hexadecimal values of a processed packet to find the added field and then determining whether the added field is in the correct position within the packet and whether the added field has a correct value. Doing so may be time consuming and may be prone to error due to the tedious nature of such verification.

According to one aspect of the invention a packet data structure formation method includes receiving a request to create a data structure for representing a packet. The request refers to two or more fields to be included in the packet. In one embodiment one of the fields may be configured to be used in layer two forwarding of the packet and another one of the fields may be configured to be used in layer three forwarding of the packet. The method further includes determining bit values and packet positions associated with the fields based on the determining creating a set of bits comprising the packet and using the data structure storing the set of bits.

The set of bits comprise the bit values in the packet positions. In one embodiment the request may include the bit values.

The two or more fields may be arranged in the request in a first order and subsequent to the creating of the set of bits the two or more fields may be arranged in the packet in a second order different from the first order. The packet may include at least one field not explicitly referred to by the request. This field may include a default value.

The packet may be referred to as a first packet and the request may refer to a second packet. Subsequent to the creating of the set of bits the first packet may be identical to the second packet except for the two or more fields.

Referring to a block diagram of processing circuitry is illustrated. Processing circuitry includes two ports and . Processing circuitry may comprise circuitry configured to implement desired programming provided by appropriate media in at least one embodiment. For example processing circuitry may be implemented as one or more of a processor and or other structure configured to execute executable instructions including for example software and or firmware instructions and or hardware circuitry.

Exemplary embodiments of processing circuitry include hardware logic PGA FPGA ASIC state machines and or other structures alone or in combination with a processor. These examples of processing circuitry are for illustration and other configurations are possible. For example in one embodiment processing circuitry may be a computer.

Port may be a network interface device e.g. a network interface card connected to a network not illustrated . Port may receive packets e.g. Ethernet packets from the network and or may transmit packets to the network. Port may also be a network interface device. Port may be connected to the same network as port or may be connected to a different network. Port may receive packets from the network to which it is connected and or may transmit packets to the network to which it is connected.

Processing circuitry may be configured to process packet data structures representing packets. For example processing circuitry may create the packet data structures modify the packet data structures and or delete the packet data structures. In some configurations the packet data structures may represent packets received by one or more of port and port . Furthermore bits of the packet data structures may be transmitted as packets using one or more of port and port .

In one embodiment the packet data structures may be objects for example objects created using object oriented programming. Processing circuitry may storage circuitry not illustrated and may store the objects in the storage circuitry.

The storage circuitry may be embodied in a number of different ways using electronic magnetic optical electromagnetic or other techniques for storing information. Some specific examples of storage circuitry include but are not limited to a portable magnetic computer diskette such as a floppy diskette zip disk hard drive random access memory read only memory flash memory cache memory and or other configurations capable of storing programming data or other digital information. In one embodiment the storage circuitry may store programming executed by processing circuitry .

In one embodiment processing circuitry may receive a request to create a packet data structure representing a packet such as an Ethernet packet. In some cases the request may refer to two or more fields to be included in the packet.

Referring to a chart depicting a request is illustrated. The request includes two field identifiers and and two values and associated respectively with field identifiers and . Field identifier is an Internet Protocol IP destination address DA field identifier with an associated value of 10.12.11.1 and field identifier is a virtual local area network VLAN identifier ID field identifier with an associated value of 100.

Request may include field identifiers and corresponding values for different layers of the Open Systems Interconnect OSI stack. For example value is an IP DA which is associated with layer three forwarding and value is a VLAN ID which is associated with layer two forwarding.

As depicted in value may have four different decimal numbers separated by periods. Value may be in the format depicted because it may be convenient for an operator who helps form request to use the depicted format. In contrast other formats may be less convenient. For example value may be alternatively represented using binary values. However specifying value using binary values may be inconvenient or difficult for the operator.

After receiving request processing circuitry may form a packet data structure based on field identifiers and and values and .

Referring to a chart illustrating characteristics of a packet data structure is illustrated. Processing circuitry may form packet data structure in response to receiving request .

In one embodiment packet data structure may include a set of bits . Processing circuitry may use bits to form a packet that may be transmitted by port or port of processing circuitry to another device not illustrated connected to port and or port . In some configurations processing circuitry may store bits as binary values or hexadecimal values and may represent bits as hexadecimal values within processing circuitry .

Referring to a representation of bits in a hexadecimal format is depicted. Bits may be grouped into fields and . In one embodiment processing circuitry may perform the grouping based on one or more standards that specify positions of the fields within a packet.

Referring to another representation of bits is depicted which illustrates positions of fields and within bits by labeling the fields with field labels. As depicted in field may be an Ethernet destination address EDA field may be an Ethernet source address ESA field may be a first Ethernet type ETYPE field may be a VLAN field may be a second ETYPE field may be an IP header field may be an IP source address IPSA field may be an IP destination address IPDA and field may be data.

In one embodiment field may include payload data and may also include overhead data. The overhead data may be related to layers 3 7 of the OSI model. For example the overhead data may include a layer four port number.

The positions of the fields within may indicate the positions of the fields within a packet formed by processing circuitry using bits . For example in a packet formed using bits field may be at the beginning of the packet followed by field which may be followed by field and so on concluding with field . In some embodiments when forming the packet from bits processing circuitry may include additional bits not illustrated in for example preamble bits. These additional bits may or may not be included in bits .

Although field labels associated with fields and are depicted in bits might not include the labels. Instead bits may include values of the fields. In this case the fields may be distinguished from each other by their position within bits rather than by field labels within bits . Some of the fields of bits may themselves include a field. For example field includes fields and which may be referred to as subfields.

Returning now to several field identifiers along with corresponding values and are illustrated. For example field identifier indicates that a VLAN ID field is associated with packet data structure and value indicates that value of the VLAN ID field is 100. Note that bits may include fields not explicitly included in the chart of . For example as illustrated in bits may include ETYPE field but ETYPE field is not explicitly included in the chart of .

In one embodiment packet data structure may store a single data member namely bits . In this embodiment packet data structure may have many different methods e.g. object methods that may be used to extract information stored in the single data member bits . For example packet data structure may have a method configured to locate an IP DA field e.g. field within bits and return the value of the IP DA field in a desired format e.g. as four decimal numbers separated by periods .

Packet data structure may additionally or alternatively include methods that may be used to alter the values of fields of bits . For example packet data structure may have a method configured to accept an IP address in a desired format and to modify an IP DA field of bits e.g. field to have the IP address accepted by the method. Similarly packet data structure may have other methods that may add fields to bits or remove fields from bits .

In this embodiment values and illustrated in may represent the result of calling one or more methods associated with packet data structure . For example value which is associated with field identifier may represent a value returned by calling a method configured to find Ethernet SA field illustrated in within bits and return the value of field .

In another embodiment packet data structure may include a plurality of data members in addition to bits . The additional data members may store the values and or positions within bits of one or more of the individual fields of bits . In some cases the values of the fields may be stored in both the additional data members and bits and the values stored by the additional data members may be used to update the values stored in bits . The additional data members may be created modified and or deleted using methods of packet data structure .

In this embodiment if one of the additional data members is modified using a method of packet data structure the method may in addition to modifying the value of a field associated with the additional data member update the data member storing bits to have the proper value of the field stored by the additional data member so that bits reflect the current value of the field.

Furthermore in this embodiment values and illustrated in may represent the additional data members of packet data structure .

In yet another embodiment packet data structure may have a plurality of data members such as the above described additional data members. Each of the data members may store value s of one or more fields. In this embodiment packet data structure might not have bits as a data member. In this embodiment bits may be created via a method of packet data structure by concatenating the values stored by the plurality of data members.

Processing circuitry may form packet data structure in response to receiving request . In doing so processing circuitry may determine binary values and or hexadecimal values corresponding to values and of request . For example processing circuitry may convert value to a binary or hexadecimal format. In some cases values specified in the request may already be in an acceptable format e.g. a binary or hexadecimal format . Accordingly in these cases conversion of the values might not be necessary.

Processing circuitry may then determine positions for each of the converted values within a packet represented by packet data structure . In doing so processing circuitry may analyze field label and determine that field label corresponds to field . Likewise processing circuitry may analyze field label and determine that field label corresponds to field .

Processing circuitry may then store the converted versions of values and in packet data structure . In one embodiment processing circuitry may create bits and store the converted versions of values and in bits . In another embodiment processing circuitry may create data members of packet data structure for each of the converted versions of values and and store the converted versions of values and in the data members.

Note that request need not specify values and in the order in which the values appear in a packet represented by packet data structure . For example request may specify a value for the IP DA field first and a value for the VLAN ID field second even though the VLAN ID field may appear before the IP DA field in a packet represented by packet data structure .

In one embodiment processing circuitry may specify values for each of the fields of bits even though the values might not be included in request . Processing circuitry may use default values for fields not specified in request . For example processing circuitry may specify a default value for Ethernet DA field and Ethernet SA field .

In one embodiment request may refer to a reference packet data structure. Processing circuitry may use the field values of the reference packet data structure in creating bits instead of using default values.

In one embodiment request may refer to packet data structure . As a result processing circuitry may create bits so that bits are identical to bits except that value is used for IP DA field of bits instead of the IP DA field value 10.12.11.2 of packet data structure and value is used for VLAN ID field of bits instead of the VLAN ID field value 80 of packet data structure . Accordingly bits as illustrated in may be identical to bits as illustrated in except for field the VLAN ID field and field the IP DA field .

According to another aspect of the invention an article of manufacture includes a computer readable medium storing computer program code configured to be executed by a computer. The computer program code is configured to access a set of bits of a packet and determine two or more fields are present within the set of bits. Determining that the two or more fields are present may include identifying bit patterns associated with network protocols.

The code is further configured to partition the set of bits into two or more subsets of the set of bits based on the determination. The two or more subsets correspond to the two or more fields. Some of the bits of one of the two or more subsets may also belong to another one of the two or more subsets.

The code is further configured to associate identifiers with the two or more fields and create a data structure configured to allow the two or more subsets corresponding to the two or more fields to be individually modified by referring to the identifiers associated with the fields. The two or more fields are associated with different identifiers relative to one another. The identifiers might not be present in the set of bits.

In one embodiment the data structure may be an object having methods configured to allow the two or more subsets corresponding to the two or more fields to be individually modified by referring to the identifiers associated with the two or more fields.

One of the two or more fields may include a layer two destination address a layer two source address a layer three destination address a layer three source address a time to live value a Virtual Local Area Network VLAN identifier a Multiprotocol Label Switching MPLS label a Provider Bridging PB identifier a Provider Backbone Bridging PBB identifier a Provider Backbone Transport PBT identifier Provider Backbone Bridging Traffic Engineering PBB TE identifier or a Virtual Private LAN Services VPLS identifier.

The set of bits may be referred to as a first set of bits. The computer program code may be further configured to receive a request to add an additional field to the packet subsequent to the creating of the data structure. The request may include an additional identifier identifying the additional field and a value in a first format. The computer program code may be further configured to convert the value from the first format to a second format. When in the second format the value may include a second set of bits.

Based on the additional identifier the computer program code may determine a position within the packet where the second set of bits are to be located modify the first set of bits to include the second set of bits at the position and transmit the modified first set of bits to a device via a network interface. The computer program code may be further configured to receive a request to display one of the two or more fields and in response display the one field in a decimal format.

In one embodiment processing circuitry may create packet data structure in response to receiving a packet comprising bits from port or port . After receiving bits processing circuitry may access bits and determine that fields are present in bits . For example in keeping with known methods processing circuitry may examine bits for particular bit patterns associated with known network protocols and may determine the lengths of the fields and the positions of the fields within bits based on the patterns.

Processing circuitry may partition bits into fields e.g. fields and . As was described above packet data structure may have one or more methods that return values of the fields of bits . For example packet data structure may have a method that returns the value of the Ethernet SA of field .

Packet data structure may associate each field with a field identifier. For example packet data structure may associate field with the field identifier Ethernet DA. In some configurations the field identifier may be a method. For example a method named Return Ethernet DA may be associated with field so that if the method is called processing circuitry may return the value of field . Of course as was described above processing circuitry may convert the value into a different format before returning the value. For example processing circuitry may convert the value from a binary or hexadecimal format to a decimal format.

According to another aspect of the invention a packet data structure modification method includes providing a data structure comprising a first set of bits representing a packet and receiving a request to modify the data structure. The request includes an identifier identifying a packet field and a value. The value is in a first format. The data structure may include an object and the receiving of the request may include receiving the request as a result of a method of the object being called.

The method also includes converting the value from the first format to a second format wherein the value when in the second format is a second set of bits. The first format may be a decimal format and the second format may be a binary format.

The method also includes determining a position within the packet where the second set of bits are to be located based on the identifier and modifying the first set of bits to include the second set of bits at the position. The request might not explicitly describe the position. Prior to the modifying of the first set of bits the packet might not include the packet field. Modifying the first set of bits may include modifying the first set of bits without modifying a layer two address of the packet.

The value may be referred to as a first value and prior to the modifying of the first set of bits the packet may include the packet field but the packet field may include a second value different from the first value.

Several methods of creating a packet data structure are described above. Once a packet data structure has been created processing circuitry may modify the packet data structure. For example values of fields of the packet data structure may be modified new fields may be added to the packet data structure and or fields may be removed from the packet data structure.

Referring to another representation of bits is depicted which illustrates positions of fields and within bits by labeling the fields with field labels.

Processing circuitry may create packet data structure and may subsequently receive a request to modify one of the values of one of the fields of bits . For example processing circuitry may receive an Application Programming Interface API call method call associated with packet data structure or an explicit request from a user requesting that the VLAN ID be changed from 200 to 201. The request may include a field identifier e.g. VLAN ID and a value e.g. 200 . The VLAN ID may initially be in a format that is not a binary or hexadecimal format. In response to the request processing circuitry may convert the value into a binary or hexadecimal format.

In some configurations the request might not specify the position of field the VLAN ID field within bits . Accordingly processing circuitry may determine a position within bits where field is located. Processing circuitry may use the field identifier from the request to determine the position. For example processing circuitry may determine the position based on a network protocol standard that specifies the position of the field identifier. Using the position processing circuitry may then replace the value in field currently 00C8 with the converted value 00C9 .

Note that bits are identical to bits except that field of bits has a hexadecimal value of 00C9 201 in decimal which is the new value specified in the request and field of bits has a hexadecimal value of 00C8 200 in decimal which is the original VLAN ID value that packet data structure had prior to processing circuitry receiving the request. Accordingly the values of address fields such as Customer DA field and Customer SA field have not been changed as a result of the request.

An example of adding fields to a packet data structure will now be described. Subsequent to creating packet data structure processing circuitry may receive a request to add one or more fields to packet data structure . For example processing circuitry may receive an API call method call associated with packet data structure or an explicit request from a user requesting that a backbone DA B DA backbone SA B SA first ETYPE backbone tag B TAG second ETYPE and instance service identifier I SID fields be added to packet data structure . The request may include field identifiers and corresponding values for the fields to be added. The values may initially be in a format that is not a binary or hexadecimal format. In response to the request processing circuitry may convert the values into a binary or hexadecimal format.

In some configurations the request might not specify the positions where the fields should be inserted into bits . Accordingly processing circuitry may determine positions within bits where the fields should be added. Processing circuitry may use the field identifiers from the request to determine the positions. Using the positions processing circuitry may then add the converted values to bits .

Referring to another representation of bits is depicted which illustrates positions of fields and within bits by labeling the fields with field labels. Note that bits include the new fields specified by the request fields and .

According to another aspect of the invention a packet data structure modification method includes providing a data structure comprising a set of bits representing a packet and receiving a request to modify the data structure. The packet may be an Ethernet packet. The request includes an identifier identifying a packet field. The method also includes identifying a subset of the set of bits that comprise the packet field based on the identifier and removing the subset from the set of bits.

The subset may include one or more of at least one Virtual Local Area Network VLAN identifier at least one Multiprotocol Label Switching MPLS label a Provider Bridging PB identifier a Provider Backbone Bridging PBB identifier a Provider Backbone Transport PBT identifier Provider Backbone Bridging Traffic Engineering PBB TE identifier or a Virtual Private LAN Services VPLS identifier.

The subset may be referred to as a first subset and the method may further include concatenating a second subset of the set of bits with a third subset of the set of bits subsequent to the removing of the subset. Prior to the removing of the first subset the second subset may be positioned within the set of bits so as to be ahead of the first subset with respect to a transmission order of the bits and the third subset may be positioned within the packet behind the first subset with respect to the transmission order. The transmission order may indicate an order in which the bits are arranged when formed into the packet.

In addition to illustrating the modification of a field and the addition of fields packet data structure may be used to illustrate an example of removing fields from a packet data structure.

Processing circuitry may initially create packet data structure having bits as illustrated in A and B. Subsequently processing circuitry may receive a request to remove one or more fields from packet data structure . For example processing circuitry may receive an API call method call associated with packet data structure or an explicit request from a user requesting that a backbone DA B DA backbone SA B SA first ETYPE backbone tag B TAG second ETYPE and instance service identifier I SID fields be removed from packet data structure . The request may include field identifiers identifying the fields to be removed.

Processing circuitry may use the field identifiers from the request to determine the positions of the fields. Using the positions processing circuitry may then remove the fields from bits .

As a result packet data structure may include bits rather than bits . Note that as illustrated in bits do not include the fields specified in the request.

According to another aspect of the invention a packet data structure comparison method includes accessing a first packet data structure including a first set of bits and a second packet data structure including a second set of bits. The method further includes comparing the first set of bits to the second set of bits and based on the comparing identifying at least one third set of bits present in the first set of bits but not present in the second set of bits. The method may further include identifying at least on fourth set of bits present in the second set of bits but not present in the first set of bits.

The method also includes determining that the third set of bits includes a field of the first packet that is either not present in the second packet or that is present in the second packet but has a value in the first packet that is different than a value of the field in the second packet.

The method also includes based on the determining communicating a difference between the first packet and the second packet using an identifier of the field. The name may be descriptive of the field. The third set of bits may include the value of the field of the first packet in a binary format and the method may further include converting the value of the field of the first packet to a decimal format. Communicating the difference may include communicating the difference using the converted value.

Processing circuitry may access packet data structure see A and B and packet data structure see . Processing circuitry may then compare bits to bits . Based on the comparison processing circuitry may determine that the bits of fields and do not match and that the bits of fields and do not match. Processing circuitry may further determine that fields and are both VLAN ID fields and that fields and are both IP DA fields.

As a result processing circuitry may communicate the fact that fields and do not match and that fields and do not match. In one embodiment processing circuitry may communicate the mismatch to a user. In communicating the mismatch processing circuitry may indicate the field identifiers of the mismatching fields VLAN ID and IP DA . Processing circuitry may also indicate the mismatched values. Prior to indicating the mismatched values processing circuitry may convert the values from a binary or hexadecimal format into a preferred format such as a decimal format.

Communicating the differences between packet data structure and packet data structure in this manner may save time for a user compared with the tedious process of the user directly comparing bits to bits determining a field identifier associated with the mismatched bits and converting the binary or hexadecimal versions of the mismatched bits into a preferred format. As is described below in relation to test circuitry may compare two packet data structures during the process of determining whether a packet switch is operating according to expected behavior.

According to another aspect of the invention a packet switch modeling method includes identifying functionality of a packet switch to be modeled and creating in a packet switch model a plurality of nodes representing physical and or logical elements of the packet switch. The nodes are configured to process packets and to respectively model different portions of the functionality of the packet switch relative to one another. The method also includes in the packet switch model connecting the nodes with pathways by which the packets may be forwarded between the nodes. The method may further include generating a topology diagram illustrating the plurality of nodes and the pathways connecting the plurality of nodes.

At least one node of the plurality may represent a physical port of the packet switch a logical port of the packet switch a sub port of a logical port of the packet switch or a virtual switch of the packet switch.

The method may further include receiving a configuration command describing the functionality of the packet switch. Identifying the functionality of the packet switch may include identifying the functionality based on the configuration command.

The method may further include receiving a first packet from a device that is external to the model creating a packet data structure representing the first packet assigning the packet data structure to a first node of the plurality of nodes based on first information comprised by the first packet forwarding the packet data structure to a second node of the plurality of nodes based on second information comprised by the first packet modifying the packet data structure according to a rule associated with the second node of the plurality of nodes creating a second packet based on the modified packet data structure and transmitting the second packet to the device. The first information may include one or more addresses. In one embodiment the method may further include modifying the rule in response to receiving a configuration instruction.

The device may include a test device configured to send the packet to a packet switch to receive a response packet from the packet switch and to compare the response packet with the modified packet.

The first node may represent a logical port of the packet switch and the second node may represent a sub port of a logical port of the packet switch. Modifying the received packet may include replacing a virtual local area network VLAN identifier of the received packet with a VLAN identifier associated with the sub port.

According to another aspect of the invention an article of manufacture includes a computer readable medium storing computer program code configured to be executed by a computer. The computer program code is configured to identify functionality of a packet switch to be modeled and to create in a packet switch model a plurality of nodes representing physical and or logical elements of a packet switch. The nodes are configured to process packet data structures and to respectively model different portions of the functionality of the packet switch relative to one another.

The computer program code is further configured to connect the nodes with pathways by which the packet data structures may be forwarded between the nodes.

The computer program code is also configured to receive a first packet from a device e.g. a device external to a computer executing the computer program code create a packet data structure representing the first packet assign the packet data structure to a first node of the plurality of nodes based on first information comprised by the first packet forward the packet data structure to a second node of the plurality of nodes based on second information comprised by the first packet modify the packet data structure according to a rule associated with the second node create a second packet based on the modified packet data structure and transmit the second packet to the device. In one embodiment the computer program code may be configured to modify the packet data structure by adding a transport identifier to the packet data structure.

The transport identifier may include one or more of at least one Virtual Local Area Network VLAN identifier at least one Multiprotocol Label Switching MPLS label a Provider Bridging PB identifier a Provider Backbone Bridging PBB identifier a Provider Backbone Transport PBT identifier Provider Backbone Bridging Traffic Engineering PBB TE identifier or a Virtual Private LAN Services VPLS identifier.

During the process of developing new packet switch features or behaviors the need to test the new features may arise. Such testing may be accomplished by sending test packets into the packet switch and analyzing packets transmitted by the packet switch in response to receiving the test packets to determine whether the new packet switch features are operating as expected.

To independently verify that the new features are operating as expected it may be desirable to create a model of the expected packet switch behavior. The model may then be used to verify that the actual packet switch is behaving as expected.

Packet switches typically include specialized hardware controlled by firmware or software. The hardware may be configured to efficiently process packets at very high rates.

The model of the packet switch in contrast may be implemented by software executed by general purpose hardware such as one or more personal computers or servers. Since general purpose hardware is used to execute the software the model might not be able to process packets as quickly as the packet switch being modeled. However speed might not be as important during testing as the ability to verify expected packet switch behavior.

Referring to in one embodiment processing circuitry may implement a packet switch model . Model may include a plurality of nodes including physical port nodes and logical port nodes and sub port nodes and and a virtual switch node . The nodes of model may be interconnected with pathways and as illustrated in .

Model may represent functionality of the packet switch being modeled by using the nodes of model to modify one or more data members of a packet data structure e.g. packet data structure described above .

Individual nodes of model may imitate particular functionality of the packet switch being modeled by model according to rules associated with the nodes. For example node may imitate packet processing performed by a physical port of the packet switch being modeled and node may imitate packet processing performed by a virtual switch of the packet switch being modeled.

A first node of model may imitate packet processing of the packet switch being modeled by modifying one or more data members e.g. bits of packet data structure of a packet data structure according to a rule and then passing the data structure to a second node of model to which the first node is connected via a pathway. The second node may then modify one or more data members of the packet data structure and pass the data structure to a third node connected to the second node via a pathway and so on.

By way of example a rule associated with node may specify that the value of an existing field of a data member of a packet data structure received by node is to be modified that a new field is to be added to the data member and or that an existing field is to be removed from the data member in the manner described above in relation to . In one embodiment node may add one or more new fields that together comprise a transport identifier used in layer two forwarding of packets.

The nodes may additionally or alternatively perform other processing. For example a particular node might not modify a data member of a packet data structure but instead may inspect fields of the data member and based on the inspection select one of a plurality of nodes connected to the particular node via pathways to which to pass the packet data structure.

For example logical port node may be connected via pathways to physical port node and to another physical port node not illustrated . Upon being passed a packet data structure node may inspect a data member of the packet data structure and determine that the packet data structure is to be passed to node via pathway

The packet data structure may be passed from one node to another in a variety of ways. For example in one embodiment each node of the model may be an object created by object oriented programming and a first node of the model may pass the packet data structure to a second node of the model via a pathway by simply calling a method of the second node and passing a pointer to the packet data structure in the method call.

By way of example port of processing circuitry may receive a packet from a device connected to port . Upon receiving the packet processing circuitry may create a packet data structure representing the received packet using the methods described above. Processing circuitry may then analyze one or more values of fields of the packet data structure and based on the analysis assign the packet data structure to node . Node may process the packet data structure according to a rule associated with node e.g. by modifying a value of a field of the packet data structure and then pass the packet data structure to node via pathway based on one or more values of fields of the packet data structure e.g. a destination address or a source address .

Node may process the packet data structure according to a rule associated with node e.g. replacing the value of the VLAN ID field with a new value associated with node and then pass the packet data structure to node via pathway . Node may process the data structure according to a rule e.g. by adding a set of fields comprising a transport identifier and then pass the packet data structure to node via pathway .

The packet data structure may then be processed by node passed to node via pathway processed by node passed to node via pathway processed by node passed to node via pathway and then processed by node . Upon completion of processing by node processing circuitry may transmit bits stored by the packet data structure that represent the packet using port .

Of course model may include additional nodes and pathways that may increase the sophistication of model . For example node may be connected via pathways to several additional nodes and the processing performed by node may include selecting to which of the connected nodes node should forward the packet data structure.

In one embodiment the nodes of model may be objects and processing circuitry may instantiate the nodes via object oriented programming. Processing circuitry may initially create the nodes of model in response to receiving a configuration command. The configuration command may describe desired functionality of the packet switch being modeled by model . The configuration command may advantageously be in a format accepted by the packet switch being modeled by model so that the configuration command may be used for the packet switch and or for model .

Upon receiving the configuration command processing circuitry may analyze the configuration command to determine the nodes of model to be created and the pathways to connect the nodes of model . Processing circuitry may also determine rules associated with the nodes of model from the configuration command. Processing circuitry may then create and configure the nodes of model and interconnect the nodes with pathways.

In some cases after model has been created processing circuitry may receive a configuration command specifying that the behavior of model should be changed. In response model may modify the rules associated with one or more of the nodes of model so that the desired behavior is obtained.

In one embodiment processing circuitry may generate a topology diagram of model . A user may subsequently view the topology diagram. The topology diagram may be useful in troubleshooting. For example a user may visually determine that model is incorrect by comparing model to an expected topology of model . The user may also use the topology diagram to inspect the number of nodes of model and the way that the nodes of model are interconnected. In one configuration the topology diagram may look like .

According to another aspect of the invention a packet switch test system includes a packet switch processing circuitry configured to operate independent of the packet switch and to execute instructions configured to model an expected behavior of the packet switch and test circuitry in communication with the packet switch and the processing circuitry. The test circuitry is configured to send an original test packet to the packet switch and to send a duplicate of the original test packet to the processing circuitry.

The packet switch is configured to modify the original test packet and to send the modified original test packet to the test circuitry. The processing circuitry is configured to modify the duplicate according to the expected behavior and to send the modified duplicate to the test circuitry. The test circuitry is configured to determine whether the packet switch is operating according to the expected behavior by comparing the modified original test packet to the modified duplicate. The test circuitry may be further configured to indicate differences between the modified original test packet and the modified duplicate.

The original test packet the duplicate the modified original test packet and the modified duplicate may be Ethernet packets and the packet switch may be an Ethernet packet switch comprising a plurality of ports. The Ethernet packet switch may be configured to forward a packet received on one of the ports of the plurality to one or more of the other ports of the plurality.

The test circuitry may be further configured to send the duplicate to a first port of the processing circuitry and the processing circuitry may be configured to send the modified duplicate to the test circuitry using a second port of the processing circuitry. The second port may be different from the first port.

In one embodiment the test circuitry may be further configured to send configuration instructions to the packet switch prior to sending the original test packet to the packet switch and to send the configuration instructions to the processing circuitry prior to sending the duplicate to the processing circuitry.

According to another aspect of the invention a packet switch test method includes receiving a first packet from a packet switch receiving a second packet from processing circuitry configured to model expected behavior of the packet switch comparing the first packet to the second packet and based on the comparing determining whether the packet switch is operating according to the expected behavior. Determining whether the packet switch is operating according to the expected behavior may include determining that the first packet is identical to the second packet.

Comparing the first packet to the second packet may include comparing a first subset of a first set of bits of the first packet to a corresponding second subset of a second set of bits of the second packet. In one embodiment bits of the first set that do not belong to the first subset may be payload bits with respect to a layer two header of the first packet. In one embodiment bits of the first set that do not belong to the first subset may include a time stamp.

The method may further include sending a test packet to the processing circuitry via a first port of the processing circuitry prior to the receiving of the second packet. The receiving of the second packet may include receiving the second packet via a second port of the processing circuitry. The first port may be different than the second port. In one embodiment the test packet may be identical to the second packet.

The packet data structures and packet models described above may be used in a test system to test functionality of a packet switch.

Referring to a test system is illustrated. System includes a packet switch processing circuitry described above and test circuitry . Packet switch includes two ports and . Two ports are illustrated for simplicity packet switch may include more than two ports. Packet switch also includes an API . Processing circuitry also includes an API . Test circuitry may communicate with packet switch via API . For example test circuitry may send a configuration command to packet switch via API . Similarly test circuitry may send a configuration command to processing circuitry via API .

Processing circuitry may implement a packet switch model such as model described above. The model may be configured to imitate the functionality of packet switch . Accordingly the model may include nodes having rules and pathways that imitate the functionality of packet switch .

As was described above in some embodiments processing circuitry may create the model based on a configuration command. In some cases test circuitry may send the same configuration command to packet switch . Since both processing circuitry and test circuitry may receive the same configuration command and perform the same functionality in some cases test circuitry might not know that processing circuitry is a model of packet switch rather than a packet switch.

Processing circuitry may operate independent of packet switch . For example processing circuitry might not communicate with packet switch .

Test circuitry may send an original test packet to packet switch and may send a duplicate of the original test packet to processing circuitry . In one embodiment the original test packet and the duplicate are Ethernet packets. Although the original is sent to packet switch the original need not include any address associated with packet switch . For example neither the Ethernet address nor the IP address of packet switch need be included in the original test packet. Likewise the duplicate test packet need not include any address associated with processing circuitry . However in some embodiments the original may include an address e.g. an Ethernet address or IP address of packet switch and or the duplicate test packet may include an address of processing circuitry .

Packet switch may modify the original test packet according to functionality of packet switch and may forward the modified original test packet to test circuitry . In some cases packet switch may receive the original test packet on port and may forward the modified original test packet to test circuitry via port .

Processing circuitry may receive the duplicate e.g. on port and may modify the duplicate based on model which is configured to model expected behavior of packet switch . Processing circuitry may then forward the modified duplicate packet to test circuitry e.g. via port .

Test circuitry may compare the modified original test packet to the modified duplicate packet to see if there are any differences. In some configurations test circuitry may be configured to report any differences between the modified duplicate and the modified original. In other words differences may be reported unless the modified duplicate and the modified original are identical including addresses such as Ethernet DAs Ethernet SAs IP DAs and IP SAs.

In other configurations test circuitry may be configured to ignore certain fields of the modified original and the modified duplicate. For example test circuitry may be configured to ignore time stamps when comparing the modified original and the modified duplicate. Differences in the time stamps might not indicate incorrect operation by packet switch since the time stamp in the modified original may be generated by packet switch and the time stamp in the modified duplicate may be generated by processing circuitry and differences in the clocks of packet switch and processing circuitry may be acceptable.

By way of another example test circuitry may be configured to ignore bits that are considered payload in relation to an OSI layer two header of the modified original and the modified duplicate. In this case the payload may include header bits from higher layers of the OSI model for example layer three header bits.

If there are no differences test circuitry may assume that packet switch is behaving according to model . If there are differences test circuitry may report the differences. In one configuration test circuitry may report the differences to a user. The differences may indicate that packet switch is not behaving according to expected behavior. Alternatively the differences may indicate that model is not accurately modeling the expected behavior.

This method of sending test packets to packet switch and processing circuitry and comparing resulting packets may be repeated using a number of different test packets. Thereby the expected functionality of packet switch may be exercised to determine whether packet switch is truly executing according to the expected functionality.

In some cases implementing a model of the expected functionality in processing circuitry may be accomplished more quickly than implementing the expected functionality in packet switch primarily because processing circuitry may implement the expected functionality in a software model instead of implementing the expected functionality in specialized hardware and firmware in packet switch . Accordingly as new functionality is developed for packet switch a test engineer may quickly implement a model of the new functionality so that packet switch may be tested against the model to discover defects in packet switch prior to generally releasing packet switch .

According to another aspect of the invention a packet switch test method includes sending an original test packet to a packet switch and sending a duplicate of the original test packet to processing circuitry configured to model expected behavior of the packet switch. The method also includes receiving a first response packet from the packet switch in response to the sending of the original test packet and determining that a second response packet has not been received from the processing circuitry in response to the sending of the duplicate. The method also includes determining that the packet switch is not operating according to the expected behavior based on the receiving of the first response packet and the determining that the second response packet has not been received from the processing circuitry.

The method may further include prior to the sending of the original test packet and the sending of the duplicate configuring the packet switch with a set of parameters using an application programming interface API and configuring the processing circuitry with the set of parameters using the API.

The original test packet may include a layer two destination address that is not a layer two destination address of the packet switch and the duplicate may include a layer two destination address that is not a layer two destination address of the processing circuitry.

In some cases test circuitry may send an original test packet to packet switch that is designed so that according to expected behavior of packet switch packet switch will drop the original test packet rather than forwarding the original test packet or a modified version of the original test packet back to test circuitry . Test circuitry may send a duplicate of this specially designed test packet to processing circuitry .

Test circuitry may then wait a period of time. If test circuitry does not receive a packet from packet switch in response to the original test packet e.g. a modified original test packet and test circuitry does not receive a packet from processing circuitry in response to the duplicate test packet test circuitry may conclude that packet switch is operating according to expected behavior.

However if test circuitry does receive a packet from packet switch in response to the original test packet e.g. a modified original test packet but does not receive a packet from processing circuitry in response to the duplicate test packet test circuitry may conclude that packet switch is not operating according to expected behavior.

In compliance with the statute the invention has been described in language more or less specific as to structural and methodical features. It is to be understood however that the invention is not limited to the specific features shown and described since the means herein disclosed comprise preferred forms of putting the invention into effect. The invention is therefore claimed in any of its forms or modifications within the proper scope of the appended claims appropriately interpreted in accordance with the doctrine of equivalents.

