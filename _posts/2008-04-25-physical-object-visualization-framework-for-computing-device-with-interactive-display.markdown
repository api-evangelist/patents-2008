---

title: Physical object visualization framework for computing device with interactive display
abstract: Devices and methods for displaying a visualization graphic on an interactive display are provided. One disclosed device may include an interactive display configured to detect a tag positioned proximate a display surface of the interactive display. The device may further include a processor configured to execute an application program and an application programming interface (API) configured to receive a tag monitoring request from the application program. The tag monitoring request may include application-specific tag visualization settings. The API may be configured to receive a tag tracking message from the interactive display, and in response, send a visualization command to the interactive display. The visualization command may be based upon the application-specific tag visualization settings and may be configured to cause the interactive display to display a visualization graphic proximate the tag.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08621491&OS=08621491&RS=08621491
owner: Microsoft Corporation
number: 08621491
owner_city: Redmond
owner_country: US
publication_date: 20080425
---
Computing devices with interactive displays are capable of identifying objects that are placed on the display and performing certain associated actions. For example a phone may be placed on the display and marketing information about the phone may be shown on the display. In another example an MP3 player on the display is recognized and a user is permitted to drag songs shown on the display to and from the MP3 player. In yet another example a camera in the vicinity of the display is identified and the display downloads photos from the camera onto the display. Performing the desired associated actions first involves recognizing the object monitoring its whereabouts and movement and generating and displaying a visualization representing the recognized object on the display. These are complicated functions that may be time and labor intensive to program which may drive up the costs to develop software.

Devices and methods for displaying a visualization graphic on an interactive display are provided. One disclosed device may include an interactive display configured to detect a tag positioned proximate a display surface of the interactive display. The device may further include a processor configured to execute an application program and an application programming interface API configured to receive a tag monitoring request from the application program. The tag monitoring request may include application specific tag visualization settings. The API may be configured to receive a tag tracking message from the interactive display and in response send a visualization command to the interactive display. The visualization command may be based upon the application specific tag visualization settings and may be configured to cause the interactive display to display a visualization graphic proximate the tag.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

According to one or more embodiments a physical object visualization framework is provided in an application programming interface API to allow application programs to specify physical object visualization behavior. As shown in a schematic diagram illustrates an interactive computing device for displaying visualization graphic associated with a physical object positioned proximate an interactive display . In one embodiment a user may place the physical object marked with a tag proximate a display surface of the interactive display . The interactive computing device may include an API configured to receive a tag monitoring request including application specific tag visualization settings from an application program . The API may be further configured to receive a tag tracking message from the interactive display and in response send a visualization command to the interactive display . The visualization command may be configured to cause the interactive display to display a visualization graphic proximate the tag .

It will be appreciated that the physical object may include virtually any item that the user chooses to place proximate to the display surface of the interactive display e.g. mobile phone card camera car key chain . To be recognized by the interactive display the physical object may include a tag which may be any recognizable way of identifying a physical object for the interactive display. Tags may include optical tags radio frequency identification RFID tags a pattern of dots or other indicia that may be recognized by the interactive display. For example a tag may be a metallic sticker adhering to the back of a cellular phone. In another example a unique raised pattern of dots on the back of a personal digital assistant PDA may be sufficiently recognizable by the interactive display to be a tag.

The interactive computing device may further include a processor configured to execute the application program and the API from memory via a bus . The API may include a tag visualization module configured to receive tag tracking messages from the interactive display receive tag monitoring requests from the application program send visualization commands to the interactive display and send feedback messages to the application program . The API may be further configured with other modules that work with the tag visualization module . For example the API may include a module that tracks all of the tags.

The application program may be configured to accept user input which may be entered via any suitable user input mechanism e.g. keyboard mouse interactive display surface . For example user input may include selection of a visualization graphic that may be associated with a particular tag. In an alternate embodiment the application program may communicate with the interactive display as well.

The application program may be configured to receive a feedback message from API . The feedback message may include status information on the monitored tags recognized by the interactive display such as the number identity position orientation and user selection of these monitored tags. This information may be received and processed by the application program in a programmatic manner to facilitate user interaction with the application program via the visualization graphics .

The interactive display may be configured to detect a tag positioned proximate a display surface of the interactive display . Depending on the type of tag the tag may need to be within an effective distance from the display surface in order for the tag to be recognized. For example an optical tag which may need direct light transmission to the display surface may not be recognized two inches away while an RFID tag may be recognized.

The interactive display may be formed integrally in a housing of the interactive computing device . Alternatively the interactive display may be a formed in a separate housing and configured to communicate over a wired or wireless connection with the interactive computing device .

The interactive display may send tag tracking messages to communicate a detected position of a tag to the API . Tag tracking messages may include contact messages movement messages removal messages and other tag tracking messages that the interactive display may need to relay to the API . A tag tracking message to indicate tag contact may be sent to the API to indicate that a tag has been detected proximate the display surface of the interactive display . A tag tracking message to indicate tag movement may also be sent to the API to indicate that a tag has moved to a different location on the interactive display . A tag tracking message to indicate tag removal may further be sent to the API to indicate that a tag has been removed from the interactive display . In an alternate embodiment only tag tracking messages are sent to the API to indicate instances of tag detection by the interactive display and the API is configured to determine whether a tag is newly detected whether the tag has moved or whether the tag has been removed.

In one embodiment the interactive display may be configured to detect multiple tags concurrently. The multiple tags may be identical tags which represent the same physical objects or different tags which represent different physical objects. It will be appreciated that multiple tags may also be used to represent one physical object. The API may also be configured to receive tag tracking messages and send visualization commands concurrently. The visualization graphic corresponding to the most recently added tag is displayed on top of the other visualization graphics.

The API may be configured to receive a tag monitoring request from the application program . The tag monitoring request may include a request to monitor one or more tags which may be identified for example by tag data such as a tag identifier . The tag monitoring request may further include application specific tag visualization settings which inform the API how to display the visualization graphic on the interactive display for one or more tags that the application program has requested the API to monitor.

Application specific tag visualization settings may include visualization graphic data as well as a rotation setting position offset setting orientation offset setting and removal behavior setting . Additional tag visualization settings may be sent from the application program for customization of the display of a visualization graphic. For example a software developer may want to specify by a tag visualization setting a period of time for displaying a visualization graphic etc.

Visualization graphic data may be used by the API to generate a visualization graphic to display on the interactive display . A visualization graphic includes any suitable graphical representation of a tag that may be displayed on the interactive display . The visualization graphic enables the user to recognize that the object with the tag is detected by the interactive display and may provide a visual cue to the user during interaction between the application program and the object. As one example if a user places a car key chain on the interactive display the interactive display may display a car shaped graphic as the visualization graphic. It will be appreciated that in some embodiments a plurality of visualization graphics may be included in visualization graphic data and the interactive display may be configured to present a graphical user interface configured to receive a user selection of a desired visualization graphic for display with a tag. Thus a user may be given the option of a car shaped graphic as discussed above or a key shaped graphic for example to be displayed as the visualization graphic proximate the tag. Other example visualization graphics are depicted in described below.

Rotation setting may indicate whether the visualization graphic will rotate with a detected rotation of the tag on the interactive display . For example a watch with a tag may be placed and rotated on the display surface and a virtual clock may be displayed as a visualization graphic . In this instance the rotation setting may convey to the API that the visualization graphic i.e. the time should not be rotated so that irrespective of the orientation of the watch the virtual clock will be displayed in a fixed orientation that is readable by a user.

Position offset setting may be used to specify the relationship between where the tag is positioned with respect to the visualization graphic . Orientation offset setting may be used to specify the relationship between how the tag is oriented with respect to the visualization graphic . In one embodiment the position offset setting and orientation offset setting may be entered into a module in the API to automatically keep a visualization graphic positioned correctly in relation to the tag no matter where the tag is placed or how it is rotated.

The removal behavior setting controls how the visualization graphic behaves when the tag is removed. Removal behavior setting may include disappear fade wait and persist settings. When the removal behavior setting is set to disappear upon detection of removal of the tag the visualization graphic may be removed from the interactive display . In some embodiments disappear may be set as a default removal behavior setting.

Removal behavior setting may include a wait setting which allows the visualization graphic to remain in place until the tag returns. When the tag returns whether at the same position or at a different position visualization graphic may jump to be under the tag . If multiple tags representing the same physical object are placed down and removed and then one is placed back down the visualization graphic associated with the removed tag that is closest to the most recently placed tag may be used. The wait setting may be used for example in embodiments in which the visualization graphic is removed programmatically by the application program during the wait cycle. For example the application program may remove all visualization graphics in a wait state for a predetermined of time such as one minute.

Removal behavior setting may include a fade setting according to which the visualization graphic may fade away i.e. lose opacity over a period of time e.g. 1 3 seconds and may be removed when the fade completes. If a tag associated with the visualization graphic is detected to return to the display before the fade completes the API may be configured to cause the visualization graphic to jump to be under the tag with full opacity. If multiple tags representing the same physical object are placed down and removed and then one is placed back down the API may be configured to cause the visualization graphic closest to and associated with the most recently placed tag to be used not counting visualization graphics that have completely faded away and been removed.

Removal behavior setting may include a persist setting according to which the visualization graphic remains in place for an unlimited time e.g. a stamp . This may be useful for example to enable the application program to programmatically request that visualization graphics that are in a persist state may be removed under certain predetermined conditions such as when a user exits the application program. While example removal behaviors are described herein it will be appreciated that other specific removal behaviors may be customized and entered by a software developer.

The API may be further configured to receive a tag tracking message from the interactive display indicating that contact of the tag has been detected by the interactive display. In response the API may be configured to send a visualization command to the interactive display . The visualization command may be based upon the application specific tag visualization settings received from the application program . The visualization command may also include additional non application specific instructions to the interactive display on how to display the visualization graphic . By sending this visualization command the API is configured to cause the interactive display to display a visualization graphic proximate the tag .

The API may be further configured to receive a tag tracking message in the case of tag movement indicating that the interactive display has detected an updated position of the tag . The API is configured to send a movement visualization command based upon the application specific tag visualization settings to instruct the interactive display to display the visualization graphic proximate the updated detected position. It will be appreciated that the API may be configured to make a determination about whether a tag is lost or whether a tag is treated as movement due to a detection process for the tag timing out.

Tag timing out can be employed to compensate when performance abilities of hardware and software of the interactive display for tag detection are exceeded. For example the interactive display may have difficulty tracking tag motion if the tag is moving too fast or is positioned too far from the surface of the interactive display resulting in tag detection being lost. When this happens for example if a user moves the tagged object very quickly or picks up the tagged object and then sets it down elsewhere the interactive display s input system may register this as a tag removed event when it loses the tag followed by a tag added event later when it regains the tag . The tag visualization module can be configured with a predetermined timeout period. If the visualization module receives a first tag tracking message indicating that a tag is lost followed by a second tag tracking message indicating that a new tag contact is detected within the predetermined period of time the tag visualization module may be configured to treat the combination of first and second tag tracking messages as a tag tracking message indicating that a tag has moved to an updated position instead of a new tag being added.

The API may be further configured to receive a tag tracking message indicating that the tag has been removed. As a response the API may be further configured to send a removal visualization command to the interactive display instructing the interactive display to treat the visualization graphic according to the removal behavior setting as described above.

In a first example of movement on the interactive display the pen is depicted moving along a path across the display surface . Pen may include a tag and corresponding visualization graphic . Application program has provided application specific tag visualization settings to API to generate the visualization graphic . In this example the visualization graphic is a simple text box PEN . Rotation setting has been set such that no rotation of the visualization graphic relative to the tag occurs. This enables a user to easily read the text in the visualization graphic. A position offset setting and an orientation offset setting have been set such that the visualization graphic is located at a distance away from the tag .

In a second example of movement on the interactive display the phone is depicted moving along a path across the display surface . Phone may include a tag and corresponding visualization graphic . Application program has provided application specific tag visualization settings to API to generate the visualization graphic . In this example the visualization graphic is in a shape of a phone sized slightly larger than the phone . Rotation setting has been set such that rotation of the visualization graphic occurs with rotation of the tag . Position offset setting and orientation offset setting have been set such that the visualization graphic is positioned and centered with the tag and the physical object .

In a third example of movement on the interactive display the coffee cup is depicted moving along a path . Coffee cup may include a tag and a corresponding visualization graphic . Application program has provided application specific tag visualization settings to API to generate the visualization graphic . In this example the visualization graphic is in a shape of the coffee cup and sized slightly larger. Rotation setting is set such that rotation of the visualization graphic does not occur with rotation of the tag . However in this example the appearance of the visualization graphic is not affected because the coffee cup is circular and the tag is centered. A position offset setting and an orientation offset setting have been selected such that the visualization graphic is positioned and centered with the tag and the physical object .

Although is depicted in two dimensions it will be appreciated that in some embodiments the interactive display may recognize tags that are a certain distance from the display surface such as when RFID tags are utilized. For example a user may place the pen on top of the phone . Since the pen has a tag within a detectable distance from the display surface the tag may be recognized by the interactive display and in response a visualization graphic associated with the pen is displayed as shown. It will also be appreciated that tags specified by an application program via the tag monitoring request can be detected even if physically placed on top of a visualization graphic.

Referring to a flowchart of an embodiment of a method for displaying a visualization graphic on an interactive display is shown at . At method may include at an application programming interface receiving a tag monitoring request from an application program the tag monitoring request including application specific tag visualization settings. As discussed above examples of application specific tag visualization settings may include visualization graphic data as well as a rotation setting position offset setting orientation offset setting and removal behavior setting. At method may include receiving a tag tracking message from the interactive display indicating that a tag has been detected by the interactive display.

At method may include sending a visualization command to the interactive display the visualization command being based upon the application specific tag visualization settings received from the application program and configured to cause the interactive display to display a visualization graphic proximate the tag.

At method may include receiving a tag tracking message from the interactive display indicating that the tag has been rotated and sending a visualization command to rotate the visualization graphic based on a rotation setting. As discussed above the rotation setting may indicate whether the tag visualization will rotate with a detected rotation of the tag on the interactive display.

Method may include at receiving a tag tracking message indicating an updated detected position of the tag and sending a movement visualization command based upon the application specific tag visualization settings to instruct the interactive display to display the visualization graphic proximate the updated detected position. In some embodiments the method may further include receiving a first tag tracking message indicating that a tag is lost followed by a second tag tracking message indicating that a new tag contact is detected within a predetermined period of time and in response treating the first and second tag tracking messages as a tag tracking message indicating that a tag has moved to an updated position.

At method may include receiving a tag tracking message indicating that the tag has been removed and sending a visualization command to the interactive display instructing the display to treat the visualization graphic according to a removal behavior setting which as discussed above may include disappear fade wait and persist settings.

The above described devices and methods may be utilized to efficiently display visualization graphics as specified by an application program onto an interactive display via an application programming interface. This may enable routines controlling the detection of contact movement and removal of a tag and the corresponding commands for display movement and removal of visualization graphics to reside in the application programming interface while still operating according to application specific settings received from an application program thereby saving development costs while providing implementation flexibility.

It will be appreciated that the computing devices described herein may include a processor and associated volatile and non volatile memory and may be configured to execute programs stored in non volatile memory using portions of volatile memory and the processor. As used herein the term program refers to software or firmware components that may be executed by or utilized by one or more computing devices described herein and is meant to encompass individual or groups of executable files data files libraries drivers scripts database records etc. It will be appreciated that computer readable media may be provided having program instructions stored thereon which upon execution by a computing device cause the computing device to execute the methods described above and cause operation of the systems described above.

It should be understood that the embodiments herein are illustrative and not restrictive since the scope of the invention is defined by the appended claims rather than by the description preceding them and all changes that fall within metes and bounds of the claims or equivalence of such metes and bounds thereof are therefore intended to be embraced by the claims.

