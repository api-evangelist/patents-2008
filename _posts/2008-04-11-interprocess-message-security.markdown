---

title: Inter-process message security
abstract: An inter-process messaging security management may be provided. A message comprising an operation to be performed may be sent from a process operating in a process chamber to a second process operating in another chamber. Before the message is allowed to be delivered, the validity of the operation contained in the message may be verified and a security policy may be examined to determine whether the message is permitted to be sent from the first process to the second process. If the security policy permits the second process to execute the operation requested by the first process, the message may be delivered to the second process. If the operation is not permitted, the message may not be delivered and an error message may be returned to the first process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09418219&OS=09418219&RS=09418219
owner: Microsoft Technology Licensing, LLC
number: 09418219
owner_city: Redmond
owner_country: US
publication_date: 20080411
---
Software applications can be subject to computer security breaches using improper or unauthorized control messages from another application. For example shatter attacks occur when a lower privileged application sends a control message to a higher privileged application. The control message causes the higher privileged application to perform an unsafe task that the lower privileged application could not have performed on its own. Such unsafe tasks include hiding application interfaces enabling or disabling functionality within an application or accessing data corresponding to unrelated applications. This can be caused by the higher privileged application failing to perform sufficient validation on arguments passed in the control message.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter. Nor is this Summary intended to be used to limit the claimed subject matter s scope.

Inter process message security may be provided. A message may be received from a first process associated with a first process chamber. A destination process and associated second process chamber may be determined for the message. A security policy may then be determined to permit interaction between the first and second process chambers. In response to determining that a security policy may permit interaction between the first and second process chambers the message may be sent to the destination process.

Both the foregoing general description and the following detailed description provide examples and are explanatory only. Accordingly the foregoing general description and the following detailed description should not be considered to be restrictive. Further features or variations may be provided in addition to those set forth herein. For example embodiments may be directed to various feature combinations and sub combinations described in the detailed description.

The following detailed description refers to the accompanying drawings. Wherever possible the same reference numbers are used in the drawings and the following description to refer to the same or similar elements. While embodiments of the invention may be described modifications adaptations and other implementations are possible. For example substitutions additions or modifications may be made to the elements illustrated in the drawings and the methods described herein may be modified by substituting reordering or adding stages to the disclosed methods. Accordingly the following detailed description does not limit the invention. Instead the proper scope of the invention is defined by the appended claims.

Inter process message security may be provided. Consistent with embodiments of the present invention a first software application may send a message to a second software application. This message may for example comprise a request to perform an operation. For example the message may send information request data or provide instructions to perform a further operation. In order to ensure that the second software application is protected from being manipulated or accessed improperly a security policy may be consulted to determine if the first software application and the second software application are allowed to communicate such a message.

Method may begin at starting block and proceed to stage where computing device may receive a message from first process associated with first process chamber . For example first process may comprise a user process such as a software application that requests interaction with a second process via an API such as SendMessage API SetProp or keybd event . Interaction requests may be formatted as a message that may be passed to core message routing module by a call to one of the APIs e.g. SendMessage API SetProp or keybd event .

Consistent with embodiments of the invention first process may attempt to send a message to second process that may also operate in first process chamber . For example first process may comprise a banking software application that may be permitted to send a message to second process that may comprise a checking account history software application also operating in first process chamber in order to query an account balance.

First process in first process chamber may attempt to send a message to second process in second process chamber . Internal policy manager may route the message to global security policy manager to determine whether at least one security policy permits interaction between first process chamber and second process chamber . For example first process chamber and second process chamber may represent a logical division between first process and second process . The logical division between first process and second process may further represent a security boundary.

Core message routing module may route an API call to message subsystem . Message subsystem may include function servers for implementing the functionality provided by the APIs. For example SendMessage API may provide a software application with functionality to send a message to a second software application SetProp API may be provided to set a data value in the second software application and keybd event API may be provided to send a keystroke. Other APIs may be provided for example to send other user input information such as mouse movements or selections. Core message routing module may route calls to SendMessage API to message queue server . Calls to SetProp API may be routed to window manager server and calls to keybd event API may be routed to user input manager .

Each function server may communicate with each other function server in order to complete a requested interaction. For example a call to SendMessage API may be routed to message queue server that may in turn call user input management server to process input that may be associated with the original call to SendMessage API .

From stage method may advance to stage where computing device may determine if it is possible to deliver the message. For example second process may not be a valid window as determined by a call to window manager of messaging subsystem . State . Consistent with embodiments of the invention windows may be UI resources belonging to processes to whom messages can be sent. Every window may be associated with a unique window handle. For example process of process chamber may try and send a window message to a window handle associated with a window belonging to process of process chamber . In stage method may check with window manager if the window handle provided is a valid one or not. A message may also be of a type that is not logically able to be delivered to second process such as a window creation request message or an initialize dialog box message. If the message is not able to be delivered method may advance to stage where computing device may discard the message. State . Consistent with embodiments of the invention method may then advance to stage where computing device may return an error to first process . State . Method may then end at stage .

If the message is determined to be of a type that can logically be performed method may advance from stage to subroutine where computing device may determine the number of process chambers associated with a message. Subroutine is discussed below in greater detail with respect to .

Method may then advance to stage where computing device may determine whether second process is associated with second process chamber . State . For example first process may be associated with first process chamber and second process may be associated with second process chamber . Consistent with embodiments of the invention processes may comprise at least one of a game application a financial application an electronic document processing application a productivity application an internet access application a personal information management application an interface management process a user management process a server process and an operating system process. The aforementioned are merely examples and other processes may be used.

If computing device determines that second process is associated with second process chamber method may advance to stage where computing device may determine whether any cross chamber security policies are violated by the interaction request. State . Internal policy manager may maintain a plurality of internal security policies with respect to process interaction permissions. For example internal policy manager may maintain an internal security policy permitting any message sent from first process to itself to bypass further security checks. Another internal security policy may for example permit certain functionality when the interaction request requires a message to be sent between first process and second process both operating within first process chamber . Yet another internal security policy may for example deny delivery of the message when the requested interaction is logically impossible or first process calling the API lacks privileges permitting the calling process to accomplish the requested functionality.

If no internal messaging policies are violated by the request computing device may query global security policy manager to determine whether at least one security policy is associated with interactions between first process chamber and second process chamber . State . For example global security policy manager may determine whether any security policy has been provided for sending a message of a particular type between first process chamber and second process chamber .

Security policies may be maintained by global security policy manager and may determine whether a security policy is provided for the given message based on data associated with the message. Global security policy manager may maintain a plurality of security policies with respect to interactions between processes. For example a security policy may permit all interactions between first process chamber and second process chamber while another security policy may permit first process chamber limited or no interaction with third process chamber . For another example a security policy may permit first process chamber only to send data to second process chamber but not to request data from second process chamber . The policies maintained by global security policy manager may for example comprise policies established by operating system kernel configured by a system administrator and or configured by a user. Consistent with embodiments of the invention an administrator may also be a user. The administrator may have additional privileges to establish and or configure interactions than a user.

If computing device determines at least one security policy is associated with interactions between first process chamber and second process chamber method may advance to stage where computing device may determine whether the at least one security policy associated with interactions between first process chamber and second process chamber permits the message to be sent from first process chamber to second process chamber . State . The determination whether or not to allow the message to be delivered may then be returned to message subsystem for further processing. State . For example global security policy manager may determine that a valid policy exists to allow first process comprising a game application in first application chamber to request data from destination process comprising a banking application in second process chamber .

If computing device determines that the at least one security policy associated with the first and second process chambers permits the message to be sent from first process chamber to second process chamber method may advance to stage where computing device may deliver the message to second process . For example a data request from first process comprising a game application may be delivered to second process comprising a banking application.

Global security policy manager may inform internal policy manager or message subsystem whether or not the requested interaction is permitted. A function server such as message queue may then be informed whether or not to proceed with the requested interaction. If the interaction is permitted the function server may return a value to first process indicating success. If the interaction is not permitted the function server may return an error to first process .

At stage computing device may determine that first process is attempting to send a message to second process that may also operate in first process chamber . Method may then advance to stage where computing device may determine whether an intra chamber security policy is associated with intra chamber messages. For example first process may comprise a banking application that sends a data request to destination process comprising a related checking account history application. Because both applications may operate within the logical boundaries of first application chamber global security policy manager may not need to be called if internal policy manager already permits such intra chamber interactions. State . Consistent with embodiments of the invention internal policy manager may determine if an intra process message is allowed under an internal policy list. For example internal policy manager may not permit first process to send messages requesting a particular operation to any other process regardless of the process chamber associated with the destination process. These message types may include for example messages that are logically impossible to be performed by another process.

If at stage computing device determines that a policy exists with respect to the intra chamber message computing device may determine whether the policy allows the intra chamber message to be delivered. State . If the message is permitted method may advance to stage where computing device may send the message to second process . State State and State . Consistent with embodiments of the invention computing device may return a value indicating successful delivery to first process . State . 

If at stage computing device determines that no policy exists or no policy permits the message to be delivered method may advance to stage where computing device may discard the message. Method may then advance from stage to stage where computing device may return an error to first process . State . 

After the message is either delivered at stage or discarded at stage and whether or not a return value or error is returned to the first process method may then end at stage . For example first process in first process chamber may comprise a game application and second process in second process chamber may comprise a banking application. Game application may attempt to send a message requesting data from banking application . The message may be routed to internal policy manager that may not maintain a policy with respect to interactions between first process chamber containing game application and second process chamber containing banking application . Global security policy manager may then determine if a policy is in place to control data requests between first process chamber and second process chamber . If a policy is in place that permits the interaction global security policy manager may allow the data request to be delivered to second process chamber and routed to banking application . A value may be returned to game application . The value returned to game application may comprise a value indicating that the message was successfully delivered.

Consistent with embodiments of the invention maintaining the policies used by the internal policy manager and the global security policy manager may comprise creation updating modification enabling disabling and removal. Maintaining the policies may be performed by at least one of a user an administrator a software application or process and an operating system.

From stage subroutine may advance to stage where computing device may route the message to message subsystem . From stage method may advance to stage where computing device may cause message subsystem to count the number of identity tokens associated with the call stack. For example a message may have been sent from first process in first process chamber to second process in second process chamber . To complete the interaction requested by first process second process may send a message to third process in third process chamber . When second process sends the message to third process identity tokens associated with both first process chamber and second process chamber may be associated with the call stack.

From stage subroutine may advance to stage where computing device may determine that each chamber or process identified by the identity tokens associated with the call stack are permitted to send the message to the destination process. For example computing device may determine whether both first process chamber and second process chamber are permitted to send a message to third process chamber prior to permitting the message to be delivered to third process . This determination may be made according to the stages described above with respect to .

From stage subroutine may advance to stage where computing device may deliver the message if each process or chamber identified by the identity tokens associated with the message is permitted to send the message to the destination process. Method may then end at stage .

For example first process may call process associated with process chamber to request an operation. In order to accomplish the requested operation process may send a message to a window belonging to process associated with process chamber . Identity tokens associated with process chamber and process chamber may both be associated with the call stack prior to sending the message to the window belonging to process . The message may be delivered if process chamber and process chamber are both permitted to interact with process chamber .

Embodiments consistent with the invention may comprise a system for providing inter process message security. The system may comprise a memory storage and a processing unit coupled to the memory storage. The processing unit may be operative to receive a message from a process operating on the system determine the logical chambers for the sending and destination process and determine whether a security policy permits the sending of the message. The system may be further operative to deliver or discard the message in accordance with the security policy.

In embodiments consistent with the invention components and functionality of system may be provided by dynamically linked libraries DLLs . For example a core message routing module a message subsystem an internal policy manager and a global security policy manager may be provided by at least one DLL.

With reference to a system consistent with embodiments of the invention may include a computing device such as computing device . In a basic configuration computing device may include at least one processing unit and a system memory . Depending on the configuration and type of computing device system memory may comprise but is not limited to volatile e.g. random access memory RAM non volatile e.g. read only memory ROM flash memory or any combination. System memory may include operating system one or more programming modules and may include a program data . Operating system for example may be suitable for controlling computing device s operation. In one embodiment programming modules may include libraries comprising data for providing a global security policy manager . Consistent with embodiments of the invention an operating system may include an internal policy manager and a global security policy manager . Furthermore embodiments of the invention may be practiced in conjunction with a graphics library other operating systems or any other application program and is not limited to any particular application or system. This basic configuration is illustrated in by those components within a dashed line .

Computing device may have additional features or functionality. For example computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by a removable storage and a non removable storage . Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all computer storage media examples i.e. memory storage. Computer storage media may include but is not limited to RAM ROM electrically erasable read only memory EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store information and which can be accessed by computing device . Any such computer storage media may be part of device . Computing device may also have input device s such as a keyboard a mouse a pen a sound input device a touch input device etc. Output device s such as a display speakers a printer etc. may also be included. The aforementioned devices are examples and others may be used.

Computing device may also contain a communication connection that may allow device to communicate with other computing devices such as over a network in a distributed computing environment for example an intranet or the Internet. Communication connection is one example of communication media. Communication media may typically be embodied by computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may describe a signal that has one or more characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media may include wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency RF infrared and other wireless media. The term computer readable media as used herein may include both storage media and communication media.

As stated above a number of program modules and data files may be stored in system memory including operating system . While executing on processing unit programming modules e.g. global security policy manager may perform processes including for example one or more of method s stages. The aforementioned process is an example and processing unit may perform other processes. Other programming modules that may be used in accordance with embodiments of the present invention may include electronic mail and contacts applications word processing applications spreadsheet applications database applications slide presentation applications drawing or computer aided application programs etc.

Generally consistent with embodiments of the invention program modules may include routines programs components data structures and other types of structures that may perform particular tasks or that may implement particular abstract data types. Moreover embodiments of the invention may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. Embodiments of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Furthermore embodiments of the invention may be practiced in an electrical circuit comprising discrete electronic elements packaged or integrated electronic chips containing logic gates a circuit utilizing a microprocessor or on a single chip containing electronic elements or microprocessors. Embodiments of the invention may also be practiced using other technologies capable of performing logical operations such as for example AND OR and NOT including but not limited to mechanical optical fluidic and quantum technologies. In addition embodiments of the invention may be practiced within a general purpose computer or in any other circuits or systems.

Embodiments of the invention for example may be implemented as a computer process method a computing system or as an article of manufacture such as a computer program product or computer readable media. The computer program product may be a computer storage media readable by a computer system and encoding a computer program of instructions for executing a computer process. The computer program product may also be a propagated signal on a carrier readable by a computing system and encoding a computer program of instructions for executing a computer process. Accordingly the present invention may be embodied in hardware and or in software including firmware resident software micro code etc. . In other words embodiments of the present invention may take the form of a computer program product on a computer usable or computer readable storage medium having computer usable or computer readable program code embodied in the medium for use by or in connection with an instruction execution system. A computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific computer readable medium examples a non exhaustive list the computer readable medium may include the following an electrical connection having one or more wires a portable computer diskette a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber and a portable compact disc read only memory CD ROM . Note that the computer usable or computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory.

Embodiments of the present invention for example are described above with reference to block diagrams and or operational illustrations of methods systems and computer program products according to embodiments of the invention. The functions acts noted in the blocks may occur out of the order as shown in any flowchart. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality acts involved.

While certain embodiments of the invention have been described other embodiments may exist. Furthermore although embodiments of the present invention have been described as being associated with data stored in memory and other storage mediums data can also be stored on or read from other types of computer readable media such as secondary storage devices like hard disks floppy disks or a CD ROM a carrier wave from the Internet or other forms of RAM or ROM. Further the disclosed methods stages may be modified in any manner including by reordering stages and or inserting or deleting stages without departing from the invention.

All rights including copyrights in the code included herein are vested in and the property of the Applicant. The Applicant retains and reserves all rights in the code included herein and grants permission to reproduce the material only in connection with reproduction of the granted patent and for no other purpose.

While the specification includes examples the invention s scope is indicated by the following claims. Furthermore while the specification has been described in language specific to structural features and or methodological acts the claims are not limited to the features or acts described above. Rather the specific features and acts described above are disclosed as example for embodiments of the invention.

