---

title: Testing a grammar used in speech recognition for reliability in a plurality of operating environments having different background noise
abstract: Methods, systems, and products for testing a grammar used in speech recognition for reliability in a plurality of operating environments having different background noise that include: receiving recorded background noise for each of the plurality of operating environments; generating a test speech utterance for recognition by a speech recognition engine using a grammar; mixing the test speech utterance with each recorded background noise, resulting in a plurality of mixed test speech utterances, each mixed test speech utterance having different background noise; performing, for each of the mixed test speech utterances, speech recognition using the grammar and the mixed test speech utterance, resulting in speech recognition results for each of the mixed test speech utterances; and evaluating, for each recorded background noise, speech recognition reliability of the grammar in dependence upon the speech recognition results for the mixed test speech utterance having that recorded background noise.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08082148&OS=08082148&RS=08082148
owner: Nuance Communications, Inc.
number: 08082148
owner_city: Burlington
owner_country: US
publication_date: 20080424
---
The field of the invention is data processing or more specifically methods apparatus and products for testing a grammar used in speech recognition for reliability in a plurality of operating environments having different background noise.

User interaction with applications running on small devices through a keyboard or stylus has become increasingly limited and cumbersome as those devices have become increasingly smaller. In particular small handheld devices like mobile phones and PDAs serve many functions and contain sufficient processing power to support user interaction through multimodal access that is by interaction in non voice modes as well as voice mode. Devices which support multimodal access combine multiple user input modes or channels in the same interaction allowing a user to interact with the applications on the device simultaneously through multiple input modes or channels. The methods of input include speech recognition keyboard touch screen stylus mouse handwriting and others. Multimodal input often makes using a small device easier.

Multimodal applications are often formed by sets of markup documents served up by web servers for display on multimodal browsers. A multimodal browser as the term is used in this specification generally means a web browser capable of receiving multimodal input and interacting with users with multimodal output where modes of the multimodal input and output include at least a speech mode. Multimodal browsers typically render web pages written in XHTML Voice X V . X V provides a markup language that enables users to interact with an multimodal application often running on a server through spoken dialog in addition to traditional means of input such as keyboard strokes and mouse pointer action. Visual markup tells a multimodal browser what the user interface is look like and how it is to behave when the user types points or clicks. Similarly voice markup tells a multimodal browser what to do when the user speaks to it. For visual markup the multimodal browser uses a graphics engine for voice markup the multimodal browser uses a speech engine. X V adds spoken interaction to standard web content by integrating XHTML eXtensible Hypertext Markup Language and speech recognition vocabularies supported by VoiceXML. For visual markup X V includes the XHTML standard. For voice markup X V includes a subset of VoiceXML. For synchronizing the VoiceXML elements with corresponding visual interface elements X V uses events. XHTML includes voice modules that support speech synthesis speech dialogs command and control and speech grammars. Voice handlers can be attached to XHTML elements and respond to specific events. Voice interaction features are integrated with XHTML and can consequently be used directly within XHTML content.

In addition to X V multimodal applications also may be implemented with Speech Application Tags SALT . SALT is a markup language developed by the Salt Forum. Both X V and SALT are markup languages for creating applications that use voice input speech recognition and voice output speech synthesis. Both SALT applications and X V applications use underlying speech recognition and synthesis technologies or speech engines to do the work of recognizing and generating human speech. As markup languages both X V and SALT provide markup based programming environments for using speech engines in an application s user interface. Both languages have language elements markup tags that specify what the speech recognition engine should listen for and what the synthesis engine should say. Whereas X V combines XHTML VoiceXML and the XML Events standard to create multimodal applications SALT does not provide a standard visual markup language or eventing model. Rather it is a low level set of tags for specifying voice interaction that can be embedded into other environments. In addition to X V and SALT multimodal applications may be implemented in Java with a Java speech framework in C for example and with other technologies and in other environments as well.

Current multimodal applications support a voice mode of user interaction using a speech engine. A speech engine provides speech recognition though use of a grammar. A grammar communicates to the speech engine the potential words or sequences of words that the speech engine may recognized when processing a user s speech. That is the grammar narrows the set of potential results returned by the speech engine when performing speech recognition to reduce the amount of processing performed by the speech engine. Rather than having to determine which of all possible words in a language matches the user s speech the speech engine may utilize a grammar to reduce the determination to which of a subset of those words in a language matches the user s speech.

Deployment of such multimodal applications onto multimodal devices generally includes extensive testing and tuning of the speech recognition grammars in the ambient noise environment where the application will be used. Because multimodal devices generally operate in a variety of different environments each grammar must be tested and tuned for each operating environment in which the grammar may be utilized. For example if there are m number of grammars that need to be tested in n number of operating environments completely testing the grammars in all of the operating environments requires m n recordings of the user s response to application prompts using the grammars for recognition in the different operating environments. The drawback to current methods of testing a grammar is that performing m number of tests in n operating environments is often prohibitively expensive.

Methods systems and products for testing a grammar used in speech recognition for reliability in a plurality of operating environments having different background noise that include receiving recorded background noise for each of the plurality of operating environments generating a test speech utterance for recognition by a speech recognition engine using a grammar mixing the test speech utterance with each recorded background noise resulting in a plurality of mixed test speech utterances each mixed test speech utterance having different background noise performing for each of the mixed test speech utterances speech recognition using the grammar and the mixed test speech utterance resulting in speech recognition results for each of the mixed test speech utterances and evaluating for each recorded background noise speech recognition reliability of the grammar in dependence upon the speech recognition results for the mixed test speech utterance having that recorded background noise.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods apparatus and products for testing a grammar used in speech recognition for reliability in a plurality of operating environments having different background noise according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . sets forth a network diagram illustrating an exemplary system for testing a grammar used in speech recognition for reliability in a plurality of operating environments having different background noise according to embodiments of the present invention. Each operating environment is an environment in which multimodal devices operate and interact with a user through a voice mode of user interaction. Each operating environment may be implemented as a house work a car a street and so on. Each operating environment however typically encompasses more than just a mere location at which the multimodal device operates. The operating environment may also be characterized by other factors that influence the environment surrounding the device at a particular location. For example an operating environment may be implemented as the inside of a car traveling at thirty miles per hour while another operating environment may be implemented as the inside of the same car traveling at ninety miles per hour.

Each operating environment of has a background noise . Specifically the operating environment has a background noise . The operating environment has a background noise . The operating environment has a background noise . Each background noise of represents the waveform of the background sounds for a different operating environment . The background sounds for each operating environment may include any sounds that occur in that operating environment excluding the user s speech while interacting with a multimodal device. The background noise may be implemented as a frequency domain representation of the background sounds. For example each background noise may be characterized as the first twelve or thirteen Fourier or frequency domain components of a sample of the background sound waveform for a particular operating environment .

In the example of the grammar is tested in a laboratory environment . The laboratory environment is an environment utilized to test a grammar used in speech recognition for reliability in a plurality of operating environments having different background noise according to embodiments of the present invention. The laboratory environment includes a laboratory server connected to a network through wireline connection .

The laboratory server of has installed upon it a speech engine performs speech recognition using the grammar . The grammar communicates to the speech engine the words and sequences of words eligible for speech recognition. Grammars tested for reliability in a plurality of operating environments having different background noise according to embodiments of the present invention may be expressed in any format supported by any speech engine including for example the Java Speech Grammar Format JSGF the format of the W3C Speech Recognition Grammar Specification SRGS the Augmented Backus Naur Format ABNF from the IETF s RFC2234 in the form of a stochastic grammar as described in the W3C s Stochastic Language Models N Gram Specification and in other grammar formats as may occur to those of skill in the art. Grammars typically operate as elements of dialogs such as for example a VoiceXML or an X V. A grammar s definition may be expressed in line in a dialog. Or the grammar may be implemented externally in a separate grammar document and referenced from with a dialog with a URI. Here is an example of a grammar expressed in JSFG 

In this example the elements named and are rules of the grammar. Rules are a combination of a rule name and an expansion of a rule that advises a speech engine or a voice interpreter which words presently can be recognized. In this example expansion includes conjunction and disjunction and the vertical bars mean or. A speech engine or a voice interpreter processes the rules in sequence first then then . The rule accepts for recognition call or phone or telephone plus that is in conjunction with whatever is returned from the rule and the rule. The rule accepts bob or martha or joe or pete or chris or john or artoush or tom and the rule accepts today or this afternoon or tomorrow or next week. The command grammar as a whole matches utterances like these for example 

In the example of the laboratory server has installed upon it a grammar analysis module . The grammar analysis module of includes a set of computer program instructions capable of testing a grammar used in speech recognition for reliability in a plurality of operating environments having different background noise according to embodiments of the present invention. The grammar analysis module of operates generally for testing a grammar used in speech recognition for reliability in a plurality of operating environments having different background noise according to embodiments of the present invention by receiving recorded background noise for each of the plurality of operating environments generating a test speech utterance for recognition by the speech recognition engine using the grammar mixing the test speech utterance with each recorded background noise resulting in a plurality of mixed test speech utterances each mixed test speech utterance having different background noise performing for each of the mixed test speech utterances speech recognition using the grammar and the mixed test speech utterance resulting in speech recognition results for each of the mixed test speech utterances and evaluating for each recorded background noise speech recognition reliability of the grammar in dependence upon the speech recognition results for the mixed test speech utterance having that recorded background noise . Testing a grammar according to embodiments of the present invention advantageously allows a multimodal application designer to obtain recorded background noise for a particular operating environment only once and use that same recorded background noise to test any number of grammars.

Speech recognition reliability represents a measure of a speech engine s ability to use a particular grammar in accurately recognizing a speech utterance with the presence of a particular operating environment s background noise. A grammar may be adequate for use in some operating environments while being inadequate for other operating environments. For example consider a multimodal application operating in a vehicle that provides directions to a particular city from the vehicle s current location. When the operating environment is the inside of the vehicle traveling at thirty miles per hour the background noise may be so negligible that a speech engine can obtain accurate recognition results with a grammar that specifies all of the cities in a particular state regardless that many cities have names that a similarly pronounced. When the operating environment changes as the vehicle speeds up to ninety miles per hour the background noise may also have increased to the point that the speech engine cannot distinguish between the cities having similarly pronounced names. Rather a grammar that only includes the cities in a particular county may be better suited for speech recognition when the vehicle is operating at ninety miles per hour.

In the example of the speech recognition reliability for various combinations of grammars and background noise is specified in a grammar reliability table . The multimodal devices of may in turn utilize the grammar reliability table to enhance speech recognition performance when operating in the different environments . Utilizing the grammar reliability table advantageously allows the multimodal applications operating on the multimodal devices to benefit from the grammar testing provided by the grammar analysis module according to embodiments of the present invention.

The multimodal device of has installed upon it a multimodal application . The multimodal application is a software component that supports user interaction in both a voice mode and visual mode and optionally various other modes such as for example tactile modes. The multimodal application may include computer program instructions implemented in machine code that may be scheduled for execution directly by an operating system on a processor of the multimodal device . For example the multimodal application may be implemented as a compiled version of program written in C .

In other embodiments the multimodal application may include computer program instructions implemented in a higher level non machine language that requires runtime translation into machine code. In such embodiments the multimodal application is supported as by a multimodal execution environment . The multimodal execution environment may support execution of the multimodal application by processing the multimodal application itself or coordinating with other local or remote components such as for example a voice interpreter to process portions of the multimodal application . The multimodal execution environment may translate the multimodal application into platform specific machine code directly executable on the processors of the multimodal device perform memory management for the multimodal application during execution control access to platform hardware and so on. The implementation of the multimodal execution environment typically depends on the implementation of the multimodal application . When the multimodal application is implemented using X V or SALT tags then the multimodal execution environment may be implemented as a multimodal browser. When the multimodal application is implemented using Java then the multimodal execution environment may be implemented as a Java Virtual Machine. Readers will note that the implementations described above are for explanation only and not for limitation.

The multimodal device of supports multiple modes of user interaction with the multimodal application including a voice mode and a visual mode and optionally one or more other modes of user interaction with the multimodal application . The voice mode is represented here with audio output of voice prompts and responses from the multimodal devices and audio input of speech for recognition from a user . Non voice modes are represented by input output devices such as keyboards and display screens on the multimodal devices . The voice mode of user interaction with the multimodal application is supported by a voice interpreter through which the multimodal application is operatively coupled to a speech engine . The operative coupling may be implemented with an application programming interface API a voice service module or a VoIP connection as explained in more detail below.

In the exemplary system of the voice interpreter supports the voice mode of user interaction with the multimodal application by providing grammars speech for recognition and text prompts for speech synthesis to the speech engine and by returning to the multimodal application speech engine output in the form of recognized speech semantic interpretation results and digitized speech for voice prompts. The implementation of the voice interpreter typically depends on the technology implementing the multimodal application . The voice interpreter of may be implemented as a VoiceXML interpreter when the multimodal application implements X V. A VoiceXML interpreter is a software module of computer program instructions that accepts voice dialog instructions from a multimodal application typically in the form of a VoiceXML element. The voice dialog instructions include one or more grammars data input elements event handlers and so on that advise the VoiceXML interpreter how to administer voice input from a user and voice prompts and responses to be presented to a user. The VoiceXML interpreter administers such dialogs by processing the dialog instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm FIA . When the multimodal application is implemented according to SALT the voice interpreter may be implemented as a SALT interpreter. When the multimodal application is implemented using Java the voice interpreter may be implemented using a VoiceXML interpreter that exposes a Java interface.

Each multimodal device of is an automated device that is automated computing machinery or a computer program running on an automated device that is capable of accepting from users more than one mode of input keyboard mouse stylus and so on including speech input and also rendering more than one mode of output graphic speech and so on. A multimodal device is generally capable of accepting speech input from a user digitizing the speech and providing digitized speech to a speech engine for recognition. A multimodal device may be implemented for example as a voice enabled browser on a laptop a voice enabled browser on a smart phone handset an online game implemented with Java on a personal computer and with other combinations of hardware and software as may occur to those of skill in the art. Because multimodal applications may be implemented in markup languages X V SALT object oriented languages Java C procedural languages the C programming language and in other kinds of computer languages as may occur to those of skill in the art this specification uses the term multimodal application to refer to any software application server oriented or client oriented thin client or thick client that administers more than one mode of input and more than one mode of output typically including visual and speech modes.

Each of the example multimodal devices in the system of includes a microphone an audio amplifier a digital to analog converter and a multimodal application capable of accepting from a user speech for recognition digitizing the speech and providing the digitized speech to a speech engine for recognition. The speech may be digitized according to industry standard codecs including but not limited to those used for Distributed Speech Recognition as such. Methods for COding DECoding speech are referred to as codecs. The European Telecommunications Standards Institute ETSI provides several codecs for encoding speech for use in DSR including for example the ETSI ES 201 108 DSR Front end Codec the ETSI ES 202 050 Advanced DSR Front end Codec the ETSI ES 202 211 Extended DSR Front end Codec and the ETSI ES 202 212 Extended Advanced DSR Front end Codec. In standards such as RFC3557 entitled

As mentioned a multimodal device according to embodiments of the present invention is capable of providing speech for recognition to a speech engine . A speech engine is a functional module typically a software module although it may include specialized hardware also that does the work of recognizing and generating or synthesizing human speech. The speech engine implements speech recognition by use of a further module referred to in this specification as an automated speech recognition ASR engine and the speech engine carries out speech synthesis by use of a further module referred to in this specification as a text to speech TTS engine. As shown in a speech engine may be installed locally in the multimodal device itself or a speech engine may be installed remotely with respect to the multimodal device across a data communications network in a voice server . A multimodal device that itself contains its own speech engine is said to implement a thick client or thick client because the thick client itself contains all the functionality needed to carry out speech recognition and speech synthesis through API calls to speech recognition and speech synthesis modules in the multimodal device itself with no need to send requests for speech recognition across a network and no need to receive synthesized speech across a network from a remote voice server. A multimodal device that does not contain its own speech engine is said to implement a thin client because the thin client itself contains only a relatively thin layer of application software that obtains speech recognition and speech synthesis services from a voice server located remotely across a network from the thin client. For ease of explanation only one of the multimodal devices in the system of is shown with a speech engine but readers will recognize that any multimodal device may have a speech engine according to embodiments of the present invention.

As shown in a speech engine and a voice interpreter may be installed locally in the multimodal device itself or a speech engine and a voice interpreter may be installed remotely with respect to the multimodal device across a data communications network in a voice server . In a thick client architecture a multimodal device includes both its own speech engine and its own voice interpreter . The voice interpreter exposes an API to the multimodal application for use in providing speech recognition and speech synthesis for the multimodal application. The multimodal application provides for example dialog instructions VoiceXML elements grammars input elements event handlers and so on through the API to the voice interpreter and the voice interpreter administers the speech engine on behalf of the multimodal application. In the thick client architecture a multimodal application including for example VoiceXML dialogs is interpreted by a voice interpreter on the multimodal device. In the thin client architecture a multimodal application including for example VoiceXML dialogs is interpreted by a voice interpreter on a voice server located remotely across a data communications network from the multimodal device running the multimodal application .

In a thin client architecture the speech engine and the voice interpreter are located remotely from the multimodal client device in a voice server the API for the voice interpreter is still implemented in the multimodal device with the API modified to communicate voice dialog instructions speech for recognition and text and voice prompts to and from the voice interpreter on the voice server. For ease of explanation only one of the multimodal devices in the system of is shown with a voice interpreter but readers will recognize that any multimodal device may have a voice interpreter according to embodiments of the present invention.

The use of these three example multimodal devices is for explanation only not for limitation of the invention. Any automated computing machinery capable of accepting speech from a user providing the speech digitized to a speech engine through a voice interpreter and receiving and playing speech prompts and responses from the voice interpreter may be improved to function as a multimodal device for adjusting a speech engine based on background noise according to embodiments of the present invention.

The system of also includes a voice server which is connected to data communications network through wireline connection . The voice server is a computer that runs a speech engine . The voice server provides voice recognition services for multimodal devices by accepting requests for speech recognition and returning text representing recognized speech. Voice server also provides speech synthesis text to speech TTS conversion for voice prompts and voice responses to user input in multimodal applications such as for example X V applications SALT applications or Java voice applications.

The system of includes a data communications network that connects the multimodal devices the voice server the web server and the laboratory server for data communications. A data communications network for testing a grammar used in speech recognition for reliability in a plurality of operating environments having different background noise according to embodiments of the present invention is a data communications network composed of a plurality of computers that function as data communications routers connected for data communications with packet switching protocols. Such a data communications network may be implemented with optical connections wireline connections or with wireless connections. Such a data communications network may include intranets internets local area data communications networks LANs and wide area data communications networks WANs . Such a data communications network may implement for example 

The system of includes a web server connected for data communications through wireline connection to network and therefore to the multimodal devices . The web server may be any server that provides to client devices markup documents that compose multimodal applications. The web server typically provides such markup documents via a data communications protocol HTTP HDTP WAP or the like. That is although the term web is used to described the web server generally in this specification there is no limitation of data communications between multimodal devices and the web server to HTTP alone. The markup documents also may be implemented in any markup language that supports non speech display elements data entry elements and speech elements for identifying which speech to recognize and which words to speak grammars form elements and the like including for example X V and SALT. A multimodal application in a multimodal device then upon receiving from the web sever a markup document as part of a multimodal application may execute speech elements by use of a voice interpreter and speech engine in the multimodal device itself or by use of a voice interpreter and speech engine located remotely from the multimodal device in a voice server .

The arrangement of the multimodal devices the web server the voice server laboratory server and the data communications network making up the exemplary system illustrated in are for explanation not for limitation. Data processing systems useful for testing a grammar used in speech recognition for reliability in a plurality of operating environments having different background noise according to various embodiments of the present invention may include additional servers routers other devices and peer to peer architectures not shown in as will occur to those of skill in the art. Data communications networks in such data processing systems may support many data communications protocols in addition to those noted above. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Testing a grammar used in speech recognition for reliability in a plurality of operating environments having different background noise according to embodiments of the present invention may be implemented with one or more computers that is automated computing machinery. For further explanation therefore sets forth a block diagram of automated computing machinery comprising an example of a computer useful as a laboratory server in testing a grammar used in speech recognition for reliability in a plurality of operating environments having different background noise according to embodiments of the present invention. The laboratory server of includes at least one computer processor or CPU as well as random access memory RAM which is connected through a high speed memory bus and bus adapter to processor and to other components of the laboratory server.

Stored in RAM is a grammar analysis module a set of computer program instructions capable of testing a grammar used in speech recognition for reliability in a plurality of operating environments having different background noise according to embodiments of the present invention. The grammar analysis module of operates generally for testing a grammar used in speech recognition for reliability in a plurality of operating environments having different background noise according to embodiments of the present invention by receiving recorded background noise for each of the plurality of operating environments generating a test speech utterance for recognition by the speech recognition engine using the grammar mixing the test speech utterance with each recorded background noise resulting in a plurality of mixed test speech utterances each mixed test speech utterance having different background noise performing for each of the mixed test speech utterances speech recognition using the grammar and the mixed test speech utterance resulting in speech recognition results for each of the mixed test speech utterances and evaluating for each recorded background noise speech recognition reliability of the grammar in dependence upon the speech recognition results for the mixed test speech utterance having that recorded background noise . In the example of the speech recognition reliability for various combinations of grammars and background noise is specified in a grammar reliability table .

The speech engine of is a functional module typically a software module although it may include specialized hardware also that does the work of recognizing and generating human speech. The speech engine includes an ASR engine for speech recognition and a text to speech TTS engine for generating speech. The speech engine also includes grammars lexicons and language specific acoustic models . Each lexicon and language specific acoustic model may be associated with a separate language in a configuration parameter repository .

The acoustic models associate speech waveform data representing recorded pronunciations of speech with textual representations of those pronunciations which are referred to as phonemes. The speech waveform data may be implemented as a Speech Feature Vector SFV that may be represented for example by the first twelve or thirteen Fourier or frequency domain components of a sample of digitized speech waveform. Accordingly the acoustic models may be implemented as data structures or tables in a database for example that associates these SFVs with phonemes representing to the extent that it is practically feasible to do so all pronunciations of all the words in various human languages each language having a separate acoustic model . The lexicons are associations of words in text form with phonemes representing pronunciations of each word the lexicon effectively identifies words that are capable of recognition by an ASR engine. Each language has a separate lexicon . Also stored in RAM is a Text To Speech TTS Engine a module of computer program instructions that accepts text as input and returns the same text in the form of digitally encoded speech for use in providing speech as prompts for and responses to users of multimodal systems.

The grammars communicate to the ASR engine the words and sequences of words that currently may be recognized. For precise understanding readers will distinguish the purpose of the grammar and the purpose of the lexicon. The lexicon associates with phonemes all the words that the ASR engine can recognize. The grammar communicates the words currently eligible for recognition. The set of words currently eligible for recognition and the set of words capable of recognition may or may not be the same.

Also stored in RAM is an operating system . Operating systems useful in voice servers according to embodiments of the present invention include UNIX Linux Microsoft Vista IBM s AIX IBM s i5 OS and others as will occur to those of skill in the art. Operating system speech engine grammar analysis module grammar reliability table and background noises in the example of are shown in RAM but many components of such software typically are stored in non volatile memory also for example on a disk drive .

Laboratory server of includes bus adapter a computer hardware component that contains drive electronics for high speed buses the front side bus the video bus and the memory bus as well as drive electronics for the slower expansion bus . Examples of bus adapters useful in laboratory servers according to embodiments of the present invention include the Intel Northbridge the Intel Memory Controller Hub the Intel Southbridge and the Intel I O Controller Hub. Examples of expansion buses useful in laboratory servers according to embodiments of the present invention include Peripheral Component Interconnect PCI and PCI Extended PCI X bus as well as PCI Express PCIe point to point expansion architectures and others.

Laboratory server of includes disk drive adapter coupled through expansion bus and bus adapter to processor and other components of the laboratory server . Disk drive adapter connects non volatile data storage to the laboratory server in the form of disk drive . Disk drive adapters useful in laboratory servers include Integrated Drive Electronics IDE adapters Small Computer System Interface SCSI adapters and others as will occur to those of skill in the art. In addition non volatile computer memory may be implemented for a laboratory server as an optical disk drive electrically erasable programmable read only memory so called EEPROM or Flash memory RAM drives and so on as will occur to those of skill in the art.

The example laboratory server of includes one or more input output I O adapters . I O adapters in laboratory servers implement user oriented input output through for example software drivers and computer hardware for controlling output to display devices such as computer display screens as well as user input from user input devices such as keyboards and mice. The example laboratory server of includes a video adapter which is an example of an I O adapter specially designed for graphic output to a display device such as a display screen or computer monitor. Video adapter is connected to processor through a high speed video bus bus adapter and the front side bus which is also a high speed bus.

The exemplary laboratory server of includes a communications adapter for data communications with other computers and for data communications with a data communications network . Such data communications may be carried out serially through RS 232 connections through external buses such as a Universal Serial Bus USB through data communications data communications networks such as IP data communications networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a data communications network. Examples of communications adapters useful for testing a grammar used in speech recognition for reliability in a plurality of operating environments having different background noise according to embodiments of the present invention include modems for wired dial up communications Ethernet IEEE 802.3 adapters for wired data communications network communications and 802.11 adapters for wireless data communications network communications.

As mentioned above the grammars tested by a grammar analysis module may be utilized to perform speech recognition for a multimodal application operating on a multimodal device. In a thin client architecture a voice server may provide speech recognition services using the grammars tested according to embodiments of the present application and provided to the voice server by a multimodal application in the form for example of VoiceXML dialogs. For further explanation therefore sets forth a block diagram of automated computing machinery comprising an example of a computer useful as a voice server in testing a grammar used in speech recognition for reliability in a plurality of operating environments having different background noise according to embodiments of the present invention.

The example voice server of includes several components that are structured and operate similarly to the components of the laboratory server having the same drawing reference numbers as described above with reference to at least one computer processor front side bus RAM high speed memory bus bus adapter video adapter video bus expansion bus communications adapter I O adapter disk drive adapter an operating system a speech engine and so on. As in the system of the speech engine in the voice server of includes an ASR engine grammars lexicons acoustic models and a TTS engine .

Stored in RAM is a voice server application a module of computer program instructions capable of operating a voice server according to embodiments of the present invention. Voice server application provides voice recognition services for multimodal devices by accepting requests for speech recognition and returning speech recognition results including text representing recognized speech text for use as variable values in dialogs and text as string representations of scripts for semantic interpretation. Voice server application also includes computer program instructions that provide text to speech TTS conversion for voice prompts and voice responses to user input in multimodal applications such as for example X V applications SALT applications or Java Speech applications.

Voice server application may be implemented as a web server implemented in Java C or another language that supports X V SALT VoiceXML or other multimodal languages by providing responses to HTTP requests from X V clients SALT clients Java Speech clients or other multimodal clients. Voice server application may for a further example be implemented as a Java server that runs on a Java Virtual Machine and supports a Java voice framework by providing responses to HTTP requests from Java client applications running on multimodal devices. And voice server applications that support embodiments of the present invention may be implemented in other ways as may occur to those of skill in the art and all such ways are well within the scope of the present invention.

Also stored in RAM is a voice interpreter a module of computer program instructions that supports the voice mode of user interaction with a multimodal application operating on a multimodal device. The voice interpreter provides speech engine input such as grammars speech for recognition and text prompts for speech synthesis to the speech engine and returns to the multimodal application speech engine output in the form of recognized speech semantic interpretation results and digitized speech for voice prompts. Input to voice interpreter may originate for example from VoiceXML clients running remotely on multimodal devices from X V clients running remotely on multimodal devices from SALT clients running on multimodal devices or from Java client applications running remotely on multimodal devices. In this example voice interpreter interprets and executes VoiceXML segments representing voice dialog instructions received from remote multimodal devices and provided to voice interpreter through voice server application .

When implemented in X V a multimodal application in a thin client architecture may provide voice dialog instructions VoiceXML segments VoiceXML elements and the like to voice interpreter through data communications across a network with the multimodal application. The voice dialog instructions include one or more grammars data input elements event handlers and so on that advise the voice interpreter how to administer voice input from a user and voice prompts and responses to be presented to a user. The voice interpreter administers such dialogs by processing the dialog instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm FIA . The voice interpreter interprets VoiceXML dialogs provided to the voice interpreter by a multimodal application.

For further explanation regarding the thin client architecture sets forth a functional block diagram of exemplary apparatus in a thin client architecture useful in testing a grammar used in speech recognition for reliability in a plurality of operating environments having different background noise according to embodiments of the present invention. The exemplary system of includes a multimodal device . The example multimodal device of includes a sound card which is an example of an I O adapter specially designed for accepting analog audio signals from a microphone and converting the audio analog signals to digital form for further processing by a codec .

In some embodiments the multimodal application of may include computer program instructions implemented in machine code that may be scheduled for execution directly by an operating system on a processor of the multimodal device . For example the multimodal application may be implemented as a compiled version of program written in C . In some other embodiments in which the multimodal application is implemented in higher level non machine language a multimodal execution environment may support the multimodal application by translating the multimodal application into platform specific machine code directly executable on the processors of the multimodal device performing memory management for the multimodal application during execution controlling access to platform hardware and so on. The implementation of the multimodal execution environment typically depends on the implementation of the multimodal application . When the multimodal application is implemented using X V or SALT tags then the multimodal execution environment may be implemented as a multimodal browser. When the multimodal application is implemented using Java then the multimodal execution environment may be implemented as a Java Virtual Machine.

The multimodal application of includes a set of computer program instructions useful according to embodiments of the present invention. In particular the multimodal application operates generally according to embodiments of the present invention by identifying a current background noise for a current operating environment in which the multimodal device operates and altering flow of execution for the multimodal application in dependence upon the identified current ground noise for the current operating environment in which the multimodal application operates. The multimodal application of may alter flow of execution for the multimodal application by selecting one of the plurality of grammars tested in dependence upon the current background noise and the evaluation of the speech recognition reliability of the plurality of grammars using the recorded background noises receiving a voice utterance from a user and performing speech recognition in dependence upon the selected grammar and the voice utterance.

In the example of the multimodal application selects one of the grammars tested by a laboratory server according to embodiments of the present invention using a grammar reliability table . The grammar reliability table of stores the laboratory server s evaluation of the speech recognition reliability of a plurality of grammars using recorded background noises from different operating environments. That is using the grammar reliability table the multimodal application may select a grammar for the application that has a high reliability in the multimodal device s current operating environment. The multimodal application may obtain the grammar reliability table by downloading the table from a laboratory server through the network . Other ways of obtaining the grammar reliability table are also well within the scope of the present application including for example having the multimodal application preconfigured with the grammar reliability table .

The example of also includes a voice server having installed upon it a voice server application a voice interpreter and a speech engine . The speech engine includes an ASR engine grammars lexicons acoustic models and a TTS engine . The grammars are generally provided to the speech engine by the multimodal application upon requesting voice services. The voice interpreter of is implemented as a VoiceXML interpreter that interprets and executes VoiceXML dialog instructions received from the multimodal application and provided to voice interpreter through voice server application . VoiceXML input to the voice interpreter may originate from the multimodal application implemented as an X V client running remotely on the multimodal device . As noted above the multimodal application also may be implemented as a Java client application running remotely on the multimedia device a SALT application running remotely on the multimedia device and in other ways as may occur to those of skill in the art.

In the example of the voice server connects to the multimodal device for data communication by a VoIP connection through a data communications network . VoIP stands for Voice Over Internet Protocol a generic term for routing speech over an IP based data communications network. The speech data flows over a general purpose packet switched data communications network instead of traditional dedicated circuit switched voice transmission lines. Protocols used to carry voice signals over the IP data communications network are commonly referred to as Voice over IP or VoIP protocols. VoIP traffic may be deployed on any IP data communications network including data communications networks lacking a connection to the rest of the Internet for instance on a private building wide local area data communications network or LAN. 

Many protocols are used to effect VoIP. The two most popular types of VoIP are effected with the IETF s Session Initiation Protocol SIP and the ITU s protocol known as H.323. SIP clients use TCP and UDP port to connect to SIP servers. SIP itself is used to set up and tear down calls for speech transmission. VoIP with SIP then uses RTP for transmitting the actual encoded speech. Similarly H.323 is an umbrella recommendation from the standards branch of the International Telecommunications Union that defines protocols to provide audio visual communication sessions on any packet data communications network.

The apparatus of operate in a manner that is similar to the operation of the system of described above. Multimodal application is a user level multimodal client side computer program that presents a voice interface to user provides audio prompts and responses and accepts input speech for recognition . Multimodal application provides a speech interface through which a user may provide oral speech for recognition through microphone and have the speech digitized through an audio amplifier and a coder decoder codec of a sound card and provide the digitized speech for recognition to ASR engine . Multimodal application then packages the digitized speech in a recognition request message according to a VoIP protocol and transmits the speech to voice server through the VoIP connection on the network .

Voice server application provides voice recognition services for multimodal devices by accepting dialog instructions VoiceXML segments and returning speech recognition results including text representing recognized speech text for use as variable values in dialogs and output from execution of semantic interpretation scripts as well as voice prompts. Voice server application supports text to speech TTS conversion for voice prompts and voice responses to user input in multimodal applications such as for example X V applications SALT applications or Java Speech applications.

The voice server application receives speech for recognition from a user and passes the speech through API calls to voice interpreter which in turn uses an ASR engine for speech recognition. The ASR engine receives digitized speech for recognition uses frequency components of the digitized speech to derive an SFV uses the SFV to infer phonemes for the word from the language specific acoustic model and uses the phonemes to find the speech in the lexicon . The ASR engine then compares speech found as words in the lexicon to words in a grammar to determine whether words or phrases in speech are recognized by the ASR engine.

The multimodal application is operatively coupled to the speech engine . In this example the operative coupling between the multimodal application and the speech engine is implemented with a VoIP connection through a voice services module then through the voice server application and the voice interpreter . Depending on whether the multimodal application is implemented in X V Java or SALT the voice interpreter may be implemented using a VoiceXML interpreter a VoiceXML interpreter exposing a Java interface a SALT interpreter or any other implementation as will occur to those of skill in the art. The voice services module is a thin layer of functionality a module of computer program instructions that presents an API for use by an application level program in providing dialog instructions and speech for recognition to a voice server application and receiving in response voice prompts and other responses. In this example application level programs are represented by multimodal application and the multimodal execution environment .

The voice services module provides data communications services through the VoIP connection and the voice server application between the multimodal device and the voice interpreter . The API of may be the same API presented to applications by a voice interpreter when the voice interpreter is installed on the multimodal device in a thick client architecture. So from the point of view of an application calling the API the application is calling the VoiceXML interpreter directly. The data communications functions of the voice services module are transparent to applications that call the API . At the application level calls to the API may be issued from the multimodal browser which provides an execution environment for the multimodal application when the multimodal application is implemented with X V. And calls to the API may be issued from the JVM which provides an execution environment for the multimodal application when the multimodal application is implemented with Java.

The explanation above with reference to describe a voice server that provide speech services to a multimodal device in a thin client architecture. As mentioned above the grammars tested by a grammar analysis module according to embodiments of the present invention may be utilized to perform speech recognition for a multimodal application operating on a multimodal device in a thick client architecture. For further explanation therefore sets forth a block diagram of automated computing machinery comprising an example of a computer useful as a multimodal device in a thick client architecture useful in testing a grammar used in speech recognition for reliability in a plurality of operating environments having different background noise according to embodiments of the present invention. In a multimodal device implementing a thick client architecture as illustrated in the multimodal device has no connection to a remote voice server containing a voice interpreter and a speech engine. All the components needed for speech synthesis and voice recognition using grammars tested for reliability in a plurality of operating environments having different background noise according to embodiments of the present invention are installed or embedded in the multimodal device itself.

The example multimodal device of includes several components that are structured and operate similarly to the components of the voice server having the same drawing reference numbers as described above with reference to at least one computer processor frontside bus RAM high speed memory bus bus adapter video adapter video bus expansion bus communications adapter I O adapter disk drive adapter an operating system a voice interpreter a speech engine and so on. As in the system of the speech engine in the multimodal device of includes an ASR engine grammars lexicons acoustic models and a TTS engine . The voice interpreter may be implemented as a VoiceXML interpreter that administers dialogs by processing the dialog instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm FIA .

The speech engine in this kind of embodiment a thick client architecture often is implemented as an embedded module in a small form factor device such as a handheld device a mobile phone PDA and the like. An example of an embedded speech engine that may be improved utilizing grammars tested for reliability in a plurality of operating environments having different background noise according to embodiments of the present invention is IBM s Embedded ViaVoice Enterprise. The example multimodal device of also includes a sound card which is an example of an I O adapter specially designed for accepting analog audio signals from a microphone and converting the audio analog signals to digital form for further processing by a codec . The sound card is connected to processor through expansion bus bus adapter and front side bus .

Also stored in RAM in this example is a multimodal application a module of computer program instructions capable of operating a multimodal device as an apparatus that supports multiple modes of user interaction including a voice mode and one or more non voice modes. The multimodal application implements speech recognition by accepting speech for recognition from a user and sending the speech for recognition through API calls to the ASR engine . The multimodal application implements speech synthesis generally by sending words to be used as prompts for a user to the TTS engine . As an example of thick client architecture the multimodal application in this example does not send speech for recognition across a network to a voice server for recognition and the multimodal application in this example does not receive synthesized speech TTS prompts and responses across a network from a voice server. All grammar processing voice recognition and text to speech conversion in this example is performed in an embedded fashion in the multimodal device itself.

More particularly multimodal application in this example is a user level multimodal client side computer program that provides a speech interface through which a user may provide oral speech for recognition through microphone have the speech digitized through an audio amplifier and a coder decoder codec of a sound card and provide the digitized speech for recognition to ASR engine . The multimodal application may be implemented as a set or sequence of X V documents executing in a multimodal execution environment implemented as a multimodal browser or microbrowser that passes VoiceXML grammars and digitized speech by calls through an API directly to an embedded voice interpreter for processing. The embedded voice interpreter may in turn issue requests for speech recognition through API calls directly to the embedded ASR engine . Multimodal application also can provide speech synthesis TTS conversion by API calls to the embedded TTS engine for voice prompts and voice responses to user input.

In a further class of exemplary embodiments the multimodal application may be implemented as a Java voice application that executes in a multimodal execution environment implemented as a Java Virtual Machine and issues calls through an API of the voice interpreter for speech recognition and speech synthesis services. In further exemplary embodiments the multimodal application may be implemented as a set or sequence of SALT documents executed in a multimodal execution environment implemented as a multimodal browser or microbrowser that issues calls through an API of the voice interpreter for speech recognition and speech synthesis services. In addition to X V SALT and Java implementations multimodal application may be implemented in other technologies as will occur to those of skill in the art and all such implementations are well within the scope of the present invention.

The multimodal application of includes a set of computer program instructions for operating according to embodiments of the present invention. The multimodal application may operate generally according to embodiments of the present invention by identifying a current background noise for a current operating environment in which the multimodal device operates and altering flow of execution for the multimodal application in dependence upon the identified current ground noise for the current operating environment in which the multimodal application operates. The multimodal application of may alter flow of execution for the multimodal application by selecting one of the plurality of grammars tested in dependence upon the current background noise and the evaluation of the speech recognition reliability of the plurality of grammars using the recorded background noises receiving a voice utterance from a user and performing speech recognition in dependence upon the selected grammar and the voice utterance. In the example of the multimodal application selects one of the grammars tested by a laboratory server according to embodiments of the present invention using a grammar reliability table . The grammar reliability table of stores the laboratory server s evaluation of the speech recognition reliability for a plurality of grammars using recorded background noises from different operating environments.

The multimodal application may also operate generally according to embodiments of the present invention by altering flow of execution for the multimodal application in dependence upon the identified current ground noise for the current operating environment in which the multimodal application operates. In such a manner the multimodal application may utilize different dialogs to interact with the user depending on the multimodal device s current operating environment.

The multimodal application of is operatively coupled to the speech engine . In this example the operative coupling between the multimodal application and the speech engine is implemented through the voice interpreter . Depending on whether the multimodal application is implemented in X V Java or SALT the voice interpreter may be implemented as a VoiceXML interpreter a VoiceXML interpreter exposing a Java interface or SALT interpreter. When the multimodal application is implemented in X V the operative coupling is effected through the multimodal execution environment which provides an operating environment and an interpreter for the X V application and then through a VoiceXML interpreter which passes grammars and voice utterances for recognition to the speech engine through the voice interpreter . When the multimodal application is implemented in Java Speech the multimodal execution environment is implemented as a Java Virtual Machine which provides an operating environment for the Java application and the voice interpreter which passes grammars and voice utterances for recognition to the speech engine . When the multimodal application is implemented in SALT the multimodal execution environment is implemented as a multimodal browser which provides an operating environment and an interpreter for the X V application and then through a SALT interpreter which passes grammars and voice utterances for recognition to the speech engine .

The multimodal application in this example running on a multimodal device that contains its own voice interpreter and its own speech engine with no network or VoIP connection to a remote voice server containing a remote VoiceXML interpreter or a remote speech engine is an example of a so called thick client architecture so called because all of the functionality for processing voice mode interactions between a user and the multimodal application is implemented on the multimodal device itself.

For further explanation sets forth a flow chart illustrating an exemplary method of testing a grammar used in speech recognition for reliability in a plurality of operating environments having different background noise according to embodiments of the present invention. Testing a grammar used in speech recognition for reliability in a plurality of operating environments having different background noise according to the method of is carried out by a grammar analysis module installed upon a laboratory server in a laboratory environment. Readers will note however that such an example is for explanation only and not for limitation. In fact any computer as will occur to those of skill in the art may also be useful according to embodiments of the present invention.

The method of includes receiving recorded background noise for each of the plurality of operating environments. Each recorded background noise of represents a waveform of the background sounds in a particular operating environment. In some embodiments the grammar analysis module may receive recorded background noise for each of the plurality of operating environments by sampling the background sounds in multiple operating environments and digitizing the sampled background sounds according to any codec as will occur to those of skill in the art. For example a multimodal application designer may record the background sounds of the inside a particular vehicle traveling at thirty miles per hour fifty miles per hour and seventy miles per hour. In such an example the multimodal application designer incurs the costs of setting up recording equipment capturing the background noise for each operating environment only once. The multimodal application designer may then reuse the recorded background noise for testing any number of grammars according to embodiments of the present invention. In some other embodiments the grammar analysis module may receive recorded background noise for each of the plurality of operating environments by purchasing the background noises for the different operating environments under test from a background noise provider. For example background noises for a wide variety of operating environments may be provided as part of a speech integrated development environment such as for example the IBM Voice Toolkit.

The method of also includes generating a test speech utterance for recognition by a speech recognition engine using a grammar . The test speech utterance of represents a speech waveform of a speech response that a speech engine should recognize using a particular grammar under test. The grammar analysis module may generate a test speech utterance according to the method of by sampling the test speech utterance from speech of a person. In other embodiments the grammar analysis module may generate a test speech utterance according to the method of by synthesizing the test speech utterance using a text to speech engine.

The method of includes mixing the test speech utterance with each recorded background noise resulting in a plurality of mixed test speech utterances . Accordingly each mixed test speech utterance of has a different background noise . The grammar analysis module may mix the test speech utterance with each recorded background noise according to the method of by combining for each recorded background noise the test speech utterance with that background noise to form a single mixed test speech utterance . The grammar analysis module may combine the test speech utterance with each background noise by balancing the relative amplitude frequencies and other components of the test speech utterance and the background noises before summing the test speech utterance and the background noises together to form the mixed test speech utterances .

The method of includes performing for each of the mixed test speech utterances speech recognition using the grammar and the mixed test speech utterance resulting in speech recognition results for each of the mixed test speech utterances . The grammar analysis module may perform speech recognition for each of the mixed test speech utterances using the grammar according to the method of by passing the mixed test speech utterances and the grammar to a speech engine for processing. The speech engine in turn identifies speech waveform representations associated with the phonemes for the words in the grammar compares those speech waveform representations with the waveform representations in the mixed test speech utterances to identify the words in the grammar that result in the closest match and passes the speech recognition results back to the grammar analysis module using for example an ECMAScript data structure such as the application.lastresult array. ECMAScript data structures represent objects in the Document Object Model DOM at the scripting level in an X V page. The DOM is created by a multimodal browser or a grammar analysis module when an X V page is loaded. The application.lastresult array holds information about the last recognition generated by a speech engine. The application.lastresult is an array of elements where each element application.lastresult i represents a possible result through the following shadow variables 

When a voice interpreter stores the recognition results in an ECMAScript field variable array for a field specified in the multimodal application the recognition results may be stored in field variable array using shadow variables similar to the application variable application.lastresult . For example a field variable array may represent a possible recognition result through the following shadow variables 

The grammar analysis module may often perform speech recognition with each mixed text speech utterance multiple times to test the reliability of the grammar with a particular background noise . Accordingly the grammar analysis module of repeatedly performs for each of the mixed test speech utterances the speech recognition using the grammar and that mixed test speech utterance resulting in a plurality of speech recognition results for each mixed test speech utterance . For further explanation consider the following exemplary grammar under test that specifies all of the cities in the state of Texas 

Further consider that each mixed test speech utterance has a unique identifier and specifies the city Alton with the background noise for a different operating environment. The grammar analysis module may store the exemplary speech recognition results in the following table 

Table 1 above illustrates recognition results provided by a speech engine using the exemplary grammar above and three mixed test speech utterances having identifiers 0 1 and 2. The exemplary speech recognition results above indicates that the speech engine successfully recognizes the test speech utterance Alton mixed with background noise for a first operating environment five times using the exemplary grammar above. The exemplary speech recognition results above indicates that the speech engine successfully recognizes the test speech utterance Alton mixed with background noise for a second operating environment three times using the exemplary grammar above. The exemplary speech recognition results above indicates that the speech engine successfully recognizes the test speech utterance Alton mixed with background noise for a third operating environment only one time using the exemplary grammar above. Readers will note that the exemplary recognition results table above is for explanation only and not for limitation.

The method of also includes evaluating for each recorded background noise speech recognition reliability of the grammar in dependence upon the speech recognition results for the mixed test speech utterance having that recorded background noise . The grammar analysis module may evaluate speech recognition reliability of the grammar for each recorded background noise according to the method of by calculating in dependence upon the plurality of speech recognition results for each one of the mixed test speech utterance a reliability indicator for the grammar when recognizing speech having the recorded background noise included in that mixed test speech utterance . The grammar analysis module may calculate the reliability indicator by dividing the number of times the speech engine successfully recognized the test speech utterance amid the background noise for a mixed test speech utterance by the number of times the speech engine did not successfully recognize the test speech utterance .

For example consider again the exemplary grammar above the exemplary test speech utterance Alton and the exemplary recognition results from Table 1 above. The reliability indicator for the exemplary grammar and the background noise for the first operating environment that is the background noise embedded in the mixed test speech utterance having an identifier of 0 is one hundred percent or 1.00 . The reliability indicator for the exemplary grammar and the background noise for the second operating environment that is the background noise embedded in the mixed test speech utterance having an identifier of 1 is sixty percent or 0.60 . The reliability indicator for the exemplary grammar and the background noise for the third operating environment that is the background noise embedded in the mixed test speech utterance having an identifier of 2 is twenty percent or 0.20 .

As part of evaluating speech recognition reliability according to the method of the grammar analysis module of stores the reliability indicator in a grammar reliability table . Each record of the grammar reliability table specifies a reliability indicator for using a grammar to recognize speech in the presence of background noise for a particular operating environment. The grammar associated with a particular reliability indicator is specified using a grammar identifier . The background noise associated with a particular reliability indicator is specified using a background noise identifier which also indirectly specifies a particular operating environment. In some embodiments an operating environment identifier may be substituted for or augment the background noise identifier . For further explanation of the grammar reliability table consider the following exemplary grammar reliability table 

The exemplary grammar reliability table above specifies that the exemplary cities in TX grammar above has a reliability of one hundred percent when utilized to recognize speech recorded in an operating environment with a background noise that matches the background noise having an identifier of 0 a reliability of sixty percent when utilized to recognize speech recorded in an operating environment with a background noise that matches the background noise having an identifier of 1 and a reliability of twenty percent when utilized to recognize speech recorded in an operating environment with a background noise that matches the background noise having an identifier of 2. The exemplary grammar reliability table above also specifies that an exemplary counties in TX grammar has a reliability of one hundred percent when utilized to recognize speech recorded in an operating environment with a background noise that matches the background noise having an identifier of either 0 or 2 and a reliability of eighty percent when utilized to recognize speech recorded in an operating environment with a background noise that matches the background noise having an identifier of 1. The exemplary grammar reliability table above also specifies that an exemplary cities in Hidalgo TX grammar has a reliability of one hundred percent when utilized to recognize speech recorded in an operating environment with a background noise that matches any o the background noises having an identifier of 0 1 or 2. Reader will note that the exemplary grammar reliability table above is for explanation only and not for limitation. Other values and formats for associating a reliability indicator with a grammar and a background noise or operating environment as will occur to those of skill the art may also be useful in embodiments of the present invention.

As mentioned above a multimodal application may utilize grammars tested according to embodiments of the present invention to perform reliable speech recognition. For further explanation sets forth a flow chart illustrating an exemplary method of a multimodal application utilizing one of a plurality of grammars tested for reliability in a plurality of operating environments having different background noise according to embodiments of the present invention. The multimodal application of operates on a multimodal device supporting multiple modes of interaction that include a voice mode and one or more non voice modes such as a visual mode or tactile mode. The voice mode of interaction may be implemented using speakers or a microphone of the multimodal device along with a sound card to provide an interface for the speakers or the microphone with the remaining components of the device. The visual mode of interaction may be implemented using a display for the multimodal device on which the device may render a graphical user interface GUI along with a graphic card that provides an interface for the display with the other components of the multimodal device.

The method of includes identifying by the multimodal application a current background noise for a current operating environment in which the multimodal device operates. The multimodal application may identify a current background noise for a current operating environment in which the multimodal device operates according to the method of by sampling through the microphone the background sounds for the current operating environment. The multimodal application may sample background sounds for the current operating environment by periodically or at a predetermined time determining the lack of any foreground noise and digitizing the background sounds for the current environment in which the multimodal application is operating. The predetermined time period at which the multimodal application samples the background sounds may be a static time period or a time period that is dynamically generated. For example the predetermined time period may specify sampling the background sounds every five minutes three minutes after the most recent user interaction with the multimodal device and so on. Because foreground noise generally results in a sudden change in the input to a microphone the multimodal application may determine the lack of any foreground noise by identifying over a period of time when the input to the microphone does not vary beyond a predefined threshold. The period of time used to identify the lack of any foreground noise may be a several milliseconds several seconds or any other time period as will occur to those of skill in the art.

In some embodiments the multimodal application may sample the background noise while a user is not interacting with the multimodal device to avoid having additional noise from the user interaction included the current background noise for the current operating environment. In other embodiments the multimodal application may sample the current background noise while the user is interacting with the device. For example the multimodal application may sample the current background noise immediately before or after the user provides a voice utterance for speech recognition.

The method of includes altering by the multimodal application flow of execution for the multimodal application in dependence upon the identified current background noise for the current operating environment in which the multimodal application operates. The multimodal application may alter flow of execution for the multimodal application according to the method of by using different voice dialogs depending on the current background noise identified. The multimodal application may select a voice dialog for processing using the grammar reliability table of . The multimodal application may select the voice dialog that utilizes the grammar associated with the highest reliability indicator and with the background noise that most closely matches the current background noise . Determining which background noise specified by the grammar reliability table most closely matches the current background noise may be carried out using Hidden Markov Models of the background noise to compare the probability that the current background noise matches each of the background noises specified by identifiers in the grammar reliability table . The background noise specified in the grammar reliability table to which the current background noise has the highest probability of matching may be identified as the background noise that most closely matches the current background noise .

For further example of altering the multimodal application s flow of execution consider a multimodal application that operates in a user s vehicle to provide driving direction to any city in Texas from the vehicle s current location. Further consider that the multimodal application provides two different interactions with a user depending on the vehicle s speed. The first user interaction allows the user to speak the name of the city in Texas and the multimodal application in turn provides directions to that city. In this example the grammar used to recognize the names of all of the cities in Texas has a high reliability in the presence of background noise as long as the current operating environment is such that the vehicle is traveling less than forty miles per hour. For operating environments above forty miles per hour the grammars reliability diminishes as the noise makes distinguishing between cities with similar sounding names difficult. The multimodal application therefore provides a second user interaction when the current background noise indicates that the user is in an operating environment where the vehicle is traveling above forty mile per hour. This second user interaction prompts the user for the county in which the desired city is located. The multimodal application utilizes a grammar that specifies all of the counties in Texas to recognize the county spoken by the user. The multimodal application then dynamically builds a grammar for recognizing the cities in that county and prompts the user to provide the name of the city. Because a grammar that lists the cities for only a single county typically has a lot less cities with similar sounding names than a grammar listing all of the cities in Texas the additional noise from operating the vehicle at a higher speed does not impair the multimodal application s ability to reliably perform speech recognition in the second user interaction in the same manner that the speech recognition reliability during the first user interaction is impaired.

In the method of altering the multimodal application s flow of execution includes selecting one of the plurality of grammars tested in dependence upon the current background noise and the evaluation of the speech recognition reliability of the plurality of grammars using the recorded background noises. The multimodal application may select one of the plurality of grammars according to the method of by selecting the grammar in the grammar reliability table associated with the highest reliability indicator and with the background noise that most closely matches the current background noise . Generally in operating environments having less background noise the grammar selected may provide the user with more flexibility to speak naturally or with less prompting than the grammars selected in operating environments having more background noise. Such is generally the case because lower noise levels typically allow a speech engine to distinguish more accurately among more words or phrases spoken by user.

Altering the multimodal application s flow of execution according to the method of also includes receiving a voice utterance from a user. The multimodal application may receive a voice utterance from a user by recording a speech waveform through a microphone and digitizing and encoding the speech waveform for speech recognition using a codec implemented in the multimodal device.

In the method of altering the multimodal application s flow of execution includes performing by the multimodal application speech recognition in dependence upon the selected grammar and the voice utterance . The multimodal application may perform speech recognition in dependence upon the selected grammar and the voice utterance according to the method of by passing the selected grammar and the voice utterance to a speech engine and receiving the recognition results in a ECMAScript data structure such as for example the application.lastresult array. By altering the multimodal application s flow of execution in such a manner the multimodal application may obtain more accurate speech recognition results using grammars tested for reliability in a plurality of operating environments having different background noise according to embodiments of the present invention.

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for testing a grammar used in speech recognition for reliability in a plurality of operating environments having different background noise. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on computer readable media for use with any suitable data processing system. Such computer readable media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

