---

title: OS-mediated launch of OS-independent application
abstract: A system, method, and computer readable medium for an operating system (OS) mediated launch of an OS dependent application is disclosed. An application running within an OS may operate outside an OS environment by constructing for example a capsule file, passing the capsule file to firmware interface, and restarting the system. The firmware interface may load various drivers and applications contained within the capsule file and execute them to perform a task. Upon completion of the task, the OS is booted again and the original application may resume control, making use of any information stored by the firmware interface in a dedicated status table or file. Other embodiments may be employed, and other embodiments are described and claimed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08539200&OS=08539200&RS=08539200
owner: Intel Corporation
number: 08539200
owner_city: Santa Clara
owner_country: US
publication_date: 20080423
---
In modern computing systems most applications require an operating system OS to execute. In recent years even applications such as anti virus utilities disk defragmentation utilities undelete utilities data recovery utilities hardware diagnostic utilities and other hardware repair utilities are usually executed within an OS environment even if they perform such tasks traditionally thought of as low level e.g. operating on or near the hardware level usually unmediated by an interface.

It is necessary or desirable to execute some applications outside an OS environment. One such example occurs when the OS itself becomes infected with a virus. In such a case an anti virus program generally cannot remove the virus and repair the system without endangering system stability or corrupting the OS files. This is especially true if the infected files are crucial to the operation of the OS or if the infected files are currently resident in main memory.

If a user is confronted with such an error her only option may be to restart the system and boot the system from an external source such as a removable disk and attempt to correct the problem. Usually these removable disks contain a second OS of only minimal functionality and often do not contain the very utility needed to fix the problem. Furthermore a program that detects a problem while running in an OS environment may not directly pass information to a utility running from a boot disk or similar device. Thus the boot disk may have to initiate the error detection and recovery processes from scratch wasting valuable time.

In the following detailed description numerous specific details are set forth in order to provide a thorough understanding of the application. However it will be understood by those of ordinary skill in the art that embodiments of the present invention may be practiced without these specific details. In other instances well known methods procedures components and circuits have not been described in detail so as not to obscure the present invention.

Unless specifically stated otherwise as apparent from the following discussions it is appreciated that throughout the specification discussions utilizing terms such as processing computing calculating determining or the like refer to the action and or processes of a computer processor or computing system or similar electronic computing device that manipulates and or transforms data represented as physical such as electronic quantities within the computing system s registers and or memories into other data similarly represented as physical quantities within the computing system s memories registers or other such information storage transmission or display devices. In addition the term plurality may be used throughout the specification to describe two or more components devices elements parameters and the like.

It should be understood that embodiments of the present invention may be used in a variety of applications. Although not limiting the circuits and techniques disclosed herein may be used in many apparatuses such as personal computers network equipment stations of a radio system wireless communication system digital communication system satellite communication system and the like.

Computing devices intended to be included within the scope of embodiments of the present invention include by way of example only local area network LAN stations and or nodes metropolitan area network MAN stations and or nodes personal computers workstations portable computing devices peripheral devices wireless LAN stations and the like.

Devices systems and methods incorporating aspects of embodiments of the invention are also suitable for computer communication network applications for example intranet and Internet applications. Embodiments of the invention may be implemented in conjunction with hardware and or software adapted to interact with a computer communication network for example a personal area network PAN LAN wide area network WAN or a global communication network for example the Internet.

Embodiments of the invention may include a computer readable medium such as for example a memory a disk drive or a removable flash memory device including instructions which when executed by a processor or controller carry out methods disclosed herein.

Embodiments of the present invention may include an OS mediated launch of an OS dependent application. An application running within an OS may operate outside an OS environment by constructing a capsule file or other suitable file or software file passing the capsule file to firmware interface and restarting the system. The capsule may be a file or piece of software which contains for example applications drivers software and other information necessary to perform a certain task outside an OS environment. The firmware interface may load various drivers and applications contained within the capsule file and execute them to perform a task. Upon completion of the task the OS may be booted again and the original application may resume control making use of any information stored by the firmware interface in a dedicated status table or file.

In a block diagram of Computing Unit which may be used with embodiments of present invention is depicted. Central Processing Unit CPU may comprise a standard processor capable of carrying out computer executable instructions. Memory Unit preferably comprises such volatile memory types as Random Access Memory RAM but may also comprise non volatile memory such as flash memory or Read Only Memory ROM without departing from the scope of the present invention. Storage unit may include the main data storage apparatus for computing unit and may employ such non volatile storage types as hard disks flash memory optical disks Solid State Drives SSDs and the like. Typically an OS may be primarily stored on storage unit . However it is to be understood by one of ordinary skill in the art of computer design that the OS may be at least partially or temporarily stored in memory unit or that memory unit and storage unit may be combined into a single unit of either readable or read only memory ROM . Basic Input Output System BIOS firmware interface may be implemented in hardware software or a combination of both and may act as an interface between the OS and firmware embedded in individual hardware components. The hierarchy of this relationship is depicted in .

Firmware interface may allow OS to interact with hardware level by means of firmware . It may also load hardware device drivers and applications that perform various computing and maintenance tasks outside of an OS environment. Preferably firmware interface may be implemented as a series of Application Programming Interfaces APIs accessible to OS and initialized by an element of firmware such as a BIOS. Alternatively firmware interface may be embedded in a hardware device such as an Erasable Programmable Read Only Memory EPROM . Embodiments of the present invention may employ such standard firmware interfaces as Unified Extensible Firmware Interface UEFI but may also employ other standard interfaces known to one skilled in the computer arts. Alternatively embodiments of the present invention may also function without firmware interface and may employ a specially customized firmware such as a BIOS.

OS may provide an environment in which a user may run applications and may also manage system resources such as system hardware and data files. Generally most applications including system diagnostics and repair applications operate within the OS environment. However because the OS is generally considered to be high level or relatively far removed from the hardware level some computer repair utilities may be unable to function properly and may require more direct access to the system hardware.

In operation the system may load boot code which may manage the various input sources from which an OS may be loaded. Boot code may keep an ordered list of sources from which an OS may be loaded including for example internal and external data storage units drive partitions and network accessible sources as well as an ordered list of operating systems if multiple such operating systems are available. From this list boot code may select an OS to load either automatically or per manual user input.

In operation the system may execute OS loader which begins the process of booting the OS onto the system. OS loader may contain files specific to each OS necessary to begin the process of loading the OS.

In operation the system may load the remaining OS files to complete the OS boot up process. The OS may be booted. From this point the system may freely execute applications including for example anti virus utilities disk defragmentation utilities undelete utilities data recovery utilities and other hardware diagnostic and repair utilities. Should the system encounter an error during the execution of these types of utilities which may best be handled outside the OS environment the system may choose to restart the system in operation after passing a capsule to an interface such as for example firmware interface . The capsule may be a file which contains for example applications drivers software and other information necessary to perform a certain task outside an OS environment. Other such executable or other files may also be employed. A capsule passing process is discussed in connection with .

In operation an anti virus or other security or integrity application may be executed on a system to conduct a virus scan. Based on the results of the scan in operation the system may determine whether a problem such as a virus exists. If a virus or other problem does not exist the system may report the results of the scan to the user in operation . However if a virus is detected the system may proceed to operation in which specific information about the virus may be collected as well as the information necessary to repair the problem or remove the virus. This may include the type of virus files infected uninfected versions of the affected files etc. The system may retrieve this information from local sources or from a network such as an Internet site run by the anti virus application vendor. In step the system may construct a capsule or software module containing software and information necessary to remove the virus outside the OS environment. In one embodiment constructing the capsule file may also appending digital signature to the capsule file. The structure of the capsule is discussed in greater detail in connection with .

In operation the system may pass the capsule to firmware interface by means of a function call within an OS environment. The transfer operation may include copying the capsule to a writable area in firmware or by passing a reference to the location of the capsule stored in memory unit or storage unit or other methods.

As depicted in operations preferably occur within the OS environment. However these operations need not all occur in the OS environment. For example system firmware may be configured to search for capsules upon initialization in pre defined locations obviating the need for operation to occur within an OS environment. In either case OS exits and returns control of the system to firmware and firmware interface by either unloading itself from memory or preferably by simply rebooting the system.

In operation firmware and firmware interface may unpack and or execute the capsule generated in operation and load applications and drivers contained within during operation of the booting sequence. In one embodiment this operation may include verifying digital signature appended to the capsule file. In operation applications and drivers may be executed to complete the task which was not completed in the OS environment such as scanning for and recovering from a virus. The system need not repeat the task started in the OS environment in its entirety but may employ information contained in the capsule to do so. The system may then indicate the results of operation by storing a status or error code in a file or table that is accessible to OS as shown in operation . The system may then complete the booting process into the OS environment by executing steps in as discussed herein.

In operation once OS has resumed control of the system the application for example the anti virus application may retrieve the status code stored in operation . The application may then display the results of the operations performed both within and outside the OS environment to the user as shown in operation .

In one embodiment operations are performed automatically without user intervention in order to provide the greatest utility and usability to the user.

While some operations and systems herein are described with reference to checking for a virus embodiments may operate on entities other than a virus or not called a virus such as a worm or other undesirable software.

Capsule header may be appended to capsule but is not part of the capsule itself. Rather capsule header may contain a description of the capsule file generated by an application running in the OS environment. This description may include such metadata as capsule size capsule contents capsule identification ID number and various other metadata attributes.

Other or different components may be used within a capsule or software module constructed or used with embodiments of the invention.

Embodiments of the present invention have been described with certain degree of particularity. Those versed in the art will readily appreciate that various modifications and alterations may be carried out without departing from the scope of the following claims 

