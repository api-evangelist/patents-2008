---

title: Visual metering and response to maintain voice quality in a voice over internet protocol call
abstract: A computer implemented method, apparatus, and computer usable program product for managing a voice over Internet Protocol call. A selected set of resources associated with a quality of the voice over Internet Protocol call in a data processing system is monitored during the voice over Internet Protocol call. A determination is made as to whether the quality of the voice over Internet Protocol call in a data processing has fallen below a desired level. A corrective action is performed with respect to the selected set of resources in response to the quality of the voice over Internet Protocol call falling below the desired level.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08358659&OS=08358659&RS=08358659
owner: International Business Machines Corporation
number: 08358659
owner_city: Armonk
owner_country: US
publication_date: 20080102
---
The present invention relates generally to an improved data processing system and in particular to a method and apparatus for processing voice data. Still more particularly the present invention relates to a computer implemented method apparatus and computer program product for monitoring and maintaining voice quality for a voice over Internet Protocol call.

Softphones employing voice over Internet Protocol connections are becoming more and more common. Unlike landline connections a softphone may relay on various elements to ensure a quality of service level.

Voice over Internet Protocol VoIP technology uses package switching capabilities on networks such as the Internet to provide phone service. Voice over Internet Protocol has a number of advantages over a traditional circuit switching telephone network. For example packet switching allows several calls to occupy the same amount of space occupied by a single call in a circuit switch network such as a public switched telephone network PSTN .

Voice over Internet Protocol systems may provide different levels of service. Factors such as latency jitter and packet loss may affect the quality of a particular call. These and other factors may cause calls to become distorted garbled or lost because of transmission errors. Current systems focus on dynamically altering characteristics of the network over which voice over Internet Protocol calls are conducted. These changes include for example dynamically altering packet transmission attributes reserving bandwidth in the network changing the packet size and changing the encoder decoder quality to change the amount of information transmitted from a sender to a receiver.

Therefore it would be advantageous to have a method apparatus and computer program product to overcome the problems described above as well as other problems.

The illustrative embodiments provide a computer implemented method apparatus and computer usable program product for managing a voice over Internet Protocol call. A selected set of resources associated with a quality of the voice over Internet Protocol call in a data processing system is monitored during the voice over Internet Protocol call. A determination is made as to whether the quality of the voice over Internet Protocol call in a data processing has fallen below a desired level. A corrective action is performed with respect to the selected set of resources in response to the quality of the voice over Internet Protocol call falling below the desired level.

With reference now to the figures and in particular with reference to exemplary diagrams of data processing environments are provided in which illustrative embodiments may be implemented. It should be appreciated that are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted embodiments may be made.

As illustrated computers and connect to Internet and computers and connect to local area network . Telephone connects to public switched telephone network in this example. Network data processing system may include additional computers and other devices not shown. Additionally network data processing system also may include other types of networks such as for example an intranet or a wide area network WAN . is intended as an example and not as an architectural limitation for the different illustrative embodiments.

In these different illustrative examples users or operators of computers and and telephone may make calls with each other. Computers and in these examples include software applications to establish these calls using voice over Internet Protocol technology.

These types of applications are also referred to as softphone applications or voice suites. Different illustrative embodiments may be implemented within the software executing on computers and to visually monitor the quality of voice calls and to respond to changes in the quality of the voice calls.

Turning now to a diagram of a data processing system is depicted in accordance with an illustrative embodiment. In this illustrative example data processing system includes communications fabric which provides communications between processor unit memory persistent storage communications unit input output unit and display .

Processor unit serves to execute instructions for software that may be loaded into memory . Processor unit may be a set of one or more processors or may be a multi processor core depending on the particular implementation. Further processor unit may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example processor unit may be a symmetric multi processor system containing multiple processors of the same type.

Memory in these examples may be for example a random access memory or any other suitable volatile or non volatile storage device. Persistent storage may take various forms depending on the particular implementation. For example persistent storage may contain one or more components or devices. For example persistent storage may be a hard drive a flash memory a rewritable optical disk a rewritable magnetic tape or some combination of the above. The media used by persistent storage also may be removable. For example a removable hard drive may be used for persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit is a network interface card. Communications unit may provide communications through the use of either or both physical and wireless communications links.

Input output unit allows for input and output of data with other devices that may be connected to data processing system . For example input output unit may provide a connection for user input through a keyboard and mouse. Further input output unit may send output to a printer. Display provides a mechanism to display information to a user.

Instructions for the operating system and applications or programs are located on persistent storage . These instructions may be loaded into memory for execution by processor unit . The processes of the different embodiments may be performed by processor unit using computer implemented instructions which may be located in a memory such as memory . These instructions are referred to as program code computer usable program code or computer readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or tangible computer readable media such as memory or persistent storage .

Program code is located in a functional form on computer readable media that is selectively removable and may be loaded onto or transferred to data processing system for execution by processor unit . Program code and computer readable media form computer program product in these examples. In one example computer readable media may be in a tangible form such as for example an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage for transfer onto a storage device such as a hard drive that is part of persistent storage . In a tangible form computer readable media also may take the form of a persistent storage such as a hard drive a thumb drive or a flash memory that is connected to data processing system . The tangible form of computer readable media is also referred to as computer recordable storage media. In some instances computer readable media may not be removable.

Alternatively program code may be transferred to data processing system from computer readable media through a communications link to communications unit and or through a connection to input output unit . The communications link and or the connection may be physical or wireless in the illustrative examples.

The different components illustrated for data processing system are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in can be varied from the illustrative examples shown.

As one example a storage device in data processing system is any hardware apparatus that may store data. Memory persistent storage and computer readable media are examples of storage devices in a tangible form.

In another example a bus system may be used to implement communications fabric and may be comprised of one or more buses such as a system bus or an input output bus. Of course the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally a communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. Further a memory may be for example memory or a cache such as found in an interface and memory controller hub that may be present in communications fabric .

The different illustrative embodiments recognize that current systems for maintaining quality of service for voice over Internet Protocol calls have focused on the modification and alternation of network characteristics to improve or maintain a user perceived quality for a call. The different illustrative embodiments recognize that the different presently available systems and techniques do not provide any focus on altering the characteristics of a data processing system on which a voice Internet Protocol call is made.

In these examples program code for different processes in the illustrative embodiments may be found in memory and persistent storage . For example softphone application may be loaded from persistent storage into memory for execution by processor unit . Further graphical user interface may be program code for softphone application to provide a user interface for display to an operator of data processing system . Persistent storage contains quality of service policy which may be used to identify when selected resources within data processing system have exceeded some threshold and require an action to maintain a quality of service for a call.

In addition to executing softphone application and graphical user interface processor unit also may execute other applications in these examples. These other applications may include for example backup processes web browsers email applications instant message clients and word processing programs. Thus the different illustrative embodiments provide a visual indicator to help a user easily identify voice quality and automate processes to make changes when a desired quality for a voice call is absent.

In these examples softphone application monitors a set of resources associated with the quality of the voice over Internet Protocol in data processing system during the voice over Internet Protocol call. Softphone application determines whether the quality of the voice over Internet Protocol call in data processing system has fallen below some desired level.

Also softphone application may provide a visual indication of the quality of the call and resource usage through graphical user interface in these examples. A corrective action may be performed with respect to the selected set of resources in response to the quality of the voice over Internet Protocol call falling below the desired level.

Turning now to a diagram illustrating a graphical user interface for providing a visual indicator of voice quality for a voice over Internet Protocol call is depicted in accordance with an illustrative embodiment. In this example window is an example of a graphical user interface such as graphical user interface in .

In this example window provides a user an ability to identify voice quality and monitor resource usage. Call indicator bar provides a user an ability to identify call quality in a visual manner without having to rely on the other party letting the user know that the user s voice is breaking up during a call. In this example call indicator bar includes three markers excellent good and poor . In this example the call quality is excellent .

The visual representation of the call quality may be derived from one or more measurable attributes of the call such as the number and or proportion of data packets lost the amount or changing proportion of jitter a measure of the inter arrival time of the packets and or the number of bit or packet corruption errors detected. For example more concern is present with the distribution of loss if 90 percent of the loss with within a short period of time as compared to a more even distribution over a longer period of time.

In addition to providing a visual indication of call quality window also may provide an identification resource usage for a set of selected resources. A set of selected resources is one or more selected resources. In this example meters and provide a visual indication of resource usage for a selected set of resources within a data processing system. In this example meter identifies a percent of processor usage meter identifies a percent of memory usage and meter identifies a percent of network usage. Examples of network usage include for example the proportion of voice over Internet Protocol packets compared with the total packages the absolution quantity of voice over Internet Protocol data transmitted over the network interface compared with the maximum that could be transmitted of the network interface the proportion of the capacity consumed that is dedicated to voice over Internet Protocol traffic through such techniques as VLANs RSVP protocols and proportion of voice over Internet Protocol to the total available bandwidth of the network modem adapter. Section in meter is used to indicate when processor usage has reached an amount that affects the quality of the call.

Section identifies when memory usage has reached a level that affects the quality of the call. In this example section identifies a level of network usage that affects the quality of the call.

A user may select adjust button to initiate processes to increase the quality of the call. The user may select this control in response to an indication that the call quality has reached poor . The user also may initiate processes to increase the quality of the call even if the quality is not at the poor level. For example if the quality of the call is between poor and good the user may still initiate the processes in an effort to increase the call quality.

In addition to call indicator bar showing the quality level of the call an additional alert may be presented if the call quality falls below a selected threshold such as good or poor . This additional alert may be an audio or visual alert depending on the particular implementation. Call indicator bar may flash if the call quality falls below a selected threshold. The selected threshold is used to identify when the quality of a call falls below a desired level.

In the different illustrative examples this desired level may be above what a caller would perceive or notice as being poor. In this manner a corrective action may be initiated before the call quality drops below a desired level to maintain the call quality of the call. In other examples the desired level of the call may be at the level when the call perceives problems with the call quality such as noise or dropped portions during the call. Another alert may include for example displaying another graphical indicator to indicate a call quality problem.

In other illustrative embodiments the adjustment of call quality may be performed automatically if the call quality falls below some selected threshold. A user preference may be entered by a user to manually adjust call quality or automatically initiate processes to adjust call quality in these examples.

The illustration of window is presented for purposes of depicting one manner in which visual metering of resource usage and call quality may be implemented. In other embodiments additional sets of resources may be monitored other than processor memory and network usage. Different aspects of resources may be monitored. As an example network usage may be monitored using parameters or metrics such as for example upload speed and percent of packet loss.

Further other graphical indicators may be used in addition to or in place of meters for presenting resource usage. For example an indicator bar similar to call indicator bar may be used to identify the usage of different resources.

In other embodiments a number may be used or a graphical indicator that is displayed in different colors may be used to identify resource usage. In a similar fashion the quality of the call may be presented using other types of graphical indicators other than call indicator bar . Further the presentation of the actual call quality may be based on other levels other than excellent good and poor . For example an identification of the call as being acceptable or unacceptable also may be presented in other implementations.

With reference now to a diagram of a window for adjusting call quality is depicted in accordance with an illustrative embodiment. In this example window is an example of a graphical user interface that may be part of graphical user interface in . In this example window presents corrective actions and . In this illustrative example corrective action allows a user to lower the priority of web browsers while corrective action allows a user to lower the priority of email clients. Corrective action allows a user to stop email replications.

A user may select one of these corrective actions and then select okay button to initiate the corrective action. Depending on the particular implementation a user may select more than one of corrective actions and . If the user does not wish to perform a corrective action the user may select cancel button in these examples.

The different graphical user interfaces presented in are depicted for purposes of illustration and are not meant to limit the manner in which different graphical user interfaces may be implemented to monitor resource usage and indicate call quality.

With reference now to a diagram illustrating a quality of service policy is depicted in accordance with an illustrative embodiment. In this example table is an example of one implementation of quality of service policy in . As illustrated table includes resource column threshold level column and corrective actions column . Resource column identifies a particular resource and or metric that may affect call quality. Threshold level column identifies the percent or level of usage at or over which affects the call quality. Corrective actions column identifies corrective actions that may be performed to lower the usage of a particular resource.

For example entry identifies the resource as being a processor. The threshold level at which the call quality may be considered below a desired level is 75 percent of processor capacity. One action to resolve or lower the usage of the processor is to lower the processor s compute resource priority for office type applications resulting in less processor cycles devoted to office type application processing and more processor cycles devoted to call processing. Entry also is for a processor as the resource. In this example the threshold level over which call quality may degrade is 80 percent.

Different percentages may be present for different entries. The percentages also may be different for different for the same types of entries for different applications or data processing systems. Different applications may have different effects on a data processing system at the same processor utilization because of many factors. The factors include for example their cache foot print and their degree of resource locking. Each vendor of an application may provide in a standard method the threshold value based on their own testing or individual attributes of the application as part of the installation of the application and this rules table would be dynamically built.

The corrective action in this entry is to pause any compression jobs that may be active. Entries and also relate to processors and all have threshold levels of 75 percent. Entry may resolve the usage of processor resources that affect call quality by lowering the priority of web browsers. Entry lowers the priority of email type applications as a corrective action to resolve processor usage. In entry the priority of email and instance message clients are lowered to attempt to resolve processor usage affecting call quality.

Entries and relate to memory usage within a data processing system. In each of these entries a corrective action may be performed if a threshold level of 75 percent of physical memory usage occurs or is exceeded. In entry the corrective action to reduce usage of memory may be to write to the swap file more of the program and application data for web browsers. In entry the corrective action may be to write to the swap file more of program application data for instant messaging clients.

Next entries and are directed towards a network interface utilization uplink. In these examples the threshold level is 66 percent of uplink capacity. Entry includes a corrective action of enabling a quality of service for the voice over Internet Protocol client. Entry stops all large file transfers if the threshold is met or exceeded. Entry stops email replications.

Turning now to a high level flowchart of a process for managing call quality is depicted in accordance with an illustrative embodiment. The process begins by monitoring resource usage step . The monitoring performed in step may be executed using various known processes for monitoring resource usage in a data processing system. The monitoring may be preformed in a number of ways. For example calls may be made to the operating system through dynamic link libraries or application programming interface API calls. Device drivers or other software components may be used that access this information through the operating system or in a manner independent of the operating system.

Status information is presented using the monitored resource usage step . In these examples this status information may be presented through a graphical user interface such as window in . Thereafter a determination is made as to whether the threshold has been exceeded step . This threshold may be for example resource usage or the call quality. If a threshold for resource usage has been exceeded a corrective action is identified step . In step the corrective action may be identified automatically or through user input in these examples.

The process then performs the identified corrective action step with the process then returning to step as described above. The process also returns to step from step if a threshold for resource usage has not been exceeded. In these examples the corrective action may be selected using a quality of service policy such as the one illustrated in table in .

With reference now to a flowchart of a process for monitoring resource usage is depicted in accordance with an illustrative embodiment. The process in may be implemented in a software component such as softphone application in .

The process begins by monitoring a set of selected resources step . A set of selected resources is one or more resources in these examples. The illustrative example monitors processor usage memory usage and network usage. Of course other resources may be monitored in addition to or in place of these depicted resources. For example other resources include for example without limitation upload speed and percent of packet loss.

After monitoring the selected resources processor usage is identifies step and the status of this processor usage is displayed step . Additionally the process from step identifies memory usage step and displays the status of memory usage step . The process also identifies network usage step and displays the status of network usage step from step . These different identifying displaying steps are performed in parallel in these examples.

Displaying the status of processor usage memory usage and network usage in steps and may be performed using a window such as window in . The status of usage of different resources may be displayed using meters such as meters and in .

Thereafter the process applies a policy to the identified usages for the different selected resources step . This policy is applied to generate an identification of the quality of the call. The process then displays the overall quality status for the call step with the process then returning to step as described above. The display of the overall quality status in step may be performed using window in . In particular call indicator bar in may be used to present the overall call quality status.

Turning now to a flowchart of a process for a user controlled corrective action is depicted in accordance with an illustrative embodiment. The process illustrated in may be implemented in a software component such as softphone application in .

The process begins by obtaining an acceptable resource usage range and value in an ordered list of corrective actions for a given out of bounds resource step . In these examples a resource is an out of bounds resource if the resource usage of the resource is equal to or greater than a threshold value. In these examples a resource is considered to be out of bounds when a threshold value is either exceeded or met. Thereafter the process informs the user of the out of bounds resource consumption step . Step may be performed by displaying this information in a graphical user interface such as window in . An alert may be generated in an indicator such as call indicator bar in in these examples.

The user is informed of possible corrective action s step . Step may be implemented using a graphical user interface such as window in . A determination is then made as to whether the user requests a corrective action step . If the user requests a corrective action the process performs the corrective action step .

Afterwards a determination is made as to whether the resource consumption is still out of bounds after the corrective action step . If the resource consumption is still out of bounds a determination is made as to whether all of the corrective actions that are possible for the out of bounds resource have been taken step .

If all of the corrective actions have not been taken the process returns to step to inform the user of possible corrective actions that still remain. If all of the corrective actions have been taken the process informs the user of the results of the corrective action s step . Step may be performed by displaying information in window in . The process terminates thereafter.

With reference again to step if the resource consumption is not longer out of bounds the process proceeds to step as described above. With reference again to step if the user does not request a corrective action the process terminates.

Turning now to a flowchart of a process for rule based corrective action is depicted in accordance with an illustrative embodiment. The process illustrated in may be implemented in a software component such as softphone application in . The process in this illustrative example is performed automatically without requiring user input to initiate corrective actions.

The process begins by identifying an acceptable resource usage range values in an ordered list of corrective actions for the out of bounds resource step . Thereafter the process informs the user of the out of bounds resource consumption step . Step is an optional step and may be implemented using a graphical user interface such as window in . For example an alert may be generated using call indicator bar in through indicating a poor call quality. Additionally an alert may be generated by causing call indicator bar in to flash to gain the users attention.

The process performs the next unperformed corrective action in the list of actions step . Thereafter a determination is made as to whether the resource consumption is still out of bounds step . If the resource consumption is still out of bounds a determination is made as to whether all of the corrective actions in the list have been taken step . If all of the corrective actions have not been taken the process returns to step .

With reference again to step if all the corrective actions have been taken the user is informed of the results of the corrected action s step with the process terminating thereafter. In these examples step is an optional step. The user may be informed of the results through information presented in a graphical user interface such as window in . With reference again to step if the resource consumption is no longer out of bounds the process also proceeds to step as described above.

The flowcharts and block diagrams in the different depicted embodiments illustrate the architecture functionality and operation of some possible implementations of apparatus methods and computer program products. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of computer usable or readable program code which comprises one or more executable instructions for implementing the specified function or functions. In some alternative implementations the function or functions noted in the block may occur out of the order noted in the figures. For example in some cases two blocks shown in succession may be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved.

Thus the different illustrative embodiments provide a computer implemented method apparatus and computer program product for managing a voice over Internet Protocol call. In the different illustrative embodiments a selected set of resources associated with a quality of the voice over Internet Protocol call in the data processing system is monitored during the voice over Internet Protocol call. A determination is made as to whether the quality of the voice over Internet Protocol call in the data processing system has fallen below a desired level. A corrective action is performed with respect to the selected set of resources in response to the quality of the voice over Internet Protocol call falling below the desired level.

With these and other features of the different illustrative embodiments the call quality of a voice over Internet Protocol call may be monitored by a user through a graphical user interface. This provides the user an ability to identify when call quality has fallen below some desired level or threshold level. As a result the call does not have to rely on the other party telling the caller that the call quality has degraded.

Further the different illustrative embodiments also provide a feature that allows a user to maintain the quality of the call through managing resources located on the data processing system on which the softphone application is executing. Resource usage may be managed to reduce resource allocation or usage by other applications or devices to provide the application executing the voice over Internet Protocol call sufficient resources to maintain a quality service for the user.

Although the different illustrative embodiments are directed towards maintaining a quality for a voice over Internet Protocol call the different illustrative embodiments may be applied to other types of critical functions such as for example streaming audio streaming video and any real time communication streams. Also the different illustrative embodiments may be applied to any type of digital voice communication in which voice data is transmitted using packets over a network.

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any tangible apparatus that can contain or store the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device . Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

