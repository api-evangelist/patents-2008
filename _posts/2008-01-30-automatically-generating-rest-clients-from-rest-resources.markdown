---

title: Automatically generating rest clients from rest resources
abstract: The present invention discloses a method and system for creating REST clients using existing REST export information. The invention can provide a wizard able to dynamically generate REST client code. The REST client code can include source code, such as HTML and JAVA SCRIPT starting points that can be further configured by the REST client code recipient. In one embodiment, the automatically created REST client can be a GUI client able to be rendered within a browser. The REST client can include one or more sections, each associated with a particular REST resource. Each resource specific section can include fields for specifying values of each resource parameter. Suitable GUI controls can be associated with each of the fields such as using a checkbox for a Boolean field and a drop down list for an enumerated field.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08375358&OS=08375358&RS=08375358
owner: International Business Machines Corporation
number: 08375358
owner_city: Armonk
owner_country: US
publication_date: 20080130
---
The present invention relates to the field of Web services and more particularly to automatically generating REST clients from REST resources.

Many companies have begun exposing their Web services in a form of Representational State Transfer REST services. Each of the rest services is a URL addressed resource. Users can query these exposed resources through HTTP methods such as GET and POST. REST calls return a response which are often formatted in eXtensible Markup Language XML .

One way to interact with the REST resource is to dynamically build a URL with URL parameters to query the exposed resource an example of which is shown in Prior Art . Specifically shows a URL that queries YAHOO s Geocoding API. The URL includes a base URI portion and a query portion . The query portion can specify values for parameters. The URI portion identifies the REST resource. The URL can cause a related Web service to return results . Standard Web browsers include features to be able to specify the URL and to view results .

Obvious problems exist with accessing a Web service by entering a URL into a Web browser including a user must have the technical knowledge to specify URL s and URL parameters a user must know the URL of a REST resource a user must know what parameters can be specified for the REST resource a user must know a proper means for specifying parameter values. Another less obvious problem is that a typical Web browser can fail to support all REST methods such as PUT POST and DELETE methods.

A way around these problems is to develop a REST client to interface with a set of one or more REST resources. At present developers must manually create code of a Web client. In order to create a REST client a developer must look up details on the use of the Web service exposed as a REST resource to read documentation concerning the service and then to painstakingly create Web clients specifically designed to submit user input commands to the Web service and designed to present service results within the client. Accordingly designing a REST client consumes developer time which incurs a cost.

The present invention discloses a method and system for creating REST clients using existing REST export information. For example a client creation wizard can be included in a software development tool. When the wizard is selected for a specific Web service REST client code can be dynamically generated and made available to a wizard user for deployment of the user s server client. The REST client code can include source code such as HTML and JAVA SCRIPT starting points that can be further configured by the REST client code recipient. In one embodiment the automatically created REST client can be a GUI client able to be rendered within a browser. The REST client can include one or more sections each associated with a particular REST resource. Each resource specific section can include fields for specifying values of each resource parameter. Suitable GUI controls can be associated with each of the fields such as using a checkbox for a Boolean field and a drop down list for an enumerated field.

The present invention can be implemented in accordance with numerous aspects consistent with the material presented herein. For example one aspect of the present invention can include software for interacting with a REST resource. The software can be configured to dynamically generate a graphical REST client given a REST resource.

Another aspect of the present invention can include a method for generating software that interacts with a REST resource. The method can include a step of identifying a REST resource that exposes functionality of a Web service. A request for an interface to remotely interact with the REST resource can be received. Responsive to the received request at least one input parameter for the REST resource can be detected. Source code for a user interface for remotely interacting with the REST resource can be dynamically built. The source code can define at least one input element and can include an interface submission control. A selection of the interface submission control can cause user provided values entered into the input element to be submitted to the REST resource. The built source code can be conveyed to a remotely located computing device from which the request originated.

Still another aspect of the present invention can include a method of obtaining a dynamically generated REST client. In the method a Hypertext Transfer Protocol HTTP request can be submitted to a server. The submitted request can specify a Web service exposed through a REST resource. The server can be configured to dynamically generate a REST client for interacting with the Web service upon receiving the request. Source code for the REST client can be received from the server. The source code can include HyperText Markup Language HTML and object based client side scripting language source code e.g. JAVA SCRIPT code .

It should be noted that various aspects of the invention can be implemented as a program for controlling computing equipment to implement the functions described herein or a program for enabling computing equipment to perform processes corresponding to the steps disclosed herein. This program may be provided by storing the program in a magnetic disk an optical disk a semiconductor memory or any other recording medium. The program can also be provided as a digitally encoded signal conveyed via a carrier wave. The described program can be a single program or can be implemented as multiple subprograms each of which interact within a single computing device or interact in a distributed fashion across a network space.

More specifically user can use a client creation interface to invoke a creation feature of the REST client generator for a developer selected resource . The generator can dynamically generate source code for a REST client able to interact with the selected resource . The code can be conveyed to the computing device which can be part of a software development platform. The user is then able to modify the automatically generated code as desired. Afterwards the user can deploy the code for the REST client upon a Web server which can serve Web pages including ones containing the REST client to authorized users.

Thus software developers can save significant development time over manually creating needed REST clients from scratch. Further less experienced developers can use the REST client generator to develop a usable REST client even if they lack experience knowledge to manually develop the client on their own. Additionally The Web service exposed as a REST resource owner is able to attract more customers to use their REST resources .

In fact in one contemplated arrangement the generator can dynamically generate clients for use by end users lacking software development skills. That is an end user wanting to use a REST resource can use a standard Web browser to interface with the Web service server . These interactions can indicate the user wants to use a feature of a REST resource which causes the client generator to create a REST client . This client can be a browser displayable HTML form which the user can utilize. In the end user situation the server functions as a Web service server having HTML form creation abilities and as an HTML form server.

As used herein REST refers generally to a technique for exposing a Web service as a URL addressable resource. A REST resource need not respond to each of the basic REST primitive commands e.g. GET POST PUT and DELETE but can be designed to only respond to a subset of these commands. For example in any implementations the REST client need only respond to queries e.g. GET that produce displayable results. Of course the REST client created by generator can be designed to issue other commands POST PUT and DELETE to a REST resource which results in an insertion update or removal programmatic action respectively.

One implementation of system can implement a more constrained version of REST where several architectural constraints are imposed that are intended to enhance performance scalability and resource abstraction. These constraints can include a statelessness constraint and cache ability constraint. The uniform interface constraint signifies that all resources present the same interface to clients. Statelessness signifies that servers keep no state on the client s behalf so all requests must carry the pertinent session oriented information. Caching means that clients or intermediaries are permitted to cache responses that servers mark as cacheable which can greatly affect performance in a distributed environment and scalability.

The computing device can be any device capable of interacting with the Web service server and or capable of executing a REST client . For example the computing device can include a personal computer a server a mobile telephone an internet appliance an Internet enabled consumer electronic device a kiosk an embedded computer system and the like.

The client creation interface can be any user interface graphical voice multimodal and the like configured to submit a REST client generation request over network to the Web service server. In one embodiment the request can be an HTTP request. In another embodiment a Web page served by server can be rendered as the interface and can permit REST client requests to be submitted.

The interface can be any user interface graphical voice multimodal and the like able to operate as a REST client to permit user to interact with a Web service exposed by the REST resource . In one embodiment the interface can be a Web browser that renders REST client code served to the browser by a Web server . For example the REST client can be implemented as an HTML based form. In another embodiment the interface can be a Web enabled Widget or Gadget able function as a REST client . Additionally the interface can be an interface of a Rich Internet Application RIA .

Network can include any hardware software and firmware necessary to convey digital content encoded within carrier waves. Content can be contained within analog or digital signals and conveyed through data or voice channels and can be conveyed over a personal area network PAN or a wide area network WAN . The network can include local components and data pathways necessary for communications to be exchanged among computing device components and between integrated device components and peripheral devices. The network can also include network equipment such as routers data lines hubs and intermediary servers which together form a packet based network such as the Internet or an intranet. The network can further include circuit based communication components and mobile communication components such as telephony switches modems cellular communication towers and the like. The network can include line based and or wireless communication pathways.

The data stores and can be a physical or virtual storage space configured to store digital information. Data store and or can be physically implemented within any type of hardware including but not limited to a magnetic disk an optical disk a semiconductor memory a digitally encoded plastic memory a holographic memory or any other recording medium. Each data store and can be a stand alone storage unit as well as a storage unit formed from a plurality of physical devices. Additionally information can be stored within each of the data stores and in a variety of manners. For example information can be stored within a database structure or can be stored within one or more files of a file storage system where each file may or may not be indexed for information searching purposes. Further zero or more of the data stores and can optionally utilize one or more encryption mechanisms to protect stored information from unauthorized access.

A REST resource processed by the generator can include various attributes and parameters . These parameters can also include attributes which impose constraints and further define each parameter. When HTTP Form engine converts the resource into Form . Each parameter can be provided a unique form field . The parameter attributes can define what values are possible for associated fields which permits the value input elements to be tailored. For example a value input element for a field labeled P can be a pull down list containing enumerated elements defined by a parameter specific attribute . When an attribute defines a parameter as a Boolean the input element generated for it can be a check box as shown by Parameter P of form . Different data types defined by attributes can have data type constrained input elements . Further the input elements can be validated and or constrained to only permit acceptable input as defined by the appropriate attribute .

The general resource attributes can also define what capacities are to be provided in form . For example when attributes indicate a resource is able to be retrieved updated added to and deleted execution buttons for these REST methods can be included in form . When attributes indicate that resource is only query able different execution buttons can be added to form such as an execute button or a query button. Results produced when a REST service is executed can be displayed in a result display region of the generated form .

In one embodiment the REST client generator can have multiple options for how a particular component of form is to be generated. For example an enumerated parameter can be implemented as a value constrained text input box as a pull down list as a scrollable element selection control and the like. A configuration engine of the generator can permit an authorized user to specify generation rules preferences. Different preferences can be configured using the configuration engine for different users groups projects and resource types.

As shown in interface each resource can be associated with its own interactive component. For example in one embodiment the interface can be a portal and each REST resource can be implemented as a portlet. In another embodiment each resource can be a detachable internet enabled widget or gadget which can be detachable from a parent interface in which they can be docked. The interface can also implement each REST resource within a single Web page.

Each REST resource can optionally have a number of parameter values which can be associated with interface fields which is shown by interfaces and . In these interface a REST resource labeled Operation can have fields for a name a value and a Boolean . The name is the only required field as indicated by label . The different attributes of the fields including a required or not required attribute can be automatically determined from published data associated with an REST resource which a REST client generator used to generate client . Various validation checks can be built into a client by the client generator such as a check to ensure a value has been supplied in all required fields e.g. name when a user executes a method of the client .

For example interface shows a different type of output produced when an equivalent operation is executed . The interface can be based upon an extension point contained in source code generated by a REST client generator. For example the extension point can be supplied with a certain type of business object and a handler for that business object. The handler can determine how the returned results are displayed. For instance a handler for Map Markers can be implemented as shown in results . That is when the returned results are of a type Map Marker a mapping interface can be presented in interface along with appropriate information. In one embodiment a user can utilize a configuration engine e.g. engine to define handler and presentation options for different types of results produced by a REST resource for the REST client .

Unlike conventional approaches where user defined handlers would be directly coded into a REST client the disclosed solution permits these settings to be established for a client generator so that they are available to any clients generated in a future. It is contemplated that a number of shared configuration libraries can evolve for the REST client generator which can be made available to any software developer to define specific library implemented enhancements to automatically generated REST clients.

The present invention may be realized in hardware software or a combination of hardware and software. The present invention may be realized in a centralized fashion in one computer system or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software may be a general purpose computer system with a computer program that when being loaded and executed controls the computer system such that it carries out the methods described herein.

The present invention also may be embedded in a computer program product which comprises all the features enabling the implementation of the methods described herein and which when loaded in a computer system is able to carry out these methods. Computer program in the present context means any expression in any language code or notation of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following a conversion to another language code or notation b reproduction in a different material form.

This invention may be embodied in other forms without departing from the spirit or essential attributes thereof. Accordingly reference should be made to the following claims rather than to the foregoing specification as indicating the scope of the invention.

