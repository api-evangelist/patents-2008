---

title: Dynamically updating web pages using messaging-oriented middleware
abstract: System, computer implemented method and computer program product for dynamically updating a Web page using browser-based messaging. A system for dynamically updating a Web page using browser-based messaging includes a Web page that includes a plurality of Web messaging tags, and a selected data model that can be bound to the Web messaging tags, and at least one messaging client for accepting at least one message from a message server and for processing the accepted at least one message into the selected data model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09218435&OS=09218435&RS=09218435
owner: International Business Machines Corporation
number: 09218435
owner_city: Armonk
owner_country: US
publication_date: 20080527
---
This application is a continuation of application Ser. No. 11 261 016 filed Oct. 28 2005 now abandoned.

The present invention relates generally to the data processing field and more particularly to a system computer implemented method and computer program product for dynamically updating a Web page using browser based messaging.

The Web has created an incredible growth environment by making business applications easy to deploy manage and access. As a result the Web has replaced the client server model fairly quickly. Based on open standards such as Java J2EE Java 2 Platform Enterprise Edition HTTP Hyper Text Transfer Protocol HTML Hyper Text Markup Language and JavaScript and the ubiquitous browser enterprises are able to open up their backends and create an environment where employees and customers can readily access a variety of applications from any location at any time.

On the other hand however the Web has created a user experience that is considered to be a step backward from what existed in the client server world. There clients enjoyed arbitrary richness as provided by the hosting GUI Graphical User Interface based operating system such as Microsoft Windows . Although Web interfaces can be made very graphical the actual interactivity model is very restrictive. The perceptible performance gap and full screen refreshes between most interactions with the user for instance remain an important issue. ActiveX controls and the like attempt to remedy this in various ways but have failed to gain ubiquitous usage because of issues relating to the development model security performance and compatibility. Only Web pages with HTML DHTML Dynamic HTML CSS Cascading Style Sheets and JavaScript have remained ubiquitous and widely used. Java applets to some extent can perform many tasks on browsers despite the difficulty of accommodating the variety of browsers with different JVMs Java Virtual Machines in use on the Internet as well as security restrictions.

The On Demand Client Browser Framework OBF is a software framework which implements browser based Service Data Objects SDO a Java standard model using JavaScript and includes a set of JavaScript UI widgets as well as a small server side Java library for streaming data. The OBF tries to address many of the interactivity issues raised by the Web but remains rooted in the traditional Web page architecture.

Based on an advanced usage of JavaScript in modern browsers such as IE 5.5 and above Netscape 6 and above and Mozilla 1.x the OBF seeks to create Web pages that last longer . Composed with a dynamic model that packs more data OBF enabled Web pages are able to sustain longer interactions with an end user without requiring roundtrips back to the server. By creating what effectively is an MVC Model View Controller model inside the page a developer is able to define a working data set and a set of controls that dynamically bind to that data. Thus the same data object can be shared among different widgets on the same page.

Consider for example a Web application for managing a user s stock portfolio. In this example stock prices as well as asset allocation percentage of the value of a particular stock in the total portfolio i.e. price shares total value needs to be displayed for users. A scrollable table display of data sometimes referred to as a DataGrid can be used to display asset allocation stock issue volume for example and the current price for a particular stock and a pie chart can also be used to display the same information to a user. This data can be shared by the DataGrid and the pie chart at the same time. When any data object in the model is updated the binding component in the OBF will notify the user interface objects which are bound to the data object to refresh themselves to reflect the latest changes. The user can then interact with the working data set using the set of controls and until a roundtrip back to the server is really necessary e.g. to submit data complete a transaction etc. the user benefits from response times and a freedom to interact with the page that is uncommon in regular Web pages.

While the OBF is able to cache a certain amount of data inside its data model on the Web page at the time of initial page loading and can greatly improve the usability interactivity and responsiveness of Web pages the data set that can be cached is still limited due to client computer memory constraints and incurred initial network delay from downloading a large data set. In addition OBF enabled Web pages lack an intrinsic facility for keeping the Data Objects current while they are on the user s screen. The above described Web application of a stock portfolio is a good example of this. In this case stock prices are changing with time and the Web pages have to be updated to keep up with the changes. In a standard Web application data on a Web page can only be updated if the entire page is re retrieved from the server. This is inefficient in that it requires a round trip of a request response pair for each data refresh and also loses any updates the user may have made on a different part of the same page.

In the OBF one way of updating data in the model is made possible by using a browser based WebService control. However a user has to initiate a WebService call to update a data page by clicking a button or hyperlink on a Web page. It essentially is a pull based model which requires user actively seeking the data and refreshing the Web page often.

A competitor of the OBF is AJAX. AJAX stands for Asynchronous JavaScript and XML Extensible Markup Language a term describing a Web development approach to creating interactive Web applications using a combination of technologies 

The technologies used by AJAX have been available since 1997 however several recent high profile offerings from Google are AJAX applications including Gmail Google Maps Google Groups etc. This has helped raise the profile of the technique and has made AJAX more popular among Internet developers.

Related to AJAX a known solution of browser based messaging is provided by ActiveMQ through its REST API Application Program Interface . ActiveMQ is an open source JMS 1.1 provider and messaging middleware. AJAX support in ActiveMQ builds on top of the REST connector for ActiveMQ which allows Web capable devices to send or receive messages over JMS Java Message Service .

Although OBF and AJAX share the same goals towards improving the usability of Web applications and use many of the same technologies such as JavaScript HTML DOM Document Object Model CSS etc. there are considerable differences between them. OBF is well architected using an MVC model on Web pages as described above with the model bound to widgets thus allowing data sharing among widgets. By doing so there is a clean separation between the data model and widgets. Any data update from the Web server is always made against the model. The model can be bound to any widget. With tooling help Web page development using OBF can be made very flexible and easy to drag and drop. In contrast there is no formal MVC model in AJAX which uses XML as its data storage. The Web messaging of ActiveMQ uses XmlHttpRequest to make calls on the REST API to send and receive messages and then an AJAX JavaScript library will manipulate the messages for presentation without involving a data model.

There is accordingly a need for a system and computer implemented method for dynamically updating a Web page using browser based messaging to improve the usability and interactivity of Web applications.

The present invention provides a system computer implemented method and computer program product for dynamically updating a Web page using browser based messaging. A system for dynamically updating a Web page using browser based messaging comprises a Web page that includes a plurality of Web messaging tags and a selected data model that can be bound to the Web messaging tags and at least one messaging client for accepting at least one message from a message server and for processing the accepted at least one message into the selected data model.

With reference now to the figures depicts a pictorial representation of a network of data processing systems in which aspects of the present invention may be implemented. Network data processing system is a network of computers in which embodiments of the present invention may be implemented. Network data processing system contains network which is the medium used to provide communications links between various devices and computers connected together within network data processing system . Network may include connections such as wire wireless communication links or fiber optic cables.

In the depicted example server and server connect to network along with storage unit . In addition clients and connect to network . These clients and may be for example personal computers or network computers. In the depicted example server provides data such as boot files operating system images and applications to clients and . Clients and are clients to server in this example. Network data processing system may include additional servers clients and other devices not shown. Specifically clients may connect to any member of a network of servers which provide equivalent content.

In the depicted example network data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial government educational and other computer systems that route data and messages. Of course network data processing system also may be implemented as a number of different types of networks such as for example an intranet a local area network LAN or a wide area network WAN . is intended as an example and not as an architectural limitation for different embodiments of the present invention.

With reference now to a block diagram of a data processing system is shown in which aspects of the present invention may be implemented. Data processing system is an example of a computer such as server or client in in which computer usable code or instructions implementing the processes for embodiments of the present invention may be located.

In the depicted example data processing system employs a hub architecture including north bridge and memory controller hub MCH and south bridge and input output I O controller hub ICH . Processing unit main memory and graphics processor are connected to north bridge and memory controller hub . Graphics processor may be connected to north bridge and memory controller hub through an accelerated graphics port AGP .

In the depicted example local area network LAN adapter connects to south bridge and I O controller hub . Audio adapter keyboard and mouse adapter modem read only memory ROM hard disk drive HDD CD ROM drive universal serial bus USB ports and other communications ports and PCI PCIe devices connect to south bridge and I O controller hub through bus and bus . PCI PCIe devices may include for example Ethernet adapters add in cards and PC cards for notebook computers. PCI uses a card bus controller while PCIe does not. ROM may be for example a flash binary input output system BIOS .

Hard disk drive and CD ROM drive connect to south bridge and I O controller hub through bus . Hard disk drive and CD ROM drive may use for example an integrated drive electronics IDE or serial advanced technology attachment SATA interface. Super I O SIO device may be connected to south bridge and I O controller hub .

An operating system runs on processing unit and coordinates and provides control of various components within data processing system in . As a client the operating system may be a commercially available operating system such as Microsoft Windows XP Microsoft and Windows are trademarks of Microsoft Corporation in the United States other countries or both . An object oriented programming system such as the Java programming system may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system Java is a trademark of Sun Microsystems Inc. in the United States other countries or both .

As a server data processing system may be for example an IBM eServer pSeries computer system running the Advanced Interactive Executive AIX operating system or LINUX operating system eServer pSeries and AIX are trademarks of International Business Machines Corporation in the United States other countries or both while Linux is a trademark of Linus Torvalds in the United States other countries or both . Data processing system may be a symmetric multiprocessor SMP system including a plurality of processors in processing unit . Alternatively a single processor system may be employed.

Instructions for the operating system the object oriented programming system and applications or programs are located on storage devices such as hard disk drive and may be loaded into main memory for execution by processing unit . The processes for embodiments of the present invention are performed by processing unit using computer usable program code which may be located in a memory such as for example main memory read only memory or in one or more peripheral devices and .

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the present invention may be applied to a multiprocessor data processing system.

In some illustrative examples data processing system may be a personal digital assistant PDA which is configured with flash memory to provide non volatile memory for storing operating system files and or user generated data.

A bus system may be comprised of one or more buses such as bus or bus as shown in . Of course the bus system may be implemented using any type of communications fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. A communications unit may include one or more devices used to transmit and receive data such as modem or network adapter of . A memory may be for example main memory read only memory or a cache such as found in north bridge and memory controller hub in . The depicted examples in and above described examples are not meant to imply architectural limitations. For example data processing system also may be a tablet computer laptop computer or telephone device in addition to taking the form of a PDA.

The present invention is directed to a system computer implemented method and computer program product for dynamically updating a Web page using browser based messaging in order to improve the usability and interactivity of Web applications. According to an exemplary embodiment of the present invention Web page content is dynamically updated with On Demand Client Browser Framework OBF enabled Web pages. More particularly On Demand Client ODC enabled Web page data models are updated using a new technique referred to as Web Messaging that reduces round trips to a Web server by employing a publish subscribe message broker to push updates to a client.

Real time update of data that changes often in a page is more efficient via push mode than an entire page refresh and also allows for the preservation of local user changes and is more user friendly than updating via Web Service. Web Messaging is an extension of the publish subscribe messaging system and employs a different paradigm from that of Web Service. The publish subscribe messaging model is a push based model where messages are automatically broadcast to users for example as Web pages without the users having to issue requests for new messages.

According to an exemplary embodiment of the present invention a Web Messaging control comprising several JSF Java Server Faces tags enables end users to access publish subscribe messaging systems from Web browsers and allows data on Web pages to be dynamically updated. JSF is a user interface UI framework for Java Web applications and a new J2EE Standard. JSF is designed to significantly ease the burden of writing and maintaining Java Web applications and includes a set of controls including common Web controls command button input text radio button etc. and extended controls Data table TabbedPanel RichText FileUpload and related infrastructure. These JSF tags for Web Messaging can be deployed on a Web page using JSF tooling and allows a Web developer to configure the control specifying messaging server port number message topic and attributes etc. wherein the JSF tags include a set of Java programs for generating necessary JavaScript and HTML code as well as JavaScript library includes on Web pages.

According to a further exemplary embodiment of the invention a computer program product stored on a computer usable medium is provided that will update the OBF model on a Web page by pushing real time information from a messaging system. The messaging data will then be rendered using JSF UI controls such as DataGrid and InputText etc. . This cleanly separates the population of a data model from rendering the data on a JSP JavaServer Pages .

According to a further exemplary embodiment of the invention a message published on a Messaging server is transported to a Web page processed and the model updated on the page which eventually will cause UI widgets to refresh themselves due to binding and will allow end users to see data changes in the Web application. As will be explained more fully hereinafter two flavors of Web Messaging implementations are supported according to exemplary embodiments of the invention including Java Applet and JavaScript Web messaging clients.

According to yet another exemplary embodiment of the present invention a method is provided for deploying an application that allows data to be dynamically updated on a Web page. The method includes providing a computer infrastructure operable to update a data model on a Web page that can generate necessary HTML and JavaScript code and that includes JavaScript library or Java Applet wherein JavaScript or Java Applet code can transport a message published on a messaging server to a Web page process the message and update the model on the page which will eventually cause the UI widgets to refresh themselves due to binding.

As was briefly discussed above the OBF is able to cache a certain amount of data inside its data model on a Web page at the time of initial page loading and can greatly improve the usability interactivity and responsiveness of Web pages. OBF enabled Web pages however lack an intrinsic facility for keeping Data Objects current while they are on a user s screen. In the exemplary Web application of a stock portfolio described previously stock prices change with time and the Web pages have to be updated in order to keep up with the changes.

The Web Messaging architecture is generally designated by reference number . An end user at one of browser clients has requested OBF enabled Web page which displays his her stock portfolio information. As a result a Java Server Page JSP with a data grid showing portfolio composition with current stock prices as well as a pie chart graphically displaying the same information is downloaded from Web server . At the same time necessary JavaScript code included with Web Messaging control is generated and downloaded along with the rest of OBF enabled Web page . Web Messaging control on OBF enabled Web page establishes a connection with Messaging server based on the configuration port number and topic etc. set up on the page by a Web application developer.

Publisher continuously publishes stock prices through Messaging server . Messaging server broadcasts the messages to its message clients based on their topic subscriptions in this case Web browser clients . Web Messaging control on OBF enabled Web page processes the messages and updates the OBF model on the page. Eventually the end user will be able to see the stock prices updating automatically.

According to exemplary embodiments of the present invention two flavors of Web Messaging implementations are provided namely JavaScript and Java Applet Web messaging clients and a Web developer can choose between them based on their environment and requirements. A Web developer however will only have to deal with the same set of JSP tags or HTML tags by setting up slightly different parameters on one of the tags. An end user will not readily see the difference between the two configurations.

Immediately below JSF tooling is WebMessaging JSF tag runtime implementation which is a very thin layer and delegates most of the rendering work to the layer below it namely WebMessaging Java emitter . WebMessaging Java emitter exports all necessary JavaScript code for WebMessaging control.

OBF WebMessaging control JavaScript layer handles interfacing with the OBF model as well as layers below. At the startup of a Web page data in the OBF model is used to configure message topics which in turn is used for message subscription. WebMessaging control is bound with the OBF model. When any object whose parent is bound to the message topic templates is created or deleted an event is fired to add or remove message subscriptions. If any attribute of a model object which is used to make up the message topic by substituting tokens inside topic templates is updated an event is also fired to remove the old topic if no more subscriptions exist for the topic and to add a new message topic if the topic has not yet been subscribed. This layer also tracks the relationship between topics and model objects. When a message arrives the right model object s will be updated based on this mapping.

WebMessagingConnection common JavaScript interface layer is designed to provide a uniform JavaScript interface for Web Messaging regardless of whether the user decides to use a JavaScript or Applet Messaging client type which is linked to different Messaging servers. Based on the flag messaging type passed down from layers above this layer will set up necessary resources. If the Applet Messaging client type is used an applet will be instantiated here. This layer can also directly serve the common interface for HTML annotation JavaScript for Web Messaging as shown in .

At the bottom based on the flag messaging type either WebMessaging Java Applet layer using WebSphere Business Integration WBI Event Broker or WebMessaging JavaScript layer using Whitewater messaging engine is used to connect with backend messaging systems. These two options will be discussed more fully below.

WebMessaging Java Applet supports a set of publish subscribe messaging actions to communicate with backend WBI Event Broker . WebMessaging Java Applet enables both a real time update of Web pages with messages from WBI Event Broker and the publication of messages to the broker.

WebMessaging Java Applet uses a specialized subset of the standard JMS API to maximize the JMS functionality that is available while limiting the applet and supporting class download size to approximately 100 kilobytes. The messaging support classes are contained in the file minimal.zip which is distributed with the applet and is made available in the application project. Although JMS supports many types of messages Web Messaging uses only standard String JMS message properties for subscriptions. This technique facilitates mapping of fields within messages to browser model data or Web page elements.

WebMessaging Java Applet only provides a set of APIs that the JavaScript layer above can call and expects a callback handler. The callback handler will be a JavaScript object which represents common WebMessaging JavaScript interface object above. When a message arrives the applet calls the handler so that the OBF model will be updated.

The overall JavaScript client component comprises essentially two sub components a client JavaScript library in WebMessaging JavaScript layer and a protocol handler embedded in messaging engine . The JavaScript client provides the client side functionality required to interact with the server side protocol handler and hence provides topic based messaging services to Web applications. The client library is supplied in a .js file that can be referenced by an HTML document and processed by a Web browser. The library includes core messaging functionality such as connect send addConsumers and disconnect and the ability to register callback functions such that message event driven programming can be achieved in the JavaScript environment.

According to an exemplary embodiment of the present invention the library also includes optional layer on top of the basic messaging API to provide HTML annotation Web Messaging capability in the client browser. HTML annotation Web Messaging allows a page developer to directly annotate HTML elements in a page with topic names such that contents of those elements can be populated with message driven data in the user s browser client.

It should be appreciated that while exemplary embodiments of the present invention are described herein with reference to updated Web pages using Web Messaging in an On Demand Client Browser Framework OBF environment the techniques described herein could also be applied in other client based processes that requires data updating without departing from the scope of the present invention.

It should also be appreciated that the Web browser the OBF enabled Web page and the Web Messaging control may be stored in computer system memory such that the functional components of the OBF enabled Web page are provided as a computer program product. The present invention can also be offered as a method on a subscription or fee basis. For example the OBF Web page and the Web Messaging can be created maintained supported and or deployed by a service provider that offers the functions described herein for customers. That is a service provider can be used to provide OBF enabled Web pages with Web Messaging as described above.

The present invention thus provides a system computer implemented method and computer program product for dynamically updating a Web page using browser based messaging. A system for dynamically updating a Web page according to an exemplary embodiment of the present invention includes a Web page that includes a plurality of Web messaging tags and a selected data model that can be bound to the Web messaging tags and at least one messaging client for accepting at least one message from a message server and for processing the accepted at least one message into the selected data model.

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any tangible apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

