---

title: File location application programming interface
abstract: Media, methods and systems are provided for interfacing a mobile device to an application virtual machine via an application programming interface (API). A first set of file connection properties for one or more internal storage locations and a second set of file connection properties for one or more external storage locations are defined at a mobile device. The first and second sets of file connection properties define the file storage locations for a plurality of media types. Requests are received from the application virtual machine for the first and second sets of file connection properties. The application virtual machine identifies a current default storage area that can be selected from the one or more internal storage locations and the one or more external storage locations, and indicates whether the current default storage location is an internal storage location or an external storage location.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08762429&OS=08762429&RS=08762429
owner: Sprint Communications Company L.P.
number: 08762429
owner_city: Overland Park
owner_country: US
publication_date: 20080709
---
Many mobile devices today such as cellular phones and personal data assistants PDAs use the Java 2 Platform Micro Edition J2ME framework as an underlying platform. This framework is prevalent for use with devices that are unable to take full advantage of other platforms such as Java Standard Edition because of resource limitations like reduced memory capacity interface limitations etc. However even with such constraints each edition of the framework must meet standards that are regularized in response to a Java Specification Request JSR . Through the Java Community Process JCP updated versions optional packages and newly found needs can be codified. Basic and optional specifications allow users foundational device capabilities as well as the ability take advantage of web services. Such APIs enable web functions such as secure and trustworthy connections and wireless online payments. Another burgeoning area of optional packages is apparent in the combination of cellular phones and PDAs with previously separate devices such as cameras music players and global positioning system GPS devices. Mobile media device location three dimensional 3D graphics and advanced multimedia functions are just a handful of the illustrative specifications. However the focus in some specifications on resource limited devices results in providing standardization of the internal memory locations only. Thus as components and ports advance such as input output I O components and I O ports so too does the complexity of managing interactions. To illustrate the case the rise of cellular phones with picture taking capabilities was quickly developed and has been equally as rapidly adopted by users. However the first camera phone combinations were simply capable of capturing a limited number of very low resolution images. As the quality of the images improved so did the desire to store or print these pictures. The resulting need is the ability to save in another location for instance on a removable medium on a more sophisticated computer or at a web accessible location. This requires extending the capabilities compliant devices by adding file accessing options that take into account more sophisticated mobile devices.

Embodiments of the invention are defined by the claims below. A high level overview of embodiments of the invention is provided.

In a first embodiment computer readable media provide for flexibly accessing file structures for operations between an application virtual machine and a mobile device. At the application virtual machine the media include instructions for requesting a first set and a second set of file connection properties on a mobile device. The first set includes internal location properties on the mobile device that are configured to return to the virtual machine values for one or more requested locations of internal storage on the mobile device. The second set includes location properties on the mobile device that are configured to return to the virtual machine values for one or more requested locations of external storage in communication with the mobile device. A storage location is identified as selected from storage locations included in the first and second sets of file connection properties. Whether the identified storage location is an internal storage location or an external storage location is indicated to the virtual machine.

In a second embodiment a method provides system properties for filepath identification from a mobile device to an application virtual machine via an application programming interface API . The method includes defining at the mobile device a first set of file connection properties for one or more internal storage locations and a second set of file connection properties for one or more external storage locations. The first and second sets of file connection properties define the file storage locations for a plurality of media types. A request is received from the application virtual machine for the first and second sets of file connection properties. The application virtual machine identifies a current default storage area that can be selected from the one or more internal storage locations and the one or more external storage locations and indicates whether the current default storage location is an internal storage location or an external storage location.

In a third embodiment a system is provided for interfacing application virtual machines in a consistent manner with a mobile device. The system includes a mobile device an application programming interface API and at least one application virtual machine. The mobile device includes one or more data structures containing file connection properties for a plurality of internal storage locations and a plurality of external storage locations. The API communicates file connection requests between the mobile device and the application virtual machine utilizing the file connection properties. The one or more application virtual machines include one or more components utilized to communicate requests and responses regarding the file connection properties to the mobile device.

Embodiments of the invention provide methods media and systems for interfacing application virtual machines VMs with mobile devices. More particularly embodiments allow users and developers to access memory locations that were not previously available through default settings chosen by the individual mobile device manufacturer. Improving the application programming interface API that provides file connection properties to the application VMs allows file storage options beyond the system s default folder. Another improvement under this approach stems from identifying the default option as an internal or external location so that a user or developer is aware of what file directory they are or will be accessing. In this way the user is more aware of the memory location in which he or she is storing a file or from which he or she is accessing a file. Additionally developers are given leeway to more flexibly implement code with allowed file type folders in mind. By encouraging use of synonymous file structures that is to say folders that are not device specific but are routed to a device s default internal location through a common naming convention such code development is more consistent across device and application manufacturers.

Throughout the description of the present invention several acronyms and shorthand notations are used to aid the understanding of certain concepts pertaining to the associated system and services. These acronyms and shorthand notations are intended to help provide an easy methodology of communicating the ideas expressed herein and are not meant to limit the scope of the present invention. The following is a list of these acronyms 

Further various technical terms are used throughout this description. An illustrative resource that fleshes out various aspects of these terms can be found in Newton s Telecom Dictionary by H. Newton 24th Edition 2008 .

Embodiments of the invention include among other things a method system or computer program product. Accordingly the embodiments may take the form of a hardware embodiment a software embodiment or an embodiment combining software and hardware. In one embodiment the invention takes the form of a computer program product that includes computer useable instructions embodied on one or more computer readable media.

Computer readable media include both volatile and nonvolatile media removable and nonremovable media and contemplates media readable by a database a switch and various other network devices. By way of example and not limitation computer readable media comprise media implemented in any method or technology for storing information. Examples of stored information include computer useable instructions data structures program modules and other data representations. Media examples include but are not limited to information delivery media RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile discs DVD holographic media or other optical disc storage magnetic cassettes magnetic tape magnetic disk storage and other magnetic storage devices. These technologies can store data momentarily temporarily or permanently.

The figures in general will use similar numbering conventions from figure to figure where practical to show like or substantially similar features. With regard initially to an exemplary operating environment for implementing embodiments of the invention is shown and designated generally as mobile device operating environment alternatively referred to as mobile device . Mobile device is but one example of a suitable mobile environment and is not intended to suggest any limitation as to the scope of use or functionality of the invention. Neither should mobile device be interpreted as having any dependency or requirement relating to any one or combination of modules or components illustrated.

Embodiments may be described in the general context of computer code or machine useable instructions including computer executable instructions such as program modules being executed by a cellular phone a personal data assistant or other handheld mobile device. Generally program modules including routines programs objects modules data structures and the like refer to code that performs particular tasks or implement particular data types. Embodiments may be practiced in a variety of system configurations including hand held devices consumer electronics specialty computing devices etc.

With continued reference to mobile device includes a bus that directly or indirectly couples the following components one or more processors memory one or more presentation components input output I O components I O ports and an illustrative power supply . Bus represents what may be one or more busses such as an address bus data bus or combination thereof . Although the various blocks of are shown with lines for the sake of clarity in reality delineating various modules is not so clear and metaphorically the lines would more accurately be grey and fuzzy. For example one may consider presentation components such as a display screen to be an I O component. Also processors have memory. The inventors hereof recognize that such is the nature of the art and reiterate that the diagram of is merely illustrative of an exemplary mobile device that can be used in connection with one or more embodiments. Distinction is not made between such categories as web enabled cellular phone personal data assistant etc. as all are contemplated within the scope of and reference to mobile device. 

Mobile device typically includes a variety of computer readable media. By way of example and not limitation computer readable media may comprise Random Access Memory RAM Read Only Memory ROM Electronically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technologies CDROM digital versatile disks DVD or other optical or holographic media magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices carrier wave or any other medium that can be used to encode desired information and be accessed by mobile device .

Mobile device includes one or more processors that read data from various entities such as memory or I O components . Memory includes computer storage media in the form of volatile and or nonvolatile memory. Memory may be removable non removable or a combination thereof. Exemplary devices for memory include solid state memory hard drives optical disc drives etc. Presentation components present data indications to a user or other device. Exemplary presentation components include a display screen speaker vibrating module etc. I O ports allow mobile device to be logically coupled to other devices including I O components some of which may be built in. Illustrative components include a keyboard microphone cursor or focus movement buttons satellite devices touch pad or touch screen scanner etc.

The mobile devices understood to be compatible with mobile device above can use the Java 2 Platform Micro Edition J2ME framework as an underlying platform. As discussed above a Java Specification Requests JSR is part of the standardization process for this platform. One basic specification is JSR 30 which was developed as a first minimum library set needed to enable the use of virtual machines VMs . This specification implements what is also known as version 1.0 of the Connected Limited Device Configuration CLDC . The specification and its update JSR 139 for CLDC 1.1 are concerned with the most resource constrained devices such as low memory cell phones and pagers. Another such foundational specification is that describing the Mobile Information Device Profile MIDP which provides a graphical user interface GUI API as part of JSR 37. This aspect of the overall platform has also been updated in the form of JSR 118 which is directed to MIDP 2.0. Mobile device is able to utilize these standards or specifications that are compatible with these specifications.

A block diagram representing interaction of certain components of mobile device according to embodiments of the invention is depicted in greatly simplified form and will be described below. More specifically this diagram represents the interaction of a mobile device s operating system with application virtual machines within memory components of the device. Between these two components are application programming interfaces that enable various component functions provide access for other memory locations and generally enable applications to be used on the device.

Turning now to memory is not intended to contain only the data structures and modules shown but is simplified for the ease of illustration. Processor and busses will be integrally involved in the reading and writing of data stored within memory . Again for the sake of clarity an operating system is shown as a discrete component or module in communication with three memory locations and and application programming interfaces . Memory locations and are not meant to limit the present embodiments to memory having only three addressable locations outside of the other modules and components. This is illustrative in nature. Memory may have thousands or millions of storage locations depending on the resources of the device.

Continuing with three application virtual machines VMs are shown numbered as a VM a VM and a VM . These can be Java application virtual machines that carry out any type of tasks manipulating files of different media types. For mobile devices that use the J2ME platform these applications are known as MIDlets. Looking at the exemplary applications in VM may be a utility MIDlet that allows a user to upload photos for use as the GUI wallpaper image. As another example VM could be a utility application for the download of ringtones and other audio clips. As a final illustration VM could be a video game designed for the J2ME platform. These are exemplary applications that are common to the devices described above and below and should not be construed as limiting the scope of the present invention. Instead all applications consistent with the J2ME platform are contemplated within the scope of the described embodiments.

In the application VMs are in communication with a set of application programming interfaces APIs so that the applications may properly interact with operating system and memory storage locations . APIs will include some or all of the JSR compliant APIs described above including foundational specifications such as JSRs 30 or 139 for VM enablement and 38 or 117 for GUI and assorted other functions. Other specifications that may be necessary for the operation of mobile device have been omitted for the sake of clarity and many specific optional packages will not be described. However APIs will include at least one package that improves upon an optional API found in JSR 75. The optional interface known as the File Connection Optional Package FCOP specifies the requirements for two aspects on devices that have become commonplace in the mobile environment. The first is file connection that is the ability to provide access to file structures on the mobile device. Mobile devices although constrained compared to more sophisticated devices like desktop and laptop computers increasingly have available memory for various functions. Also described in JSR 75 are capabilities for Personal Information Management PIM which provides the access to typical device data such as address books calendars lists etc. Again while not as complex as some computers mobile devices have become increasingly relied upon to store vital information. The combination of these two features allows a device to read and write to storage locations on the device such as to memory locations . The FCOP does not perform the necessary functions to enhance external memory options and to seamlessly integrate these options so that users can take advantage of them to their fullest extent. The JSR 75 focus on resource limited devices results in providing standardization of the internal memory locations only. This requires extending the capabilities of JSR 75 compliant devices by adding file accessing options that take into account the more sophisticated mobile devices now available.

Extending file connection capabilities may be achieved by providing standardized implementations in the APIs. Thus a file connection API that allows for universal exposure of the file structures in use would improve the current J2ME specification. Some embodiments of the invention accomplish this by providing public string properties enumerated explicitly for the applicable internal or external locations. In doing this each application VM is then able to access the correct directory or file location in order to further extend the device s functionality. These enumerated locations could be divided in a number of ways. Because different components of the device will only be involved with specific types of files photo files for use with the picture taking components for instance one manner in division can be by file type. Therefore both internal and external file connection locations can be listed as those appropriate for photos videos audio files messages etc. These divisions are arbitrary and could be further divided if appropriate. For example audio information may be divided further into music ringtones and recordings each appropriate for only some of the applications that use audio files.

Of course there are other methods of dividing the directories that are needed by an application into locations that must be exposed for efficient file connection. Another example is seen by applications that seek file connections relative to those previously utilized. When on a sophisticated computing device applications will try to access files for opening saving and closing according to a specified scheme. Thus a word processing application may always attempt to open files from a directory contained in the application s folder space. Alternatively the application may be instructed to access files from the last folder to which information was saved or the last folder from which information was read. If there is not information available to direct the application to one of these folders then a default location may be utilized as a back up option. With the increasing need to access and store files on mobile devices such a scheme would also be beneficial to the use and enjoyment of the device. Thus any time a camera phone has written an image file to an external location it may be desirable to access the same directory for the next image writing operation.

Three exemplary sets of file connection properties will now be described as may be utilized with embodiments of the invention. The file connection properties are stored on the mobile device and accessed by the improved application programming interface to extend the capabilities of previously described application virtual machines. Requests by a VM result in the API examining a property that may be stored in the form of a string value. The string values give storage locations to which the application should attempt to connect for file access. These properties can be based upon recent application operations internal locations or external locations.

Now describing The components depicted are shown in a memory . Memory includes application programming interfaces and an application virtual machine . Also included is a superset of file connection properties that represent all of the file connection properties available to all applications of the device. The size of file connection properties is not meant to convey a proportional allocation of memory space. File connection properties can be seen to have three groups that each make up a subset of properties . The first group represents a default directory a previous use directory a previous read directory and a previous write directory . At these locations variables are defined that return the filepath used incident to some previous file accessing operation such as the last time an application had to read from a directory as in the case of previous read directory . An example of this may be a specified file path to a particular directory structure on the mobile device. Alternatively it may be a specified path to a file folder on a removable medium such as a secure digital SD card. SD cards are non volatile memory cards developed for use in a variety of portable devices. Returning to the set of file connection properties described above write operations unspecified file access of any type and a default filepath all are included as potential properties that are exposed to the requesting application VM.

The second and third sub sets of file connection properties are divided into two categories and mirror one another internal media file type directories and external media file type directories. The internal set represents a photo directory video directory audio directory and a message directory . As previously mentioned these file connection properties can be useful for applications that only manipulate a single type of file. For example an image capturing component i.e. a camera may be able to ignore directories used for video audio and messaging. Thus the VM for this application may only need to discover the file connection properties for photo directory . This can be as simple as a request to retrieve the property value which may be stored as a string value e.g. fileconn.dir.internal.photos for the internal file connection properties. This request by the application results in the API returning a publicly accessible string value as mentioned previously such as internal photos as one example. For particularly ubiquitous directories like an internal photos or images folder may be considered for a camera equipped phone a synonymous directory may be provided. This type of directory is simply a naming convention that adds an additional translation step to the connection discovery process. An example of this would be the naming convention in many camera equipped cellular phones that utilizes manufacturername photos rather than the internal external designation. Here the previously used example of internal photos would be automatically redirected to file connection properties with the device manufacturer s name inserted. Standardization would not require the device producers to discontinue using their company names as part of the filepath simply an added layer of processing by the application would be necessary.

Continuing with the external file connection properties group has a similar set depicted at directories respectively. The same types of files can be used but as mentioned above these could be further subdivided. As an example videos directory could be further delineated by device recorded videos for mobile devices with such capabilities and loaded content such as television movies etc. Audio directory could also be sub divided by music ringtones recordings and the like. The possibilities of external properties are in some ways more easily defined and in other ways more limitless. As one example SD cards may be one removable means used to store data. However regardless of the particular card in use the filepath will reflect the directories location at the removable card reader. Thus a request for the properties of fileconn.dir.external.photos may simple return SD card photos to denote the I O port that connects to the card slot. As a more varied example it is possible to read and write to web accessible locations. This can allow a user to upload or download multi media files from any internet page available to the mobile device. Take the instance of so called social networking web sites that offer profile pages along with the upload and download of photos music files etc. While the actual directory structure itself is dependent only on the standard conventions associated with internet accessibility the convention available for reading or writing from such a site may be quite simple. The request for an external photos file connection property may return a value that is tagged as a universal resource locator URL followed by the address to which or from which files are accessed at the social networking site.

The remaining discussion will focus on methods of interaction and processes of interfacing components according to embodiments of the invention. A first method involves the request of file connection properties by an application and the reception of those properties via the improved API. Current operations have properties identified by the API which also indicates whether the properties are internal or external. A second and third method are performed by an improved API to determine what connection properties are known and returning those values. In the event that connection properties cannot be determined default settings are passed from the mobile device to the application virtual machine.

Turning now to steps for performing a method of interfacing application virtual machines and a mobile device is shown. At a step a command is received that requires file access. Embodiments of the invention perform a step where a request is made by a virtual machine to return file connection properties from memory. This could be a request to retrieve a file save a file or otherwise directly or indirectly manipulate the file such as through a moving copying or deleting operation. In accordance with embodiments of the invention the file connection properties are received via an improved J2ME File Connection API at a step . This allows either an internal or external property to be returned. Access also can be determined by such properties as last used last read or last written filepaths or the always available default value.

At a step the file connection properties for the current operation are identified. Again this can be selected from internal external or previous operation properties stored at the mobile device. These properties are returned to the application VM such as an application VM . Because the API now extends the capability of file access to internal or external locations at a step an indication as to whether or not the file connection properties are internal or external is given to the virtual machine. For conventions that do not differentiate these structures MyPhotos as an example this indication allows the user to determine whether or not the file have been read from written to or otherwise accessed from a local or external source. A step is performed by the mobile device to execute the operation with the selected file connection properties.

Turning now to steps for performing methods of providing file connection properties are shown according to embodiments of the invention. A command is received at a step wherein the command requires file access. At a step a determination is made as to whether or not the last operation is known. If it is known a step is performed where a determination is made as to whether the command executed was a read or write operation. A read operation results in providing the last read file connection properties to a virtual machine as seen at a step . A write operation naturally results in providing last write file connection properties at a step . If the last operation is unknown whether or not a last use is known is determined at a step . If the last used directory is known a step is performed whereby the last used file connection properties are provided to the VM. If the required information is unknown at step a step is performed which intuitively provides the default file connection properties.

Looking now at steps of a method of differentiating filepath access are depicted according to embodiments of the invention. At a step a command that requires file access is received. At a step whether the file access is internal external or is unknown is determined by the interface. If the file access is directed to an internal storage location then a step is performed by the interface to determine if the last directory is known. As seen in the figures and descriptions above this can be the last used directory the last written to directory or the last read from directory. If the last directory is known then the internal file connection properties that apply are provided at a step . If this information is not known the determinative step results in the utilization of the default file connection properties at a step . Returning to step if the file access is external a similar process is undertaken. At a step a last used directory determination is made that if known results in providing external file connection properties to the VM at a step . If last used directory information is not available the API performs step and provides default file connection property data from the mobile device to the application VM. The final option available at step where the file access is not known to be either internal or external also results in the API performing step and simply providing the default property information of the mobile device to the VM.

Many different arrangements of the various components depicted as well as components not shown are possible without departing from the spirit and scope of the present invention. Embodiments of the invention have been described with the intent to be illustrative rather than restrictive. Alternative embodiments will become apparent to those skilled in the art that do not depart from its scope. A skilled artisan may develop alternative means of implementing the aforementioned improvements without departing from the scope of the present invention.

It will be understood that certain features and subcombinations are of utility and may be employed without reference to other features and subcombinations and are contemplated within the scope of the claims. Not all steps listed in the various figures need be carried out in the specific order described.

