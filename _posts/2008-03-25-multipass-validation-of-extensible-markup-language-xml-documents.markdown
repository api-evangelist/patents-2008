---

title: Multi-pass validation of extensible markup language (XML) documents
abstract: A validation sequence for an XML document can be identified. The validation sequence can include a set of validation elements. At least one validation pass can be performed for the XML document. Each validation pass can correspond to one of the validation elements. Each validation pass can be configured to validate the XML document for at least one condition defined by the validation element. A validation element result can be produced for each performed validation pass. A validation element result that indicates the XML document is invalid can cause an immediate ending of activities related to the validation sequence, which determines the XML document in general to be invalid. A validation element result that indicates the XML document is valid causes a validation pass to be performed for another one of the validation elements unless each validation element in the validation sequence has been processed. A successful validation of the XML document requires a performance of a successful execution pass for each of the plurality the validation elements.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08875013&OS=08875013&RS=08875013
owner: International Business Machines Corporation
number: 08875013
owner_city: Armonk
owner_country: US
publication_date: 20080325
---
The present invention relates to the field of data validation and more particularly to utilizing a multi pass technique to optimize the validation of XML documents.

The use of the Internet to conduct data transactions is becoming a standard practice. This is particularly true for businesses who rely solely on e commerce as well as large corporations whose geographically diverse components need to share information. With the diverse amount of data and transactions that occur standardization is a key element to ensure data integrity. Use of the extensible markup language XML is a popular means for standardizing data transactions. XML permits data structures to be defined and utilized within markup documents. Key information for e commerce is often conveyed within these data structures. For example purchase order PO information is often conveyed within a purchase order XML data structure.

Using a standardized language like XML does not single handedly ensure data integrity. The data contained within the XML document must also be structurally valid which means that the formats of the data structures of an XML document must conform to an agreed upon standard of an XML document sender and an XML document recipient.

Conventionally XML parsers have been the traditional way to validate and report errors in XML data. Conventional XML parsers are structured for a single pass validation where a most detailed level of processing needed for providing a most detailed report possible is always invoked. Further often redundant XML parsers are utilized by various networking components where later XML parsers repeat validations previously performed by other XML parsers. XML files can be quite large and the processing overhead for single pass validation can be significant.

One aspect of the present invention can include a method computer program product system and apparatus for validating XML documents. A validation sequence for an XML document can be identified. The validation sequence can include a set of validation elements. At least one validation pass can be performed for the XML document. Each validation pass can correspond to one of the validation elements. Each validation pass can be configured to validate the XML document for at least one condition defined by the validation element. A validation element result can be produced for each performed validation pass. A validation element result that indicates the XML document is invalid can cause an immediate ending of activities related to the validation sequence which determines the XML document in general to be invalid. A validation element result that indicates the XML document is valid causes a validation pass to be performed for another one of the validation elements unless each validation element in the validation sequence has been processed. A successful validation of the XML document requires a performance of a successful execution pass for each of the plurality the validation elements.

One aspect of the present invention can include a method computer program product system and apparatus that utilize a multi step technique to optimize the validation of extensible markup language XML documents. Each of these multiple steps can be designed to be complementary and non redundant. When an XML document is validated by an early step subsequent validation operations are not necessarily executed. In one embodiment different servers and or processes can be used to perform the different validations. In one embodiment an XML document can be received where it is initially analyzed to determine whether it contains validly formed XML. A valid XML document can be analyzed to determine a validation sequence to be performed for that XML document. The validation sequence can define a level of validation and can include of a series of validation elements to be performed on the XML document. Next the validation sequence can be executed on an element by element basis. If a validation element fails then the execution of the validation sequence can be immediately terminated. A rejection message detailing the failure can be conveyed to the originator of the XML document. Different validation elements can be configured for different XML documents.

Another aspect of the present invention can include a multi step validation application that optimally validates extensible markup language XML documents. Such an application can include a document preprocessor a validation coordinator and a document evaluator. The document preprocessor can be configured to analyze the XML document for preprocessing parameters. The validation coordinator can be configured to determine the validation sequence for the XML document based upon the preprocessing parameters. The validation coordinator can also monitor the execution of the validation sequence. The document evaluator can be configured to execute the validation sequence upon the XML document as directed by the validation coordinator.

The present invention discloses a technique that can optimize the validation of extensible markup language XML documents by performing the validation in multiple steps. This multi step technique can be represented by a validation sequence that contains a series of validation elements to be used to test the validity of the XML document. The use of a multi step technique allows for invalid XML documents to be determined earlier in the validation process and without performing additional and unnecessary validations on the invalid XML document which can greatly reduce the time required to validate the XML document. This technique can also allow for different types of XML documents to be validated with varied levels of stringency. Different validation actions can be performed by different servers clients or processing components where the validation actions taken together form a cohesive validation sequence.

In one embodiment the validation sequence can be formed of discrete yet complimentary steps having a minimum of overall redundancy. To use an example an XML document containing purchase order details can be evaluated in a series of steps. For example a first step can validate whether a document includes a valid XML structure based upon an XML language standard. A next step can validate whether the XML document conforms to a purchase order schema or whether it is malformed. The purchase order can be compared against a contract schema specific to a contract established between two trading partners to determine whether it is a valid purchase order under that contract.

The present invention may be embodied as a method system or computer program product. Accordingly the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore the present invention may take the form of a computer program product on a computer usable storage medium having computer usable program code embodied in the medium. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer usable medium may include a propagated data signal with the computer usable program code embodied therewith either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium including but not limited to the Internet wireline optical fiber cable RF etc.

Any suitable computer usable or computer readable medium may be utilized. The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD. Other computer readable medium can include a transmission media such as those supporting the Internet an intranet a personal area network PAN or a magnetic storage device. Transmission media can include an electrical connection having one or more wires an optical fiber an optical storage device and a defined segment of the electromagnet spectrum through which digitally encoded content is wirelessly conveyed using a carrier wave.

Note that the computer usable or computer readable medium can even include paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory.

Computer program code for carrying out operations of the present invention may be written in an object oriented programming language such as Java Smalltalk C or the like. However the computer program code for carrying out operations of the present invention may also be written in conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

The present invention is described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable memory produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The XML document can be a conveyance element of a data exchange between a generating computer application and or system not shown and a receiving computer system of which the network server is a component.

It should be noted that the focus of the present invention is upon the validation of the XML document when received by the receiving computer system and as such only components involved with this specific process are illustrated in . Further it is presumed that the conveyance of the XML document to the receiving computer system is performed utilizing data transfer protocols compliant with all systems involved. Although the validate is shown as residing within a single network server it is contemplated that different validation actions or steps in a validation sequence can be conducted by different communicatively linked computing devices. Thus a receiving server can actually refer to a set of servers disposed between a sending and a receiving device. Thus the receiving device that performs one or more XML validation actions can be implemented in middleware e.g. a Web service implementation and or can be implemented within a terminal communication node to which the XML document is to be delivered. An ability to utilize multiple different devices during a validation sequence makes the disclosed solution a highly scalable one.

In system to perform the validation of a received XML document the receiving computer system or systems can utilize a network server containing a multi step XML validator one or more document evaluators and a data store containing supplementary data items. The network server can represent a computing device configured for the operation of the multi step XML validator and document evaluators as well as access data store . In an alternate embodiment the data store can be remotely located from network server and accessible over a network not shown .

The multi step XML validator can be a software application designed to optimally validate XML documents utilizing a multi step technique. To perform this function the multi step XML validator can include a document preprocessor a validation coordinator and a message generator .

Upon invocation of the multi step XML validator the validation coordinator can begin the validation process of the XML document . In order to determine how to validate the XML document the validation coordinator can utilize data extracted by the document preprocessor .

The document preprocessor can be a component of the multi step XML validator that can identify unique characteristics of the XML document characteristics of the communicators exchanging the XML document and or characteristics of the transaction through which the XML document is exchanged. In one embodiment the XML document can include one or more user configured preprocessing parameters . The preprocessing parameters can represent the data tags and or values within the XML document that a user has configured the document preprocessor to ascertain.

Examples of preprocessing parameters can include but are not limited to the originating party the type of data the XML document contains the version of XML used to author the document and the like. In one embodiment one or more of the preprocessing parameters can be automatically determined and written to the XML document. In another embodiment one or more parameters listed in system as preprocessing parameters can be stored in a companion document to document or can be dynamically determined by the server or valuator . Thus the preprocessing parameters can be used to generically represent the data used by system to determine which validation actions are to be applied to a given XML document .

The preprocessing parameters can be used by the multi step XML validator to direct the validation of the XML document . In order to determine the preprocessing parameters the document preprocessor can utilize a document evaluator . For example the document preprocessor can use the text parser to efficiently scan the XML document for the words of the preprocessing parameters .

Once the preprocessing parameters have been obtained the document preprocessor can provide the parameters to the validation coordinator . Additionally the document preprocessor can also inform the validation coordinator when there is a lack of one or more of the preprocessing parameters within the XML document .

The validation coordinator can represent a component of the multi step XML validator that can manage the validation of the XML document . The validation coordinator can utilize the data provided by the document preprocessor to determine the steps required to validate the XML document . Missing preprocessing parameters can be interpreted as the XML document being invalid by the validation coordinator which can indicate that additional validation is unnecessary.

The steps for validating the XML document can be represented by a validation sequence . Each step can correspond to the execution of a specific validation element by a document evaluator upon the XML document . The validation coordinator can determine the appropriate validation sequence to use for the XML document based upon the preprocessing parameters .

The validation sequence can be dynamically generated by the validation coordinator by determining and ordering the validation elements that match the preprocessing parameters . In an alternate embodiment the validation coordinator can use the preprocessing parameters to select the appropriate validation sequence from a set of pre generated validation sequences .

Validation elements can represent a variety of governances for validating the XML document including but not limited to XML schemas document type definitions DTDs rules and or parameters for auxiliary validation tools operational parameter sets and the like. For example the validation sequence for a purchase order received from ABC Manufacturing can outline a first step of using an XML parser for validation against a generic purchase order XML schema and the last step of using an XML parser for validation against the ABC purchase order XML schema and a RESTART command for every line item .

It should be noted that representing the multiple steps of the validation sequence as executions of validation elements provides the ability to have varying degrees of validation applied to XML documents . For example the validation sequence for a purchase order received from XYZ Company can include only the use of the generic purchase order XML schema because they place infrequent and small orders whereas ABC Manufacturing places large complicated orders that require additional attention.

The execution a validation elements by the validation coordinator can require the use of one or more document evaluators . A document evaluator can represent a software application that performs a specific function required to determine the conformance of the XML document to a specific validation element . An XML parser a commercially available validation tool and a text parser can be examples of document evaluators that can be used by the multi step XML validator .

In another embodiment the document evaluators can be integrated components of the multi step XML validator . In yet another embodiment the document evaluators as a group or individually can be located remotely from the multi step XML validator and accessed via a network not shown .

As the validation coordinator executes the validation sequence a failure of a validation element can occur. Using the above example the XML document can be determined to be invalid when checked against the designated XML schema . In the event of a failure of a validation element the validation coordinator can terminate the execution of the validation sequence .

It is important to emphasis the impact of this capability within the execution of the validation process. Using this technique the validation of the XML document can be terminated at the earliest sign of invalidity which can be determined as before the actual validating process begins. Thus additional and unnecessary validation tests will not be performed saving time computing resources and providing faster customer feedback.

When an XML document is determined to be invalid the validation coordinator can utilize a message generator to create a rejection message . The message generator can include details about the type of failure encountered in the rejection message . Additionally the XML document can be included with the rejection message . The rejection message can be sent back to the originator of the XML document via the means available by the receiving computer system . For example the rejection message can be sent in an email message with the XML document included as an attachment.

If the validation sequence is executed without encountering a failure then the validation coordinator can indicate the validity of the XML document to receiving computer system . It should be noted that specific means of indicating the validity is dependent upon the implementation of the multi step XML validator within the overall receiving computer system .

As used herein presented data store including store can be a physical or virtual storage space configured to store digital information. Data store can be physically implemented within any type of hardware including but not limited to a magnetic disk an optical disk a semiconductor memory a digitally encoded plastic memory a holographic memory or any other recording medium. The data store can be a stand alone storage unit as well as a storage unit formed from a plurality of physical devices. Additionally information can be stored within data store in a variety of manners. For example information can be stored within a database structure or can be stored within one or more files of a file storage system where each file may or may not be indexed for information searching purposes. Further data store can utilize one or more encryption mechanisms to protect stored information from unauthorized access.

Method can begin with step where a multi step XML validator can receive a command to validate an XML document. In step a set of preprocessing parameters can be ascertained from the XML document.

When the preprocessing parameters exist for the XML document step can execute where a validation sequence can be determined for the XML document based on the preprocessing parameters. The first element in the validation sequence can be used to validate the XML document in step .

The validity of the XML document in regards to the validation element can be determined in step . When the XML document is determined to be valid for the validation element step can execute where it can be determined if the end of the validation sequence has been reached.

When the end of the validation sequence has been reached the validity of the XML document can be indicated to the receiving system in step . When the end of the validation sequence has not been reached then step can be executed where the XML document can be validated with the next element in the validation sequence. Upon completion of step flow can return to step where the validity of the XML document is determined for the next validation element.

When the XML document is found to be invalid in step or the preprocessing parameters are determined to be missing in step then the flow of method can proceed to step where a rejection message can be generated for the XML document.

In step the XML document can be optionally attached to the rejection message. The rejection message can be sent to the originating party of the XML document in step .

It should be emphasized that the validation elements or validation actions that are conducted during the validation sequence can be designed to ensure minimal redundancy in actions occurs during the validation sequence. For example once a first validation element determines that a given XML document is in a valid XML format no subsequent validation element need repeat that step. Further each validation element can represent a level of validation of an XML document. Each level in a validation hierarchy validation sequence can focus on level specific concerns.

As previously mentioned validation elements need not be executed within a single computing device. When different devices are used for different ones of the validation elements results from previous validation elements can be recorded within the XML document in metadata or special structural fields reserved for this purpose or can be otherwise conveyed from one computing device to another.

When speed of validating an XML document is important it can be situationally beneficial to concurrently and independently execute validation actions. For example a first processor and set of computing resources can execute programmatic actions associated with a first validation element at a same time that a second processor and set of computing resources execute programmatic actions associated with a second validation element. Validation elements results from out of order execution of a validation sequence can still produce an informative and true validation result. Thus if a second validation element in a sequence of validation elements produces results indicating an XML document is invalid then all other programmatic actions in the validation sequence including programmatic actions for a first validation element if not already completed can be terminated early or need not be performed at all.

The sample XML document can contain a variety of data tags and data values as allowed by the XML standard. Of particular note within the sample XML document are the data tags and values identified as preprocessing parameters . These preprocessing parameters can be used by a multi step XML validator to determine the sample validation sequence for the sample XML document .

It should be noted that the sample validation sequence shown in this example is expressed in plain verbiage like pseudo code for the sake of clarity and understanding. Since a validation sequence is intended to be executed by computing device an implemented validation sequence would be written using the proper language for interpretation by the multi step XML validator.

As shown in this example the sample validation sequence can include multiple steps and . Each step and can represent the execution of one or more validation elements upon the sample XML document . The inclusion of these steps and can be based upon the values of the preprocessing parameters and the execution criteria of each step and .

In this example step one can consist of two statements and . Statement can stipulate that the formation of every received XML document such as the sample XML document is to be validated. Statement can describe handling the failure of statement by terminating the validation process and returning the XML document to its originator with a rejection message indicating that the document is malformed.

Upon the successful execution of step one step two can be executed consisting of statements and . Statement can dictate that a received XML document identified as a purchase order is to be validated against the purchase order schema. In this example the sample XML document contains a data tag that is identified as a preprocessing parameter that indicates that the sample XML document is a purchase order. Therefore step two is applicable for the validation of the sample XML document and is included in the sample validation sequence .

Statement can describe handling the failure of statement by terminating the validation process and returning the XML document to its originator with a rejection message indicating that the document is an invalid purchase order.

When step two is successful step three can be executed consisting of statements and . Statement can state that a purchase order received from Best Manufacturing is to be additionally validated against the Best Mfg schema. In addition to using the Best Mfg schema a RESTART command is to be inserted at the beginning of each line item contained in the purchase order.

In this example the sample XML document contains a data tag and value that is a preprocessing parameter identifying the sample XML document as a purchase order from Best Manufacturing. Therefore step three is applicable for the validation of the sample XML document and is included in the sample validation sequence .

Statement can describe handling the failure of statement by terminating the validation process and returning the XML document to its originator with a detailed rejection message for an invalid purchase order.

The diagrams in illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

