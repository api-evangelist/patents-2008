---

title: Isolating applications hosted by plug-in code
abstract: Described is a technology in which one application running in a browser can host another application (e.g., an advertisement) in an isolated manner that prevents the hosted application from accessing browser data, or data of any other hosted application (including the host). The host and/or hosted application may be a browser plug-in (e.g., Microsoft® Silverlight™) application. The host application privately instantiates a hidden plug-in, with that hidden plug-in's access to browser data disabled, and loads the hosted application in the hidden plug-in. A XAML tag element may be used to identify the hosted application, along with a rendering area for the hosted application. Content from the hosted application is composited with content from the host application when rendering. The host application may provide keywords to the hosted application, such as for selecting relevant advertisements, and/or may allow the hosted application to open a browser window to display associated website content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09594900&OS=09594900&RS=09594900
owner: Microsoft Technology Licensing, LLC
number: 09594900
owner_city: Redmond
owner_country: US
publication_date: 20081209
---
Contemporary browsers allow plug ins which in general comprise hosted software code that interacts with the hosting browser application to provide some desired functionality. One such plug in is Microsoft Silverlight which provides a platform that allows for development and hosting of rich web applications that often include animation vector graphics and or media e.g. audio video content playback. A plug in can host a third party application.

In general this is related to a significant function of modern application development namely componentization. A general idea behind componentization is to break up a large application in to smaller components that perform smaller portions of the larger task are reusable and have a known interface. With componentization comes the ability for external e.g. second or third parties to author components for an existing application for example one modern web based incarnation of this concept is a web mashup.

However when non first party components are used in an application such as applications hosted by a plug in the trust boundary between the component and the application becomes important. A component should not be able to alter the appearance and functionality of user interface UI code or monitor application data and so forth unless the hosting application has specifically designed for this and expects it.

This Summary is provided to introduce a selection of representative concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used in any way that would limit the scope of the claimed subject matter.

Briefly various aspects of the subject matter described herein are directed towards a technology by which one application running in a browser can host another application in a manner that prevents the hosted application from accessing host application data or the data of any other hosted application. In one aspect the host application is a browser plug in e.g. Microsoft Silverlight application that instantiates another plug in that is hidden to the browser and prevents the hosted application from accessing data by instantiating the other plug in with disabled access to browser hosted application data e.g. elements or other applications data.

In one aspect a tag element identifies the hosted application within code e.g. XAML associated with the host application. A host element is added to the host application s element tree to represent the hosted application. The tag element may specify a rendering area for the hosted application. Content from the hosted application is rendered in conjunction e.g. composited with content from the host application.

In one aspect the hosted application may be an advertisement. The host application may provide keywords to the hosted application such as corresponding to page content whereby the hosted application may select a relevant advertisement. The hosted application may be allowed to perform some privileged operations such as to allow the hosted application to open a browser window to display website content e.g. bring up a website when the user clicks an advertisement in the hosted application s rendering area .

Other advantages may become apparent from the following detailed description when taken in conjunction with the drawings.

Various aspects of the technology described herein are generally directed towards an isolation model in which a first application e.g. browser plug in or the like hosts a second typically untrusted third party application in an isolated manner. In general this is accomplished by instancing a separate in memory plug in instance which is unknown to the web browser to isolate the second application. At the same time the second application e.g. advertisement appears to the computer user be running as part of the hosted application because for example its visible output is rendered along with the visible output of the hosting application. As will be understood however the hosted application does not have access to information related to the hosting application or the web browser unless the hosting application desires to provide some information.

While Microsoft Silverlight a cross platform cross browser plug in is used as an example of a hosting application it should be understood that any of the examples described herein are non limiting examples. As such the present invention is not limited to any particular embodiments aspects concepts structures functionalities or examples described herein. Rather any of the embodiments aspects concepts structures functionalities or examples described herein are non limiting and the present invention may be used various ways that provide benefits and advantages in computing and hosting applications in general.

In one implementation an application such as a third party advertisement is hosted by the host application as part of a hidden separate and undiscoverable to the browser plug in in a way that programmatically isolates the hidden plug in from the browser and from the hosting application s data yet allows the hosted application to participate in the host application s rendering input and layout. The rendering input and layout are managed by the hidden plug in so that for example the visible output is limited to a user interface area that is reserved for the hosted application s output. Note that the hidden plug in may be another Silverlight plug in that is another instance that is privately created unknown to the browser by a host Silverlight plug in. Further note that other types of plug ins may be used as long as they can be instantiated or otherwise configured in a manner that prevents them from any direct communication with the HTML browser e.g. the plug in is instantiated such that it has no access to the browser Document Object Model DOM .

To this end in one example implementation there is provided a tag element e.g. in the XAML application code that identifies a source of the hosted application and represents an isolation boundary in which to instance the hidden plug in for loading the hosted isolated application 

The tag element is represented in by the XapHost element . Among other operations the XapHost element is responsible for instancing and initializing the hidden plug in in memory in a location that is not discoverable from the browser this may be accomplished via private APIs or the like. The hosted application does not participate in the tree of the host application except via the XapHost element that acts as a proxy to isolate the hidden plug in . For example the hosted application cannot traverse the tree other than to its own topmost node which corresponds to the root node of its application. Note that it does not have access to the XapHost element which resides in the hosting applications tree. Instead the hosted application is limited to only providing output for rendering via the XapHost element although the XapHost element may provide additional data such as initialization parameters and or allow some privileges to the hosted application as described below with reference to . This and any other data communicated from the XapHost element to the hidden plug in hosted application is represented in as input .

As generally represented via the example steps of when the XAML application code is parsed or when a XapHost element is programmatically added to the tree step at steps and the XapHost element initializes the hidden plug in and loads the corresponding hosted application e.g. XAP that is specified by the Source attribute which in the above example XAML language is identified as http www.advertisements.com ad.xap . The hosted application has no access to the browser s HTML domain object model e.g. the EnableHtmlAccess property is set to false and is loaded in its own application domain e.g. Common Language Runtime or CLR AppDomain with its own access to global static variables and so forth note that Silverlight contains its own mini CLR . Without domain object model DomBridge access the hosted application does not have access to any other content on the page including the page itself or other plug ins.

As also represented in via steps and in addition to instancing and initializing the hidden plug in and loading the application the XapHost element directs input and layout notifications from the hosting application to the hosted application . Further the XapHost element processes the output of the hosted application so that that output can be composited by the hosting application s plug in note that any other output such as audio and or tactile output may be similarly mixed . Step represents tearing down the hosted application at an appropriate time e.g. upon shutdown or when the corresponding reference count on the XapHost element goes to zero e.g. when that part of the user interface is no longer to be rendered .

In one aspect generally represented in the XapHost element may include one or more interfaces e.g. APIs among the other private APIs described above that allow the host application to communicate with the hosted application such as to pass initialization parameters . For example in an advertising scenario initialization parameters may include a collection of keywords that are present on the hosting page for which an advertisement application can serve relevant advertisements corresponding to one or more of the keywords.

In another aspect also generally represented in via the APIs the XapHost element may allow the hosted application to perform certain privileged operations or perform the operations on its behalf upon an appropriate call . One example is to open a new browser window in response to a user initiated action such as to bring up a website corresponding to a clicked on advertisement.

Another advantage is the ability to control power consumption. For example advertisements may be a large source of power consumption in modern computer usage. With the plug in hosting e.g. XapHost model a reduced power mode may conserve power such as by disabling animations and other power consuming operations.

The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices tablet devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures and so forth which perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in local and or remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing various aspects of the invention may include a general purpose computing device in the form of a computer . Components of the computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

The computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by the computer and includes both volatile and nonvolatile media and removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by the computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above may also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media described above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers herein to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a tablet or electronic digitizer a microphone a keyboard and pointing device commonly referred to as mouse trackball or touch pad. Other input devices not shown in may include a joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . The monitor may also be integrated with a touch screen panel or the like. Note that the monitor and or touch screen panel can be physically coupled to a housing in which the computing device is incorporated such as in a tablet type personal computer. In addition computers such as the computing device may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface or the like.

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include one or more local area networks LAN and one or more wide area networks WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. A wireless networking component such as comprising an interface and antenna may be coupled through a suitable device such as an access point or peer computer to a WAN or LAN. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It may be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

An auxiliary subsystem e.g. for auxiliary display of content may be connected via the user interface to allow data such as program content system status and event notifications to be provided to the user even if the main portions of the computer system are in a low power state. The auxiliary subsystem may be connected to the modem and or network interface to allow communication between these systems while the main processing unit is in a low power state.

While the invention is susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the invention to the specific forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents failing within the spirit and scope of the invention.

