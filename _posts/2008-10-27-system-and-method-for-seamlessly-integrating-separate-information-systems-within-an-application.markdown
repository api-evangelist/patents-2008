---

title: System and method for seamlessly integrating separate information systems within an application
abstract: The present invention is, in one embodiment, a system and method based on a client-server architecture for seamlessly integrating various information systems. In one embodiment, a bundle of files is deployed to a collaboration client, in order to enable the integration of the collaboration client with disparate information systems and content. In one embodiment, content within a mailbox item is allowed to become a “live” object, and is associated with trigger events, and actions, including sending all or part of the content to a separate information system. In one embodiment, mailbox items are subjected to predefined searches to assess whether they include certain content objects. In another embodiment, panel item elements are visible in the overview panel of the collaboration client. The user may interact with the panel items by dragging content onto them, double clicking them, and invoking actions from a context menu if one is available.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08631065&OS=08631065&RS=08631065
owner: VMware, Inc.
number: 08631065
owner_city: Palo Alto
owner_country: US
publication_date: 20081027
---
This application is a divisional of and claims priority to co pending application Ser. No. 11 503 810 entitled System and Method for Seamlessly Integrating Separate Information Systems within an Application which was filed on Aug. 14 2006 and which in turn claims benefit of and priority under 35 USC 119 e to provisional application No. 60 774 017 which is entitled System and Method for Integrating Separate Information Systems within a Collaboration Suite Application which was filed on Feb. 16 2006 and provisional application No. 60 730 255 which is entitled System and Method for Integrating Separate Information Systems within a Collaboration Suite Application and which was filed on Oct. 26 2005. Each of these applications is hereby incorporated herein by reference in its entirety for all purposes.

This application is also related to co pending application Ser. No. 12 258 793 entitled System and Method for Seamlessly Integrating Separate Information Systems within an Application which was filed on Oct. 24 2008. This application is hereby incorporated herein by reference in its entirety for all purposes.

This invention relates generally to integrating various separate information systems seamlessly for a user and more particularly to allowing a user to interact with separate information systems from within a collaboration suite application.

Collaboration suite applications typically include functionality such as email messaging calendaring and contact storage and retrieval where email messages calendar appointments contacts etc. are commonly referred to as mailbox items. The Zimbra Collaboration Suite from Zimbra Inc. San Mateo Calif. Microsoft Exchange and Microsoft Outlook from Microsoft Corp. Redmond Wash. and Lotus Notes from IBM Armonk N.Y. are examples of collaboration suite applications.

Most information within a mailbox item cannot be acted upon by separate information systems e.g. external applications running on the same or other computers web servers etc. . For example if a purchase order number is included in an email and the user wants approve that purchase order he typically has to cut or copy the purchase order number open a separate information system paste that purchase order number into it and then take any necessary steps to approve that purchase order. These steps are time consuming annoying and inconvenient for a user.

There have been a few attempts made at addressing such problems. Some email programs can identify Uniform Resource Locators URLs within email messages and a user can click on the URL to open up the corresponding web page. However such a solution is strictly dependent on the collaboration suite client application and no customization of any type is provided for. For instance it is not possible for a user to recognize some other content e.g. P.O. numbers phone numbers etc. and or to perform some other type of action upon recognizing specific content e.g. logging the URL into a prespecified log rather than opening the corresponding web page . Thus this type of solution is non extensible non flexible and non customizable.

Some other prior approaches attempted to provide extensible linking and actionable content. However most of these require the author of the mailbox item e.g. email to identify and link the content. This is problematic for several reasons. First the author of the item is burdened with the task of annotating the content appropriately. Second this type of solution requires intelligence at the originating end and its corresponding intelligence at the receiving end. This can be particularly problematic when the item originates with customers business partners or even employees on their home computers all of which often rely on collaboration software or email software that is other than the receiving user s internal standard. It is much more desirable to have actionable content work seamlessly for all in bound items regardless of their source and their authors actions.

Other approaches exist to extensible linking and actionable content such as Smart Tags from Microsoft Corp. Redmond Wash. . Smart Tags were developed for Office desktop applications Excel Word Outlook etc. as well as Internet Explorer IE . Smart Tags do not implement a client server architecture and rely on only client side installation and execution of the linking and action defining code. They are problematic for numerous reasons. For instance Smart Tags are severely limited in their user interface UI in that they merely created dotted lines under content identified as Smart Tag content and the user can then click appropriately to display a pop up menu. Other intuitive user interactions such as mousing over the content dragging and dropping the content onto other places and displaying a pop up panel which displays content including 3party content is not available with Smart Tags. Second Smart Tags are tied to Microsoft Applications and are thus not compatible with all web browsers e.g. non Microsoft web browsers such as Mozilla Firefox Apple Safari etc. and all operating systems e.g. non Microsoft compatible operating systems such as Linux MacOS etc. . Further Smart Tags are not designed to work across the range of client devices that support the Web such as mobile phones PDAs tablet PCs set top boxes and so on. Moreover since there is no centralized server Smart Tags cannot provide for indexing across clients e.g. for search discovery across mailboxes such as is required for Sarbanes Oxley or Human Resources compliance fiduciary isolation of business units such as automatically recognizing equity related communications and so on. Further still performing all indexing matching on the client increases computation overhead on the client. Furthermore tight integration with Web 2.0 technologies like Asynchronous JavaScript and XML Ajax based user interfaces running in the browser without any a prior installation of controls plug ins is not feasible with Smart Tags since they are based upon desktop applications rather than upon open internet technologies. In addition client side DLLs are also a security risk particularly when they are permitted to access to client data or arbitrary services on the Internet.

Thus there is a need for a method and system based on a client server architecture for seamlessly integrating various information systems with an application such as a collaboration suite application in a generic and customizable manner. In addition there is a need for a method and system which provides such integration via an intuitive and easy to use user interface. Furthermore there is need for a method and system which provides such integration in a secure environment.

The present invention is a system and method based on a client server architecture for seamlessly integrating various information systems with an application such as a collaboration suite application in a generic and customizable manner. Some embodiments of the present invention provide such integration via an intuitive and easy to use user interface. Some embodiments of the present invention provide such integration in a secure environment.

In one embodiment separate information systems are integrated with a collaboration suite client application collaboration client . Examples of separate information systems include third party servers as well as the collaboration server application that serves the collaboration client. In accordance with some embodiments of the present invention Zimlets are used to integrate separate systems with a collaboration client. A Zimlet is a bundle of files that is deployed to the collaboration client. The files comprising the Zimlet bundle enable the integration of the collaboration client with disparate information systems and content.

In one embodiment there are at least two ways in which separate information systems can be integrated with a collaboration client. i Content objects Content that would otherwise have been static within a mailbox item is allowed to become a live object and to be associated with trigger events and actions including sending the object to a separate information system and taking some action upon information corresponding to the object within the separate information system. Examples of content objects include phone numbers purchase order numbers contacts and calendar appointments. In addition mailbox items can be subjected to predefined searches based on whether certain content objects are included in them. ii Panel item elements in the application overview panel of the collaboration client The user may interact with the panel items by dragging content such as mail messages contacts and calendar appointment onto them double clicking them and invoking actions from a context menu if one is available. For instance for integrating with a mapping program a user may drag one of his contacts onto a panel item and the collaboration client will send the address from that contact to an external mapping program such as Google maps or Mapquest with a request for a map corresponding to such address.

In accordance with an embodiment of the present invention Zimlets provide an extensible mechanism for integrating separate information systems into a collaboration suite application in that a system administrator can define the type of window generated size graphics etc. the type of content that the window accepts and the action associated with that window. Therefore a system administrator can tailor such Zimlets to interface with whatever information systems best suit user needs.

A system in accordance with an embodiment of the present invention consists of a client and server framework as well as a set of web services and JavaScript APIs. They will be exposed to the end user via a client. In one embodiment the client is implemented using Asychronous JavaScript and XML AJAX . The server component is responsible for Zimlet life cycle management server side indexing and security. The client component is responsible for providing the framework to support presentation user interaction and customizing authoring of Zimlets by the system administrator. This architecture enables the implementation of a broad range of these Zimlets from those requiring little or no custom code i.e. entirely declarative to those that use JavaScript to tightly integrate rich UI behavior within the client. Such an architecture also makes it possible to have the server index content such as email messages and attachments that contain content objects so that the end user may search for such content by using either the has clause of the query language or by checking the appropriate checkbox in the relevant panel of the search builder. So if a Zimlet defining phone numbers has registered with the server for indexing then a user may for example search for content containing phone numbers by issues the following search query has phone.

In accordance with one embodiment of the present invention the collaboration client serves as a user interface to not only the collaboration suite server but also to various other remote servers. When content objects and or panel items are recognized and or interacted with the communication from the user s computer goes to the Zimlet server which in turn communicates with the various remote servers as appropriate. Routing the communications to the remote servers via the Zimlet server has several advantages such as enhancing security.

In one embodiment of the present invention the bundle of files comprising the Zimlet includes a Zimlet definition file. In one embodiment this file is implemented in XML. In one embodiment it is possible to define content objects and their corresponding context menus and tool tips as well as template panel items and their actions solely with XML. In other cases it may be necessary or desirable to provide for complementary files in order to carry out the desired functions. This implementation is then referenced in the template definition file and included as part of the template bundle. In one embodiment the complementary files are in JavaScript.

The features and advantages described in this summary and the following detailed description are not all inclusive and particularly many additional features and advantages will be apparent to one of ordinary skill in the art in view of the drawings specification and claims hereof. Moreover it should be noted that the language used in the specification has been principally selected for readability and instructional purposes and may not have been selected to delineate or circumscribe the inventive subject matter resort to the claims being necessary to determine such inventive subject matter.

The figures or drawings depict a preferred embodiment of the present invention for purposes of illustration only. It is noted that similar or like reference numbers in the figures may indicate similar or like functionality. One of skill in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods disclosed herein may be employed without departing from the principles of the invention s herein. It is to be noted that while the following discussion focuses on embodiments of the present invention as applied to a collaboration suite the invention can be applied to other applications where a tighter integration between different information systems is desired. Further each bundle of files that integrates the collaboration client with a separate information system is referred to as a Zimlet. This is only a name used for reference and it has no connection to functionality. Moreover some examples are described with respect to the Zimbra Collaboration Suite from Zimbra Inc. San Mateo Calif. who is the assignee of this patent application but the invention is in no way limited to the Zimbra Collaboration Suite.

Various embodiments of the present invention provide a system and method for integrating separate information systems with a collaboration suite client application collaboration client . Examples of separate information systems include third party servers as well as the collaboration server application that serves the collaboration client. Further in some embodiments of the present invention user interfaces within the collaboration suite itself are mashed up intermixed . For instance calendar information and contacts information may be mashed up within the user s email. The term mash up describes the aggregation and customization of multiple web interfaces and web services to eliminate context switching between existing systems a process which delivers a richer experience and a wider range of capabilities to the end user. Several technologies have enabled developers to create new and interesting ways of providing some very effective integrations. One example is Asychronous JavaScript and XML AJAX which facilitates creation of web applications with increased interactivity speed and usability of web pages. This is done by exchanging small amounts of data with the server behind the scenes so that the entire web page does not have to be reloaded every time there is a change. Another example of such technologies is Representational State Transfer REST which is an architecture for distributed hypermedia systems like the world wide web. The term is generally used loosely for web based interfaces that use XML and HTTP without extra abstractions such as the SOAP protocol.

The functionality system architecture and implementation of systems and methods in accordance with various embodiments of the present invention are described below.

In accordance with some embodiments of the present invention Zimlets are used to integrate separate systems with a collaboration client. A Zimlet is a bundle of files that is deployed to the collaboration client. The files comprising the Zimlet bundle enable the integration of the collaboration client with disparate information systems and content.

In accordance with some embodiments of the present invention there are at least the following ways in which separate information systems can be integrated with a collaboration client. The functionality of these various ways is described below from a high level. Further details regarding each of these are provided below under the system architecture and implementation sections.

In accordance with one embodiment of the present invention content that would otherwise have been static within a mailbox item is allowed to become a live object referred to herein as content object and to be associated with trigger events and actions including sending the object to a separate information system.

In accordance with one embodiment of the present invention content such as email message bodies calendar appointment notes and contact fields that contains one or more content objects can be searched and or indexed. In one embodiment the query languages has clause is used for this purpose. For example in an embodiment where phone numbers are recognized as content object a user can search for mailbox items containing phone numbers via the has phone clause. In one embodiment mailbox items containing a particular phone number can also be searched for.

In one embodiment the collaboration client in accordance includes various panel items in the application overview panel which are essentially ways to access various information systems. is a screen shot which shows various such panel items in accordance with an embodiment of the present invention. In the following panel items are shown Maps Package Tracker Purchase Order and Travel Tracker . These panel items are shown for illustrative purposes alone and this list is no way limiting.

The user interacts with the panel items in various ways such as by dragging content such as mail messages contacts and calendar appointment onto them double clicking them and invoking actions from a context menu. When the user interacts with a panel item in one embodiment this results in sending the entered information or the value of one more attributes of a mailbox item to a separate information system along with any applicable instructions commands for acting upon such information.

Referring to the result of a user dragging a contact onto the Maps panel item is shown. In one embodiment when a user drags one of his contacts onto the panel item Maps the collaboration client sends the address from that contact to an external mapping program such as Google maps from Google Inc. Mountain View Calif. Yahoo Inc Sunnyvale Calif. or Mapquest from Mapquest Inc. Denver Colo. with a request for a map corresponding to such address.

In an alternate embodiment the panel items do not create a window when activated. Instead the panel item icon itself may act as an interface to a separate information system. For example a message that needs to be sent to a remote data storage or enterprise system can be dragged to a panel item designed to send messages to a remote data storage or enterprise system. Instead of a window opening when a message is dragged to the panel item icon the panel item icon may just flash or turn a different color to acknowledge that the message has been accepted.

In one embodiment a panel item may be used for more passive actions such as displaying a message. In one embodiment this may be triggered by the user s logging in. For instance a motivational message of the day could be displayed when the user logs in. In one embodiment information regarding music being played is displayed in a pre specified location e.g. lower left hand corner of the collaboration client interface . This can be seen in . In yet another embodiment a panel item results in a display of say a monthly calendar in a pre specified location e.g. lower left hand corner of the collaboration client interface . This can be seen in . In still another embodiment such a passive display may be triggered by a lapse of a predefined amount of time. For instance at the beginning of every month some type of reminder may show up.

Panel items are a different user interface to disparate information systems as compared to content objects . Further panel items can also serve as fallback options if certain content cannot be recognized as a content object . This can happen for example in situations where certain information as the defined content object is not recognized as such because of some difference in format etc. For example even if an address is to be recognized as a content object a foreign address may be formatted in such a way that the content object cannot be recognized. In such a situation the user can simply drag the address over to the maps panel item to obtain the map for the address.

The user s computer is a conventional computer system that may include a CPU a storage device a network services connection and conventional input output devices such as a display a mouse a printer and or a keyboard that may couple to a computer system. The computer also includes a conventional operating system an input output device and network services software. Several of these components are not shown in for purposes of clarity. The computer the storage device and the network services connection may be available from for example IBM Corporation Armonk N.Y. Sun Microsystems Inc. Palo Alto Calif. Hewlett Packard Inc. Palo Alto Calif. or Apple Cupertino Calif. 

The user s computer includes several modules on it. One of the modules is the Collaboration Suite Client . As mentioned above the Collaboration Suite Client includes an Email application a Contacts application and a Calendar application . Some Collaboration Suite Clients include other modules such as a To Do List application a Memo application and so on. Outlook from Microsoft Corp. Redmond Wash. Zimbra Collaboration Suite from Zimbra Inc. San Mateo Calif. and Lotus Notes from IBM Armonk N.Y. are examples of Collaboration Suite Clients .

Several other application clients are also resident on the user s computer . These include an Instant Messaging IM client a Voice Over Internet Protocol VoIP client a Purchase Order client and an Other Proprietary System client .

The IM client can be any available IM application. Some examples of the currently available IM programs are America OnLine Instant Messenger AIM from America Online Inc. Dulles Va. MSN Messenger from Microsoft Corporation Redmond Wash. and Yahoo Instant Messenger from Yahoo Inc. Sunnyvale Calif. .

The VoIP client can be any available VoIP application. Some example of currently available VoIP programs are Skype from Skype Luxemborg AT T CallVantage from AT Inc. San Antonio Tex. and Vonage from Vonage Holmdel N.J. .

The Purchase Order client can be any available Purchase Order application. Some example of currently available Purchase Order programs include applications provided by Oracle Corp. Redwood Shores Calif. as well as accounting applications such as Peachtree Accounting from Sage Software New Castle UK Quickbooks from Intuit Inc. Mountain View Calif. and Microsoft Dynamics GP from Microsoft Corp. Redmond Wash. .

The Other Proprietary System client can include various other applications such as but not limited to invoice tracking applications such as those provided by Oracle Corp. SKU management or inventory control applications partner VAT portals order processing shipment tracking CRM applications billing software MLS software for Real Estate etc.

The network service connection includes hardware and software components that allow for connecting to a conventional network service. For example the network service connection may include a connection to a telecommunications line e.g. a dial up digital subscriber line DSL a T1 or a T3 communication line .

The network can be any network such as a Wide Area Network WAN or a Local Area Network LAN or any other network. A WAN may include the Internet the Internet 2 and the like. A LAN may include an Intranet which may be a network based on for example TCP IP belonging to an organization accessible only by the organization s members employees or others with authorization. A LAN may also be a network such as for example Netware from Novell Corporation Provo Utah or Windows NT from Microsoft Corporation Redmond Wash. . The network may also include commercially available subscription based services such as for example AOL from America Online Inc. Dulles Va. or MSN from Microsoft Corporation Redmond Wash. .

The Collaboration Suite Server the IM Server a VoIP server a Purchase Order Server and an Other Proprietary System Server are servers with which the Collaboration Suite client the IM client the VoIP client the Purchase Order client and the Other Proprietary System client respectively communicate.

Any communication that occurs from a client or on the user s computer to a remote server occurs via Path A from the client to the network via the network services connection and then Path A from the network to the remote server . The user has to open each client separately in order to use it and to communicate with the corresponding server. For instance consider that the user is reading an email in the Collaboration client in which an IM Id is provided. In order to conduct an IM conversation with the person who s IM Id is provided in the email the user has to open the IM client cut and paste or retype the IM Id into the IM client. Installing several applications and interacting with each of them every time is highly inconvenient for the user.

The server component is responsible for Zimlet life cycle management server side indexing and security. Each of these is discussed in further detail below. The client is responsible for providing the framework to support presentation and user interaction.

It can be seen from that in accordance with one embodiment of the present invention several of the clients that were on the user s computer in the prior art system are not needed on the user s computer in system . This is because the Collaboration client can serve as a user interface to not only the collaboration suite server but also to the other remote servers . In another embodiment the client applications still reside on the user s computer .

In the embodiment shown in when panel items or content objects are interacted with and or recognized the communication from various applications on the user s computer goes via the network services connection to the network via path B and then on to the Zimlet server via path B. The Zimlet server in turn communicates with the various remote servers and as appropriate. The Zimlet server is described in greater detail below with respect to .

The Zimlet client supports the UI for each Zimlet and any parsing or object detection used to present the Zimlet related data to the user. In one embodiment at login a list of available Zimlets for the current user is loaded from the Zimlet server . This list includes all the properties from each Zimlet definition file. The Zimlet definition file is discussed in more detail below in the Implementation section. The Zimlet client framework then loads any additional JavaScript and populates any panel item Zimlets .

The Zimlet storage includes a list of the various Zimlets available on the Zimlet server . In one embodiment these Zimlets include content objects as well as panel items . In one embodiment not all Zimlets can be used by all users. Rather each user is granted access to specific Zimlets. This access may be granted in one embodiment by the system administrator. In one embodiment some generic Zimlets are provided to each user while other Zimlets are available only to specific users. For instance the map panel item may be available to all users while purchase order content items and their approval rejection can only be done by say manager level users. In one embodiment even custom Zimlets written by the users and or administrators are stored on the Zimlet server .

When a content object Zimlet is recognized or a panel item Zimlet is interacted with all requests to the Zimlets are transmitted to the servlet module in the Zimlet server . For security reasons Zimlets do not communicate directly with remote servers . . . . Instead they talk to the servlet module . In one embodiment the servlet module is comprised of a proxy servlet and a JSP . As mentioned above in accordance with one embodiment of the present invention a Zimlet running on the user s computer cannot directly communicate with a remote server . . . for security reasons. Instead Zimlets will have access to the servlet module in order to fetch and manipulate the contents from remote servers . . . . The proxy servlet is used in one embodiment to simply pass on an HTTP request after appropriate authentication. The proxy servlet authenticates the request to the server in conjunction with the server access module in the security module . Each Zimlet needing the access to proxy servlet need to be listed in the proxy servlet along with the white list of the URLs that the Zimlets need. The requests made to URLs not in the white list will be denied. For all the authenticated requests the proxy servlet in turn makes HTTP request to one or more remote machines . . . on behalf of the Zimlet and proxies the result back to the Zimlet.

In one embodiment the Zimlet JSP implements any other server side data retrieval and manipulation for the actions to be performed on the client. The UI passes the matching text and which action button the user selected to the JSP . In one embodiment Simple Object Acces Protocol SOAP a protocol for exchanging XML based messages over a computer network can be used to implement this. The Zimlet jsp code may then use any protocol or API needed to fetch data or act on the user s selection. For example the JSP is used to talk to remote databases in SQL or in other protocols such as UDP and so on.

The security module serves two main purposes. First it verifies that a given client from which the request originated has access to a given Zimlet based on whether the user s class of service permits access to the requested Zimlet. This is performed in one embodiment by the client access module . In one embodiment the user s class of service is established by the server administrator. Second it prevents unauthorized access to remote servers by Zimlets by ensuring that each request has a valid authentication token. This is performed in one embodiment by the server access module .

An index storage is present on the server in accordance with an embodiment of the present invention. This indexing is described in more detail below in the context of the matching module .

In one embodiment the matching module performs two functions i it analyzes the content of any mailbox item for any matches with content objects and ii it searches mailbox items for any predefined index searches. In another embodiment a separate module exists for indexing searching. In yet another embodiment the content of mailbox items is searched for content objects in the client rather than in the server .

As mentioned before indexes predefined searches can be performed in one embodiment based on the indexes in the index storage . In one embodiment if a mailbox item contains a search term a Boolean flag is set to True or 1 for that mailbox item. When for example an email is received at server it is parsed to check if it contains any indexed terms and the Boolean flag is set appropriately. The email is then sent on to the collaboration client . When a user later desires to retrieve the indexed items all mailbox items with the Boolean flag set appropriately are retrieved.

Because of the client server architecture indexing searching of content objects can be performed across various collaboration suite applications such as email contacts and calendar . In addition indexing searching can also be performed across various user computers for example the mailboxes of all employees of an organization . Such indexing across different computers e.g. for search discovery across mailboxes provides for compliance with various regulations such as Sarbanes Oxley Human Resources litigation discovery processes fiduciary isolation of business units such as automatically recognizing equity related communications and so on.

In accordance with an embodiment of the present invention pre indexed searches of content such as email message bodies calendar appointment notes and contact fields that contains one or more content objects can be combined with live searches. For instance a pre indexed search has phone can be combined with a live search for a specific name Jack . The result would return any content which has the name Jack and which includes a phone number. Details regarding the implementation of such indexing are provided below in the Implementation section.

The client also includes the Zimlet user interface . The Zimlet user interface in accordance with an embodiment of the present invention has been discussed above with reference to and A C. In addition the client includes a toolkit . The toolkit serves the purpose of allowing the user and or administrator of the collaboration client to create new and or customized Zimlets. The toolkit includes basic UI elements and a Zimlet helper framework . The basic UI elements includes fundamental UI elements such as pop ups menus etc. The Zimlet helper framework provides for more complex Zimlet authoring. The Zimlet helper framework provides common methods for tasks like Network Access XML document conversion access to Collaboration data like user preferences or contact and event info. The Zimlet Helper framework also provides the Zimlet author with per user storage for Zimlet preferences or state data specific to that Zimlet User combination. Further details regarding how Zimlets can be written are in the following section.

This section describes in some detail how Zimlets are implemented in accordance with an embodiment of the present invention. As mentioned above a Zimlet is a bundle of files that enable the integration of the ZCS platform with disparate information systems and content. It is possible in one embodiment for a system administrator to write his or her own Zimlets and or tailor them to interface with whatever information systems best suit user needs. Further Zimlets can be customized to display the results in a format and manner preferred by the system administrator and based upon triggers e.g. mousing over right clicking etc. preferred by the system administrator.

As mentioned above the Zimlet definition file is extremely important. In some embodiments this file entirely specifies the Zimlet s behavior. The definition file can include what the Zimlet is e.g. what regular expression is to be recognized as a content object or the name and icon for a panel item what trigger events to recognize e.g. mousing over and right clicking for content objects dragging dropping right clicking double clicking or simply the user logging in or a certain amount of time elapsing for panel items what actions to take e.g. contact a remote server with certain parameters and instructions and how to display the results e.g. display the results in a pop up browser window within the collaboration client or display the results in a new browser window .

Some details regarding the Zimlet definition file in accordance with an embodiment of the present invention follow. The element is the enclosing element in the definition file. It may contain a number of child elements some optional that define the Zimlet. One or more of the elements can be required while others may be optional in different embodiments of the present invention. The following sub sections describe each of these child elements 

The element is the name of the Zimlet and a required element in accordance with an embodiment of the present invention. This must be the same name as is used to prefix all the well defined files in the Zimlet bundle. In one embodiment the Zimlet name is required to be unique. e.g. Maps

As mentioned above in certain cases a Zimlet implementation may require additional JavaScript code to be loaded by the client . For such cases the tag is provided. The content of this tag provides a reference to the additional script files that are to be loaded. These files may be internal that is specified by a relative URL e.g. foo.js or external that is specified by an absolute URL e.g. http api.google.com maps.js .

As described above a content object is an object that is recognized by a Zimlet in a body of content such as email message body the notes of an appointment or fields in a contact. Examples of content objects include phone numbers URLs purchase order numbers package tracking numbers etc. The element defines the content object that a Zimlet recognizes and how the user interacts with the object. It is to be noted that some data for instance phone numbers have different characteristics based upon which country and or region they are in. Similarly other information such as addresses dates etc. also have different formats based on the context. Such varied formats and or context appropriateness can be easily taken into account when defining the content object. If a Zimlet does not expose a content object then this element may be omitted. The element is discussed in greater detail below.

The element describes how a content object is indexed on the server. As mentioned above content such as email message bodies calendar appointment notes and contact fields that contains one or more Zimlet content objects may be searched for. In one embodiment this searching is done via the query languages has clause. For example if a Zimlet were to define phone numbers as a content object then to search for content containing phone numbers a element would be specified that defines phone numbers and would enable searching for content containing phone numbers via the has phone clause. The element is discussed in greater detail below.

The Zimlet panel items appear within the Zimlet client s overview panel. In one embodiment the overview panel is to the right of the application buttons and also includes panels for a user s folders tags and saved searches. By defining a a Zimlet may add an item to the Zimlet panel within the overview panel. The user may interact with a Zimlet panel item by doubling clicking it as well as by dragging and dropping various objects such as contacts conversations and mail messages onto it. As part of the panel item definition the Zimlet author specifies the types of objects that the Zimlet supports as well the actions to be performed on those objects. The element is discussed in greater detail below.

The element mentioned above is described in greater detail here as it is implemented in accordance with an embodiment of the present invention. The element may contain a number of child elements some of which may be required and some of which may be optional in accordance with various embodiments of the present invention. Some of the child elements are 

The element specifies the rules for the matching content objects on the client. In one embodiment two mechanisms are used to define these rules 

The element defines the behavior for the click action. This usually means the user clicking on a content object with the left mouse button. In one embodiment includes a description of what action to take e.g. specifying the URL to be loaded the visual action to be taken e.g. how to present content to the user whether to present it in line or in a new window the dimensions of a visual etc. etc.

In the example below when the user clicks on the Zimlet content object a new browser window of 300 300 pixel dimension is opened. The browser is loaded with the content of the URL specified in the element

When a user hovers their mouse over an object a tool tip may be popped up. The element controls the behavior of this tool tip. In one embodiment the element includes various attributes including the action to take e.g. what URL to load visual elements such as whether the tool tip is sticky or not and the dimensions of the tool tip and so on etc.

The element is described in more detail here. As mentioned above to have the Zimlet server provide an index for a contentObject defined by a Zimlet a element must be provided. This element has a number of important child elements which determine how the indexing takes place on the server some of which are discussed below 

This element specifies the keyword that will be used with the query language s has clause e.g. has address or has id .

The element specifies the rules the server will use to determine if given content such as an email message contains one or more instances of the content object defined by the Zimlet. This is similar to the element described above in the context of element.

The element is discussed here. In one embodiment the Zimlet panel appears within the Zimlet client s overview panel. In one embodiment the overview panel is to the right of the application buttons and also contains panels for a user s folders tags and saved searches. In one embodiment by defining a a Zimlet adds an item to the Zimlet panel within the overview panel. The user may interact with a Zimlet panel item by doubling clicking it as well as by dragging and dropping various objects such as contacts conversations and mail messages onto it. As part of the panel item definition the Zimlet author specifies the types of objects that the Zimlet supports as well the actions to be performed on those objects. If a Zimlet author does not wish to expose a panel item for their Zimlet then this element may be omitted. In one embodiment the attributes of the include the label that will be displayed as the text label for the Zimlet panel item and the icon to be displayed as the Zimlet panel item s icon. In addition the child elements of the include an element for defining the tool tip text to be displayed when a user hovers their mouse over the Zimlet panel item and an element for defining the behavior for the double click action. Some other child elements include in one embodiment an element for specifying a drag source for the Zimlet panel item. A drag source consists of a mailbox item e.g. a conversation a contact or a mail message and the action to be performed when an object of that type is dropped on the panel item.

Further details regarding an example implementation of a system and method in accordance with embodiments of the present invention can be found in provisional applications 60 774 017 and 60 730 255 to which this application claims priority and which are incorporated by reference herein.

While particular embodiments and applications of the present invention have been illustrated and described it is to be understood that the invention is not limited to the precise construction and components disclosed herein. For example applications other than collaboration suites may use various embodiments of the present invention. As another example the server side implementation of the present invention may be integrated with a standard collaboration suite client. Further other languages and or protocols may be used to implement a system and method in accordance with the present invention. Various other modifications changes and variations which will be apparent to those skilled in the art may be made in the arrangement operation and details of the method and apparatus of the present invention disclosed herein without departing from the spirit and scope of the invention as defined in the following claims.

