---

title: Dynamic network link selection for transmitting a message between compute nodes of a parallel computer
abstract: Methods, apparatus, and products are disclosed for dynamic network link selection for transmitting a message between nodes of a parallel computer. The nodes are connected using a data communications network. Each node connects to adjacent nodes in the data communications network through a plurality of network links. Each link provides a different data communication path through the network between the nodes of the parallel computer. Such dynamic link selection includes: identifying, by an origin node, a current message for transmission to a target node; determining, by the origin node, whether transmissions of previous messages to the target node have completed; selecting, by the origin node from the plurality of links for the origin node, a link in dependence upon the determination and link characteristics for the plurality of links for the origin node; and transmitting, by the origin node, the current message to the target node using the selected link.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07797445&OS=07797445&RS=07797445
owner: International Business Machines Corporation
number: 07797445
owner_city: Armonk
owner_country: US
publication_date: 20080626
---
The field of the invention is data processing or more specifically methods apparatus and products for dynamic network link selection for transmitting a message between compute nodes of a parallel computer.

The development of the EDVAC computer system of 1948 is often cited as the beginning of the computer era. Since that time computer systems have evolved into extremely complicated devices. Today s computers are much more sophisticated than early systems such as the EDVAC. Computer systems typically include a combination of hardware and software components application programs operating systems processors buses memory input output devices and so on. As advances in semiconductor processing and computer architecture push the performance of the computer higher and higher more sophisticated computer software has evolved to take advantage of the higher performance of the hardware resulting in computer systems today that are much more powerful than just a few years ago.

Parallel computing is the simultaneous execution of the same task split up and specially adapted on multiple processors in order to obtain results faster. Parallel computing is based on the fact that the process of solving a problem usually can be divided into smaller tasks which may be carried out simultaneously with some coordination.

Parallel computers execute parallel algorithms. A parallel algorithm can be split up to be executed a piece at a time on many different processing devices and then put back together again at the end to get a data processing result. Some algorithms are easy to divide up into pieces. Splitting up the job of checking all of the numbers from one to a hundred thousand to see which are primes could be done for example by assigning a subset of the numbers to each available processor and then putting the list of positive results back together. In this specification the multiple processing devices that execute the individual pieces of a parallel program are referred to as compute nodes. A parallel computer is composed of compute nodes and other processing nodes as well including for example input output I O nodes and service nodes.

Parallel algorithms are valuable because it is faster to perform some kinds of large computing tasks via a parallel algorithm than it is via a serial non parallel algorithm because of the way modern processors work. It is far more difficult to construct a computer with a single fast processor than one with many slow processors with the same throughput. There are also certain theoretical limits to the potential speed of serial processors. On the other hand every parallel algorithm has a serial part and so parallel algorithms have a saturation point. After that point adding more processors does not yield any more throughput but only increases the overhead and cost.

Parallel algorithms are designed also to optimize one more resource the data communications requirements among the nodes of a parallel computer. There are two ways parallel processors communicate shared memory or message passing. Shared memory processing needs additional locking for the data and imposes the overhead of additional processor and bus cycles and also serializes some portion of the algorithm.

Message passing processing uses high speed data communications networks and message buffers but this communication adds transfer overhead on the data communications networks as well as additional memory need for message buffers and latency in the data communications among nodes. Designs of parallel computers use specially designed data communications links so that the communication overhead will be small but it is the parallel algorithm that decides the volume of the traffic.

Many data communications network architectures are used for message passing among nodes in parallel computers. Compute nodes may be organized in a network as a torus or mesh for example. Also compute nodes may be organized in a network as a tree. A torus network connects the nodes in a three dimensional mesh with wrap around links. Every node is connected to its six neighbors through this torus network and each node is addressed by its x y z coordinate in the mesh. In such a manner a torus network lends itself to point to point operations. In a tree network the nodes typically are organized in a binary tree arrangement each node has a parent and two children although some nodes may only have zero children or one child depending on the hardware configuration . In computers that use a torus and a tree network the two networks typically are implemented independently of one another with separate routing circuits separate physical links and separate message buffers. A tree network provides high bandwidth and low latency for certain collective operations such as for example an allgather allreduce broadcast scatter and so on.

When transferring message between compute nodes connected using such networks the compute node sending the message breaks the message into packets for transmission through the network. To ensure that the packets are processed by the receiving node with minimal overhead the compute node sending the message transmits the packets in order through the network to the receiving node. The network guarantees that the packet order is not altered during transmission through the network through use of deterministic routing. Deterministic routing ensures that packets transmitted from one node to another node always follow the same route. In this manner a single static route exists for data communications between each pair of nodes in the network. The drawback to such a static routing scheme however is that communications between two compute nodes in the network can deteriorate when routing bottlenecks develop along the route used by the network to transfer messages between those two compute nodes.

Methods apparatus and products are disclosed for dynamic network link selection for transmitting a message between compute nodes of a parallel computer. The compute nodes are connected using a data communications network. Each compute node connects to adjacent compute nodes in the data communications network through a plurality of network links. Each network link provides a different data communication path through the network between the compute nodes of the parallel computer. Such dynamic link selection includes identifying by an origin compute node a current message for transmission to a target compute node determining by the origin compute node whether transmissions of previous messages to the target compute node have completed selecting by the origin compute node from the plurality of network links for the origin compute node a network link in dependence upon the determination and link characteristics for the plurality of network links for the origin compute node and transmitting by the origin compute node the current message to the target compute node using the selected network link.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods apparatus and computer program products for dynamic network link selection for transmitting a message between compute nodes of a parallel computer according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . illustrates an exemplary system for dynamic network link selection for transmitting a message between compute nodes of a parallel computer according to embodiments of the present invention. The system of includes a parallel computer non volatile memory for the computer in the form of data storage device an output device for the computer in the form of printer and an input output device for the computer in the form of computer terminal . Parallel computer in the example of includes a plurality of compute nodes that execute an application. The application is a set of computer program instructions that provide user level data processing.

Each compute node of may include a plurality of processors for use in executing an application on the parallel computer according to embodiments of the present invention. The processors of each compute node in are operatively coupled to computer memory such as for example random access memory RAM . Each compute node may operate in several distinct modes that affect the relationship among the processors and the memory on that node such as for example serial processing mode or parallel processing mode. The mode in which the compute nodes operate is generally set during the node s boot processes and does not change until the node reboots.

In serial processing mode often referred to a virtual node mode the processors of a compute node operate independently of one another and each processor has access to a partition of the node s total memory that is exclusively dedicated to that processor. For example if a compute node has four processors and two Gigabytes GB of RAM when operating in serial processing mode each processor may process a thread independently of the other processors on that node and each processor may access a 512 Megabyte MB portion of that node s total 2 GB of RAM.

In parallel processing mode often referred to as symmetric multi processing mode one of the processors acts as a master and the remaining processors serve as slaves to the master processor. Each processor has access to the full range of computer memory on the compute node. Continuing with the exemplary node above having four processors and 2 GB of RAM for example each slave processor may cooperatively process threads spawned from the master processor and all of the processors have access to the node s entire 2 GB of RAM.

The compute nodes are coupled for data communications by several independent data communications networks including a Joint Test Action Group JTAG network a global combining network which is optimized for collective operations and a torus network which is optimized point to point operations. The global combining network is a data communications network that includes data communications links connected to the compute nodes so as to organize the compute nodes as a tree. Each data communications network is implemented with data communications links among the compute nodes . The data communications links provide data communications for parallel operations among the compute nodes of the parallel computer. The links between compute nodes are bi directional links that are typically implemented using two separate directional data communications paths.

In addition the compute nodes of parallel computer are organized into at least one operational group of compute nodes for collective parallel operations on parallel computer . An operational group of compute nodes is the set of compute nodes upon which a collective parallel operation executes. Collective operations are implemented with data communications among the compute nodes of an operational group. Collective operations are those functions that involve all the compute nodes of an operational group. A collective operation is an operation a message passing computer program instruction that is executed simultaneously that is at approximately the same time by all the compute nodes in an operational group of compute nodes. Such an operational group may include all the compute nodes in a parallel computer or a subset all the compute nodes. Collective operations are often built around point to point operations. A collective operation requires that all processes on all compute nodes within an operational group call the same collective operation with matching arguments. A broadcast is an example of a collective operation for moving data among compute nodes of an operational group. A reduce operation is an example of a collective operation that executes arithmetic or logical functions on data distributed among the compute nodes of an operational group. An operational group may be implemented as for example an MPI communicator. 

 MPI refers to Message Passing Interface a prior art parallel communications library a module of computer program instructions for data communications on parallel computers. Examples of prior art parallel communications libraries that may be improved for use with systems according to embodiments of the present invention include MPI and the Parallel Virtual Machine PVM library. PVM was developed by the University of Tennessee The Oak Ridge National Laboratory and Emory University. MPI is promulgated by the MPI Forum an open group with representatives from many organizations that define and maintain the MPI standard. MPI at the time of this writing is a de facto standard for communication among compute nodes running a parallel program on a distributed memory parallel computer. This specification sometimes uses MPI terminology for ease of explanation although the use of MPI as such is not a requirement or limitation of the present invention.

Some collective operations have a single originating or receiving process running on a particular compute node in an operational group. For example in a broadcast collective operation the process on the compute node that distributes the data to all the other compute nodes is an originating process. In a gather operation for example the process on the compute node that received all the data from the other compute nodes is a receiving process. The compute node on which such an originating or receiving process runs is referred to as a logical root.

Most collective operations are variations or combinations of four basic operations broadcast gather scatter and reduce. The interfaces for these collective operations are defined in the MPI standards promulgated by the MPI Forum. Algorithms for executing collective operations however are not defined in the MPI standards. In a broadcast operation all processes specify the same root process whose buffer contents will be sent. Processes other than the root specify receive buffers. After the operation all buffers contain the message from the root process.

In a scatter operation the logical root divides data on the root into segments and distributes a different segment to each compute node in the operational group. In scatter operation all processes typically specify the same receive count. The send arguments are only significant to the root process whose buffer actually contains sendcount N elements of a given data type where N is the number of processes in the given group of compute nodes. The send buffer is divided and dispersed to all processes including the process on the logical root . Each compute node is assigned a sequential identifier termed a rank. After the operation the root has sent sendcount data elements to each process in increasing rank order. Rank 0 receives the first sendcount data elements from the send buffer. Rank 1 receives the second sendcount data elements from the send buffer and so on.

A gather operation is a many to one collective operation that is a complete reverse of the description of the scatter operation. That is a gather is a many to one collective operation in which elements of a datatype are gathered from the ranked compute nodes into a receive buffer in a root node.

A reduce operation is also a many to one collective operation that includes an arithmetic or logical function performed on two data elements. All processes specify the same count and the same arithmetic or logical function. After the reduction all processes have sent count data elements from computer node send buffers to the root process. In a reduction operation data elements from corresponding send buffer locations are combined pair wise by arithmetic or logical operations to yield a single corresponding element in the root process s receive buffer. Application specific reduction operations can be defined at runtime. Parallel communications libraries may support predefined operations. MPI for example provides the following pre defined reduction operations 

In addition to compute nodes the parallel computer includes input output I O nodes coupled to compute nodes through the global combining network . The compute nodes in the parallel computer are partitioned into processing sets such that each compute node in a processing set is connected for data communications to the same I O node. Each processing set therefore is composed of one I O node and a subset of compute nodes . The ratio between the number of compute nodes to the number of I O nodes in the entire system typically depends on the hardware configuration for the parallel computer. For example in some configurations each processing set may be composed of eight compute nodes and one I O node. In some other configurations each processing set may be composed of sixty four compute nodes and one I O node. Such example are for explanation only however and not for limitation. Each I O nodes provide I O services between compute nodes of its processing set and a set of I O devices. In the example of the I O nodes are connected for data communications I O devices through local area network LAN implemented using high speed Ethernet.

The parallel computer of also includes a service node coupled to the compute nodes through one of the networks . Service node provides services common to pluralities of compute nodes administering the configuration of compute nodes loading programs into the compute nodes starting program execution on the compute nodes retrieving results of program operations on the computer nodes and so on. Service node runs a service application and communicates with users through a service application interface that runs on computer terminal .

As described in more detail below in this specification the system of operates generally for dynamic network link selection for transmitting a message between compute nodes of a parallel computer according to embodiments of the present invention. The compute nodes are connected using a data communications network and each compute node connects to adjacent compute nodes in the data communications network through a plurality of network links. Each network link is a physical communications channel between two adjacent nodes in a network. That is the physical hardware in each compute node to implement data communications and the conducting pathway used to transfer signal between two adjacent compute nodes. The number of links connected to each compute node is typically related to the number of nodes adjacent to that compute node in the network topology. For example in a three dimensional torus network where each compute node has six adjacent compute nodes each compute node also has six network links one link connecting that node to each adjacent compute node. Readers will note that because different links for a particular node connect that node to different adjacent nodes each network link provides a different data communication path through the network between any two compute nodes.

The system of operates generally for dynamic network link selection for transmitting a message between compute nodes of a parallel computer according to embodiments of the present invention as follows An origin compute node identifies a current message for transmission to a target compute node. The origin compute node determines whether transmissions of previous messages to the target compute node have completed. The origin compute node then selects a network link from the plurality of network links for the origin compute node in dependence upon the determination and link characteristics for the plurality of network links for the origin compute node. In addition the origin compute node transmits the current message to the target compute node using the selected network link. Readers will note that the origin compute node is a compute node attempting to transmit a message while the target compute node is a compute node intended as the recipient of the message.

In the example of the plurality of compute nodes are implemented in a parallel computer and are connected together using a plurality of data communications networks . The point to point network is optimized for point to point operations. The global combining network is optimized for collective operations. Although dynamic network link selection for transmitting a message between compute nodes of a parallel computer according to embodiments of the present invention is described above in terms of an architecture for a parallel computer readers will note that such an embodiment is for explanation only and not for limitation. In fact dynamic network link selection for transmitting a message between compute nodes of a parallel computer according to embodiments of the present invention may be implemented using a variety of computer system architectures including for example architectures for a stand alone compute node a cluster of nodes a distributed computing system a grid computing system and so on.

The arrangement of nodes networks and I O devices making up the exemplary system illustrated in are for explanation only not for limitation of the present invention. Data processing systems capable of dynamic network link selection for transmitting a message between compute nodes of a parallel computer according to embodiments of the present invention may include additional nodes networks devices and architectures not shown in as will occur to those of skill in the art. Although the parallel computer in the example of includes sixteen compute nodes readers will note that parallel computers capable of dynamic network link selection for transmitting a message between compute nodes of a parallel computer according to embodiments of the present invention may include any number of compute nodes. In addition to Ethernet and JTAG networks in such data processing systems may support many data communications protocols including for example TCP Transmission Control Protocol IP Internet Protocol and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Dynamic network link selection for transmitting a message between compute nodes of a parallel computer according to embodiments of the present invention may be generally implemented on a parallel computer that includes a plurality of compute nodes. In fact such computers may include thousands of such compute nodes. Each compute node is in turn itself a kind of computer composed of one or more computer processors its own computer memory and its own input output adapters. For further explanation therefore sets forth a block diagram of an exemplary compute node useful in a parallel computer capable of dynamic network link selection for transmitting a message between compute nodes of a parallel computer according to embodiments of the present invention. The compute node of includes one or more computer processors as well as random access memory RAM . The processors are connected to RAM through a high speed memory bus and through a bus adapter and an extension bus to other components of the compute node . Stored in RAM is an application program a module of computer program instructions that carries out parallel user level data processing using parallel algorithms. The application of allocates an application buffer for storing a message for transmission to another compute node that is a target compute node.

Also stored in RAM is a messaging module a library of computer program instructions that carry out parallel communications among compute nodes including point to point operations as well as collective operations. Application program executes collective operations by calling software routines in the messaging module . A library of parallel communications routines may be developed from scratch for use in systems according to embodiments of the present invention using a traditional programming language such as the C programming language and using traditional programming methods to write parallel communications routines that send and receive data among nodes on two independent data communications networks. Alternatively existing prior art libraries may be improved to operate according to embodiments of the present invention. Examples of prior art parallel communications libraries include the Message Passing Interface MPI library and the Parallel Virtual Machine PVM library.

The messaging module of is improved for dynamic network link selection for transmitting a message between compute nodes of a parallel computer according to embodiments of the present invention. As mentioned above the compute nodes are connected using a data communications network and each compute node is connected to adjacent compute nodes in the data communications network through a plurality of network links . Each network link provides a different data communication path through the network between the compute node and any other compute node in the network . The messaging module of operates generally for dynamic network link selection for transmitting a message between compute nodes of a parallel computer according to embodiments of the present invention identifying a current message for transmission to a target compute node determining whether transmissions of previous messages to the target compute node have completed selecting from the plurality of network links for the origin compute node a network link in dependence upon the determination and link characteristics for the plurality of network links for the origin compute node and transmitting the current message to the target compute node using the selected network link.

Also stored in RAM is an operating system a module of computer program instructions and routines for an application program s access to other resources of the compute node. It is typical for an application program and parallel communications library in a compute node of a parallel computer to run a single thread of execution with no user login and no security issues because the thread is entitled to complete access to all resources of the node. The quantity and complexity of tasks to be performed by an operating system on a compute node in a parallel computer therefore are smaller and less complex than those of an operating system on a serial computer with many threads running simultaneously. In addition there is no video I O on the compute node of another factor that decreases the demands on the operating system. The operating system may therefore be quite lightweight by comparison with operating systems of general purpose computers a pared down version as it were or an operating system developed specifically for operations on a particular parallel computer. Operating systems that may usefully be improved simplified for use in a compute node include UNIX Linux Microsoft XP AIX IBM s i5 OS and others as will occur to those of skill in the art.

The exemplary compute node of includes several communications adapters for implementing data communications with other nodes of a parallel computer. Such data communications may be carried out serially through RS 232 connections through external buses such as USB through data communications networks such as IP networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a network. Examples of communications adapters useful in systems for dynamic network link selection for transmitting a message between compute nodes of a parallel computer according to embodiments of the present invention include modems for wired communications Ethernet IEEE 802.3 adapters for wired network communications and 802.11b adapters for wireless network communications.

The data communications adapters in the example of include a Gigabit Ethernet adapter that couples example compute node for data communications to a Gigabit Ethernet . Gigabit Ethernet is a network transmission standard defined in the IEEE 802.3 standard that provides a data rate of 1 billion bits per second one gigabit . Gigabit Ethernet is a variant of Ethernet that operates over multimode fiber optic cable single mode fiber optic cable or unshielded twisted pair.

The data communications adapters in the example of includes a JTAG Slave circuit that couples example compute node for data communications to a JTAG Master circuit . JTAG is the usual name used for the IEEE 1149.1 standard entitled Standard Test Access Port and Boundary Scan Architecture for test access ports used for testing printed circuit boards using boundary scan. JTAG is so widely adapted that at this time boundary scan is more or less synonymous with JTAG. JTAG is used not only for printed circuit boards but also for conducting boundary scans of integrated circuits and is also useful as a mechanism for debugging embedded systems providing a convenient back door into the system. The example compute node of may be all three of these It typically includes one or more integrated circuits installed on a printed circuit board and may be implemented as an embedded system having its own processor its own memory and its own I O capability. JTAG boundary scans through JTAG Slave may efficiently configure processor registers and memory in compute node for use in dynamic network link selection for transmitting a message between compute nodes of a parallel computer according to embodiments of the present invention.

The data communications adapters in the example of includes a Point To Point Adapter that couples example compute node for data communications to a network that is optimal for point to point message passing operations such as for example a network configured as a three dimensional torus or mesh. Point To Point Adapter provides data communications in six directions on three communications axes x y and z through six bidirectional links x x y y z and z .

The data communications adapters in the example of includes a Global Combining Network Adapter that couples example compute node for data communications to a network that is optimal for collective message passing operations on a global combining network configured for example as a binary tree. The Global Combining Network Adapter provides data communications through three bidirectional links two to children nodes and one to a parent node .

Example compute node includes two arithmetic logic units ALUs . ALU is a component of processor and a separate ALU is dedicated to the exclusive use of Global Combining Network Adapter for use in performing the arithmetic and logical functions of reduction operations. Computer program instructions of a reduction routine in parallel communications library may latch an instruction for an arithmetic or logical function into instruction register . When the arithmetic or logical function of a reduction operation is a sum or a logical or for example Global Combining Network Adapter may execute the arithmetic or logical operation by use of ALU in processor or typically much faster by use dedicated ALU .

The example compute node of includes a direct memory access DMA controller which is computer hardware for direct memory access and a DMA engine which is computer software for direct memory access. Direct memory access includes reading and writing to memory of compute nodes with reduced operational burden on the central processing units . A DMA transfer essentially copies a block of memory from one location to another typically from one compute node to another. While the CPU may initiate the DMA transfer the CPU does not execute the transfer.

Readers will recall that the messaging module of selects one of the network links based in part on the determination of whether transmissions of previous messages to the target compute node have completed. The messaging module of may determine whether transmissions of previous messages to the target compute node have completed by determining whether a value of a DMA counter has reached a predetermined value. To administer such a DMA counter the DMA engine is improved for dynamic network link selection for transmitting a message between compute nodes of a parallel computer according to embodiments of the present invention. The DMA engine of operates generally for dynamic network link selection for transmitting a message between compute nodes of a parallel computer according to embodiments of the present invention by incrementing the value of the DMA counter when the messaging module transmits the current message to the target compute node using the selected network link. The DMA engine of also operates generally for dynamic network link selection for transmitting a message between compute nodes of a parallel computer according to embodiments of the present invention by performing in response to transmitting the current message to the target compute node a remote get operation to retrieve data from the target compute node receiving the data from the target compute node and decrementing the value of the DMA counter in response to receiving the data from the target compute node. A remote get operation is an operation that allows a compute node to retrieve data from another compute node with minimal processor involvement on the compute node providing the data. Typically a remote get operation is a DMA to DMA transfer from a target node to an origin node that involves little if any processing from the nodes processing cores to complete the transfer.

For further explanation illustrates an exemplary Point To Point Adapter useful in systems capable of dynamic network link selection for transmitting a message between compute nodes of a parallel computer according to embodiments of the present invention. Point To Point Adapter is designed for use in a data communications network optimized for point to point operations a network that organizes compute nodes in a three dimensional torus or mesh. Point To Point Adapter in the example of provides data communication along an x axis through four unidirectional data communications links to and from the next node in the x direction and to and from the next node in the x direction . Point To Point Adapter also provides data communication along a y axis through four unidirectional data communications links to and from the next node in the y direction and to and from the next node in the y direction . Point To Point Adapter in also provides data communication along a z axis through four unidirectional data communications links to and from the next node in the z direction and to and from the next node in the z direction .

For further explanation illustrates an exemplary Global Combining Network Adapter useful in systems capable of dynamic network link selection for transmitting a message between compute nodes of a parallel computer according to embodiments of the present invention. Global Combining Network Adapter is designed for use in a network optimized for collective operations a network that organizes compute nodes of a parallel computer in a binary tree. Global Combining Network Adapter in the example of provides data communication to and from two children nodes through four unidirectional data communications links . Global Combining Network Adapter also provides data communication to and from a parent node through two unidirectional data communications links .

For further explanation sets forth a line drawing illustrating an exemplary data communications network optimized for point to point operations useful in systems capable of dynamic network link selection for transmitting a message between compute nodes of a parallel computer in accordance with embodiments of the present invention. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data network links between compute nodes. The networks links are implemented with point to point data communications adapters similar to the one illustrated for example in with data communications links on three axes x y and z and to and from in six directions x x y y z and z . The links and compute nodes are organized by this data communications network optimized for point to point operations into a three dimensional mesh . The mesh has wrap around links on each axis that connect the outermost compute nodes in the mesh on opposite sides of the mesh . These wrap around links form part of a torus . Each compute node in the torus has a location in the torus that is uniquely specified by a set of x y z coordinates. Readers will note that the wrap around links in the y and z directions have been omitted for clarity but are configured in a similar manner to the wrap around link illustrated in the x direction. For clarity of explanation the data communications network of is illustrated with only 27 compute nodes but readers will recognize that a data communications network optimized for point to point operations for use in dynamic network link selection for transmitting a message between compute nodes of a parallel computer in accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes.

For further explanation sets forth a line drawing illustrating an exemplary data communications network optimized for collective operations useful in systems capable of dynamic network link selection for transmitting a message between compute nodes of a parallel computer in accordance with embodiments of the present invention. The example data communications network of includes data communications links connected to the compute nodes so as to organize the compute nodes as a tree. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data communications links between compute nodes. The data communications links are implemented with global combining network adapters similar to the one illustrated for example in with each node typically providing data communications to and from two children nodes and data communications to and from a parent node with some exceptions. Nodes in a binary tree may be characterized as a physical root node branch nodes and leaf nodes . The root node has two children but no parent. The leaf nodes each has a parent but leaf nodes have no children. The branch nodes each has both a parent and two children. The links and compute nodes are thereby organized by this data communications network optimized for collective operations into a binary tree . For clarity of explanation the data communications network of is illustrated with only 31 compute nodes but readers will recognize that a data communications network optimized for collective operations for use in systems for dynamic network link selection for transmitting a message between compute nodes of a parallel computer accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes.

In the example of each node in the tree is assigned a unit identifier referred to as a rank . A node s rank uniquely identifies the node s location in the tree network for use in both point to point and collective operations in the tree network.

The ranks in this example are assigned as integers beginning with 0 assigned to the root node 1 assigned to the first node in the second layer of the tree 2 assigned to the second node in the second layer of the tree 3 assigned to the first node in the third layer of the tree 4 assigned to the second node in the third layer of the tree and so on. For ease of illustration only the ranks of the first three layers of the tree are shown here but all compute nodes in the tree network are assigned a unique rank.

For further explanation of dynamic network link selection for transmitting a message between compute nodes of a parallel computer in accordance with embodiments of the present invention consider the origin node of . The origin node connects to two adjacent compute nodes in the data communications network through two links one link along an X axis and another link along a Y axis. Through the link along the X axis the origin compute node may transmit messages along data communications path to the target node . Through the link along the Y axis the origin compute node may transmit messages along data communications path to the target node . After previously transmitting messages to the target node the origin compute node identifies a current message for transmission to the target compute node . The origin compute node then determines whether transmissions of previous messages to the target compute node have completed. Depending on whether transmissions of previous messages to the target compute node have completed and link characteristics for the links along the X axis and Y axis the origin node selects either the link along the X axis or the link along the Y axis and transmits the current message to the target compute node using the selected network link. Readers will note that when transmissions of previous messages to the target compute node have not completed the origin compute node uses whichever link was previously used to transmit the previous message to ensure that the message packets do not arrive out of order at the target node . If the transmissions of previous messages to the target compute node have completed however the origin compute node typically selects whichever link provides the least congested data communications path to the target compute node .

For further explanation sets forth a block diagram illustrating an exemplary communications architecture illustrated as a protocol stack useful in dynamic network link selection for transmitting a message between compute nodes of a parallel computer according to embodiments of the present invention. The architecture of implements a protocol stack in the sense that a hardware layer of the architecture operates a hardware level communications protocol among compute nodes a messaging layer implements a messaging level communication protocol an application layer operates an application level communications protocol and the layers effect data communications among compute nodes using application programming interfaces API calls among the layers in a stacked fashion.

The exemplary communications architecture of sets forth two compute nodes an origin compute node and a target compute node . Only two compute nodes are illustrated in the example of for ease of explanation and not for limitation. In fact dynamic network link selection for transmitting a message between compute nodes of a parallel computer according to embodiments of the present invention may be implemented using many compute nodes in very large scale computer systems such as parallel computers with thousands of nodes.

The exemplary communications architecture of includes an application layer composed of an application installed on the origin compute node and an application installed on the target compute node . In the example of the application on the origin compute node has a current application message for transmission to the application on the target compute node . Data communications between applications are effected using messaging modules installed on each of the compute nodes . Applications and may communicate by invoking function of an API exposed by the application messaging modules and . To transmit message to the application the application of may invoke a function of an API for messaging module that passes a buffer identifier of an application buffer containing the application message to the messaging module .

The exemplary communications architecture of includes a messaging layer that implements data communications protocols for data communications that support messaging in the application layer . Such data communications protocols are typically invoked through a set of APIs that are exposed to the applications and in the application layer . In the example of the messaging layer is composed of messaging module installed on the origin compute node and messaging module installed on the target compute node .

The exemplary communications architecture of includes a hardware layer that defines the physical implementation and the electrical implementation of aspects of the hardware on the compute nodes such as the bus network cabling connector types physical data rates data transmission encoding and may other factors for communications between the compute nodes and on the physical network medium. The hardware layer of is composed of communications hardware of the origin compute node communications hardware of the target compute node and the data communications network connecting the origin compute node to the target compute node . Such communications hardware may include for example point to point adapters and DMA controllers as described above with reference to . In the example of the communications hardware includes transmission stacks for storing network packets for transmission to other communications hardware through the data communications network and includes a reception stacks for storing network packets received from other communications hardware through the data communications network . The origin compute node of includes a transmission stack and a reception stack for each link connecting the origin node to an adjacent node in the network . Because the network of is implemented as a three dimensional torus network the origin node has six links one link for each direction of each axis. Namely the links are identified as the X link the X link the Y link the Y link the Z link and the Z link.

The exemplary communications architecture of illustrates a DMA engine for the origin compute node . The DMA engine in the example of is illustrated in both the messaging module layer and the hardware layer . The DMA engine is shown in both the messaging layer and the hardware layer because a DMA engine useful in dynamic network link selection for transmitting a message between compute nodes of a parallel computer according to embodiments of the present invention may often provide messaging layer interfaces and also implement communications according to some aspects of the communication hardware layer . The exemplary DMA engine of includes injection FIFO buffers for storing data descriptors that specify DMA transfer operations for transferring data. Although not shown the exemplary DMA engine of also includes a number of reception FIFO buffers used to receive messages from other DMA engines on other compute nodes. The origin compute node of may includes an injection FIFO buffer for each link connecting the origin node to an adjacent node in the network that is an injection FIFO buffer for the X link the X link the Y link the Y link the Z link and the Z link.

In the example of the messaging module is improved for dynamic network link selection for transmitting a message between compute nodes of a parallel computer according to embodiments of the present invention. As mentioned above the compute nodes are connected using a data communications network and each compute node is connected to adjacent compute nodes in the data communications network through a plurality of network links. Each network link provides a different data communication path through the network between the origin compute node and the target compute node . The messaging module of operates generally for dynamic network link selection for transmitting a message between compute nodes of a parallel computer according to embodiments of the present invention identifying the current message for transmission to a target compute node determining whether transmissions of previous messages to the target compute node have completed selecting from the plurality of network links for the origin compute node a network link in dependence upon the determination and link characteristics for the plurality of network links for the origin compute node and transmitting the current message to the target compute node using the selected network link.

The messaging module of may determine whether transmissions of previous messages to the target compute node have completed by determining whether a value of a DMA counter for the target compute node has reached a predetermined value. The messaging module of maintains a list of the DMA counters for the compute nodes connected to the origin compute node in a connections table . The connections table of is a data structure that specifies for each compute node connected to the origin compute node a DMA counter that tracks the number of incomplete message transmissions to that particular compute node. In addition the connections table of specifies the network link utilized for transmitting the previous message to that particular compute node. For example illustrates an entry in the connections table for the target node . The entry includes a network link identifier that specifies the network link used to transmit the previous message to the target compute node . The network link identifier may be implemented as a value representing any of the following exemplary links X link X link Y link Y link Z link or Z link. The entry also includes a DMA counter identifier that specifies the DMA counter used to track the number of incomplete message transmissions to the target compute node . Readers will note that the entries in the connections table for compute nodes may generally correspond with those nodes ranks. For example the entry for the compute node having a rank of 0 may be located in position 0 of the connections table the entry for the compute node having a rank of 1 may be located in position 1 of the connections table the entry for the compute node having a rank of 2 may be located in position 2 of the connections table and so on.

To administer the DMA counter such that the counter tracks the number of incomplete message transmissions to the target compute node the DMA engine is improved for dynamic network link selection for transmitting a message between compute nodes of a parallel computer according to embodiments of the present invention. The DMA engine of operates generally for dynamic network link selection for transmitting a message between compute nodes of a parallel computer according to embodiments of the present invention by incrementing the value of the DMA counter when a message is transmitted to the target compute node to indicated that there is an additional incomplete message transmission. In response to transmitting a message to the target compute node the DMA engine of may also perform a remote get operation to retrieve data from the target compute node . As mentioned above a remote get operation is an operation that allows a compute node to retrieve data from another compute node with minimal processor involvement on the compute node providing the data. The data returned from the target compute node during the remote get operation provides a signal to the DMA engine that the previous message transmission is complete because the remote get operation is performed after the message transfer. In addition the remote get operation provides the origin node with a signal for message transmission completion without involving the processing core on the origin compute node or the target compute node . When the DMA engine receives the data from the target compute node the DMA engine decrements the value of the DMA counter to indicate that one of the previous message transmissions has completed.

For further explanation sets forth a flow chart illustrating an exemplary method for dynamic network link selection for transmitting a message between compute nodes of a parallel computer according to the present invention. The compute nodes described with reference to are connected using a data communications network. Each compute node is connected to adjacent compute nodes in the data communications network through a plurality of network links and each network link provides a different data communication path through the network between the compute nodes.

The method of includes identifying by an origin compute node a current message for transmission to a target compute node. A messaging module of the origin compute node may identify a current message for transmission according to the method of by receiving from the application requesting the message transfer a buffer identifier for the application s buffer in which the message is stored.

The method of includes determining by the origin compute node whether transmissions of previous messages to the target compute node have completed. The messaging module of the origin compute node may determine whether transmissions of previous messages to the target compute node have completed according to the method of by determining whether a value of a DMA counter has reached a predetermined value . The DMA counter of represents a counter managed by the DMA engine of the origin compute node that tracks the number of DMA message transmissions that have not completed. A counter value of 0 may indicate that the there are no incomplete message transfers while a positive non zero value indicates the number of message transfers that have not completed. In such an example the predetermined value used to determine whether transmissions of previous messages to the target compute node have completed may be 0. Because some of the previous message transfers may not have completed however the current value of the DMA counter may be a non zero value to reflect those incomplete message transfers.

The method of also includes selecting by the origin compute node from the plurality of network links for the origin node a network link in dependence upon the determination and link characteristics for the plurality of network links. In the example of the link characteristics represent the number of data descriptors in the DMA injection FIFO buffers or packets in the hardware transmission stacks for each of the network links. Large numbers of packets waiting in the hardware transmission stack for a particular network link indicate that the link is part of a data communications path that is congested.

The method of then includes transmitting by the origin compute node the current message to the target compute node using the selected network link. The messaging module of the origin compute node may transmit the current message to the target compute node using the selected network link according to the method of by passing the DMA engine of the origin compute node an identifier for the message and an identifier for the selected network link. For example the messaging module of the origin compute node may invoke the following DMA function 

In the method of the messaging module of the origin compute node selects a network link and transmits the current message by selecting a previous network link used to transmit the previous messages if transmissions of previous messages to the target compute node have not completed and transmitting the current message to the target compute node using the previous network link . The previous network link of represents the network link used in the previous message transmission. The message module of the origin compute node selects the previous network link when transmissions of previous messages to the target compute node have not completed because using the same network link used during previous transmission ensures that the current message does not arrive at the target compute node out of order with respect to the previous messages. Readers will recall that sending message onto the network through the same network link ensures that the messages take the same data communications path to the target compute node.

The messaging module of the origin compute node also selects a network link and transmits the current message according to the method of by selecting a new network link if transmissions of previous messages to the target compute node have completed and transmitting the current message to the target compute node using the new network link . The messaging module of the origin compute node may select a new network link because all of the previous message transmission to the target compute node are complete thereby ensuring that message order cannot be confused by the target compute node. The messaging module of the origin node may select the new network link according to the method of by comparing the number of data descriptors in the DMA injection FIFO buffers or packets in the hardware transmission stacks for each of the network links as specified by the link characteristics and selecting the network link corresponding to the DMA injection FIFO buffer or the hardware transmission stack that is least full. The message module may also take into account the network topology such that the links directing packets toward the shortest route to the target node are selected before links directing packets away from the shortest route to the target node where possible.

When the origin compute node transmits the current message to the target node an additional message transfer is in processes but not yet complete. The origin node therefore adjusts the DMA counter . In such a manner transmitting by the origin compute node the current message to the target compute node using the selected network link according to the method of includes incrementing the value of the DMA counter . Incrementing the value of the DMA counter according to the method of may be carried out by adding a value of 1 to the current value of the DMA counter to reflect that an additional message transfer has begun but is not yet complete.

To signal the completion of the message transfer the method of includes performing by the DMA engine of the origin compute node in response to transmitting the current message to the target compute node a remote get operation to retrieve data from the target compute node. The DMA engine of the origin compute node performs the remote get operation according to the method of by transmitting a packet to the target compute node that instructs the DMA engine of the target compute node to send a chunk of data back to the origin compute node.

The method of then includes receiving by the DMA engine of the origin compute node the data from the target compute node. Receiving the data from the target compute ensures that the previous message transmission was complete because the packet transmitted to the target compute node that instructs the DMA engine of the target compute node to send a chunk of data back to the origin compute node is sent along the same network link as the previous message thereby ensuring that this packet follows the same data communications path through the network to the target compute node as the previous message.

The method of also includes decrementing by the DMA engine of the origin compute node the value of the DMA counter in response to receiving the data from the target compute node. Decrementing the value of the DMA counter according to the method of may be carried out by subtracting a value of 1 from the current value of the DMA counter to reflect that one of the outstanding message transfers has completed.

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for dynamic network link selection for transmitting a message between compute nodes of a parallel computer. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on computer readable media for use with any suitable data processing system. Such computer readable media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web as well as wireless transmission media such as for example networks implemented according to the IEEE 802.11 family of specifications. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

