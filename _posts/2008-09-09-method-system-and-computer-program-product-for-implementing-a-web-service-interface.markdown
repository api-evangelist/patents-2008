---

title: Method, system, and computer program product for implementing a web service interface
abstract: A method for using WebServices as a basis for implementing an application programming interface (API) of a high-level programming language between a service application and a client application is disclosed. Function parameters of an API function call represent a complex object structure (COS). The method includes serializing the COS into serialized payload data, encoding the serialized payload data to form a payload string that does not contain any XML-specific characters, and specifying the parameters of the API call in parts of an input message of a corresponding operation in a WSDL document. The method also includes transporting the payload string within the input message to the service application, decoding the payload string to yield the serialized payload data, and deserializing the serialized payload data to restore the COS representing the parameters of the API call. A system and computer program product for implementing the API on the basis of Web Services are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08245246&OS=08245246&RS=08245246
owner: International Business Machines Corporation
number: 08245246
owner_city: Armonk
owner_country: US
publication_date: 20080909
---
The present invention relates to Web Services and more specifically to a method and system for providing an API that relies on Web Services and that hides the management of complex data structures from the Web Service interface.

Web Services are becoming increasingly popular for use in application programming interfaces APIs . For example a Web Service may be implemented by a system that includes clients and servers that communicate among one another using eXtensible Markup Language XML and which Service offers a machine readable description of the operations written in Web Services Description Language WSDL . Java XML is but one example of an API for a Java application and is used in XML processing.

When passing complex input or output parameters e.g. lists of application specific objects in Java based Web Service operations these parameters are typically modeled as complex types in the associated WSDL file. The creation of such complex types can be a troublesome manual process since typically the data to be transported are already coded as large Java classes that are not applicable to tools based WSDL complex type creation.

Moreover a Web Service client and a Web Service provider server need to be operating at the same version level of the Web Service. In other words if the complex type changes in the WSDL both client and provider need to be upgraded to the most current Web Service version before they are able to interoperate again.

According to one embodiment of the present invention a method for using a Web Service as a basis for implementing an application programming interface API for a high level programming language between a service application and a client application is disclosed whereby function parameters of an API function call represent a complex object structure COS of the high level programming language used by the API. The method includes serializing the COS into serialized payload data encoding the serialized payload data to form a payload string that does not contain any XML specific characters and specifying the function parameters of the API function as a Web Service operation whereby the function parameters are specified in parts of an input message of a corresponding operation in a WSDL document. The method also includes transporting the payload string within the input message to the service application decoding the payload string to yield the serialized payload data and deserializing the serialized payload data to restore the COS representing the function parameters of the API function call. A system and computer program product for implementing the Web Service API are also disclosed.

Additional features and advantages are realized through the techniques of the present invention. Other embodiments and aspects of the invention are described in detail herein and are considered a part of the claimed invention. For a better understanding of the invention with the advantages and the features refer to the description and to the drawings.

An exemplary embodiment of the invention provides a method system and computer program product for implementing a Web Service interface that manages complex types also referred to herein as complex object structures and complex data structures transported between a client application and a provider or service application. The Web Service interface also referred to herein as application programming interface API utilizes string objects in lieu of Web Service Description Language WSDL complex types as both input and output parameters in a Web Service. The string objects contain serialized objects that are properly encoded as payload XML such that the parameter data does not interfere with the XML structure of the Web Service itself. In an exemplary embodiment the Web Service interface is an entry point to an existing software application e.g. Java application and serves as an API to be used with other software products.

With reference now to a block diagram of a system for implementing the Web Service interface processes will now be described in an exemplary embodiment. The system of includes a user system also referred to herein as client system in communication with a provider or host system . The user system may be in communication with the provider system directly e.g. using various cabling or via a network e.g. a local area network Internet etc. . The user system may be e.g. a general purpose computer system such as a desktop. The provider system may be a high powered computer processing system e.g. mainframe computer for handling a large volume of activities conducted with one or more user systems. Alternatively the user system may be physically and logically integrated with the host system as a single computer processing system. In this latter embodiment the direct connection and or network may not be required.

The user system may execute one or more software applications that use a portion of the Web Service interface processes. In an exemplary embodiment the user system is executing a client application e.g. a Java application . A Web Service interface is used by the application in order to communicate with a service application which is running on the provider system .

The provider system may implement a variety of software applications for providing Web Services to client applications e.g. the client application running on user system . In an exemplary embodiment the provider system executes the service application . The Web Service interface may be considered as an application programming interface API to the service application and other software products executing on the provider system . In an exemplary embodiment the interface uses a high level programming language e.g. Java as described herein.

The interface includes a Web Services Description Language WSDL that contains a XML schema . The XML schema describes the data structures format of the information that is passed between the client application and the service application as will be described further herein.

Turning now to a component level diagram of the system of including the Web Service interface architecture and related functions will now be described in an exemplary embodiment. The diagram in includes a client and service . The client represents the client application e.g. Java application executing on the user system . The client includes various elements or components for processing information. For example the client creates and receives complex object structures such as complex object structures A and A respectively. If the application is a Java application the complex object structures A and A may be Java Beans Java Beans object structures . The client also includes a serializer and a deserializer .

The service represents the application e.g. service application executing on the provider system . The service also includes a serializer and a deserializer . The serializers and deserializers may be generic i.e. independent of the internal structure of the complex object structures A B and B A respectively. For example Java provides a generic Java Beans encoder which is in fact a Java Beans serializer that may be used to serialize Java Beans objects to a specific XML representation and Java provides a generic Java Beans decoder which is in fact a Java Beans deserializer that may be used to deserialize the specific XML representation back to the original Java Bean objects.

The complex object structure A B represents an object passed as Web Service function parameters to the provider system more precisely to the service from the user system more precisely from the client in response to an API function call by the client application . More specifically complex object structure A represents the object prior to a serialization operation performed by the serializer on the user system while the complex object structure B reflects the complex object structure A after it has been through a deserialization operation by the deserializer on the provider system .

Likewise complex object structures A B represent complex object Web Service function parameters referred to herein as a response object structure passed to the user system via the client from the provider system via the service respectively. More specifically complex object structure B represents the response object prior to a serialization operation performed by the serializer on the provider system while the complex object structure A reflects the complex object structure B after it has been through a deserialization operation by the deserializer on the user system . Additional encoding operations are performed on the serialized payload data as will be described further herein.

With respect to the input function parameters the interface specifies function parameters of the API function call in one or more parts of an input message of a corresponding operation in the WSDL document. Likewise with respect to the response function parameters the interface specifies the return value of the API function call in one or more parts of a response message of the corresponding operation in the WSDL document. Accordingly a Web Service is used as a basis for implementing the exemplary API for a high level programming language between a service application and a client application. Function parameters of an API function call initiated by a client application represent a first complex object structure of the high level programming language using the exemplary API as described herein.

Turning now to a flow diagram describing a process for implementing the Web Service interface processes will now be described in an exemplary embodiment. The Web Service interface processes transform complex object structures that represent input parameters of a Web Service call API function call to simple xsd string objects invoke the Web Service operation and transform its return data from xsd string type back to the complex object structure that has been built by the service application as the return value of the operation.

For purposes of illustration a source system is described herein as the client and a target system is described herein as the service . However it will be understood that the service may act as the source system and the client may act as the target system. At step a source system converts a complex object structure e.g. complex object structure A into serialized payload data. The complex object structure may include any number of attributes which in turn may represent any type of nested data object or a simple data type. For example a complex object structure may be a department which contains an attribute manager of data type person and an attribute members which is defined as a list of person objects. The data type person is again a complex object structure containing attributes like home address which is again a complex data structure salary and date of birth. A complex object is then one specific instance of such a complex object structure with actual values filled in for some or for all of the attributes defined by the complex object structure.

At step the serialized payload data is encoded by the encoder e.g. encoder to form a payload string that does not contain any XML specific characters. An example of this encoding operation is shown as follows 

Sample serialized payload data note for simplicity this example assumes a serialized Department object for which all attributes are not set 

The encoding of the serialized payload data may be implemented as a substitution of every XML specific character with a corresponding control sequence of characters. Alternatively the encoding of the serialized payload data may be implemented using Base64 encoding. After the encoding step the resulting payload string is shown as follows 

 lt xml version quot 1.0 quot encoding quot UTF 8 quot gt lt java version quot 1.5.0 quot class quot java.beans.XMLDecoder quot gt lt object class quot com.mycomp.Department quot gt lt java gt 

At step interface specifies the API function as a Web Service operation whereby the function parameters are specified in one or more parts of an input message of a corresponding operation in the WSDL document. In particular the Web Service interface more precisely the XML schema is defined to expect operation parameters as xsd string and therefore ignores the inner structure of the payload string when it validates the input parameters of the Web Service call API function call according to the XML schema .

At step the communication means transports the payload string within the message parts of the input message via the interface to the destination address at the target system. The complex object structure is recreated at step by decoding the payload string via the decoder to produce the serialized payload data and converting the serialized payload data e.g. via the deserializer to the original complex object structure e.g. complex object structure B at the target system. The decoding of the payload string may be implemented as a substitution of the control sequence with the corresponding XML specific characters. Alternatively the decoding of the payload string may be implemented using Base64 decoding.

The target system performs one or more operations on the complex object structure B as specified by the complex object structure information and produces a second complex object structure e.g. B that includes the results of the operations at step . At step the second complex object structure B is converted into a second serialized payload data at the target system e.g. via serializer . The second serialized payload data is then encoded to form a second payload string without containing any XML specific characters e.g. using encoder at step .

At step the interface specifies the return value of the API function call in one or more parts of a response message of the corresponding operation in the WSDL document . In particular the Web Service interface ignores the inner structure of the second payload string as it validates the return data of the Web Service operation according to the XML schema and the communication means transports the second payload string within the response message via the interface to the source system e.g. client at step .

At step the service application decodes the second payload string to yield the second serialized payload data before deserializing the second serialized payload data to restore the second complex object structure representing the return value at step .

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations element components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

The flow diagrams depicted herein are just one example. There may be many variations to this diagram or the steps or operations described therein without departing from the spirit of the invention. For instance the steps may be performed in a differing order or steps may be added deleted or modified. All of these variations are considered a part of the claimed invention.

While the preferred embodiment to the invention had been described it will be understood that those skilled in the art both now and in the future may make various improvements and enhancements which fall within the scope of the claims which follow. These claims should be construed to maintain the proper protection for the invention first described.

