---

title: Direct deployment of static content
abstract: A computerized method and a system for direct deploy of static content. Static content is received at a deployment framework of an application server. The content is forwarded to a content deployment extension (CDE) for implementing the deployment of the content on the applications server. The application server operates in online mode during the deployment. The CDE selects an appropriate content handler to handle the deployment of the content. The content is deployed by the content handler on the application server in online mode. The CDE receive a feedback from the deployment of the static content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08924947&OS=08924947&RS=08924947
owner: SAP SE
number: 08924947
owner_city: Walldorf
owner_country: DE
publication_date: 20081219
---
This application claims priority of U.S. Provisional Patent Application No. 61 034 114 entitled CONTENT DEPLOYMENT EXTENSION filed Mar. 5 2008.

The field of the invention relates generally to electronic data processing and more specifically to deployment of content data components in a computer system.

Computer systems execute plurality of software components in order to perform required functionality. Every computer system provides a set of services or a framework for installation of the software components that have to be executed. In addition to the installation of executable software components computer systems install or deploy static content data components. For example static content may include source code blob data knowledge data. In general static content data components are not executed in the way the application software components are executed. As a rule the installation of content data either static or executable on a computer system requires the computer system to be in offline mode. Offline mode means that no application is executed and no business services are provided. Thus failures and collisions are avoided if the executed applications have to access data that is affected by the installation.

When executable data content is installed the offline mode is necessary as the executable components plug into the application logic. The applications on the computer system have to be restarted with the new functionality. However regarding the static content data such restart of the applications may not be necessary. The static content data provides input for the applications running on the computer system. When the static content is deployed in offline mode usually the content is delivered at a specific place in the computer system. The correctness of the content and the delivery can be confirmed just after the applications start to access the deployed content.

The current approach for installing static content has several disadvantages. The deployment framework cannot get any useful feedback about the deployment status as there is no integration between static content recipients and the deployment framework especially when the deployment is performed in offline mode. When started the applications that access the static content have no standard way to inform a system administrator if the deployment was not successful. It will be much more efficient if the applications that access the static content participate in its deployment.

A computerized method and a system for direct deploy of static content are described. Static content is received at a deployment framework of an application server of a computer system. The content is forwarded to a content deployment extension CDE for implementing the deployment of the content on the applications server. The application server operates in online mode during the deployment. The CDE selects an appropriate content handler to handle the deployment of the content. The content is deployed by the content handler on the application server in online mode.

There are different software platforms for building computer systems provided by different vendors. In most of the cases the platforms are compliant with a publicly recognized specifications. For example a number of vendors including SAP AG Sun Microsystems Inc. IBM Corp. provide platforms for building computer systems based on Java Enterprise Edition Java EE specification. In this document are referred computer system modules that are common for SAP NetWeaver platform compliant with Java EE specification. However for one of ordinary skill in the art is obvious that other platforms based on different specifications are also applicable to embody of the invention.

Prior art deployment architecture allows only engine services core components of the application server to perform the deployment and lifecycle operations. Additional restriction is the requirement that deployment is performed while engine of the application server is in offline mode where no applications are running. Block illustrates runtime resources and file system resources that are accessed by core engine services during the deployment. Runtime resources may include for example operative memory space threads of execution of different service components classloader objects etc. File system resources are stored on the local file system of the application server. The file system is a method for organizing storing and organizing data locally by the application server. When the computer system is built as a cluster of a plurality of application servers file system resources are propagated into a cluster file system encompassing different cluster instances.

Content handler operates in the offline mode of the application server to deploy the content. Content handler installs updates or removes the content on the application server. For installing the content content handler accesses the stored information at deploy repository and in accordance with the metadata requirements installs it on content repository . When static content is deployed content handler may simply place the content received from deploy repository to content repository . This is how the deployment process is performed in the prior art systems.

In this document the terms static content static content data components passive content and inactive content means content artifacts that do not have lifecycle. This kind of content is also deployable on the application server. The static content is packed in the standard way for example with Software Delivery Archive SDA . The term lifecycle of a content means that when it is deployed the content items could be started stopped activated and de activated. In other words in this document content has lifecycle when it could be executed. Software applications that are deployable on the application server have lifecycle.

CDE is executed as a system service by the application server of the computer system. CDE may be a plug in extension to deploy framework that is responsible for the delivery of content of static nature. In this sense CDE can be viewed as a simplified model of deploy framework which serves best the requirements of those stakeholders that do not need to use the full functionality of deploy framework itself. CDE may implement only content relevant operations as deploy update and remove.

CDE calls an appropriate content handler to execute the deployment of the static content. During this process CDE does not reserve runtime resources and may not use local file system resources at block for managing the static content deployment. During static content deployment it is not necessary the application server to run in offline mode. The execution of applications may be allowed. Content handler may include application software modules or may perform the deployment in communication with running software applications. The application components could access and check the static content. Thus content handler may provide feedback for the status of the deployment and for the correctness of the static content.

In addition to already described technical advantages implementation of content deployment extension provides an opportunity to avoid any file system deployment procedures. That would eliminate the risk of file systems that are out of synchronization in a cluster. That would also reduce significantly the instability and would reduce the technical problems in high availability scenarios.

The content items are checked and sorted by their software type. According to the type of the items different deploy approaches may apply. A specific software type may be attached to static content items. When static content is recognized it is forwarded to content deployment extension module at block . CDE is implemented as an engine service on the application server. It is a system component that provides an application programming interface API to one or more content handlers to deploy static content. The static content may be deployed while the application server is in online mode. In this document online mode means a mode in which application server executes applications e.g. the application server is operable to execute business requests.

When the passive content is forwarded to the CDE the CDE selects a content handler at block . At block content handler deploys the static content on the application server. The content handler for static content is a module that may be implemented as an application in one embodiment of the invention. Alternatively the content handler could invoke applications in order to check the correctness of the deployed static content. Such implementation of the content handler is allowable when the deployment is executed in online mode of the application server.

There are one or more content handlers for deploying different types of static content. Every content handler may be responsible for deploying of a special type of static content. In such a case the CDE selects the content handler in accordance with the type of the static content.

Content handlers register their interest about certain types of content with the CDE. The CDE serves as a dispatcher for all static content items that are processed. Those content items are forwarded to the relevant content handler for further deployment. According to one embodiment of the invention there are three types of static content. The types are content software subtype file name and file extension e.g. .xar for extensible markup language XML applications. Only one handler per subtype can be registered with the CDE. The basic responsibility of the CDE is to match the types of the provided content items with the relevant content handlers.

At block a feedback of the deployment is reported to the deploy framework by the CDE. The deploy framework use the feedback and initiate respective action. At block the feedback is analyzed to conclude whether the deployment of the static content is successful or not. If the deployment is not successful at block the deployment is rolled back. If the deployment is successful the deployment is committed at block . The process ends at block .

The process for deployment of static content in online mode as described in reference with provides business advantages as well. The business benefits may be measured by factors as Total Cost of Ownership TCO for a computer system. The TCO is improved thanks to the simplified deployment process the dully provided feedback the availability of the computer system to process business requests etc. Another business related measure could be the total system downtime of the system for a certain period.

Deploy framework content deployment extension CDE content handler are modules implemented as system services in an application server according to one embodiment of the invention. In order to work together certain communication or collaboration contracts must be established between the services. For example the deploy framework may not forward content to CDE if CDE is not running. Therefore when an application server starts all these system components are started in a certain order.

At block the deployment framework is started. In parallel at block the content deployment extension CDE is started. In order to receive content from the deployment framework the CDE have to establish a communication contract with the deployment framework. At block CDE checks whether the deployment framework is running. When the deployment framework is operational at block the CDE registers with the deployment framework in order to establish the communication contract.

At block starts a content handler service. The content handler service is responsible for instantiating a content handler at block . The content handler may be implemented as an application. Therefore a system service has to instantiate it in online mode of the application server. At block content handler checks whether the CDE is started. When an event is received that CDE is started the contain handler service registers the content handler instance with the CDE at block . The starting process ends at block where all required services for deployment of static content are up and running and in communications with each other.

When computer system has distributed architecture each application server node may have the same structure. The structure of application server node includes service manager . Service manager is one of the core engine services that execute on AS node . Service manager provides running environment for a number of system components e.g. services libraries interfaces . In AS node is implemented a deployment framework that includes deploy controller and deploy service executed within service manager .

Deploy controller is entry point for deployment of content to application server node . The content to be deployed is received at deploy controller . The metadata associated with the content is stored in a deploy repository. The deploy repository is not illustrated and could be established either in the local file system of AS node or in DB . The metadata of the received content may show the type of the content the versions of the content the software components that will be affected from the deployment the way the content should be deployed etc.

The deployment process continues at deploy service . Deploy service recognizes the type of the content to be deployed. Active content is deployed through one or more containers for deploying software applications. Containers utilize runtime resources and may use file system during deployment. Deploy service forwards the deployable static content to content deployment extension CDE container . CDE container is implemented as standard engine service. CDE container implements a standard container application programming interface API extended for the purpose of static content deployment. CDE container is registered with deploy service .

CDE container provides content handler CH API with operations that are relevant for content deployment. During its execution CDE container does not allocate runtime resources e.g. threads classloaders etc. CDE container selects an appropriate content handler to pass the static contain for deployment. In order to do so CDE container have to be aware for the instantiated content handlers . According to one embodiment of the invention CDE container provides to content handlers distributed logical transactions access to common deployable metadata access to a specific database storage etc.

Every content handler may be coupled with engine service written specifically for this handler. On its start engine service creates an instance of content handler and registers a container event listener not illustrated . This listener is automatically notified for the start of any other service and at the moment when an event about CDE Container start is received engine service registers the content handler instance with CDE container through Registry Manager . Engine service uses a method register provided by Registry Manager for this purpose. Registry manager stores CH registrations for all instantiated content handlers .

CDE container checks the type of the received static content and selects an appropriate content handler from registered content handlers . Each content handler implements an interface which has a method that returns registration information. This information is used by CDE container for acquiring knowledge about the interests of content handler in certain content type. Based on the interest and the type of the received content CDE container selects appropriate content handler .

Every content handler has to do the internal processing in its own transaction context. Transactions are the contract between CDE container and content handlers for performing necessary deploy operations. For every operation a transaction is specialized. In the most common case content handler provides deploy update and remove transactions. The transactions themselves should support the standard operations of begin rollback and commit. CDE container is responsible for calling these operations at the relevant moment. For example rollback is automatically called after a failed deployment. Content handlers just have to implement the internal logic.

Through CH interface CDE container instantiates transaction factories for and for the three basic types of deployment transactions that are supported by content handler . These transactions are deploy update and remove . Corresponding transaction factories in CDE container are transaction factory TF deploy TF update and TF remove . CDE container uses transaction factories to instantiate a transaction corresponding to the action to be performed with the content. Transaction instance TI deploy is instantiated when the content will be deployed by content handler TI update is instantiated when the content will be updated and TI remove is instantiated when the content has to be removed by content handler .

In the above description numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that the invention can be practiced without one or more of the specific details or with other methods components techniques etc. In other instances well known operations or structures are not shown or described in details to avoid obscuring aspects of the invention.

Reference throughout this specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least embodiment of the invention. Thus the appearance of the phrases in one embodiment or in an embodiment in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more embodiments.

