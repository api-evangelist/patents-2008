---

title: Transparent type matching in a programming environment
abstract: Described is a technology in a programming (development and/or runtime) environment by which data type mismatches between the output and input of computer program software components (e.g., APIs) are detected, with the output transparently converted such that the converted input may be understood by the inputting component. When components are interconnected in a programming environment, metadata associated with those components is evaluated to determine a type mismatch, e.g., between objects and arrays. If mismatched, an output object is converted to a single-element array for input, or alternatively, an output array is converted to a series of objects, each object sent within a loop for input. The transparent conversion may be performed by the programming environment during runtime, or by inserting conversion code prior to compilation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08745580&OS=08745580&RS=08745580
owner: Microsoft Corporation
number: 08745580
owner_city: Redmond
owner_country: US
publication_date: 20080516
---
In some abstract programming and runtime environments programmers interact with a graphical user interface to select and interconnect components to build a program. For example in such a visual programming environment programmers arrange graphical representations of components such as representing functions application programming interfaces or APIs connect them together and see a representation of each of them as well their interconnection relationships to one another.

However the programmer to needs to ensure that components are compatible with one another that is so that inputs and outputs are mapped cleanly to one another. By way of example consider two components A and B comprising APIs that are linked to each other such that the output of A is sent to the input of B. If A is configured to send an array but B is expecting a single object or vice versa there will be a type mismatch and the connection will fail. This burdens programmers by adding complexity to programming which conflicts with a general aim to simplify programming through such environments.

This Summary is provided to introduce a selection of representative concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used in any way that would limit the scope of the claimed subject matter.

Briefly various aspects of the subject matter described herein are directed towards a technology by which computer program software components e.g. APIs are processed for type mismatch detection e.g. to recognize from associated metadata when a first software component is not able to process the output data as structured by a second software component to which it is connected. When detected an operation is transparently performed by a programming environment so as to execute logic that converts the output data as structured by the second software component into input data that the first software component is able to process.

The conversion may be to promote an object output data type to a single element array input data type. Conversely the conversion may be performed to process an array output data type to a series of objects which via a loop are individually provided as objects to the inputting software component. Conversion may be accomplished by transparently providing logic during the runtime to change the execution path and or by inserting code prior to compilation such that when compiled and later executed the conversion transparently occurs between the output and input.

Other advantages may become apparent from the following detailed description when taken in conjunction with the drawings.

Various aspects of the technology described herein are generally directed towards having a programming environment transparently manage type matching between two components or blocks e.g. their interfaces in a manner that is transparent to the programmer. For example when components such as APIs that return or expect different structures e.g. an array versus an object are interconnected the programming environment detects the type mismatch and transparently inserts code that makes the components input and output data compatible. As a more particular example when a component expects an object but is coupled to a component that outputs an array the programming environment adds code that processes the array elements into individual objects so that objects are received at the component that expects objects one object after another via a loop or the like. Conversely when a component expects an array as input and the component to which it is coupled outputs an object the programming environment transparently inserts code that promotes converts the object into a single element array.

While some of the examples described herein are directed towards a graphical user interface by which the programmer interacts with representations of components e.g. icons such as by dragging a representative icon onto a design surface it is understood that these are only examples. Indeed any way of entering code including typing text may be used. As such the present invention is not limited to any particular embodiments aspects concepts structures functionalities or examples described herein. Rather any of the embodiments aspects concepts structures functionalities or examples described herein are non limiting and the present invention may be used various ways that provide benefits and advantages in computing in general.

Turning to there is shown a general block diagram representing example components in a runtime programming environment such as one in which metadata e.g. XML based is used to augment a programming language. An example of such metadata is described in a copending U.S. patent application Ser. No. 12 122 021 entitled Augmenting Programming Languages with a Type System assigned to the assignee of the present application and hereby incorporated by reference. Note that while various kinds of metadata are described therein e.g. type metadata and descriptive metadata used for various purposes as will be understood only some metadata that is sufficient to determine a component s input and output data types need be used herein.

Note that in the example implementation generally represented in a development environment is shown in the runtime programming environment as being tightly linked to one another although this is not necessary e.g. development may occur separately such as well before the program is run such as via an optional runtime system described below . In any event for simplicity the term programming environment is used herein to represent the development environment or the runtime system that executes a running application or both however coupled. The development environment or runtime environment or both may be hosted in a web browser for example.

In the development environment the exemplified metadata includes component metadata which may include type data and descriptive data such as in a single data structure e.g. file . In a visual development environment the programmer has a user interface with which to interact such as to select a software component also referred to as a block from a set of reusable components e.g. interfaces such as APIs functions and so forth. For example the components may correspond to classes each containing a collection of interfaces although a component may be an individual function or the like. The programmer may interconnect such components e.g. to link interfaces together. Each component or individual interfaces may have an associated set of one or more metadata files.

In general the component metadata defines a specific set of types that can be used with each component such as to enable enhanced type matching relative to the basic type matching provided by a scripting engine. More particularly based on the type data type rules logic or the like may perform tasks such as to perform parameter validation and matching. For example as described herein the rules logic ensures that that output data of one interface is compatible with the input data of another interface to which it is connected such as by transparently inserting code that converts one output type to an appropriate type for input typically without any programmer intervention. Other actions include enforcing constraints e.g. ensuring a value is within a range is present when required is non zero is positive and or many others set default values and so forth.

Note that as used herein transparent and the like does not mean wholly invisible or undetectable to the programmer but rather that the programming environment removes the programming complexity by automatically matching a component s output data to another component s input data. Even though automatic a prompt or warning may be first shown so that for example the programmer may make a different component choice. Other visible indications such as a conversion block that is automatically inserted between components a change in color of a component and or an interconnecting indicator and so forth may be used. Such an indication may be useful in debugging e.g. to recognize that such a conversion exists.

To accomplish transparent type matching in general the programming environment includes the rules logic such as by adding a layer or the like that recognizes the types of input and output that components expect and return respectively. If necessary as described below the rules logic converts an output type into a different input type so that it can be properly input.

By way of an example shown in via the wide arrows labeled one 1 there is represented general aspects related to processing an array into a serialized set of objects. In this example an application program includes API calls in which a first API returns an array of photographs and related data which is then passed to a second API which for example attempts to plot the photographs data on a map. However the second API cannot accept an array as input and thus as described herein the programming environment transparently processes the array into a series of objects.

As a more particular example consider an API A that returns an array as its output data which a programmer couples to an API B that expects a single object as its input. For example the API A outputs the array of photographs and related data. The API B inputs an object corresponding to a photograph and possibly some or all of that data. As described below the conversion rules logic detects the mismatch via each API s associated type metadata and automatically inserts array to object or A to O code which when run in executable code calls the API B in a loop so that the API B receives the return values as distinct objects . Note that the runtime programming environment may process program metadata via an interpreter not explicitly shown to perform the operations.

As can be readily appreciated there are various kinds of type mismatching however in general the programming environment is intelligent enough to determine the typing of such APIs and to process the arrays into loops where necessary. As a result these loops are abstracted away from programmers who need not be burdened with recognizing the need for such loops nor with coding them.

By way of an example of transparent type matching in the opposite conversion direction shown in via the wide arrows labeled two 2 consider an API C that returns an object as its output data which a programmer couples to an API D that expects an array as its input. As described below the conversion rules logic detects the mismatch via each API s associated type metadata and automatically inserts object to array or O to A code which when run in the executable code promotes the object to a single element array e.g. by placing its structured data into appropriate array fields.

Note that also represented in is an alternative optional runtime system . This alternative takes pre compiled code from the development environment and compiles it via a compiler into the executable code the APIs represented in as well as the inserted A to O code and O to A code are in the pre compiled code or linked thereto after compilation and thus operate in the executable code . The code may be run as it is compiled e.g. via a just in time JIT compiler may be converted to an intermediate language e.g. .NET MSIL or the executable code may be stored for running at some later time.

The table below maps example data structure return types and corresponding actions that the programming environment takes on behalf of the programmer to ensure that the types match 

In any event in general once the user connects two components the programming environment performs a check to ensure that the output and expected input structures match. If they do not the programming environment inserts logic e.g. promoting code or processing code as described below into the program that appropriately converts the type or types so as to match.

In this example step represents checking whether the return output is an array versus an object . Note that the programming environment via the components type metadata has knowledge about the underlying components providing the ability to touch such data before it is passed between different components. More particularly when the programming environment loads an API for example the programming environment also loads metadata about the API that includes its input and output types and structures.

Thus if at step the return output is an object and the expected input is an object at step no action is taken. Step is shown to represent communicating the object from the outputting component to the inputting component when appropriate during the runtime operation.

If at step the returned output is in the form of an object but at step the data input component is instead expecting an array step is executed to promote the object into a one element array. To this end the programming environment takes the list that is the object and turns it into a one element array one row table . In other words via logic described in steps and when the output of API A is an object and the input of API B can only be an array the logic creates an array with one element and populates its attributes with the object s properties. Note that conceptually the object corresponds to a list with one column and multiple rows in which each line in the list corresponds to some attribute describing the overall object. Thus with these types the programming environment s knowledge of the type data allows the programming environment to insert conversion code so that the output type matches the input type. Thus during the runtime via the logic inserted at step the output will be converted to an array to match the input step as described above with reference to the API C and API D example of .

Returning again to step when the return output is structured as an array step evaluates whether the receiving input component is also expecting an array. If so both are configured to deal with arrays and no intervening action is taken in this example step is shown to represent communicating the array from the outputting component to the inputting component when appropriate during the runtime operation.

Steps through represent another type mismatch that is handled namely the array to object processing this time by insertion of the processing logic. In processing the programming environment loops through each element of the array and turns the row of the table into an object that is into a simple list. That is the array is conceptually a table that includes rows and columns in which the rows are elements of the array and the columns are the attributes of each element.

In general steps and have conditionally asked whether the data of the output component is arranged as an array while the input of the other component needs to be an object. If so for each element in the array as a simple list of that element is returned via steps . Note that in this example step represents receiving a request for another object which will be the next element while step represents determining whether another element exists returning the element via step until none remain at which time a return code or the like may indicate that no more elements remain step .

Thus returning to the example of when the API A is called e.g. by the running application or the programming environment on behalf of the running application the API A returns an array e.g. the array of photographs that also includes various bits of information about the photograph. When the programming environment processes the array the programming environment notices from the receiving API s associated metadata that the API B in the application cannot accept an array as input but rather requires another structure namely an object. This triggers the execution of a path in the programming environment that loops through the array and convert each element in the array into an object. As the programming environment loops through the elements of the array it outputs objects and passes them to the API B . The API B receives the outputted objects from the programming environment and completes the execution of the application. During this process the API B may be called multiple times.

As can be seen components e.g. APIs that are returning or expecting different data structures such as objects or arrays may be coupled to communicate without requiring proactive intervention on the part of the programmer. As described above this is facilitated by providing the programming environment with knowledge of the data structures returned by the components that may be used. As a result the programming environment is able to make design time and or runtime conversions between arrays and objects that are returned and expected by different components.

The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices tablet devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures and so forth which perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in local and or remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing various aspects of the invention may include a general purpose computing device in the form of a computer . Components of the computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

The computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by the computer and includes both volatile and nonvolatile media and removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by the computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above may also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media described above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers herein to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a tablet or electronic digitizer a microphone a keyboard and pointing device commonly referred to as mouse trackball or touch pad. Other input devices not shown in may include a joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . The monitor may also be integrated with a touch screen panel or the like. Note that the monitor and or touch screen panel can be physically coupled to a housing in which the computing device is incorporated such as in a tablet type personal computer. In addition computers such as the computing device may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface or the like.

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include one or more local area networks LAN and one or more wide area networks WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. A wireless networking component such as comprising an interface and antenna may be coupled through a suitable device such as an access point or peer computer to a WAN or LAN. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It may be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

An auxiliary subsystem e.g. for auxiliary display of content may be connected via the user interface to allow data such as program content system status and event notifications to be provided to the user even if the main portions of the computer system are in a low power state. The auxiliary subsystem may be connected to the modem and or network interface to allow communication between these systems while the main processing unit is in a low power state.

While the invention is susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the invention to the specific forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the invention.

