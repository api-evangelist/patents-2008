---

title: Dynamic metadata
abstract: A computing device having a dynamic metadata model includes an interface module, an algorithm module and a registration module. The interface module includes an interface that defines one or more API functions for obtaining metadata using an algorithm. At least one of the API functions is used with a plurality of algorithms. Each of the plurality of algorithms is associated with a business system. The algorithm module includes one or more algorithms that implement the API functions defined in the interface. The one or more algorithms provide metadata without accessing a metadata database. Each of the one or more algorithms is associated with a business system. The metadata is associated with API functions of the business system. The registration module registers the one or more algorithms on the computing device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08484204&OS=08484204&RS=08484204
owner: Microsoft Corporation
number: 08484204
owner_city: Redmond
owner_country: US
publication_date: 20080828
---
Metadata is data about data. In a business context metadata can be used to define information about a business application. For example metadata can define the business entities with which the business application interacts and the methods available in the business application to obtain business data. Metadata is stored separately from the actual data used in the business application.

Metadata models describe the APIs exposed by business systems. These models are utilized by a runtime engine to map or transform the APIs on the business systems into a canonical business data access API provided by the runtime engine. Thus when a user provided application invokes the canonical API depending on the metadata model the appropriate API on the business system is invoked. Changing the metadata model changes the behavior of the application without needing to recompile or rewrite the application.

The metadata models are typically provided in a static format by a design tool or a text editor. When a business data operation requests metadata the metadata is typically obtained from a metadata store. The obtained metadata is used by the runtime engine to perform business data operations. For example a business data operation may be obtaining information about a customer given a customer ID. This business data operation may need metadata about the operation. When a request for this metadata is made the metadata store returns the name and parameters of this method along with any other information that is required to invoke this method. The method is an API specific to the business system that includes the customer information.

The metadata store includes APIs for business systems described in the metadata model. Some business systems have APIs that are similar in syntax. For example a method for obtaining information about a product given a product ID may be similar in syntax to a method for obtaining information about a customer given a customer ID. However with a static metadata model metadata for each API is typically included separately in the metadata store even if the syntaxes are similar. This increases the storage requirements for the metadata store. In addition if the APIs change the metadata model needs to be changed to accommodate the modifications.

According to one aspect a computing device including a dynamic metadata model has an interface module the interface module including an interface that defines one or more API functions for obtaining metadata using an algorithm at least one of the API functions being used with a plurality of algorithms each of the plurality of algorithms being associated with a business system an algorithm module the algorithm module including one or more algorithms that implement the API functions defined in the interface the one or more algorithms providing metadata without accessing a metadata database each of the one or more algorithms being associated with a business system the metadata being associated with API functions of the business system and a registration module that registers the one or more algorithms on the computing device each of the one of more algorithms being associated with a business system.

According to another aspect a method for obtaining metadata dynamically from a data store includes storing a metadata interface on a computing device the metadata interface including definitions of one or more API functions for obtaining metadata at least one of the API functions being structured to obtain metadata from a plurality of business systems storing one or more algorithms on the computing device each of the one or more algorithms implementing one or more of the API functions defined in the interface at least one API function implementation including one or more API functions specific to a business system registering the one or more algorithms on the computing device each of the one or more algorithms registered for a specific business system storing in the data store pointers to the one or more algorithms a pointer being stored for each registered algorithm each pointer representing the memory location of a registered algorithm initiating an operation on the computing device to obtain metadata calling a function on the computing device that uses a data store location in which one of the pointers is stored and executing the interface API functions implemented in the algorithm associated with the pointer the algorithm implementation of the one or more of the interface API functions using the one or more API functions specific to a business system to obtain data from the business system the data being transformed into metadata by the algorithm.

According to yet another aspect a computer readable storage medium having computer executable instructions that when executed by a computing device cause the computing device to perform steps comprising storing a metadata interface on a computing device the metadata interface including definitions of one or more API functions for obtaining metadata at least one of the API functions being structured to obtain metadata from a plurality of business systems storing one or more algorithms on the computing device each of the one or more algorithms implementing one or more of the API functions defined in the interface registering the one or more algorithms on the computing device each of the one or more algorithms registered for a specific business system initiating an operation on the computing device to obtain metadata executing one or more of the interface API functions implemented in the algorithm to obtain metadata in at least one of using one or more API functions specific to the business system to obtain data from the business system the business system data being transformed into metadata by the algorithm and providing metadata using logic based on knowledge of patterns in at least two of the API functions specific to the business system.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key or essential features of the claimed subject matter nor is it intended to be used in any way as to limit the scope of the claimed subject matter.

The present application is directed to systems and methods for obtaining metadata dynamically for a business system.

In example embodiments described herein a dynamic metadata model is described that provides metadata for a plurality of business systems. The metadata relates to the entities methods parameters type descriptors etc. that are associated with API functions specific to a business system. Some examples of entities are customers products employees etc.

The dynamic metadata model provides one or more algorithms each associated with a specific business system which returns metadata without the need to access a metadata database. The algorithms may make use of stereotypical patterns in the API functions of the business system to infer the metadata based on knowledge of the stereotypical patterns. The algorithms may also call the API functions to obtain data from the business system which is transformed into metadata by the algorithm.

In example embodiments the clients are computing devices such as desktop computers laptop computers personal data assistants or cellular devices. The clients can include input output devices a central processing unit CPU a data storage device and a network device.

The server is a business server that is accessible through a network . The server can implement a suite of business processes that may include file sharing content management records management and business intelligence. The server can include input output devices a central processing unit CPU a data storage device and a network device.

In example embodiments the server can be located within an organization or can be part of an Internet based shared document system. An example business server is Microsoft Office SharePoint Server 2007 provided by Microsoft Corporation. Other business servers can be used.

The business system includes one or more business systems that provide business applications. An example business system is Microsoft SQL Analysis Services provided by Microsoft Corporation. Another example is Windows SharePoint Services provided by Microsoft Corporation. The business system is also accessible through the server or another network.

Referring now to in example embodiments the server shown in is a computing device. For example the server can be a desktop or laptop computer. Those skilled in the art will appreciate that the disclosed embodiments can be implemented with other computer system configurations including minicomputers mainframe computers and the like. The embodiments may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices. Embodiments may be implemented as a computer process method a computing system or as an article of manufacture such as a computer program product or computer readable media. The computer program product may be a computer readable storage media readable by a computer system and encoding a computer program of instructions for executing a computer process. The computer program product may also be a propagated signal on a carrier readable by a computing system and encoding a computer program of instructions for executing a computer process.

With reference to the server typically includes at least one processing unit and system memory . Depending on the exact configuration and type of computing device the system memory may be volatile such as RAM non volatile such as ROM flash memory etc. or some combination of the two. System memory typically includes an operating system suitable for controlling the operation of a networked personal computer such as the WINDOWS operating systems from Microsoft Corporation of Redmond Wash. or a server such as Windows SharePoint Server 2007 also from Microsoft Corporation of Redmond Wash. The system memory may also include one or more software applications and may include program data.

The server may have additional features or functionality. For example the server may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer readable storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer readable storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by server . Any such computer storage media may be part of server . Server may also have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included.

The server may also contain communication connections that allow the device to communicate with other computing devices e.g. clients over a network such as network in a distributed computing environment for example an intranet or the Internet. Communication connection is one example of communication media. Communication media may typically be embodied by computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media.

The example business data runtime module comprises software running on the server that catalogs and obtains data from business systems. The business data runtime module obtains data from the business systems using API calls specific to the business system. Information about the APIs e.g. methods parameters etc is contained in metadata that can be accessed from the example metadata database module using a static model or dynamically from the example dynamic metadata module . In some embodiments metadata can be accessed from both the example metadata database module and the example dynamic metadata module .

The example metadata database module includes metadata objects associated with a business system. Metadata objects may include entities used in the business system for example lists stored in WSS or cubes stored in SQL Server Analysis Services. Other metadata objects may include methods parameters and parameter descriptors associated with each method security authorization information filtering information etc. The metadata objects are interlinked typically in a graph computer structure including a plurality of nodes and edges defining relationships between the nodes. The example metadata database module also includes an inventory of business data types and the business systems in which they reside. Some examples of business data types are customers orders products and employees.

The example dynamic metadata module includes one or more algorithms that are associated with specific business systems. The algorithms are exposed by an interface included with the business data runtime module . The interface defines metadata API functions that are used to dynamically obtain metadata using the one or more algorithms. The algorithms include code that implements the metadata API functions defined in the interface.

For example there may be a GetEntities function call for a business system that returns all the entities stored for that business system. For example if the business system is Windows SharePoint Services WSS WSS may be a parameter in the GetEntities function. In this example the GetEntities function returns information about the lists stored for an instance of WSS. In another example there may be a GetMethods function that takes an entity such as a WSS list as a parameter. The GetMethods function returns all the methods that are associated with the entity.

The example algorithm module provides algorithms that are oriented to specific business systems and that include business system specific implementations of the metadata API functions defined in the interface module . The business systems are typically those that have a well defined API. For example WSS is a business system that has an API for determining all lists that are installed and the number of columns in each list. Similarly SQL Server Analysis Services is a business system that has APIs for determining the names of the cubes stored and the dimensions of those cubes.

Each algorithm includes code to implement the metadata API functions defined in interface module the code implementation sometimes including additional API functions that obtain data from a business system. For example for WSS a GetEntities metadata function implementation in the algorithm for WSS may use APIs that obtain all the lists stored in WSS and information about how many columns are in each list. For SQL Server Analysis Services a GetEntities metadata function implementation in the algorithm for SQL Server Analysis Services may use APIs to obtain the cubes used and the dimensions of those cubes. The WSS GetEntities implementation may use the number of columns in each list in conjunction with logic in the WSS algorithm and other API function calls to determine the entities for WSS. Similarly the SQL Server Analysis Services GetEntities algorithm implementation may use the dimensions of the cubes in conjunction with logic in the SQL Server Analysis Services algorithm and other API function calls to determine the entities for SQL Server Analysis Services. Although the number of columns in the list and the dimensions of the cubes are data the entity information returned is metadata. Each algorithm uses logic to transform the data into metadata. In this way one metadata API function call defined in an interface can obtain metadata from a plurality of business systems.

For some business systems particularly those that may not have APIs that are common across industries and applications for example SAP the algorithm associated with the business system in the algorithm module may logically infer the metadata from stereotypical patterns in the API of the business system. For example it may be observed that for a particular business system there is a Find function that returns an entity based on an ID. Some examples are find a customer given an ID find an employee given an ID and find a product given an ID. If a dynamic metadata model is used the algorithm for the business system infers that for a GetMethods call for this business system where the entity is a customer the method that should be returned is FindCustomer ID . Similarly for a GetMethods call where the entity is a product the method that should be returned is FindProduct ID . This inference is done independently of calls to the metadata database module based on the observed stereotypical patterns. As a result the metadata database module does not need to store a separate method entry for each such entity. Furthermore if a new entity for example Foo is added at a later date the algorithm provides the method information without any code updates. The example algorithm module would simply return FindFoo ID .

Each algorithm is designed to obtain metadata for a specific entity so that metadata is only generated when it is needed. For example if the entity is a customer the algorithm only uses interface functions for the customer entity. This may include methods parameters and parameter descriptions related to the customer.

Each algorithm also provides an initializer API typically a class constructor with connection information specific to the business system associated with the algorithm. For example the SQL Server Analysis Server DynamicMetadataProvider has a constructor that includes a connection string to a SQL Analysis Server and the name of a particular cube within it. In addition each algorithm provides an API to obtain any metadata object in the metadata model as a starting point. This starting point API is parameterless and takes no other metadata object reference as input. For example the SQL Server Analysis Server DynamicMetadataProvider has a method that returns a collection of entities that represent all possible dimensions in the cube the SQL Server Analysis Server DynamicMetadataProvider was initialized with.

The example registration module registers algorithms associated with business systems. Typically there is one algorithm registered for a specific business system. The registration module maps an algorithm to a business system so that the correct algorithm is executed when a dynamic metadata call is made.

The example registration module permits the business data runtime module to mix static and dynamic metadata models. With a static metadata model the metadata is all contained in a metadata database. For example the methods parameters types etc. that are associated with each entity are stored within the metadata database. However it is possible to substitute a pointer to an algorithm in a metadata database location. In this way when the metadata database location is accessed for example by a metadata runtime call the algorithm is executed and metadata is returned via the algorithm instead of from the metadata database.

For example when a call is made to GetEntities for a static model a call is made to a metadata database and entities stored in the metadata database are returned for a particular instance of a business system application. For the dynamic model when a call is made to GetEntities the metadata database returns a pointer to the algorithm registered for the business system. The algorithm returns the entities for the instance of the business system application by inferring the metadata or by using API calls specific to the business system as discussed above. With the static model a static metadata needs to be stored for each entity of the business system for example each WSS list. However for the dynamic model the same algorithm can be used for each entity for example for each WSS list. For the dynamic model a GetEntities call uses the same algorithm pointer for each list. This results in the efficient use of system resources and reduces the memory requirements for the business system.

In one embodiment the static and dynamic metadata modules can be combined. In this embodiment metadata database locations implementing a static model have the actual metadata stored in the metadata database. Metadata database locations implementing a dynamic model have pointers to an algorithm that provide the metadata independently of the metadata database. In another embodiment dynamic metadata may be used for the entire model. In this embodiment a metadata database may not be necessary and the algorithms may simply be stored in a file.

It is also possible to create a static model from a dynamic model. Any metadata objects obtained from dynamic metadata API function calls represents metadata obtained at a specific point in time. This information can be serialized to form a static model that represents a snapshot of the dynamic model at a point in time.

The example business data runtime module also determines access permission for a metadata user. The access permission may be determined both statically and dynamically. An example of static access permission determination is an access control list for each metadata function. The access control list is used to statically determine which users have authorization to use a metadata function. The example algorithm module may also provide a dynamic method of access control by including functions that dynamically determine access permission. The algorithm module may implement the dynamic access method by evaluating a plurality of factors before allowing access to a metadata function. For example these factors may include the time of day the day of the week how busy the server is etc. These factors may be used in addition to standard access control factors such as whether the user s name is on an access control list.

In a similar manner the example GetParameter function takes a method as a parameter and provides all the parameters associated with that method. The example GetAccessControlList function takes a metadata object as a parameter and provides an access control list for that metadata object. The example metadata object may represent a specific user for example.

Other example functions of the interface are also shown. It is understood that these are just examples of metadata functions. Other metadata functions are possible.

At operation a business data operation is initiated on a server. For example a business data operation can be to obtain employee information given an employee ID. At operation the server initiates a request to a metadata database to return metadata relating to the business data operation. For example the request can be to obtain a method for obtaining employee information. At operation the metadata is obtained from the metadata database. At operation the business data information is performed using the metadata. For example employee information is obtained from the business system using the method a business system API returned from the metadata database.

At operation a metadata interface is stored on a server. As described above the metadata interface includes the definitions of one or more API functions used to obtain metadata. At least one of the API functions is structured to obtain metadata from a plurality of business systems. Since the interface typically does not change operation is typically performed only once per server.

At operation one or more algorithms are stored on the server. Each of the one or more algorithms includes implementations of one or more of the API functions defined in the interface. The API function implementation may include one or more API functions specific to a business system. At operation one or more algorithms are registered in a registration module on the server. Each of the one or more algorithms is registered for a specific business system. At operation pointers to the registered algorithms are stored in a data store. A pointer is stored for each registered algorithm each pointer representing the server memory location of a registered algorithm. Operations are typically performed once per business system whose metadata is to be obtained dynamically.

At operation a business data operation is initiated on the server by the business data runtime module . For example the business data operation may obtain customer information given a customer ID. At operation the business data operation makes a request for metadata. At operation the business data runtime module calls an interface API function that accesses a data store location that contains one of the pointers. At operation one or more of the interface API functions implemented in the algorithm associated with the pointer is executed. At operation metadata is obtained from a metadata API function implemented in the algorithm. The metadata may be obtained by inferring the metadata from stereotypical behavior of the business system or the metadata may be obtained by using API calls specific to the business system to obtain data which is then transformed into metadata by the algorithm. At operation a business data operation for example obtaining customer information using the customer ID is performed using the metadata. Operations are repeated for each business data operation for which metadata is to be obtained dynamically.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

