---

title: Fair and dynamic disk input/output bandwidth distribution
abstract: Embodiments that facilitate the fair and dynamic distribution of disk input/output (IO) bandwidth are disclosed. In accordance with one embodiment, the method includes organizing one or more disk IO time intervals into one or more queues. The method further includes allocating a disk IO time interval to each queue. The allocation of a disk IO time interval to each queue is accomplished by equally distributing a disk IO cycle based on the number of queues. The one or more disk IO requests are then processed during the corresponding disk IO time interval.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08090903&OS=08090903&RS=08090903
owner: Microsoft Corporation
number: 08090903
owner_city: Redmond
owner_country: US
publication_date: 20080118
---
Disk input output IO refers to the interactions of software applications with a hardware data storage device such as a hard drive. Disk IO enables software applications to store and retrieve data to and from the hardware data storage device. In a computing system the hardware data storage device typically receives a plurality of disk IO requests from various software applications. Disk IO scheduling mechanisms are implemented so that the hardware data storage device may respond to each of the disk IO requests.

Current disk IO scheduling mechanisms are generally based on disk IO bandwidth reservation or priority queues. For example disk IO requests may be queued by a disk IO manager of an operating system in the order that they are received and then execute sequentially. In other examples the disk IO manager may queue and execute each of the received disk IO requests according to priority.

These disk IO mechanisms may fall short of providing fair disk IO response to all users in a multi user environment where a plurality of users are access data stored on the same hardware data storage device. For instance a first user may use more software applications than a second user resulting in more disk IO bandwidth being devoted to the first user than the second user. In scenarios where some users are using significantly more software applications than other users such imbalance in disk IO bandwidth distribution may cause poor computing experience for those users that are receiving inadequate disk IO bandwidth.

This Summary is provided to introduce a selection of concepts in a simplified form that is further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

Described herein are embodiments of various technologies for implementing fair and dynamic distribution of disk input output IO bandwidth to users in a multi user environment. In at least one embodiment the method includes organizing one or more disk IO requests into one or more queues. The method further includes allocating a disk IO time interval to each queue. The allocation of a disk IO time interval to each queue is accomplished by equally distributing a disk IO cycle based on the number of queues. The one or more disk IO requests are then processed during the corresponding disk IO time interval.

In another embodiment a computer readable medium having computer executable instructions that when executed perform acts that include organizing one or more disk IO requests into one or more queues. The acts also include allocating a disk IO time interval to each queue. The allocation of a disk IO time interval to each queue is accomplished by equally or substantially equally distributing a disk IO cycle based on a quantity of the one or more queues. The acts further comprise dividing the disk IO time interval allocated to each queue into identical time slices. The duration of a disk IO time slice in each of the queues being identical. The acts additionally include providing one or more additional portions of the disk IO cycle to a first queue that has consumed its corresponding time interval. In a further embodiment the acts also comprise processing the one or more disk IO requests in each queue for a corresponding second time slice.

In an additional embodiment a system for dynamically distributing disk IO bandwidth to multiple queues comprises one or more processors. The system also comprises memory to store a plurality of computer executable instructions that are executable by the one or more processors. The computer executable instructions comprise instructions for organizing one or more disk IO requests into one or more queues based on at least one criterion. The computer executable instructions also comprise instructions for allocating a corresponding disk IO time interval to each queue. The allocation of a disk IO time interval to each queue is accomplished by equally distributing a disk IO cycle based on a quantity of the one or more queues. The computer readable instructions further comprise instructions for processing the one or more disk IO requests in each queue during the corresponding disk IO time interval. Other embodiments will become more apparent from the following detailed description when taken in conjunction with the accompanying drawings.

This disclosure is directed to systems and methods that facilitate fair and dynamic distribution of disk input output IO bandwidth each of a plurality of queues. Specifically the embodiments in this disclosure are directed to allocating disk IO bandwidth equally to each queue or some other grouping of disk IO requests rather than to each disk IO request. It will be appreciated that a least a portion of a disk IO bandwidth in a disk IO cycle is generally reserved for operating system functionalities. Accordingly as used herein the disk IO bandwidth refers to an available disk IO bandwidth that is not used for system functionalities. For instance the disk IO bandwidth may be around approximately 70 of a total disk IO bandwidth.

The embodiments in this disclosure are also directed toward dynamically allocating disk IO bandwidth based on the number of queues. In this way embodiments described herein may ensure a distribution of disk IO bandwidth that does not cause application hesitations or slow downs that negatively impact users in a multi user environment. Various examples of facilitating fair and or dynamic distribution of disk IO bandwidth for all users in a multi user environment are described below with reference to .

A disk IO cycle such as the disk IO cycle may then be divided into disk IO time intervals that reflect the number of queues. In this way each queue receives an equal share or a substantially equal share of the disk IO cycle regardless of the number of disk IO requests in the queue. For example the disk IO cycle may be allocated into time intervals and to equally distribute the processing time of the disk IO cycle to the organized queues and . Accordingly disk IO queue is configured to receive the same or substantially equivalent amount of disk IO bandwidth as queues and even though queue includes only disk IO request while queues and each include multiple disk IO requests and respectively. Thus the equal or substantially equal distribution of disk IO bandwidth to each queue wherein each queue includes different number of disk IO requests may ensure that each queue is provided with adequate disk IO bandwidth so that a user does not experience hesitation or delay of the applications. In embodiments where the software applications are running in a WINDOWS operating system the disk IO requests may be contained in IO request packets IRPs . Accordingly IRPs may be treated in the same fashion as disk IO requests in those embodiments.

It will be appreciated that while the embodiment above describes the grouping of disk IO requests according to the users they service disk IO requests may also be grouped according to other classification criteria. For instance in some embodiments the processes may be organized so that disk IO requests that act on multimedia content are in a first queue while disk IO requests that do not act on media content are in a second queue. Other embodiments may include queue organizations based on other classification criteria so long as the disk IO requests are organized into distinct queues.

The cycle distribution module may be configured to distribute a disk IO cycle equally or substantially equally among a plurality of queues that need disk IO bandwidth. Each queue may include a different number of disk IO requests. For example if t represents the time in a disk IO cycle and n represents the number of queues the cycle distribution module is configured to allocate the disk IO cycle t into n time intervals such that each time interval has a duration of t n. The cycle distribution module may also work cooperatively with the queue determination module .

The queue determination module may be configured to calculate the number of queues that need disk IO bandwidth in a given disk IO cycle. In one example this calculation may be performed based on the actual disk IO usage in a previous cycle. According to various embodiments the queue determination module may perform this calculation by taking into consideration any increase or reduction in the queues of disk IO requests. Once the queue determination module has determined the number of queues that need disk IO bandwidth the queue determination module may return this information to the cycle distribution module .

In turn the cycle distribution module may reallocate the disk IO cycle to accommodate the change in the number of queues. For example if t represents the time in a disk IO cycle n represents the number of queues processed in a disk IO cycle and the number of queues that need disk IO bandwidth in a subsequent disk IO cycle has increased by one the cycle distribution module may reallocate the disk IO cycle t into n 1 queues such that each time interval has a duration of t n 1 . Likewise if the queue determination module calculates that the number of queues that need disk IO bandwidth in a subsequent disk IO cycle has decreased by one then the cycle distribution module reallocate the disk IO cycle such that each time interval has a duration of t n 1 .

Furthermore the cycle distribution module may be configured to divide a particular allocated disk IO time interval into a plurality of time slices. The division of a disk IO time interval may enable each queue to receive the disk IO bandwidth more frequently during a specific disk IO cycle. As further described below the cycle distribution module may also adjust the time slices during a disk IO cycle to accommodate disk IO requests from new queues.

The dynamic execution module may be configured to command a disk manager not shown to sequentially fulfill the disk IO requests of each queue during the time interval determined by the cycle distribution module . For instance the dynamic execution module may direct the disk manager to fulfill the disk IO requests of a first queue for the allocated time interval of a disk IO cycle. Once the allocated time interval has ended the dynamic execution module may command the disk manager to terminate the processing of the disk IO requests in the first queue and perform a processing of the disk IO requests in the second queue for the allocated time interval and so on and so forth until the disk IO cycle is complete. The dynamic execution module may then repeat the processing for the next disk IO cycle.

The user interface API module may include an API that enables a user to interact with the disk IO scheduler via a user interface . For example the user interface API module in conjunction with user interface may provide the user with the ability to change the criterion for the organization of disk IO requests into queues. The user interface may include but is not limited to combinations of one or more of keypads keyboards mouse devices touch screens microphones speech recognition packages and other suitable devices or other electronic software selection methods.

In embodiments where the disk IO cycles are serving a multi user environment the disk IO cycles such as a disk IO cycle A may be approximately e.g. 120 150 milliseconds ms in duration. In contrast disk IO cycles longer than 150 ms may cause a perception of delay to users in the multi user environment.

In one instance the disk IO scheduler may be configured to allocate the disk IO cycle A into equal or substantially equal disk IO time intervals for the corresponding queues . The time intervals are identical or substantially identical in duration. For example if the duration of the disk IO cycle A is approximately 120 ms the disk IO scheduler may allocate the time intervals so that each is approximately 30 ms. Each of the queues may include different number of disk IO requests.

During the exemplary disk IO cycle A the disk IO scheduler may first provide disk IO bandwidth to the queue for the duration of the time interval . During the duration of the time interval the disk manager may process disk IO requests in the queue . The processing of the disk IO requests includes at least one of transferring data to and from a hardware data storage device based on each of the disk IO requests. At the end of the time interval the disk IO scheduler may command the disk manager to terminate the processing of the disk IO requests in the queue.

Subsequently the disk IO scheduler may provide disk IO bandwidth to the queue for the time interval before terminating the processing of the disk IO requests in the queue when the time interval expires. Likewise the disk IO scheduler may then provide disk IO bandwidth to the queue for duration of the time interval and to the queue for the duration of the time interval . The end of the time interval coincides with the conclusion of the disk IO cycle A. Subsequently the disk IO scheduler may initiate a new disk IO cycle. It will be appreciated that disk IO cycle A is meant to be illustrative rather than limiting. Thus in various other embodiments any number of queues may be processed in a disk IO cycle and the number of equally or substantially equal allocated time intervals is directly related to the number of queues being processed.

The ability of the disk IO scheduler to further divide the time intervals into time slices is illustrated with respect to the exemplary disk IO cycle B. The disk IO cycle has the same duration as the disk IO cycle A. As shown the disk IO scheduler may divide each of the time intervals into a plurality of time slices. Specifically the disk IO scheduler may divide the time interval into equal or substantially equal time slices A C. Likewise the disk IO scheduler may divide the time interval into respective time slices.

For example when the duration of the disk IO cycle B is approximately 120 ms and each of the time intervals is 30 seconds time interval may be further divided into thirds to create time slices that are 10 ms in duration. Moreover the disk IO scheduler may divide each of the other time intervals into the same number of slices. Accordingly as shown the disk IO scheduler may similarly divide each of the time intervals into three 10 ms time slices.

The disk IO scheduler may be further configured to use the time slices of each time interval fairly during the disk IO cycle B. In other words the disk IO scheduler ensures that each of the queues is provided with time slices of its allocated time interval in a round robin manner. For example as illustrated in disk IO cycle B the disk IO scheduler may provide the queue with a time slice A that belongs to the time interval . This provision of the time slice A enables queue to process disk IO requests during the duration of the slice. Subsequently the disk IO scheduler may provide time slices A A and A of the corresponding time intervals respectively to the queues . During each of the time slices A A A the disk IO scheduler may also cause the disk manager to process disk IO requests in each of the respective queues .

When the queues are provided with a first round of time slices A A A and A the queues are then provided with a second round of time slices B B B and B respectively. Additional time slices such as time slices C C C and C may be further provided in this round robin manner in sequence such that the queues are provided with the same number of time slices during each round for the processing of disk IO requests.

This equal or substantially equal division of the time intervals as well as the round robin distribution of time slices to each queue ensures that disk IO requests of each queue such as each of the queues are processed with greater but equal frequency. It will be appreciated that disk IO cycle B is meant to be illustrative rather than limiting. Thus in various other embodiments time intervals allocated to each queue may be divided into any number of time slices provided that each of the time intervals is divided into approximately equal time slices and the time slices of different time intervals are also approximately the same in duration.

The disk IO scheduler may dynamically redistribute a disk IO cycle to accommodate one or more new queues that need disk IO bandwidth. For instance the dynamic redistribution of a new disk IO cycle to accommodate a new queue is illustrated by disk IO cycle A. The exemplary disk IO cycle A has the same duration as the disk IO cycle A.

During or following a disk IO cycle such as disk IO cycle A the disk IO scheduler may determine that an additional queue needs disk IO bandwidth. Accordingly the disk IO scheduler may allocate the disk IO cycle A into equal or substantially equal time intervals . For example if the duration of the disk IO cycle A is approximately 120 ms the disk IO scheduler may allocate the time intervals so that each one is approximately 24 ms in duration. In comparison as described above each of the time intervals has duration of approximately 30 ms.

The time intervals correspond to the previously processed queues while the time interval corresponds to the additional queue . In various embodiments the disk IO scheduler may sequentially provide disk IO bandwidth to the queues as well as queue in a similar manner as during the disk IO cycle A. During each of the time slices the disk IO scheduler may be configured to cause the disk manager to process disk IO requests in each of the respective queues .

It will be appreciated that the dynamic redistribution of a disk IO cycle may also function in reverse when one or more queues ceases their need for disk IO bandwidth. For instance the disk IO scheduler may determinate that queue no longer needs disk IO bandwidth during or following a disk IO cycle such as disk IO cycle A. Accordingly the disk IO scheduler may adjust the next cycle from one that resembles disk IO cycle A into one that resembles disk IO cycle A.

In alternative embodiments where the disk IO scheduler has divided one or more time intervals into a plurality of time slices the disk IO scheduler may also accommodate new queues via the redistribution of the time slices. For instance the dynamic redistribution of time slices in a new disk IO cycle to accommodate a new queue is illustrated by the disk IO cycle B. The exemplary disk IO cycle B has the same duration as disk IO cycle B.

Initially the disk IO scheduler may ensure that each of the queues is provided with time slices of its allocated time interval in a round robin manner that is previously described with respect to disk IO cycle B. As described the disk IO scheduler may provide the queue with a time slice A that belongs to the time interval . This provision of the time slice A enables queue to process disk IO requests during the duration of the slice. Subsequently the disk IO scheduler may provide time slices A A and A of the corresponding time intervals respectively to the queues . During each of the time slices the disk IO scheduler may be configured to cause the disk manager to process disk IO requests in each of the respective queues . When the queues are provided with a first round of time slices A A A and A the queues are then provided with a second round of time slices B B B and B respectively.

However at some point during the disk IO cycle B the disk IO scheduler may determine that an additional queue needs disk IO bandwidth. Instead of initiating the provision of disk IO bandwidth in the next disk IO cycle the disk IO scheduler may convert the one or more remaining round of time slices to accommodate the new queue. In one embodiment this conversion may be carried out by the cycle distribution module of the disk IO scheduler .

For example instead of providing another round of time slices that resemble the time slices C C C and C of disk IO cycle B the disk IO scheduler may convert them into time slices so that the queue may immediately receive some disk IO bandwidth. In one embodiment the total duration of the time slice B B B and B is 40 ms with each queue having approximately 10 ms time slices. Following the adjustment by the disk IO scheduler the duration of the time slices provided to each of the queue is approximately 8 ms. Further the new queue also receives a time slice that is approximately 8 ms. It can nevertheless be readily seen that the total duration of the time intervals is also approximately 40 seconds due to the redistribution made by the disk IO scheduler .

It will be appreciated that in other embodiments the disk IO scheduler may convert the one or more remaining rounds of time slices to accommodate any number of queues in a similarly manner. The conversion of one or remaining rounds of time slices to accommodate one or more new queues enables the new queues to receive immediate disk IO bandwidth thus enhancing user perceived response time.

Following the disk IO cycle B the disk IO scheduler may initiate a disk IO cycle that includes time intervals for the queues as well as the queue . Each of the time intervals being divided equally or approximately equally into a plurality of corresponding time slices e.g. time interval divided into A B and C and distributed to the queues in a round robin fashion. Thus the disk IO scheduler has adjusted a new cycle to completely accommodate queue after a partial accommodation.

It will be appreciated that the dynamic redistribution of a disk IO cycle may also function in reverse for time slices when one or more queues ceases their need for disk IO bandwidth. For instance the disk IO scheduler may determinate that queue no longer needs disk IO bandwidth during or following a disk IO cycle such as disk IO cycle B. Accordingly the disk IO scheduler may adjust the next cycle from one that resembles disk IO cycle into one that resembles disk IO cycle B. The adjustment may also occur in mid cycle in a process that is reverse of the disk IO cycle B.

In various embodiments the queue may include a low portion a middle portion and a high portion . The disk IO requests grouped in queue may be further sorted into each portion according to at least one secondary criterion. For example the secondary criterion may be a priority rating assigned to each disk IO access request. The portions are configured so that during the timer period each portion receives a different allocation of the disk IO bandwidth. In one embodiment the high portion is configured to receive the highest allocation of the disk IO bandwidth with the middle portion and the low portion respectively receiving decreasing amounts of disk IO bandwidth allocation. For instance the disk IO requests in the high portion may be able to transfer data to and from the hardware storage device using a bandwidth of approximately 700 megabytes MB per second during the time interval . On the other hand the disk IO requests in the middle portion may be allocated a bandwidth of approximately 200 MB per second while the disk IO requests in the low portion may be allocated a bandwidth of approximately 100 MB per second. In this way disk IO requests that are grouped into the same queue may be further processed according to a secondary criterion.

In other embodiments the disk IO scheduler may group the disk IO requests according to additional classification criteria such as whether the disk IO requests act on multimedia content or non multimedia content. At block the disk IO scheduler may allocate a disk IO cycle to each of the queues. According to various embodiments the disk IO cycle may be distributed equally among the queues such that the duration disk IO time interval distributed to each queue is identical or substantially identical. At block the disk IO scheduler may run a disk IO cycle based on the allocated time intervals. In one embodiment the disk IO scheduler may sequentially provide disk IO bandwidth to each of the queue for the duration of the allocated time intervals until the disk IO cycle is completed.

At decision block the disk IO scheduler may determine whether another disk IO cycle is to be performed. If the disk IO scheduler determines that no further disk IO cycles are to be performed no at decision block the process may terminate at block . However if the disk IO scheduler determines that an additional disk IO cycle is to be performed yes at decision block the process may proceed to decision block .

At decision block the disk IO scheduler may determine whether an adjustment to the disk IO cycle allocations are necessary such as due to an increase or decrease in the number of queues that need disk IO bandwidth. If the disk IO scheduler determines that the disk IO bandwidth allocation should not be adjusted no at decision block the process may loop back to block where a disk IO cycle based on the allocated disk IO bandwidth intervals may be performed again for the queues. However if the disk IO scheduler determines that the disk IO bandwidth allocation should be adjusted yes at decision block the process may proceed to block .

At block the disk IO scheduler may adjust the allocation of the disk IO cycle based on changes in the number of queues that need disk IO bandwidth. According to various embodiments increases or decreases in the number of queues may change the duration of the time intervals assigned to each queue. However each of the time interval durations nevertheless remains equal or substantially equal to the other time interval durations. Thus a fair round robin distribution of disk IO bandwidth may be implemented regardless of the number queues. Once the disk IO scheduler has made the appropriate adjustment to the allocation of the time intervals in the disk IO cycle the process may loop back to block where a disk IO cycle based on the allocated disk IO bandwidth intervals may be performed again for the queues.

In other embodiments the disk IO scheduler may group the disk IO requests according to additional classification criteria such as whether the disk IO requests act on multimedia content or non multimedia content. At block the disk IO scheduler may allocate a disk IO cycle to each of the queues. According to various embodiments the disk IO cycle may be distributed equally or substantially equally among the queues such that the duration disk IO time interval distributed to each queue is identical or substantially identical.

At block the disk IO scheduler may divide each of the one or more allocated time intervals into disk IO time slices. In various embodiments each of the time intervals may be divided so that the time slices are identical or substantially identical in duration. Moreover in some embodiments the time slices from different time intervals are also equal or approximately equal in duration. In this way the disk IO scheduler may increase the frequency that each queue of disk IO requests are process as well as ensure the fair allocation of disk IO bandwidth to each of queues.

At block the disk IO scheduler may provide a round of disk IO time slices for all the queues. In other words each of queues is provided with one disk IO time slice that makes up its respective time interval. During each disk IO time slice the disk IO scheduler may command the disk manager to process the disk IO requests in each respective queue. The processing of the disk IO requests includes at least one of transferring data to and from a hardware data storage device based on each of the disk IO requests.

At decision block the disk IO scheduler may determine whether the disk IO cycle is complete. If the disk IO cycle is complete yes at decision block the process may proceed to decision block . At decision block the disk IO scheduler may determine whether an additional disk IO cycle is to be performed. If the disk IO scheduler determines that no further disk IO cycles are to be performed no at decision block the process may terminate at block . On the other hand if the disk IO scheduler determines that an additional disk IO cycle is to be performed yes at decision block the process may loop back to block where a new disk IO cycle that includes time intervals provided to the one or more queues.

Returning to decision block if the disk IO scheduler determines that the disk IO cycle is not complete no at decision block the process may proceed to decision block . At decision block the disk IO scheduler may determine whether the divided disk IO time slices are to be adjusted. For example the divided disk IO time slices may be adjusted to accommodate one or more new queues that include disk IO access requests. Alternatively the divided disk IO time slices may be adjusted when one or more queues are terminated.

If the disk IO scheduler determines that the divided disk IO time slices are to be adjusted yes at decision block the disk IO scheduler may adjust the time slices based on a change in the number of queues at block . For example the disk IO scheduler may detect that a new queue that includes disk IO requests and adjust the time slices in a manner similar to as shown in disk IO cycle B to accommodate the new queue. Once the time slices are adjusted the process may loop back to block where the disk IO scheduler may provide a round of disk IO time slices for all the queues based on the adjustment. During each disk IO time slice the disk IO scheduler may command the disk manager to process the disk IO requests in each respective queue.

However if the disk IO scheduler determines that adjustments to the divided disk IO time slices are not necessary no at decision block the process may directly loop back to block where the disk IO scheduler may provide a round of disk IO time slices for all the queues based on the adjustment.

It will be appreciated that the dynamic allocation of disk IO bandwidth as shown is meant to be illustrative rather than limiting. In other embodiments the dynamic allocation of disk IO bandwidth may be implemented in alternative processes.

In a very basic configuration computing device typically includes the at least one processing unit and system memory . Depending on the exact configuration and type of computing device system memory may be volatile such as RAM non volatile such as ROM flash memory etc. or some combination of the two. System memory typically includes an operating system one or more program modules and may include program data . The operating system include a component based framework that supports components including properties and events objects inheritance polymorphism reflection and provides an object oriented component based application programming interface API such as but by no means limited to that of the .NET Framework manufactured by Microsoft Corporation Redmond Wash. The device is of a very basic configuration demarcated by a dashed line . Again a terminal may have fewer components but will interact with a computing device that may have such a basic configuration.

Computing device may have additional features or functionality. For example computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of device . Computing device may also have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. These devices are well know in the art and are not discussed at length here.

Computing device may also contain communication connections that allow the device to communicate with other computing devices such as over a network. These networks may include wired networks as well as wireless networks. Communication connections are one example of communication media. Communication media may typically be embodied by computer readable instructions data structures program modules etc.

It will be appreciated that the illustrated computing device is only one example of a suitable device and is not intended to suggest any limitation as to the scope of use or functionality of the various embodiments described. Other well known computing devices systems environments and or configurations that may be suitable for use with the embodiments include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor base systems set top boxes game consoles programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and or the like.

The provision of fair and dynamic distribution of disk IO bandwidth to a plurality of queues such as queues of disk IO requests servicing software applications running in a multi user environment may maximize disk IO bandwidth usage while serving to enhance user experience. For example the fair and dynamic distribution of disk IO bandwidth to queues may ensure that no application serving a first user is starved of disk IO bandwidth due to an application serving another user consuming a disproportionate amount of disk IO bandwidth. Thus embodiments in accordance with this disclosure may diminish delays and hesitations that users may experience while using applications.

In closing although the various embodiments have been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as exemplary forms of implementing the claimed subject matter.

