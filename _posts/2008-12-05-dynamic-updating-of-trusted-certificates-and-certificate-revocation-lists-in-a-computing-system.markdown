---

title: Dynamic updating of trusted certificates and certificate revocation lists in a computing system
abstract: This application generally describes techniques for dynamically updating trusted certificates and CRLs, generally referred to herein as certificate information. That is, techniques are described for updating trusted certificates and CRLs without terminating existing communication sessions. An exemplary method includes the steps of receiving an initial configuration that includes a trusted certificate authority, receiving certificate information that includes a certificate revocation list (CRL) and a first certificate from the trusted certificate authority, storing the certificate information in the configuration, initiating a communication session for an application, receiving an update to the certificate information, and updating the configuration to reflect the update to the certificate information without terminating the communication session. A computing device may receive the update to the certificate information from a user, as well as receiving a command from the user to apply the update to the certificate information to current communication sessions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08032742&OS=08032742&RS=08032742
owner: Unisys Corporation
number: 08032742
owner_city: Blue Bell
owner_country: US
publication_date: 20081205
---
The invention relates to computer networking and more particularly to implementing communications protocols in a software system.

An application programming interface API is a set of functions and procedures provided by an operating system to higher level software applications executing within a computer system. APIs provide the software application with the ability to interact with the operating system and lower level system utilities and services implemented by the operating system. One important service typically implemented in the operating system is the ability to communicate over a computer network. An API that provides access to these network services may be referred to as a network interface API. Network interface APIs are provided by the operating system to provide higher level software applications with the ability to communicate with other software applications running on different computing systems reachable by the computer network. Operating systems generally implement a network stack conforming to the Open Systems Interconnection OSI reference model in order to provide a plurality of layered networking protocols to enable this communication. One common form of a network stack conforms to the TCP IP model in which the Transmission Control Protocol TCP is utilized within the transport layer of the network stack while the Internet Protocol IP is utilized in the Internet layer.

Some network protocols are designed to provide secure communications over a network. One such networking protocol is the Secure Socket Layer SSL protocol. Another such networking protocol is the Transport Layer Security TLS protocol. The SSL protocol generally provides secure communication over the network even if the network itself is insecure using asymmetric key cryptography to transmit a symmetric key that two parties to a communication session may use thereafter to encrypt session data. In this manner the two parties exchange a symmetric key without the symmetric key being intercepted by a third party. Asymmetric key cryptography typically requires the use of public key and private key pairs. Each computer participating in the SSL protocol maintains a secret private key while also distributing an associated public key to other computers on the network. Public keys may be distributed within a digital certificate. The certificate may include other information in addition to the public key such as a computer identifier and an identifier for a trusted certificate authority. Network applications may use an API that is provided by an implementation of SSL referred to herein as an SSL API to create and maintain a secure connection over a computer network. Typically each application running on a computer initiates a unique SSL session through the SSL API.

In many cases two communicating parties may each not know whether the other party can or should be trusted. As a result it is common to use a certificate authority which is an entity that issues digital certificates and operates as a trusted third party of each of the two communicating parties. The certificate authority issues a certificate to each of the two communicating parties to indicate that the two parties are trustworthy. The certificate authority also issues certificate lists that include identifiers of trusted parties.

In operation a certificate authority typically maintains a certificate revocation list CRL which is a list of certificates that have been revoked or are no longer valid and therefore should not be relied upon. A certificate authority may for example revoke a certificate upon discovering that the entity to which the certificate was issued failed to comply with certain policies. Other reasons for revoking a certificate include revocation when the private key has been compromised the certificate has been superseded by another certificate privileges for the individual have been withdrawn and the like. The certificate authority republishes the CRLs periodically or immediately upon revocation of one or more certificates. The other parties may then refuse to initiate or continue communication with the distrusted party.

When implementing a secure communication session a computing device verifies that the digital certificate of the other party is valid by reference to internally stored copies of certificate lists and CRLs. The computing device implementing SSL or other secure communication protocols generally store certificates certificate lists and CRLs in one or more files or databases. Generally when a new certificate or CRL is received the computing device terminates all current network communication sessions updates its certificate lists and or CRLs in its files or databases and then allows network communication to restart. The network entity may typically receive updates to certificates and CRLs from a certificate authority.

In accordance with one aspect of this disclosure techniques are described herein that provide a mapping between multiple layered application programming interfaces APIs for the same secure network communications protocol utilized within one layer of the network stack. For example an operating system of a computing device may internally implement a first version of the secure communication protocol that presents a first set of APIs. An emulation environment of the computing device is used to emulate a second implementation of the network security protocol and present a second set of APIs to higher level software applications executing on the computing device where the second set of APIs conforms to the second version of the same secure network communication protocol.

As one example an SSL emulation environment executing on the computing device is used to implement and present to the higher level software applications a first secure socket layer SSL API. This allows the high level software application to conform to and directly invoke the first SSL API of the SSL emulation environment. The operating system provides a mapping of the emulated SSL implementation to a second SSL API where the second SSL API is provided by an internal SSL implementation utilized by a network stack of the operating system when establishing secure network communications. This allows the operating system to utilize its internal implementation of the SSL protocol without requiring that the upper level software applications be modified so as to conform to the particular API of the specific SSL implementation of the operating system. Instead the upper level software applications executing on the computer continue to utilize the SSL APIs presented by the by the SSL emulation environment. As one example the SSL API presented to the higher level software applications by the emulation environment may conform to an API of a proprietary SSL implementation or an API of an SSL implementation that is typically provided by an industry standard operating system such as Microsoft Windows MAC OS X Unix Linux or other commonly used operating system. The underlying SSL implementation of the operating system to which SSL API of the emulation environment is mapped may be a proprietary SSL implementation or an open source implementation such as OpenSSL.

In accordance with another aspect of this disclosure techniques are described herein that relate to a communication interface process interacting with an emulated SSL implementation that is capable of maintaining a plurality of SSL connections for a plurality of applications. Rather than forcing each software application to create an individual SSL connection techniques are described herein whereby a software application informs an emulated SSL implementation that the application needs a secure connection. The emulated SSL implementation then interacts with a communication interface process that performs the tasks associated with initializing an SSL connection. The communication interface process maintains a plurality of contexts each associated with one of a plurality of applications running in the emulation environment.

In accordance with another aspect of this disclosure techniques are described herein for receiving an update to a certificate revocation list CRL and applying the update to a current communication session without terminating the communication session. A software application executing on a computing device may request to initiate a communication session with another computing device over a network using for example an SSL implementation of a communication suite of software provided by the computing device such as a library of secure communication APIs provided by an operating system of the computing device. The communication suit may utilize an initial configuration of security information e.g. digital certificates and one or more CRLS for initiating and establishing the secure communication session with the other computing device. That is to begin any communication session the communication suite checks the CRL to determine whether the other computing device over the network has had its certificate revoked. During the communication session the computing device receives an update to the CRL associated with the communication suite. For example an administrative user may request installation of a replacement CRL recently published or modify the CRL by adding removing or editing entries within the CRL with respect to any revoked digital certificates. In accordance with the principles described herein the computer presents a user interfaces that allows the user to send a command to the communication suite to update the CRL while the communication session s is in progress and without requiring that any existing communication session s be torn down or stalled.

To ensure that the communication session does not need to be terminated in order to apply the update to the CRL the communication suite stores and maintains context data for the active communication session. The context data includes for example a trusted certificate authority associated with the communication session a session identifier a public private key pair for the communication session a symmetric key for the session and data retrieved from the CRL that was initially checked when the session was established. When the communication suite receives a notice that a CRL has been updated the communication suite creates a second context by duplicating the first context so as to include the information of the first context and applying the update to the CRL directly to the second context. That is for data that stays the same after the CRL update the data of the second context stays the same. However where data has changed due to the CRL update the second context includes data that reflects the change of the CRL update. In particular any data that changes as a result of the CRL update is reflected in the second context.

Once the second context is created the communication suite utilizes the second context to apply the second context to the existing communication sessions instead of the first context. In one embodiment the communication suite marks the existing communication session for CRL rechecking causing the computing device to recheck the CRL when data is subsequently communicated over the existing communication session and when a certificate for the communication session is revoked in accordance with the update to the CRL the computing device terminates the existing communication session. In this manner the communication suite applies an update to e.g. a CRL or a digital certificate to an existing communication session without terminating the communication session.

In one embodiment a method includes receiving with a computer an initial configuration that specifies a trusted certificate authority receiving digital certificate information that includes a certificate revocation list CRL and a digital certificate issued by the trusted certificate authority storing the certificate information in the configuration of the computer with the digital certificate initiating a secure communication session for a software application executing on the computer receiving with the computer an update to the certificate information and updating the configuration to reflect the update to the certificate information without terminating the communication session.

In another embodiment a computing device includes a communication suite that includes an implementation of the secure socket layer SSL protocol and an application programming interface API for the implementation of the SSL protocol and an application that interacts with the SSL API to initiate a communication session in accordance with the SSL protocol wherein the communication suite maintains a first context for the communication session of the application when the communication session is initiated wherein the first context includes certificate information that includes a certificate revocation list CRL and a certificate and wherein the communication suite receives an update to the certificate information and applies the update to the certificate information without terminating the communication session.

In one embodiment a method includes receiving with a computer an initial configuration that specifies a trusted certificate authority receiving digital certificate information that includes a certificate revocation list CRL and a digital certificate issued by the trusted certificate authority storing the certificate information in the configuration of the computer with the digital certificate initiating a secure communication session for a software application executing on the computer receiving with the computer an update to the certificate information and updating the configuration to reflect the update to the certificate information without terminating the communication session.

The techniques described herein may provide several advantages. For example the techniques described herein may enable a communication suite to apply an update to a CRL without forcing termination of any existing active secure communication sessions that make use of digital certificates associated with the CRL. In this manner a user may have greater control over when an update to a CRL is applied. As updates to CRLs may be applied without terminating any of a plurality of communication sessions this may lead to increased productivity for a computing device as well as for other computing devices in communication with the computing device.

The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features objects and advantages of the invention will be apparent from the description and drawings and from the claims.

In the example of operating systems A and B implement a plurality of layered networking protocols that generally conform to the Open Systems Interconnection OSI reference model in order enable this communication For example operating systems A and B implement network stacks that conform to the TCP IP model in which the Transmission Control Protocol TCP is utilized within the transport layer of the network stack while the Internet Protocol IP is utilized in the Internet layer. In addition operating systems A B implement one or more network protocols designed to provide secure communications over a network such as the Secure Socket Layer SSL protocol.

Operating systems A and B expose this functionality to higher level software applications A and B respectively by way of application programming interfaces APIs . One such API may be a secure socket layer SSL API for exposing procedures and functions of the underlying operating systems A B for secure communication of data in accordance with the SSL protocol. As another example one such API may be a transport level security TLS API. These functions and procedures provide applications such as applications A with the ability to send data via the TLS SSL protocol as an encrypted transmission over a network such as network . For example an SSL API provides procedures to one of applications A that enable the one of applications A to securely initiate a connection send and receive packets of data request a digital certificate from another device connected to network encrypt or decrypt data authenticate the source of data or to terminate a connection.

In some cases a certificate authority such as certificate authority operates as a trusted third party that issues digital certificates. For example certificate authority may issue a digital certificate to an entity or user associated with computing device B to indicate to another computing device such as computing device A that the entity or user is trustworthy and any communication using the issued digital certificate can be trusted. Certificate authority maintains one or more certificate revocation lists CRLs that list of certificates that have been revoked or are no longer valid and therefore should not be relied upon. Certificate authority may for example revoke a digital certificate upon discovering that the entity to which the certificate was issued failed to comply with certain policies or has reported that the private key associated with the digital certificate has been compromised. Certificate authority republishes all or portions of the CRLs periodically or immediately in the form of a CRL update upon revocation of one or more certificates.

As described in further detail below either or both of computing devices A B implement techniques described herein that allow the computing devices to apply CRL updates e.g. CRL updates from certificate authority without requiring that current communication session be terminated.

In addition computing device A or optionally computing device B may implement techniques described herein that allow the computing devices to present an API for a secure network communications protocol to applications A where the API conforms to a different version of the protocol than a version implemented by operating systems A. For example operating system A of computing device A may internally implement a first version of the secure network communication protocol e.g. SSL that presents a first set of APIs where that first set of APIs are internally utilized the by operating system A and not exposed to applications A. Instead an emulation environment provided by computing device A is used to emulate a second implementation of the secure network communications protocol and present a second set of APIs to software applications A executing on the computing device where the second set of APIs conforms to the second version of the same secure network communications protocol.

Further emulation environment provides an operating environment for software applications that were written for a particular operating environment i.e. the particular operating system or particular APIs provided by the emulation environment. For example those APIs may no longer be provided by a currently active operating system . For example the operating system emulated by emulation environment may no longer be directly supported by computer the original software engineers who wrote the operating system or may have been superseded by a newer version that does not include those APIs. In any case emulation environment emulates the operating system and or corresponding APIs. That is emulation environment provides similar functionality to applications as would be provided by an operating system. For example emulation environment implements APIs typically provided by an operating system.

Emulated communication protocols implements and emulates one or more network communication protocols. In the example embodiment of emulated communication protocols emulates an implementation of the SSL protocol. Emulated communication protocols also provide APIs such as first SSL API for use by applications . In this manner the exemplary embodiment of computing device is capable of providing the functionality required by applications to continue operation of applications in emulation environment as opposed to an operating system or base computing environment such as base computing environment of . That is applications may operate within emulation environment even if computing device does not directly provide the operating system and APIs for which applications were written. Therefore if a user wishes to run one of applications on computing device but operating system of computing device does not support the APIs for which the one of applications was written the one of applications may nevertheless operate on computing device by executing in emulation environment and interacting with for example first SSL API . As described below base computing environment seamlessly provides a mapping between SSL API and SSL API so that the secure network communications protocol utilized within a network stack of operating system may be utilized without requiring modification of applications .

For example communication input output process provides an interface between emulation environment and operating system . Communication input output process may also be referred to as a communication interface process due to its provision of this interface. When one of applications requests for example a procedure emulated by emulated communication protocols through first SSL API emulated communication protocols sends data to communication input output process which interprets the data to make a corresponding procedure call to second SSL API . Emulated communication protocols sends data to communication input output process in the form of a packet which may include a connection identifier connection ID . Second SSL API in turn performs the procedure and if necessary sends resulting data to communication input output process which packages the resulting data into a packet and sends the packet to the emulated implementation of SSL of emulated communication protocols . First SSL API in turn returns the data to the appropriate one of applications .

In addition communication input output process initializes SSL implementation . Initially communication input output process initializes SSL implementation by for example making a call to a corresponding SSL library such as the OpenSSL library to prepare the library for use. Communication input output process also instructs SSL implementation through second SSL API as to what secure algorithms are available various features that are available such as cipher suites that are available the location of one or more certificate files the location of one or more certificate revocation list CRL files the location of public and private key pairs the location of collected public keys from other computing devices initialize a random number generator initializing error code strings or other initialization procedures. In one embodiment communication input output process makes calls to SSL implementation to prepare SSL implementation to execute in multiple threads as a multi threaded process. For example communication input output process may create and initialize semaphores or other data objects in preparation for the multi threaded processes. In this manner communication input output process initializes SSL implementation only once for a plurality of communication sessions rather than SSL implementation requiring distinct initializations for each unique communication session.

In the exemplary embodiment of emulated communication protocols send data to output queue and receive data from input queue to communicate with communication input output process . Emulated communication protocols may interact with output queue and input queue in one embodiment as if output queue and input queue were each half duplex network ports. In general output queue and input queue reside in a shared memory space of computing device that is a memory space shared both by operating system and emulation environment and act as a communicative bridge between emulation environment and base computing environment . That is output queue and input queue enable emulation environment to send and receive data to and from base computing environment . In one embodiment emulated communication protocols package data sent to output queue in the form of a network packet. In one embodiment such a packet may have a proprietary format as described for example with respect to the exemplary packets of . In one embodiment the packet may be a standard network packet. In one embodiment the packet includes a connection ID that is associated with the application as well as the one of A N contexts associated with the communication session. In one embodiment emulated communication protocols receive data from input queue in the form of a network packet.

SSL implementation of operating system implements the SSL protocol. That is SSL implementation provides the various functions and procedures to provide computing device with the capability to communicate over SSL with other computing devices connected to network . For example SSL implementation implements SSL handshake procedures key retrieval certificate retrieval public private key pair generation encryption and decryption procedures data verification and other procedures necessary for SSL communication. In one embodiment SSL implementation may comprise OpenSSL. In one embodiment second SSL API of SSL implementation may be an API to interact with OpenSSL.

Communication input output process also maintains one or more contexts . In general a context refers to information regarding a particular network connection or communication session between computing device and another computing device connected to network . In particular each of contexts include various details regarding such a connection. For example context A may include such information as a certificate list a CRL a public key an identification of a certificate authority a symmetric key in use for the communication session an identification of the encryption protocol being used for the communication session and other such information. Each of contexts may also include a connection identifier connection ID that associates each of contexts with a particular one of applications or a particular communication session of applications . Communication input output process uses a connection ID from a packet from emulated communication protocols to identify the one of contexts associated with the communication session associated with the packet. Emulated communication protocols use the connection ID to identify the one of applications with which the packet is associated.

In one embodiment each of contexts relate to a particular network socket not shown of operating system . A context such as context A may include information as to the current state of the trusted certificates and CRLs. A context such as context A may also include connection status information such as the current time the last time a status request was made the total number of bytes of input and output sent through SSL the number of bytes of input and output sent through SSL since the last status update and the current bitrate of the connection. In some embodiments communication input output process may include a global trusted certificate list and or a global CRL each of which may be applied to each of contexts .

Because communication input output process maintains contexts applications may not be required to perform these or similar context maintenance operations. In this manner applications only need to use the proper procedure call provided by first SSL API to initiate a communication session over network . The more difficult tasks of actually ensuring the initiation and maintenance of the communication session may be performed by communication input output process through interaction with second SSL API . Therefore if second SSL API needs to be changed for example to adapt to a change in the SSL protocol or a change in SSL implementation only communication input output process may need to be updated rather than the necessity of updating each of applications . In one embodiment communication input output process maintains a single SSL session with SSL implementation such that a single SSL session exists to service a plurality of communication sessions of applications .

Administrator may interact with computing device through user interface . User interface includes for example a computer monitor a command line interface a graphical user interface GUI a printer a keyboard a mouse a security device such as a fingerprint scanner and other hardware or software interfaces. Administrator may perform various administrative tasks on computing device . For example administrator may initialize public and private key pairs create or maintain passwords load or manipulate trusted certificate lists load or manipulate certificate revocation lists CRLs load or store encryption algorithms enable or disable ports or sockets or other administrative tasks.

According to another aspect of this disclosure computing device receives updated trusted certificate lists or CRLs for example from a certificate authority such as certificate authority or administrator . Upon receiving these updates computing device may need to apply the updates to current communication sessions and or to future communication sessions. In one embodiment administrator configures a file such as a file in file system provided by base computing environment to update the trusted certificates and or CRLs. File system may be included in computing device or file system may be accessible by computing device e.g. from across a network . File system may store one or more files that include information regarding trusted certificate authorities certificate lists and CRLs.

Administrator may further manipulate the files of file system . For example administrator may add or remove a trusted certificate authority a certificate or a CRL. When administrator has finished configuring the files of file system administrator uses user interface to send a command to update the certificates and CRLs of computing device . Emulation environment in turn causes emulated communication protocols to send a message to communication input output process to update the certificates and CRLs of contexts . The message may include an identifier of a file for communication input output process to retrieve in order for communication input output process to make adjustments to contexts .

Communication input output process modifies one or more of contexts in response to an update message from emulated communication protocols . Communication input output process may be able to retrieve and store data to and from file system . Communication input output process may retrieve an identifier of a file in file system . Communication input output process may then retrieve the file identified by the identifier from file system . In an alternative embodiment emulated communication protocols may retrieve the file from file system and send the file to communication input output process . In any case communication input output process may use the file to update one or more of contexts .

In one embodiment communication input output process uses information in the file retrieved from file system for new ones of contexts created for new communication sessions of applications . That is rather than modifying the existing ones of contexts communication input output process may use the file when creating new contexts when one of applications initiates a new communication session through first SSL API . In another embodiment communication input output process may use the file to update existing ones of contexts . In yet another embodiment communication input output process may include one global context that applies to all communication sessions of applications for certain information such as trusted certificates and CRLs and individual contexts for each communication session communication input output process may therefore update the global context in accordance with the file from file system . In still another embodiment communication input output process may maintain two or more global contexts of contexts and in communication session specific ones of contexts an identifier as to which of the two or more global contexts to refer communication input output process may then set the identifier of all new communication specific ones of contexts to the most recent global context thereby phasing out the old global contexts and removing the oldest global context when no more communication specific contexts refer to it. In this manner communication input output process may update trusted certificate authorities certificates and CRLs without terminating existing communication sessions and without the necessity of a restart.

In one embodiment SSL implementation may be OpenSSL. In this exemplary embodiment second SSL API may provide procedures such as SSL CTX new SSL CTX set default passwd cb userdata SSL CTX set default passwd cb SSL CTX use PrivateKey file SSL CTX use certificate chain file SSL CTX set cert store SSL CTX set cipher list or other procedures. Accordingly in this example embodiment communication input output process may call any or all of these procedures at various times to initiate or maintain a communication session and a corresponding one of contexts .

The example embodiment of computing device may provide several advantages. For example the use of a communication input output process may simplify the process of developing an application such as one of applications that maintains secure connections over SSL. That is because the one of applications does not need to handle the actual SSL initialization because the actual initialization may be performed by communication input output process development of the one of applications may be simplified to just calling procedures provided by first SSL API . Where the one of applications was developed for an operating system that is no longer supported an emulated version of the operating system may be created that provides emulation environment and emulated communication protocols the one of applications may then be executed within emulation environment which may prevent the necessity of rewriting the one of applications .

Communication input output process receives the data from output queue . In one embodiment communication input output process receives data through output queue in the form of a packet. Communication input output process then extracts data from the packet . From this extracted data communication input output process forms a context such as context A associated with the communication session . For example communication input output process may form context A to include information extracted from the packet including a certificate a list of available encryption protocols a public key a certificate list a certificate revocation list CRL a session identifier such as a connection ID state information and other information.

Communication input output process then calls the procedures provided by second SSL API to initiate a communication session . Second SSL API may require different procedure calls and different data formats than first SSL API therefore communication input output process invokes the procedure calls required to interact with second SSL API . SSL implementation associated with second SSL API may be a different implementation of the SSL protocol than emulated communication protocol . For example SSL implementation may be an OpenSSL implementation of SSL and emulated communication protocol may be an emulated proprietary implementation of the SSL protocol as shown in .

Upon receiving data and procedure calls from communication input output process through second SSL API SSL implementation initiates a communication session using with another computing device connected to network . That is SSL implementation transmits data over network to request initiation of a communication session with another computing device . SSL implementation may also obtain certificates and CRLs from a certificate authority such as certificate authority .

Assuming that the communication session can begin properly SSL implementation receives a response from the computing device with which a communication session was requested . SSL implementation then uses second SSL API to return a communication initiation confirmation to communication input output process . Communication input output process modifies the created one of contexts in accordance with data received in this confirmation. Communication input output process then packages the confirmation into a packet and send the packet to emulated communication protocols through input queue . Emulated communication protocols then return a confirmation message to the requesting one of applications . The requesting one of applications has then established a communication session and may send data in accordance with the exemplary method of and receive data in accordance with the exemplary method of .

Communication input output process receives the packet from output queue . Communication input output process then extracts information from the packet . Communication input output process uses data extracted from the packet to determine the source of the data and accordingly may extract necessary information from the associated one of contexts . For example if the communication session for the one of applications is related to context A communication input output process may extract a symmetric key a public key or an encryption algorithm identifier from context A for later encryption of the data. Communication input output process then calls procedures provided by second SSL API to transmit the data .

SSL implementation receives the data through second SSL API . In addition to data sent from the one of applications SSL implementation receives an encryption algorithm identifier and one or more keys such as a public key or a symmetric key. SSL implementation uses all of the received information to generate a packet for transmission over network . The information in the packet is encrypted in accordance with a selected encryption algorithm. SSL implementation then transmits the encrypted packet over network to the proper destination .

SSL implementation processes the packet in accordance with the SSL protocol. SSL implementation extracts certain information from the packet . In the example of SSL implementation extracts an identifier from the packet that identifies the destination of the packet such as one of applications . SSL implementation send data from the packet to communication input output process through second SSL API . Communication input output process retrieves information from the one of contexts associated with the packet . SSL implementation perform additional communicative steps with communication input output process not shown in such as requesting from communication input output process context information from one of contexts regarding the packet such as a symmetric key a private key corresponding to a public key an encryption algorithm identifier or other information in order to decrypt the packet if necessary. SSL implementation may also decrypt the packet using this extracted information before sending decrypted contents of the packet to communication input output process .

Upon receiving decrypted contents of the packet communication input output process creates a packet of a format required by emulated communication protocols . Communication input output process may further update context information in the associated one of contexts if necessary. For example the received data may have included an update to a certificate trusted certificate list or a CRL. Communication input output process updates contexts accordingly. Once communication input output process has formed the packet communication input output process delivers the packet to emulated communication protocols through input queue .

Emulated communication protocols disassemble the packet and extract information from the packet . For example emulated communication protocols may extract an identifier of the intended recipient among applications . Emulated communication protocols then sends the extracted data to the appropriate one of applications through first SSL API .

In general communication suite provides SSL implementation which is an implementation of the SSL protocol. SSL implementation provides SSL API to applications . Applications may call procedures and functions of SSL API to initiate SSL communication sessions with other computing devices on network . For example in one embodiment SSL implementation may be OpenSSL and SSL API may provide procedures that include SSL CTX new SSL CTX set default passwd cb userdata SSL CTX set default passwd cb SSL CTX use PrivateKey file SSL CTX use certificate chain file  SSL CTX set cert store SSL CTX set cipher list or other procedures.

Applications execute on operating system . Operating system may provide other APIs not shown for applications as well such as operations to read and write data retrieve user input send output interact with computing resources or operating system functions.

Communication suite may also maintain one or more contexts A N contexts . In general a context refers to information regarding a particular network connection or communication session between one of applications and another computing device connected to network . In particular each of contexts include various details regarding such a communication session. For example context A may include such information as a certificate list a CRL a public key an identification of a certificate authority a symmetric key in use for the communication session an identification of the encryption protocol being used for the communication session and other such information. Each of contexts may also include a connection identifier connection ID that associates each of contexts with a particular one of applications or a particular communication session of applications . In one embodiment communication suite implement a table to store associations between applications and corresponding ones of contexts using the connection ID.

Administrator interacts with computing device through user interface . User interface may include for example a computer monitor a command line interface a graphical user interface GUI a printer a keyboard a mouse a security device such as a fingerprint scanner and other hardware or software interfaces. Administrator may perform various administrative tasks on computing device . For example administrator may initialize public and private key pairs create or maintain passwords load or manipulate trusted certificate lists load or manipulate certificate revocation lists CRLs load or store encryption algorithms enable or disable ports or sockets or other administrative tasks.

Moreover computing device may receive updated trusted certificate lists or CRLs for example from a certificate authority such as certificate authority . Computing device may also receive these updates from a user such as administrator . Upon receiving these updates computing device applies the updates to current communication sessions and or to future communication sessions. In one embodiment administrator may configure a file such as a file in file system to update the trusted certificates and or CRLs. File system may be included in computing device or file system may be otherwise accessible by computing device . File system stores one or more files that include information regarding trusted certificate authorities certificate lists and CRLs.

Administrator may further manipulate the files of file system . For example administrator may add or remove a trusted certificate authority a certificate or a CRL. When administrator has finished configuring the files of file system administrator uses user interface to send a command to communication suite to update the certificates and CRLs of SSL implementation . User interface sends a message to communication suite to update certificates and CRLs of contexts . The message may include an identifier of a file for communication suite to retrieve in order for communication suite to make adjustments to contexts .

Communication suite modifies one or more of contexts in response to an update message from operating system . Communication suite retrieves and stores data to and from file system . Communication suite may retrieve an identifier of a file in file system . Communication suite then retrieves the file identified by the identifier from file system . Communication suite uses the file to update one or more of contexts .

In one embodiment communication suite uses information in the file retrieved from file system for new ones of contexts created for new communication sessions of applications . That is rather than modifying the existing ones of contexts communication suite may use the file when creating new contexts when one of applications initiates a new communication session through SSL API . In another embodiment communication suite may use the file to update existing ones of contexts . In yet another embodiment communication suite may include one global context of contexts that applies to all communication sessions of applications for certain information such as trusted certificates and CRLs and individual contexts of contexts for each communication session communication suite may therefore update the global context in accordance with the file from file system . In still another embodiment communication suite may maintain two or more global contexts of contexts and in individual communication session specific ones of contexts an identifier as to which of the two or more global contexts to refer communication suite may then set the identifier of all new communication specific ones of contexts to the most recent global context thereby phasing out the old global contexts and removing the oldest global context when no more communication specific contexts refer to it. In this manner communication suite may update trusted certificate authorities certificates and CRLs without terminating existing communication sessions and without the necessity of a restart.

The example embodiment of computing device may provide several advantages. For example communication suite may enable a plurality of applications to carry on SSL communication sessions without the necessity of a restart of communication suite or of operating system after an update to CRLs of SSL implementation .

SSL implementation may first be initialized through communication suite . In one embodiment one of applications initializes SSL implementation . In one embodiment operating system initializes SSL implementation e.g. upon startup of operating system . In any case SSL implementation receives identifiers for one or more trusted certificate authorities CAs such as certificate authority of . SSL implementation also receives one or more certificate revocation lists CRLs from one or more of the trusted CAs. SSL implementation also receives a certificate from one or more of the trusted CAs. SSL implementation stores this information as certificate information in one or more of contexts . Certificate information generally refers to information that includes a CRL and or a certificate.

One of applications may request to begin a communication session over SSL by calling one or more procedures provided by SSL API of SSL implementation . SSL implementation then initiates an SSL communication session with a computing device over network identified by receiving data from the procedures called by the one of applications . SSL implementation follows the SSL protocol to initiate a communication session for example by sending a message to a server indicating SSL version number supported cipher suites and similar data receiving a message from the server exchanging keys with the server and so forth.

SSL implementation also receives a certificate from the server as part of the communication session initialization . SSL implementation confirms that the certificate is validated by a trusted certificate authority such as one of the certificate authorities identified at initialization. SSL implementation also determines whether the server s certificate is on any of the one or more CRLs received earlier.

Upon initiating the communication session the one of applications begins to exchange data with the server . At some point during the communication session communication suite may receive updated certificate data from one or more of the trusted certificate authorities or an administrator. For example communication suite may receive an updated CRL or updated certificate from an administrator such as administrator . Administrator may for example use user interface to instruct communication suite as to the location of an updated CRL in file system . Communication suite then updates one or more of contexts to reflect the updates received from administrator . In particular communication suite updates what certificates are to be used what encryption algorithms are available what public private key pair to use a public key for a peer session identifiers whether a particular peer is trustworthy or other information. Communication suite creates a second context to include the updates to the CRL and applies the second context to existing communication sessions to utilize certificate information such as the updated CRL of the second context during the existing communication sessions.

An administrator such as administrator may configure the one of applications to continue to send and receive SSL communication data through the already established secure communication session even when the certificate for the network peer has been revoked by an update to the CRL. In another embodiment administrator may configure the one of applications to terminate a communication session for which a CRL revokes the communication session peer s certificate. SSL implementation may also receive additional updates to certificate data. When a new one of applications requests a new communication session using SSL API communication suite utilizes the updates to the certificate data stored in the second context during initialization of the new communication session by SSL implementation . In this manner SSL implementation utilizes an updated CRL without a restart and without terminating a current communication session.

Although discussed primarily with respect to receiving an update to a CRL the techniques described herein may also be applied to updating certificate information generally. For example the techniques described herein may also be used to apply an update to a certificate or to receive a new certificate and update existing certificate information in accordance with the new or updated certificate. Upon receiving an update to an existing certificate for an ongoing communication session communication suite stores the updated certificate in a second context as described above and applies the second context to the current communication session. For example the update to the certificate may update a public key an encryption algorithm an updated validity period or other information. When the update is to the public key as one example communication suite stores the updated public key in the second context then refers to the second context to retrieve the public key for encrypting data sent to the network peer to which the certificate corresponds. In this manner communication suite may apply the second context to the communication session to provide secure network communication through the communication session without terminating the communication session.

In one example embodiment communication suite maintains a set of two directories a trusted directory and a CRL directory. The trusted directory includes a set of one or more certificate files associated with communication peers that communication suite treats as trusted. The CRL directory includes a set of one or more CRL files that indicate non trustworthy communication peers. When communication suite receives an update to a CRL or a new or updated certificate communication suite stores the update in the appropriate one of the directories and loads data from the files in each of the directories into a second context which communication suite applies to all existing and new communication sessions.

In one embodiment communication suite uses one or more of contexts as a global context. For example communication suite may use context A as a global context. Communication suite stores data that applies to all communication session in global context A. For example upon receiving identifiers for one or more trusted certificate authorities and CRLs communication suite stores the CRLs and the identifiers for the trusted certificate authorities in global context A. Each time SSL implementation initiates a new SSL communication communication suite causes SSL implementation to check global context A to determine for example whether a certificate received as part of the communication session is authenticated by one of the trusted certificate authorities or whether the certificate has been revoked by checking the CRLs.

A first one of applications may request to initiate a first communication session using SSL API . SSL implementation receives data necessary to initiate this first communication session through SSL API . SSL implementation then initiates a first communication session using the SSL protocol . As part of this initiation procedure SSL implementation may receive a certificate from a first server computing device with which the first communication session is taking place. SSL implementation verifies that the certificate is authenticated by one of the trusted certificate authorities identified in global context A . Communication suite also causes SSL implementation to check the CRLs stored in global context A to determine whether the certificate from the first server has been revoked. Communication suite may also maintain a first individual context such as context B for the first communication session. Communication suite stores information such as the first certificate a session identifier a symmetric key an identifier for an encryption algorithm a status identifier or other data corresponding to the first communication session in individual context B.

Assuming that the certificate is authenticated and not revoked the first one of applications may send and receive data as part of the first communication session through SSL API . Accordingly SSL implementation may send and receive data as part of the first communication session over a network to the first server . Because the first communication session is initialized and individual context B has been assigned to the communication session SSL implementation may maintain this first communication session even when global context A is updated.

For example communication suite may receive an updated CRL from e.g. administrator . Administrator may add or modify one or more CRLs to file system . Administrator then sends a message to communication suite to use the updated CRL of file system using user interface . Administrator may also add or update other information such as a new trusted certificate authority a trusted certificate list or removal of a certificate from a CRL. In any case communication suite receives the update and modifies global context A accordingly .

After the update to global context A a second one of applications may request a second SSL communication session using SSL API . SSL implementation then initializes the second communication session with a second server computing device over the network . This initialization procedure may include receiving a second certificate from the second server. Communication suite causes SSL implementation to check this second certificate against the data in the updated global context A . For example SSL implementation determines whether the second certificate is authenticated by a trusted certificate authority as identified in updated global context A or whether the second certificate is revoked by a CRL in updated global context A. Communication suite also assigns the second communication session an individual context such as context C. Communication suite then stores information specific to the second communication session in individual context C. For example communication suite may store the second certificate a session identifier a symmetric key an identifier for an encryption algorithm a status identifier or other data corresponding to the second communication session in individual context C.

Assuming that the second certificate is authenticated and not revoked the second one of applications begins exchanging data as part of the second communication session using SSL API . SSL implementation also transmits and receives data as part of the second communication session over the network to the second server . Simultaneously SSL implementation sends and receives data as part of the first communication session as well. When SSL implementation receives data as part of the first communication session communication suite causes SSL implementation to refer to the individual context for the first communication session i.e. individual context B. When SSL implementation receives data as part of the second communication session communication suite causes SSL implementation to refer to the individual context for the second communication session i.e. individual context C. Using data in the appropriate one of the individual contexts SSL implementation encrypts or decrypts data for the corresponding one of applications updates status information or performs other communication session tasks. In this manner communication suite causes SSL implementation to maintain a first communication session and a second communication session wherein the second communication session was initiated after an update to for example a CRL without the necessity of restarting SSL implementation and without the necessity of terminating the first communication session.

In the example of packet header includes packet type packet version API status sockets status and winsock status . Packet type indicates to a receiving process what type of data to expect to retrieve from packet body . As an example packet body may be a packet for discovering a version number of the software corresponding to communication input output process or emulated communication protocols . Accordingly packet type may indicate that packet body is a packet type for discovering a version number of receiving software. Similarly packet type may indicate that packet body is a packet type for delivering a version number of transmitting software in response to a request. Another packet type that may be indicated by packet type is a packet for transmitting data over a network such as network .

Packet version informs the receiving process of a version of the packet. For example a particular packet type may include multiple different versions. In one embodiment a version of the packet type exists for each version of the software corresponding to communication input output process or emulated communication protocols . API status may include a status identifier for a status of a procedure call made by communication input output process to second SSL API . Exemplary statuses include for example active waiting locked completed failed or other statuses.

Socket status and Winsock status may include status information for various sockets of communication input output process and or emulated communication protocols . A socket status may include for example closed listening syn sent established waiting or other statuses.

In general packet may be used to exchange version numbers of software corresponding to communication input output process and emulated communication protocols . In this manner various versions of communication input output process and emulated communication protocols negotiate a communication session between each other i.e. by exchanging packets such as packet .

Another exemplary packet may be a packet to send data over network . This packet includes packet header . The following exemplary pseudocode provides an exemplary implementation of such a packet 

Methods described herein may be performed in hardware software or any combination thereof. For example methods described herein may be performed by an application specific integrated circuit ASIC . Methods described herein may also be embodied in a computer readable medium containing instructions. Instructions embedded in a computer readable medium may cause a programmable processor or other processor to perform the method e.g. when the instructions are executed. A computer readable medium may be a computer readable storage medium. Computer readable storage media may include for example random access memory RAM read only memory ROM programmable read only memory PROM erasable programmable read only memory EPROM electronically erasable programmable read only memory EEPROM flash memory a hard disk a CD ROM a floppy disk a cassette magnetic media optical media or other computer readable media.

Various embodiments of the invention have been described. These and other embodiments are within the scope of the following claims.

