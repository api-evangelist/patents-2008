---

title: System and method for discovering assets and functional relationships in a network
abstract: A discovery system (and corresponding method and computer program product) for automatically discovering assets and their roles and functional relationships in a network system is described. In one aspect, the discovery system interrogates known assets through protocol messages, normalizes response messages, and contextually analyzes the normalized response message to identify additional assets and their roles and functional relationships with the interrogated assets. The discovery system can recursively interrogate newly discovered assets to discover additional assets. In another aspect of the present invention, the discovery system is scheduled to periodically interrogate known assets for up-to-date information of the assets and their roles and functional relationships. Such information can be used to provide various services.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09172611&OS=09172611&RS=09172611
owner: Spirent Communications, Inc.
number: 09172611
owner_city: Sunnyvale
owner_country: US
publication_date: 20081029
---
The present invention is related to U.S. Utility patent application Ser. No. 12 234 450 filed Sep. 19 2008 U.S. Utility patent application Ser. No. 11 514 809 filed Sep. 1 2006 and U.S. Utility application Ser. No. 11 760 600 filed Jun. 8 2007 all of which are hereby incorporated by reference in their entirety.

The present invention generally relates to the field of system management in particular to information technology IT assets and services discovery IT search and change management.

A network typically includes a variety of interconnected component systems also referred to as component systems network service elements . Each of the component systems provides one or more services and works together with the rest to collectively provide aggregate services to users. For example in Voice Over IP service VoIP session border controllers work in conjunction with gateways phones billing systems Domain Name System DNS servers Remote Authentication Dial In User Service RADIUS Lightweight Directory Access Protocol LDAP authentication servers and underlying IP infrastructure to constantly validate and ensure that phones can be registered that phone calls can be made that the caller is authenticated and that the phone calls are billed properly.

Because component systems can be added removed and changed e.g. reconfiguration patching upgrading overtime the landscape of a network evolves overtime. In addition because of the interdependent nature of the component systems changes made in one component system e.g. configuration changes can inadvertently affect other component systems dependent upon it. The unintended impact can cause inter component dependencies to breakdown and thereby break the service. Therefore it is important to track the component systems and their status and functional relationships.

Traditional best practice techniques of managing hosts on a network and their configurations are summarized in the Information Technology Infrastructure Library ITIL . In the context of asset management such technologies mostly revolve around node based views of the network. Tremendous efforts have gone in to enumerate and list out what s on the network and when it was provisioned. Unfortunately such efforts have mostly resulted in a static spreadsheet view of the network that has to be manually updated. This is not only laborious but also error prone. In the context of change management such technologies mostly revolve around Simple Network Management Protocol SNMP based monitoring log based management by exception and Change Management DataBase or Configuration Management DataBase CMDB . SNMP based monitoring provides a large amount of details without revealing the configuration and supported services of the underlying component system. Log management records what has happened in the underlying component system without revealing the actual impacts or the causes. CMDB typically involves a spreadsheet for network operators to track configuration changes manually which is both tedious and error prone. In addition the traditional way of enumerating applications within known hosts involves installing agents in each of the known hosts which further explore and discover applications file systems and other aspects internal to the host. This approach is defective because installing agents on hosts are intrusive and can potentially destabilize the hosts.

Therefore there is a need for a system and method for automatically discovering network components and their statuses and functional relationships in real time.

The present invention overcomes limitations of the prior art by providing a discovery system and corresponding method and computer program product for discovering assets and functional relationships among the assets in a network system. In one embodiment the discovery system executes protocol queries against the network system. The discovery system contextually analyzes query responses for determining references to assets in the network system and their roles and functional relationships based on corresponding protocol grammars. The discovery system determines queries associated with the newly discovered assets based on their roles and functional relationships and recursively applies the above process to the newly discovered assets to discover additional assets and their roles and functional relationships.

In one aspect of the present invention the discovery system is scheduled to periodically interrogate assets for up to date information of the assets and functional relationships among the assets. Such information can be indexed and searched.

Other aspects of the disclosure include software systems components and methods corresponding to the above and applications of the above for other purposes.

The present invention describes a methodology and corresponding system and computer program product to discover assets in a network system and their roles statuses and associations also called functional relationships with each other. An asset is defined as an entity that supports one or more protocols such as a network a physical host a service that runs on the host as well as virtual hosts.

According to one aspect of the present invention a seed asset in a network system and its supporting protocol commands are represented by a seed object and associated methods. The methods of the seed object are invoked to interrogate the seed asset. The responding messages from the corresponding seed asset is normalized into Document Object Models DOMs and contextually analyzed to identify references to other assets their roles and functional relationships with the queried asset. The identified assets are represented by objects. Protocol commands supported by the identified assets are represented by methods associated with the corresponding objects and invoked for responses. The responses are then normalized and analyzed for further assets. This process can be recursively applied to newly discovered assets to discover additional assets available in the network system and their roles and functional relationships. This process can also be applied continuously by a discovery system to make multiple periodical passes of the assets to extract real time status and functional relationship information.

The discovered information can be used to construct a network functional topology map and to provide advanced services such as searches change management and customizable advanced visualization. This map beneficially identifies functional relationships between services and hosts that are closely relevant in troubleshooting and diagnosing service related problems. This map is one layer above physical connectivity that while interesting masks the complex service level dependencies in most modern networks.

Communications among computing devices generally involve the exchange of data or messages in a known structured format a protocol . Typically a computing device supports one or more protocols by implementing them in software or hardware modules within the device. Each of these protocols can be described by a concrete formal grammar e.g. a context free grammar through a process called normalization also known as canonization . The grammar can be represented by a generic data structure and can be used to generate and verify protocol messages. Further information regarding normalization and representing protocols using a generic data structure is found in U.S. application Ser. No. 11 514 809 filed Sep. 1 2006 titled Automated Generation of Attacks for Analyzing the Security of Communication Protocols and Channels the content of which is incorporated by reference in its entirety.

A protocol typically includes one or more messages or commands . A protocol message can be expressed as a method call with its fields represented by parameters of the method call. Similarly a responding protocol message can be expressed using markup language such as the Extensible Markup Language XML and stored in a normalized document object model DOM . Responding protocol messages can be parsed according to the corresponding protocol grammar. The parsing result can be expressed in XML and stored in the DOM. Further information regarding protocol message representation and normalization is found in U.S. application Ser. No. 12 234 450 filed Sep. 19 2008 titled Test Driven Deployment And Monitoring Of Heterogeneous Network Systems the content of which is incorporated by reference in its entirety. As a result of the normalization process the complexity of the protocol communication e.g. layers of communication protocols used in the actual transmission is hidden behind the method call and the returned canonical DOM.

A responding protocol message typically includes information of interest. For example a message responding to an inquiry about a digital certificate contains information regarding when the digital certificate expires. Such information can be stored and indexed for subsequent searches and used for testing purposes. A responding protocol message often contains information referencing other devices hosts and or services collectively referred to assets available in the network. For example in response to a received DHCPREQUEST message a DHCP Dynamic Host Configuration Protocol server returns a DHCP Acknowledgement message identifying itself as the DHCP server. The DHCP Acknowledgment message may also contain information such as information about local DNS Domain Name System server s e.g. its IP Internet Protocol address . Such reference information can be identified using protocol grammars generic data structures and or contextual information in the responding message e.g. associated tagging information .

The reference information extracted from responding messages can be used to discover other assets available in the network and their roles and functional relationships with the queried asset. The assets identified by the reference information can be interrogated for further reference information identifying additional assets. This process can be recursively applied to discover assets in the network and their roles and functional relationships or associations logical correlations . A system that utilizes the process to discover assets and functional relationships among assets is described in detail below.

The discovery system also referred to as crawler system service crawler crawler is configured to discover assets and their roles and functional relationships in the network system . The discovery system is configured to conduct the discovery by recursively interrogating known assets e.g. seed assets discovered assets though method invocations for response messages and contextually analyzing the response messages for references to other assets also referred to as hyperlinks . Alternatively or in conjunction the discovery system is configured to continuously interrogate known assets to detect changes e.g. changes in roles configurations and functional relationships in the network system .

The discovery system can be implemented in hardware software or a combination of both. Regarding software the discovery system can be for example a single application executing within a single operating system or single physical device or a collection of applications communicating with each other to correlate discovery operations. Regarding hardware the discovery system can be for example a standalone computer or a collection of physical devices with out of band synchronization. In one embodiment the discovery system is a portable appliance that can be transported to different locations to conduct discovery in different network systems.

The network system includes multiple assets not shown . An asset is an entity that supports one or more protocols each of which including one or more protocol commands or functions methods . When invoked thorough one of such supported protocol function calls the asset returns one or more responding messages. Each of the assets includes hardware and or software subject to discovery. Software includes for example services interfaces domains applications operating systems and or communications systems. Hardware includes for example one or more devices. A device can be for example a server host subnet switch bridge router packet filter firewall Virtual Private Network VPN concentrator proxy intrusion detection prevention system or network protocol analyzer. An asset e.g. a subnet can include multiple devices that are coupled at various communication layers to form a system or network of devices. Each of the component devices can in turn be an asset. The assets communicate with each other through networks such as the Internet an intranet a wireless local area network LAN a cellular network or any combination thereof. The assets receive the method invocations from the discovery system and respond by sending the response messages .

In one embodiment the discovery system and or assets in the network system or computer systems executing the discovery system and or assets are structured to include a processor memory storage network interfaces and applicable operating system and other functional software e.g. network drivers communication protocols .

A system architecture of the discovery system is discussed below according to one embodiment of the present invention.

A protocol suite is a parameterized atomic protocol command or transaction method function for a protocol. A protocol suite is a method call where arguments or parameters are defined but the actual values for the arguments are not known. For example DNS requests can be represented by the following protocol suite 

An asset object is an object representing a known asset e.g. a seed asset or a discovered asset in the network system . Initially the discovery system may only have one or a few asset objects hereinafter referred to as seed objects . The discovery system discovers other assets through recursively interrogating known assets contextually analyzing the query responses for additional assets and then interrogating the additional assets at run time.

As illustrated each asset object has one or more queries . A query represents a configured protocol suite where the customizable parameters of the underlying protocol suite are defined and specified. Because parameters of a protocol suite can take various values a single protocol suite can be associated with multiple queries each having a same or different configuration. For example the DNS request protocol suite illustrated above may have numerous queries associated with various IP addresses such as the following query soliciting information about the uspto.gov domain 

In one embodiment objects of certain types of assets have a set of default queries. For example objects for network components e.g. hosting computers by default include a TCP scan query and a UDP scan query. The TCP scan query enumerates through potentially available TCP ports and attempts to communicate with the interrogated network component to discover its supported protocols and assets resided within. Similarly the UDP scan query attempts to interrogate though potential UDP ports for discovery. Based on the discovery result the discovery system creates new asset objects and attaches new asset specific queries accordingly. For example after finding out that a web server supports several services through TCP port 80 the discovery system can create objects for the newly discovered services and attach service specific queries of the newly created objects to that port.

The DOM analyzing component also referred to as spider is configured to contextually analyze query results to discover references to other assets also referred to as hyperlinks and the functional relationships between the queried asset and the other assets. The DOM analyzing component also generates new asset objects for the discovered assets and associated new queries based on the roles and functional relationships of the discovered assets. Responding messages from assets are canonical normalized DOMs structured data containing salient portions of the underlying protocol exchanges. Therefore the context and structure of the DOMs is determined by the underlying protocols. In one embodiment the discovery system creates a DOM analyzing component for each protocol suite and configures the DOM analyzing component to specially handle the associated query results.

The following is a DOM for a query result of a DNS request. The example DOM is represented using the JavaScript Object Notation JSON format even though other formats e.g. XML can also be used.

As another example the resulting DOM of a query for mount points in the Host Resource Management Information Base Host Resource MIB using SNMP Simple Network Management Protocol includes the following information 

In addition the above example shows that the functional relationship identified through executing a query of a protocol is not necessarily tied to the query protocol. In this example the query protocol is SNMP and the queried asset and the identified systems remote mount points are connected through the Host Resource MIB or the Network File System . SNMP is a means for the discovery system to discover the remote mount points and does not impose any restriction on the underlying functional relationships. Because the DOM analyzing component associated with the SNMP query is configured with knowledge of the protocol grammar it can accurately identify the remote mount points and their roles and functional relationships with the queried asset.

The data storage component is configured to store information related to the discovery process of the discovery system . Examples of such information include protocol grammars e.g. supported protocol commands discovered assets e.g. information extracted from responses from the assets DOMs their roles and functional relationships e.g. hyperlinks and associated information . The data storage component may be a relational database or any other type of database that stores the data such as a flat file.

Because inquiries to known assets are expressed as queries the query results are represented by DOMs and contextually analyzed for references to other assets an analogy can be made between web pages and DOMs and between hyperlinks in the web pages and asset references in the DOMs. Therefore spidering technologies can be applied to crawl the network to discover available assets.

A methodology for the discovery system to recursively interrogate known assets to discover additional assets and their roles and functional relationships is described in detail below.

The discovery system coordinates the DOM analyzing components to discover assets and their roles and functional relationships in the network system . Initially the discovery system has one or a few seed objects representing known assets also referred to as seed assets . Examples of such seed assets include a local network interface and hosts associated with a specific range of IP addresses. The seed object s can be pre configured with the discovery system or provided by users.

The discovery system or the DOM analyzing component executes queries associated with a seed object by transmitting the corresponding protocol messages to the corresponding seed asset. The responding messages from the seed asset are normalized into DOMs and passed on to the DOM analyzing component corresponding to the executed queries . The DOM analyzing component contextually analyzes the DOMs to identify hyperlinks to other assets and determine their roles and functional relationships. The DOM analyzing component determines whether the identified assets are already known to the discovery system e.g. represented by an asset object . If an identified asset is already known to the discovery system the DOM analyzing component merges the results e.g. by storing information about the asset together . Otherwise the DOM analyzing component creates an asset object and associated queries for the asset based on the relevant contextual information in the DOM. Information about the DOM the functional relationships and the identified assets are also stored in a persistent data store e.g. the data storage component .

The discovery system or the DOM analyzing component subsequently executes queries associated with newly created asset objects or newly created queries for existing asset objects and passes on the query results to the corresponding DOM analyzing components for contextual analysis . The method can be applied recursively to newly created asset objects and or queries to discover assets and their roles and functional relationships in the network system . In one embodiment the asset objects or the queries are placed in a data structure such as a queue and a stack. The discovery system retrieves asset objects from the queue to execute associated queries and adds to the queue newly created asset objects representing assets discovered in results of the queries . The discovery system can repeat the process until the queue becomes empty. This process of recursively applying the method is also referred to as crawling.

In one embodiment the discovery system periodically crawls through the network system and stores resulting information of the assets in the data storage component . Assuming the assets in the data store is retrievable by the last updated time stamp the discovery system can interrogate one known asset at a time by executing all queries for the asset and merging the resulting changes back into the data storage component . Each pass either discovers new assets or new queries or generates change records that identify exactly which part of the known asset was changed and how. By having the normalized query results from all known assets in the data storage component continuously updated by the discovery system a real time snapshot of the network system including all known assets and their roles and functional relationships can be constructed. As will be described in further detail below such information can be used to provide various advanced services to users that are unavailable before.

The method is further illustrated through the following example. Assume the discovery system has a seed asset object representing a network interface. The seed object is associated with the following default queries arp enum dhcp discover icmp broadcast ping and ssdp search. The arp enum query uses ARP Address Resolution Protocol to methodically query for all hosts in the subnet connected to the network interface. The dhcp discover query searches for the existence of DHCP servers on the network. The icmp broadcast ping query sends a broadcast ICMP Internet Control Message Protocol packet to the network and collects responses from the responding hosts in the network. The ssdp search query sends an SSDP Simple Service Discovery Protocol multicast request to identify all UPnP Universal Plug and Play devices e.g. printers in the network.

The discovery system places the seed object into a queue the only object in the queue and initiates the method . The discovery system retrieves the seed object from the queue and executes associated queries by issuing corresponding query messages to the network interface. The network interface broadcasts or multicasts the protocol messages. As a result hosts in the network connected to the network interface receive the protocol messages and respond by sending query results to the discovery system through the network interface . The query results are normalized into DOMs and passed to corresponding DOM analyzing components for contextual analysis .

The following is an example DOM of a response message from a DHCP server for the dhcp discover query the discovery system 

After processing the queries for the seed asset the discovery system repeats the above process for other objects in the queue. For example the discovery system can retrieve the asset object representing one of the two newly discovered DNS servers and executes the associated queries. The responding messages are normalized to DOMs. The following is an example DOM for a DNS request with two different queries. One of the two queries fetches the SOA source of authority resource record and the other queries for the SMTP server MX resource record .

As shown by recursively applying the method the discovery system can discover assets in the network system and their roles and functional relationships by following hyperlinks identified in normalized query results. In addition by repeatedly crawl through the network system the discovery system can maintain a constantly updated database of information regarding the network system the assets within and their roles and functional relationships. As described below in further detail the data collected through method can be used to provide advanced user services or functions .

Starting with the network interface as the seed asset the discovery system could potentially identify hosts that are outside the subnet range of the network interface or the network range s specified by users. In one embodiment as new hosts are identified the discovery system can be configured to automatically compare the IP addresses of the newly identified hosts against these ranges to ensure that the discovery system does not leak out into the Internet. Information about such outside assets and their functional relationships can be indexed such that users can query against assets that are outside their realms of control.

As described above the discovery system can discover new assets and their roles and functional relationships along other important information about the assets by interrogating known assets e.g. seed assets discovered assets . In addition the discovery system can keep such information up to date through automatic continuous crawling. As a result the discovery system is aware of everything on the network and their configuration or available services and how things are actually correlated between each other. This information can be utilized to provide user services. The following are a few examples.

The updated asset data can be used to provide various visibilities about the network system. For example the asset data can be used to construct a real time functional map of all known assets in the network system with new assets added as they are discovered in real time. The functional map identifies assets by their roles and connects assets through their functional relationships. The functional graph not only identifies related assets but also specifies exactly their roles and how they are related. This functional graph is useful for purposes such as determining impact radius of a certain asset in the network system .

Because the collected information not only identifies the discovered assets and their status but also specifies their roles and functional relationships a user can drill downward upward or sideway or apply other data mining techniques through the visualization. For example a user can click the service mount in to view and click the hyperlink clyde.musecurity.com in to view a visualization of assets and services related to the underlying asset.

Other examples include a calendar view of life spans of SSL certificates for all known assets. A user can easily identify expiring SSL certificates in real time. In addition tests assertions alerts and or triggers can be attached to the underlying asset data. For example a trigger can be set to send an email to a network administrator days before an SSL certificate expires.

The collected data can be kept up to date indexed and available for searches. is a screenshot illustrating a user search for the keyword it which instantly results in various keywords being matched according to one embodiment of the present invention. These keywords further lead to specific assets that match the entered word. The search result also includes assets that has it in its profile or a host name that starts with it . The sources of the searched information can be extracted from real time results from queries of a number of different protocols such as DOMs of DNS requests NetBIOS and SSL Certificates.

Up to date asset data can be used to construct real time profiles for all known assets on the network system . The asset profiles can be used to conduct similarity comparisons among assets and generate distance metrics for the assets based on their similarities. For example asset information can be converted into normalized documents that are subject to document comparisons. In addition assets can be classified based on their similarities or compliance with customizable signatures. Such classification can be visualized to users. is a screenshot including a diagram showing the web applications running on various assets according to one embodiment of the present invention. This diagram is useful for example for organizations to plan for capacity as well as to eliminate under utilized resources.

The discovery system can be scheduled to periodically crawl the network system . The resulting data can be stored with associated time stamp. As a result the data can be used to detect changes in system behavior either configuration or service degradation on an on going basis. Such time stamped asset information can be used to create timeliness. A common aspect of change management is tracking progress towards a goal in the form of checklists. By tying a search parameter directed to a goal a dynamic checklist refreshed constantly can be generated by the discovery system . One example of such a use case is upgrading hosts that are running a particular application. The discovery system can keep track of how many hosts have not yet been updated. Historically such a task has been tracked and managed using static spreadsheets.

Services other than those listed above can be provided using the crawled data. For example the collected asset data can be used to conduct tests and verifications. As another example while deploying a network system the discovery system can be used to discover and track assets and functional relationships among the assets in the network to ensure proper deployment. Further information about the test driven deployment is found in U.S. Utility patent application Ser. No. 12 234 450 filed Sep. 19 2008 the content of which is hereby incorporated by reference in its entirety.

In one embodiment multiple discovery systems might be deployed across multiple networks all of which generate information that is merged to get a global perspective across the multiple networks. The information generated from these multiple discovery systems can be synchronized and or merged in a central data store.

Even though the discovery system is described above to discover assets available in a network one skilled in the art would understand that it can be applied to discover assets residing on a single device e.g. an unconnected computer .

The discovery system can automatically discover additional assets up to date information about known assets and their roles and functional relationships in real time. In addition the discovered information can be used to provide advanced services regarding the network system and assets within.

In the preceding description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the disclosure. It will be apparent however to one skilled in the art that the disclosure can be practiced without these specific details. In other instances structures and devices are shown in block diagram form in order to avoid obscuring the disclosure.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the disclosure. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

Some portions of the detailed descriptions that follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements objects symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present disclosure also relates to an apparatus for performing the operations herein. This apparatus is specially constructed for the required purposes or it comprises a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program is stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions and each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems are used with programs in accordance with the teachings herein or more specialized apparatus are constructed to perform the required method steps. The required structure for a variety of these systems appears in the description herein. In addition the present disclosure is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the disclosure as described herein.

