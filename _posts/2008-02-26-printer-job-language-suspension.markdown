---

title: Printer job language suspension
abstract: A method is provided for temporarily disabling printer job language (PJL) commands in a printer device. In a printer device, an electronically formatted print job is accepted with embedded PJL commands. The method parses the print job, and in doing so, differentiates a first PJL command and a PJL disable command. The print job is automatically processed (as is conventional), while temporarily ignoring the first PJL command in response to the PJL disable command. In one aspect, the printer differentiates the first PJL command enveloping the print job, and the PJL disable command enveloping the first PJL command envelope.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08228515&OS=08228515&RS=08228515
owner: Sharp Laboratories of America, Inc.
number: 08228515
owner_city: Camas
owner_country: US
publication_date: 20080226
---
This invention generally relates to printer related software and more particularly to a method for temporarily disabling print job language PJL commands in a print job.

Most print ready files today contain some form of PJL commands. These commands are typically generated by print drivers and attached to the print data prior to the print data being sent to a multifunctional peripheral MFP or printer. PJL commands add job level controls such as printer language switching job separation environment status readback device attendance and file system commands. PJL commands typically reside above all the other printer languages and are the first to be parsed when a print job is processed. Although PJL commands are fairly common and supported by most MFPs and printers there are many applications that require the processing of raw print data without the added PJL commands.

Print jobs sourced from an open operating system OS ideally should only include raw print data with no PJL commands to insure that the open OS print job settings are not overwritten by PJL commands internal to the print job. However since many print ready files already contain PJL commands it becomes necessary to provide a method of stripping the PJL data from the original print content when using open OS applications to submit print jobs.

One method of stripping PJL commands from a print file is to use a utility to parse the original print file identifying and extracting all PJL commands from the file. Although this procedure is generally done on the host computer before the print data is submitted to the MFP it may also be done on the MFP after the entire file has been transferred to the MFP. However there are several drawbacks to this method.

Removing PJL commands from the original print file is an invasive procedure. Because the original print content is modified the integrity of the print data is compromised. This print content modification may be undesirable for security sensitive print files. Parsing the entire print file to extract PJL commands adds undesirable overhead to the print performance. Further the parsing can only be done after the entire file has been received which adds delay and overhead to the printing process.

It would be advantageous if a printer could temporarily ignore PJL commands in selected printed jobs.

Presented herein is a method for stripping PJL commands from a print job without affecting the original print content or impacting print performance. This method uses a control command added to the beginning of the print stream that results in the MFP ignoring the PJL commands in that job. PJL commands are still recognized and parsed by the printer but the actual processing of the PJL commands is bypassed. Ignoring PJL commands has the same effect as having no PJL commands. No parsing is required to remove PJL commands and no additional processing is required on the host computer. No additional overhead is added to print job. The method dynamically disables PJL on a print job by print job basis. Further the method may be used to disable all PJL commands or only a subset of the PJL commands.

Accordingly a method is provided for temporarily disabling printer job language PJL commands in a printer device. In a printer device an electronically formatted print job is accepted with embedded PJL commands. The method parses the print job and in doing so differentiates a first PJL command and a PJL disable command. The print job is automatically processed as is conventional while temporarily ignoring the first PJL command in response to the PJL disable command. In one aspect the printer differentiates the first PJL command enveloping the print job and the PJL disable command envelopes the first PJL command envelope.

The method processes the print job while ignoring the first PJL command by cross referencing the first PJL command to a first PJL function nullifying the first PJL function and processing the first PJL null function. More explicitly the first PJL command is cross referenced to the first PJL function by using an enable index including the first PJL function and a disable index including the first PJL null function. Then nullifying the first PJL function includes selecting the disable index in response to the PJL disable command.

Additional details of the above described method a graphical user interface and associated machine readable instructions are provided below.

Various embodiments are now described with reference to the drawings. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of one or more aspects. It may be evident however that such embodiment s may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to facilitate describing these embodiments.

As used in this application the terms processor processing device component module system and the like are intended to refer to a computer related entity either hardware firmware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a computing device and the computing device can be a component. One or more components can reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers. In addition these components can execute from various computer readable media having various data structures stored thereon. The components may communicate by way of local and or remote processes such as in accordance with a signal having one or more data packets e.g. data from one component interacting with another component in a local system distributed system and or across a network such as the Internet with other systems by way of the signal .

Various embodiments will be presented in terms of systems that may include a number of components modules and the like. It is to be understood and appreciated that the various systems may include additional components modules etc. and or may not include all of the components modules etc. discussed in connection with the figures. A combination of these approaches may also be used.

The various illustrative logical blocks modules and circuits that have been described may be implemented or performed with a general purpose processor a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor may be a microprocessor but in the alternative the processor may be any conventional processor controller microcontroller or state machine. A processor may also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration.

The methods or algorithms described in connection with the embodiments disclosed herein may be embodied directly in hardware in a software module executed by a processor or in a combination of the two. A software module may reside in RAM memory flash memory ROM memory EPROM memory EEPROM memory registers hard disk a removable disk a CD ROM or any other form of storage medium known in the art. A storage medium may be coupled to the processor such that the processor can read information from and write information to the storage medium. In the alternative the storage medium may be integral to the processor. The processor and the storage medium may reside in an ASIC. The ASIC may reside in the node or elsewhere. In the alternative the processor and the storage medium may reside as discrete components in the node or elsewhere in an access network.

A GUI presents graphical icons visual indicators or special graphical elements called widgets . Often the icons are used in conjunction with text labels or text navigation to fully represent the information and actions available to a user. But instead of offering only text menus or requiring typed commands the actions are usually performed through direct manipulation of the graphical elements.

The window icon menu pointing device WIMP paradigm of interaction uses a physical input device to control the position of a cursor and presents information organized in windows and represented with icons. Available commands are compiled together in menus and selected through the pointing device. Typically the user interacts with information by manipulating visual widgets that allow for interactions appropriate to the kind of data held. The widgets of a well architected interface are functionally independent from and indirectly linked to application functionality so the GUI can be easily modified.

The visible graphical interface features of an application are sometimes referred to as chrome . Larger widgets such as windows usually provide a frame or container for the main presentation content such as a web page email message or drawing. Smaller widgets usually act as a user input tool.

Some examples of PJL commands include ENTER INITIALIZE RESET SET JOB DEFAULT ECHO INFO INQUIRE and END OF JOB EOJ commands. These commands are well understood in the art.

In one aspect the first graphical icon selects a print job enveloped with a first PJL command. For example the first PJL command may be inserted into the print job by a print driver. Then the second graphical icon envelopes the first PJL command envelop with a disable PJL command envelop. For example the second graphical icon may embed the PJL disable command in a global job settings envelope. These enveloping processes are illustrated in . In this aspect the use of a single button may be used to disable all PJL commands in the print job.

It should be understood that the PJL commands or the sets of PJL commands that may be temporarily disabled is dependent upon the specific configuration of the printer to which the print job is being set. The PJL commands or PJL command groups that are be disabled are preconfigured in the client device memory or discovered during initialization in the setup communications between the client device and the printer. It should also be understood that different printers may permit different PJL commands or sets of PJL commands to be disabled.

Although not specifically shown in another aspect a graphic is presented of all possible PJL commands which are automatically selected by default and the user simply selects the PJL commands or command groups to be disabled. Alternately the authorized PJL commands are disabled by default and the user selects the PJL commands to be enabled. As another alternative PJL disable commands may be inserted into a print job using a command line interface CLI which requires commands to be typed on a keyboard. As another alternative PJL disable commands may be added by the MFP or printer device during the processing of certain types of print jobs.

The above described GUI and the printer side method described below are superior to existing methods for removing unwanted PJL commands in that the original print content is not compromised the normal PJL processing is not effected and the overall performance is not impacted by the overhead of parsing and stripping of PJL commands from a print file. The present invention method may be used in print applications having the capability to support multiple file formats where some applications source print jobs that require the stripping of PJL commands.

For example the suspension of PJL commands may be useful in processing PRN files that are generated for a first vendor s printer but actually printed on a second vendor s printer. Sometimes these embedded files set job parameters that are bothersome. For example a test file may make 10 copies of a 200 page document. Typically these files are difficult to modify in conventional text editors so overriding the embedded PJL job parameters is useful. With the present invention method an existing PRN file can be enclosed with a short PJL wrapper thereby overriding the embedded job parameters.

Typically print files are submitted to an MFP or printer through some print application. Print files are either pushed to the MFP by an application on a host or client computer or pulled by an application internal to the MFP. depict a GUI that may be used for either pushing or pulling a print job. If pulled an enabled printer side application appends a special PJL command that disables any further processing of PJL commands in that print job before the print file enters the internal print pipeline on the MFP. The print file is still processed using the normal print pipeline but all or some PJL commands within that print job are ignored. PJL processing returns to the normal state at the beginning of each job.

In one aspect the MFP maintains 2 interfaces one for enabling ALL PJL commands and one for disabling ALL PJL commands. In other aspects the MFP may maintain a plurality of interfaces for enabling and disabling individual PJL commands. For example an enabled print component on the MFP receives a request to print a file. A PJL command is appended to the beginning of the print stream that results in the MFP ignoring the remaining PJL commands in that job. The modified file can be requested from an external server and submitted to the pipeline so that the print job is processed without any PJL commands.

In one aspect a PJL Interpreter in the MFP has 2 components one component that parses the PJL commands and another component that processes the PJL commands. The parser and processor utilize an interface to map PJL commands to PJL functions. Every PJL command parsed by the PJL parser has an equivalent function in the PJL processor that processes the actual command.

The PJLMODE may be included as part of the global job settings. At the start of every job the job settings are reset to current defaults which typically set the PJLMODE to ENABLE. In this aspect PJLMODE is explicitly set to DISBALE through a PJL command within the print stream and can be dynamically modified for every job. The DISABLE table may be customized to disable any number of PJL commands or disable all commands.

In a printer device Step accepts an electronically formatted print job with embedded PJL commands. Step parses the print job differentiating a first PJL command and a PJL disable command. Some examples of PJL commands include ENTER INITIALIZE RESET SET JOB DEFAULT ECHO INFO INQUIRE and END OF JOB EOJ commands. In response to the PJL disable command Step automatically processes the print job while temporarily ignoring the first PJL command. The PJL disable command is selectively engagable.

In one aspect differentiating the first PJL command and the PJL disable command in Step includes substeps. Step differentiates the first PJL command enveloping the print job. Step differentiates the PJL disable command enveloping the first PJL command envelope. Alternately stated Step differentiates the PJL disable command embedded in a global job settings envelope.

In one aspect automatically processing the print job in Step ignoring the first PJL command includes substeps. Step cross references the first PJL command to a first PJL function. Step nullifies the first PJL function. Step processes the first PJL null function. In another aspect cross referencing the first PJL command to the first PJL function in Step includes substeps. Step uses an enable index including the first PJL function. Step uses a disable index including the first PJL null function. Then nullifying the first PJL function in Step includes selecting the disable index in response to the PJL disable command.

In a different aspect Step parses the print job to differentiate the first PJL command and a second PJL command and Step additionally includes automatically processing the print job in response to the second PJL command. More explicitly Step may differentiate the second PJL command followed by the first PJL command both enveloping the print job and Step differentiates the PJL disable command enveloping the first PJL command envelope but not the second PJL command.

To continue this aspect Step cross references the first PJL command to a first PJL function and the second PJL command to a second PJL function. Step nullifies the first PJL function and Step processes the first PJL null function and second PJL function. In a related variation Step uses an enable index including the first PJL function and second PJL function. Step uses a disable index including the first PJL null function and the second PJL function. Then Step selects the disable index in response to the PJL disable command.

In another related aspect Step uses an enable index including a plurality of PJL functions corresponding the plurality of PJL commands. Step uses a first disable index including a first group of PJL null functions corresponding to the first group of PJL commands and a second disable index including a second group of PJL null functions associated with the second group of PJL commands. Then Step selects either the first or second disable index.

In a different aspect of the method differentiating the PJL disable command in Step includes inserting the PJL disable command into a first print job header prior to the first PJL command. In another variation Step is enabled by recognizing a first print job based upon criteria such as the print job source and the print job type. For example a print job from an Open System or Web Service source may be differentiated. Such a source may support interoperable Machine to Machine interaction over a network. A Web Service may be a Web application programming interface API that can be accessed over a network such as the Internet and executed on a remote system hosting the requested services. For example the term may refer to clients and servers that communicate using XML messages that follow the simple object access protocol SOAP standard. Common in both the field and the terminology is the assumption that there is also a machine readable description of the operations supported by the server written in the Web Services Description Language WSDL . Some examples of print job types that may be differentiated in Step as requiring the PJL disable command include copy jobs queue printing jobs facsimile jobs and stored print jobs.

The above described flowchart may also be interpreted as an expression of a machine readable medium having stored thereon instructions for temporarily disabling PJL commands. In this aspect the instructions would enable Steps through as described above.

System and methods for temporarily disabling or suspending PJL commands have been provided. Examples of explicit interfaces and process steps have been used to illustrate the invention. However the invention is not limited to merely these examples. Other variations and embodiments of the invention will occur to those skilled in the art.

