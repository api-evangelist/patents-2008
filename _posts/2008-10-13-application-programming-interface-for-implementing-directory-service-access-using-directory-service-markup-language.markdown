---

title: Application programming interface for implementing directory service access using directory service markup language
abstract: A set of DSML application programming interface (DSML API) functions is provided to facilitate the implementation of DSML-based directory service access. The DSML API includes a DSML document API class for building or accessing a DSML payload, and a DSML connection API class that handles connection and transport to a DSML server. To access a directory service, the client calls functions of the DSML document API class to generate a DSML request payload, and calls functions of the DSML connection API to transport a packet with the DSML request payload according to a pre-selected connection protocol, such as SOAP, to the DSML server for forwarding to the directory service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08099456&OS=08099456&RS=08099456
owner: Microsoft Corporation
number: 08099456
owner_city: Redmond
owner_country: US
publication_date: 20081013
---
This application is a continuation of application Ser. No. 10 449 573 filed on May 30 2003 which application is incorporated herein by reference.

This invention relates generally to computer software and more particularly to software programming for implementing Directory Service Markup Language DSML based directory service access.

Directory Service Markup Language is an OASIS Organization for the Advancement of Structured Information Standards approved standard specification that defines directory operations e.g. Lightweight Directory Access Protocol LDAP in XML form. The DSML v.2 specification has been widely adopted by many software and hardware vendors in the field of directory services.

In one popular approach to implementing directory service access using the DSML v.2 e.g. the DSML Services for Windows DSFW of Microsoft Corporation a DSML server is provided as an intermediate between a client and a directory service e.g. the Active Directory of Microsoft Corporation . To use the directory service the client sends a Simple Object Access Protocol SOAP packet with a DSML request as its payload over the network connection to the DSML server. The DSML server converts the received DSML request into a LDAP request and sends the LDAP request to the directory service. After the directory service responds to the LDAP request the DSML server converts the LDAP response into a DSML response payload and return it to the requesting client in a SOAP response.

Although this scheme of enabling DSML based access to the directory service is very successful it requires the client to have the ability to construct DSML payloads and handle SOAP packets. To develop such client applications the client application developers need to have intimate knowledge of DSML v.2 and SOAP which is often a difficult condition to meet. According there is a need to simplify the task of client application development to make it easier to utilize the DSML based directory service access scheme as described above.

In view of the foregoing the present invention provides a set of DSML application programming interface DSML API functions that may be called by a client application for handling DSML based directory service requests and responses. In accordance with the invention the DSML API includes a DSML document API class that concerns only building or accessing a DSML payload and is independent of network connection and a DSML connection API class that handles connection and transport to a DSML server that is independent of DSML document processing. To access a directory service the client calls API functions of the DSML document API class to generate a DSML request payload and calls API functions of the DSML connection API class to construct a request packet with the DSML request payload and transporting the request packet according to a pre selected connection protocol to the DSML server for forwarding to the directory service.

Turning to the drawings wherein like reference numerals refer to like elements the invention is illustrated as being implemented in a suitable computing environment. Although not required the invention will be described in the general context of computer executable instructions such as program modules being executed by a personal computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations including hand held devices multi processor systems microprocessor based or programmable consumer electronics network PCs minicomputers mainframe computers and the like. The invention may be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

The following description begins with a description of a general purpose computing device that may be used in an exemplary system for implementing the invention and the DSML API of the invention will be described in greater detail with reference to . Turning now to a general purpose computing device is shown in the form of a conventional personal computer including a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. The system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within the personal computer such as during start up is stored in ROM . The personal computer further includes a hard disk drive for reading from and writing to a hard disk a magnetic disk drive for reading from or writing to a removable magnetic disk and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM or other optical media.

The hard disk drive magnetic disk drive and optical disk drive are connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical disk drive interface respectively. The drives and their associated computer readable media provide nonvolatile storage of computer readable instructions data structures program modules and other data for the personal computer . Although the exemplary environment described herein employs a hard disk a removable magnetic disk and a removable optical disk it will be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer such as magnetic cassettes flash memory cards digital video disks Bernoulli cartridges random access memories read only memories storage area networks and the like may also be used in the exemplary operating environment.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM including an operating system one or more applications programs other program modules and program data . A user may enter commands and information into the personal computer through input devices such as a keyboard and a pointing device . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to the system bus but may be connected by other interfaces such as a parallel port game port or a universal serial bus USB or a network interface card. A monitor or other type of display device is also connected to the system bus via an interface such as a video adapter . In addition to the monitor personal computers typically include other peripheral output devices not shown such as speakers and printers.

The personal computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be another personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the personal computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the personal computer is connected to the local network through a network interface or adapter . When used in a WAN networking environment the personal computer typically includes a modem or other means for establishing communications over the WAN . The modem which may be internal or external is connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the personal computer or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

In the description that follows the invention will be described with reference to acts and symbolic representations of operations that are performed by one or more computers unless indicated otherwise. As such it will be understood that such acts and operations which are at times referred to as being computer executed include the manipulation by the processing unit of the computer of electrical signals representing data in a structured form. This manipulation transforms the data or maintains it at locations in the memory system of the computer which reconfigures or otherwise alters the operation of the computer in a manner well understood by those skilled in the art. The data structures where data is maintained are physical locations of the memory that have particular properties defined by the format of the data. However while the invention is being described in the foregoing context it is not meant to be limiting as those of skill in the art will appreciate that various of the acts and operations described hereinafter may also be implemented in hardware.

Referring to the present invention is directed to a set of application programming interface API functions for a client computer on a network e.g. the Internet to build and transport directory service requests in the Directory Service Markup Language DSML format and to process directory service responses. Specifically in a preferred embodiment as shown in the client is connected to a DSML server which is in turn connected to a directory service . In this context the DSML server may be considered as a gateway for network clients to access the directory service using DSML requests. An application program on the client machine may want to access the directory service . For example the application program may want to find the phone number of John Smith in a corporate directory via the Internet. As another example the client device may be a small device such as a cellphone and a user may use it to access the DSML server. To access the directory service the client forms a DSML request and constructs a packet according to a pre selected transport protocol with the DSML request as its payload and transports the request packet to the DSML server under the selected transport connection protocol. The transport connection protocol may be for example the Simple Object Access Protocol SOAP .

When the DSML server receives the SOAP packet that contains the DSML request it converts the DSML request to a request according to the Lightweight Directory Access Protocol LDAP which is implemented by the directory service . The DSML server then forwards the LDAP request to the directory service . In response the directory service returns a response in the LDAP format to the DSML server . When the DSML server receives the LDAP response it converts the response to a response n the DSML format puts the DSML response as the payload of a SOAP packet and forwards the SOAP packet with the DSML response to the requesting client.

In accordance with a feature of the invention the operating system of the client machine implements a set of application programming interface API functions that the application program may call to build DSML requests and process DSML responses and to handle the transport of the DSML requests and receipt of the DSML responses under the pre selected protocol such as SOAP over HTTP SMTP DIME etc. This set of API functions is hereinafter referred to as the DSML API . The DSML API frees developers of client application programs from the task of programming functions for handling the DSML and transport operations thereby facilitating the use of the DSML based directory service access as described above by client applications.

By way of example several scenarios are provided below to illustrate how the DSML API may be used to enable DSML based directory service access. It will be appreciated of course that the use of the DSML API is not limited to these scenarios. In a first scenario a smart cell phone or PDA device needs to access directory information but does not contain an LDAP client. By including the DSML API on the device application programs can be written to employ the API functions to form and send DSML requests for accessing the directory service through the DSML server. In a second scenario a program on a personal computer needs to access a directory service through a firewall but the firewall is not allowed to pass LDAP protocol traffic because it is not capable of auditing such traffic. By using the DSML API applications on the personal computer can send SOAP packets with a DSML request payload which can then pass through the firewall. In a third scenario a programmer is writing an application using XML programming tools and techniques and the application needs to access a directory. The DSML API is designed to allow a seamless integration with other XML programming. For instance in DSML API object mode the programmer is able to convert the DSML request to an XML document easily allowing the programmer to manipulate it further using XML programming or tools.

Referring now to in accordance with a feature of an embodiment of the invention the DSML API separates the aspect of building processing DSML documents from the aspect of dealing with the transport of the DSML documents and makes them independent from each other. Specifically the DSML API has a set of classes that implements the DSML payload message and another set of classes for handling the transport. The transport may be for example SOAP over HTTP or DIME Direct Internet Message Encapsulation File SMTP Simple Mail Transfer Protocol etc. The option File here means that the application reads or writes the DSML payload from or to a file such as in the case of import and export. The separation of the DSML document processing from the transport operations allows future transport protocols to be implemented without the need for any modification of the classes for handling the DSML payload.

As illustrated in the DSML API has several top level classes. As mentioned above the DSML Connection class deals with forming connections to the DSML server and handles remote and local transport protocols. In other words the DSML Connection class provides a way to transport DSML documents. The DSML Document class on the other hand concerns only accessing or building a DSML payload and is independent of the connection aspect.

There are two classes DSML Request Document and DSML Response Document that inherent from the top level DSML Document class. The DSML Request Document class defines functions for building a DSML request payload such as AddRequest ModifyRequest SearchRequest etc. On the other hand the DSML Request Document class contains the corresponding response elements such as AddResponse ModifyResponse SearchResponse etc.

Referring now to each item in the DSML Document class is called the DSML Element. Corresponding to the DSML requests and responses there are two types of DSML Elements DSML Request Element and DSML Response Element . Both DSML Request Element and DSML Response Element further define more specialized classes. The DSML Elements for DSML documents are illustrated in and will be described in greater below. Having the specialized classes allows a user to provide strongly typed classes for each operation and to define specific constructors properties and methods etc. also shows a DSML Attribute class and a DSML Control class which are normally embedded into DSML Element derived classes.

Returning to the DSML Connection class is a base class for different DSML bindings. In one embodiment the DSML API supports SOAP over HTTP and has corresponding DsmlSoapConnection class and a DsmlSoapHttpConnection classes . In alternative embodiments the API may support other bindings such as SOAP over DIME File binding etc. with corresponding classes in the hierarchy. When a new protocol is implemented this arranges allows the connection class to be extended without disturbing the existing DSML API system.

By way of example the class definitions in one implementation for some of the classes in and some examples of how they may be used are provided below.

DsmlConnection is an abstract class which cannot be instantiated. Each DSML binding e.g. SOAP File is expected to derive from this class. This class is primarily deals with connection oriented characteristics such as credentials resource location etc. Class Type Abstract Protocol DSML. Public Constructors No public constructor. This is an abstract class. Public Properties NetworkCredentials Credentials Write only Allows the user to specify alternate credentials if none is specified it should default to the Defaultcredentials constant. Readonly Identifies the server the object is connected to. For example it might represent http abc.com platforms adssoap.dll for communicating with DSML Server via SOAP file c data employees.xml for using DSML via File Binding. X509CertificateCollection Clientcertificates Readonly Allows the user to specify one or more client certificates to be sent for authentication purpose. TimeSpan TimeOut Specified a time span before the request times out. The default timeout is specified by the final non abstract class. Public Methods abstract DsmlResponseDocument SendRequest DsmlRequestDocument request Overridden by derived classes to provide a means of sending a single directory operation to the server and returning the server s response as a DsmlResponseDocument object. Will throw an exception on failure. DsmlSoapConnection Overview Since DSMLISOAP can be implemented over many different protocols such as HTTP DIME SMTP etc this class provides a higher level entity that deals only with DSML and SOAP related features.

Ends the session by sending an Endsession SOAP request to the DSML Server and clearing the SessionId property. If Beginsession has not been initiated it throws an exception. It is possible the DSML Server may have already terminated the session on its own for example due to idleness on the connection and will therefore respond to a Endsession SOAP request with an error. In such an event the Endsession method is still expected to clear the SessionId property on the LdapConnection object in addition to returning the error to the caller as a WebException . Exception class WebException Communications failure with the DSML server. Exception Class InvalidOperationException Thrown if caller tries to Endsession when no session is active Text No session is currently active on this connection. DsmlSoapHttpConnection Overview DsmlSoapHttpConnection creates a connection to a DSML Gateway specified in the Uri. The user may specify alternate credentials authentication type. The necessary HTTP header Content Type text xmlm will be automatically included by this class when sending a request. The default timeout is 30 seconds. Derived From DsmlSoapConnection Class Type Concrete Constructors DsmlSoapHttpConnection DsmlDirectoryIdentifier ident Create Dsml Soap over HTTP connection for the server identified by ident. This identifier should represent a URI that is a DSML URLs setup by the Administrator. For example http myserver01.example.com DSML adssoap.dll. The default credentials and the Windows Integrated Authentication will be used to connect to the DSML Server. DsmlSoapHttpConnection DsmlDirectoryIdentifier ident Networkcredential cred Create Dsml Soap over HTTP connection for a given server and Credentials. DsmlSoapHttpConnection 

Soap Action Header that will be sent along with other HTTP Headers. By default it sets to batchRequest 

The operation returned a failure code i.e. a code other than success compareTrue compareFalse or referral .

Sends the DsmlRequestDocument to the DSML Server. If it is successful a DsmlResponseDocument will be returned. Otherwise an exception will be thrown.

Sends a DSML request specified by stream. This method should dynamically stream the request to the DSML Server i.e. it should not try to load the entire contents of the stream into memory before sending the request to the server.

DsmlDocument is an abstract class to construct manipulate a Dsml Document. It s a base class for both DsmlRequestDocument and DsmlResponseDocument. DsmlDocument supports collections and index. Each item in its collection is an object that is derived from DsmlElement. The objective of DsmlDocument is to provide a container that holds multiple DsmlElements for batched protocols namely DSML. It also holds the responses for a batched operation. Note that DsmlDocument and its derived classes are particular to the DSML protocol. Derived From Object Class Type Abstract Constructors No public constructor. This is an abstract class. Public Properties Virtual String RequestID RequestID associated with the document. Public Methods XmlDocument ToXml Return XmlDocument object that contains DsmlDocument in DSML v2 format. Exceptions 

Optional. It could be either DsmlResponseOrder.Sequential or DsmlResponseOrder.Unordered. The default is DsmlResponseOrder.Sequential

Optional. It could be either DsmlErrorProcessing.Resume or DsmlResponseOrder.Exit. The default is DsmlErrorProcessing.Exit

DsmlResponseDocument is generated by sending the DsmlRequestDocument. DsmlResponseDocument is readonly collection that contains zero or more DsmlResponseDocument derived objects.

The inherited from DsmlDocument RequestID property is overloaded to throw an exception on set making it effectively read only.

In view of the many possible embodiments to which the principles of this invention may be applied it should be recognized that the embodiments described herein with respect to the drawing figures are meant to be illustrative only and should not be taken as limiting the scope of the invention. Therefore the invention as described herein contemplates all such embodiments as may come within the scope of the following claims and equivalents thereof.

