---

title: Reporting of approval workflow transactions using XMLP
abstract: Embodiments described in the application provide for reports that are generated in many different formats using an Approval Workflow Engine (AWE) and an XML Publisher (XMLP) component. The AWE can accept user parameters to extract data from at least one data source, transform the data, and generate a structured XML data file appropriate for the report. The AWE can pass this XML file, along with at least one report template and other necessary information to the XMLP, which is able to generate reports in any of a number of specified formats. Such an approach keeps the data separate from the formats and components, and allows for multiple reports to be generated without accessing an application for each format. The AWE also can store an audit history record for each transaction passing through the AWE in order to provide a concise location from which to retrieve the information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07945601&OS=07945601&RS=07945601
owner: Oracle International Corporation
number: 07945601
owner_city: Redwood Shores
owner_country: US
publication_date: 20080423
---
This application is related to U.S. patent application Ser. No. 11 847 686 filed Aug. 30 2007 entitled ROUTING TRANSACTIONS IN A MULTIPLE JOB ENVIRONMENT USING AN APPROVAL FRAMEWORK. and U.S. Patent Application No. 60 970 217 filed Sep. 5 2007 entitled SYSTEMS AND METHODS FOR DELEGATING ROLES IN TRANSACTIONAL SYSTEMS each of which is hereby incorporated by reference for all that they teach. This application is also related to and claims benefit and priority as a non provisional application from U.S. Provisional Patent Application No. 60 970 448 filed Sep. 6 2007 entitled TRANSACTION REPORTING USING AN APPROVAL WORKFLOW ENGINE and is hereby incorporated by reference for all that it teaches.

A portion of the disclosure of this patent document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the U.S. Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The present invention relates generally to managing transactions and transaction data and more particularly to generating reports for human resource related transactions in an enterprise environment.

As organizations continue to move to paperless systems the complexity of managing transactions electronically within an organization increases accordingly. Complex workflows are needed to provide the functionality needed to process all the variations of a transaction in a number of different situations. For example an employee might submit a transaction that requires approval from at least one manager supervisor or other appropriate person. The approval process might then have several steps which occur at different times and may include a number of different details. Further multiple people may approve deny or otherwise touch the transaction and some of these people might designate another person s to act on their behalf. A user might also have multiple jobs such that different managers approve transactions for different jobs or roles of the user. The amount of data and the rules and context needed to interpret this data make reporting on and analyzing this data increasingly difficult.

Many existing systems simply store at least a portion of this data in at least one data repository. In order to generate a report a user typically must generate and execute multiple queries to obtain the appropriate data for the report. Further some data is stored in code form such as A for approved or D for denied which must be translated by the user in order to be of use to someone analyzing the report and further for the user to know how to interpret and utilize the data.

Further complicating the matter is that reports typically are run in multiple formats. When generating forms for the government a PDF file often is generated while a finance department might want the data in a spreadsheet format and payroll might want the data in a rich text format. Executives or managers in the company might prefer HTML reports that they can quickly access online. Generally the user separately generates each of these reports in each of the necessary formats. When generating a spreadsheet based report for example a user not only has to set up the report format and configuration and use macros or generate code to do any necessary translation but also typically has to query and import the data into the spreadsheet application to run the report. When several different reports need to be run for a large amount of data for an entire organization this process is slow costly and inefficient and has several opportunities for error.

It is desirable to provide an approach that simplifies and provides enhanced reporting for a number of different formats in a transactional system. Embodiments of systems and methods presented herein can overcome the aforementioned and other deficiencies in existing transaction management systems by providing for the generation of reports in multiple formats utilizing a data file in a template based approach. In embodiments an XML data file and a document based template are passed to a publishing component that is able to use the data file and template to generate reports in a number of different formats. The data file is in embodiments an abstraction of one or more databases allowing the publishing component to use the data without having to make queries or other calls to the database. In embodiments the template file is a user created representation of the report. The publishing component combines the template with the data from the data file to form the report.

The publishing component in embodiments outputs the report into at least one of multiple formats. The output data from the publishing component does not have to be passed into any of the programs typically associated with the output formats and the user does not have to manually format configure or generate the reports. Further the novel reporting system provides the logic needed to arrange the reports by group department employee or any other appropriate delineation.

This Summary is provided as exemplary only and is not meant to limit the scope of the invention in any manner. The invention is as recited in the claims.

Embodiments described herein provide for a structured approach to reporting information. In embodiments an XML data file and a document based template are created. The data file and template are imported to a publishing component. The publishing component can generate the report using the data file and template. In embodiments the publishing component publishes the report in one of several predefined formats. In further embodiments the publishing component includes logic to associate the requested reports with some parameter. For example the report is associated with a group a department an employee a business unit etc.

The embodiments provided can be used with a human relations transaction system that includes business processes e.g. an approval process wherein transactions are routed for approval within an organization. An exemplary transaction management system is PeopleSoft Human Capital Management HCM available from Oracle Corporation of Redwood Shores Calif. which is an application for performing human resources related functions for example tracking employee and job information. While described with respect to the approval of transactions and other functionality for human resources systems it should be understood that such implementation is merely exemplary and that functionality and advantages of the various embodiments can be used with other systems and applications as well.

An embodiment of a transaction system for generating reports is shown in . In embodiments an employee transaction can be submitted by the employee through for example a laptop or desktop computer or submitted via a server from a transaction application where the transaction passes through an appropriate network and is received by the HCM system . The network in embodiments is a local area network LAN a wide area network WAN the Internet or other network.

An HCM system is hardware software or hardware and software for processing transactions. An HCM system stores information in an HCM repository . The HCM repository is a database or other storage system that may be stored on a computer readable medium. The HCM system can also include a Direct Reports framework . In embodiments the Direct Reports framework includes functionality for determining organizational relationships. In one example a Direct Reports framework allows customers or organizations to define employee manager relationships from HCM system to access types such as Supervisor Department Position Partial Position Supervisor and Partial Position Department. The HCM system in embodiments includes a Direct Reports interface not shown . The Direct Reports interface can be a common API capable of encapsulating common logic for determining direct reports which is able to determine direct reports for a given employee or to determine the person or entity to which an employee or job directly reports.

In embodiments the exemplary HCM system also interfaces with an Approval Framework . The Approval Framework in embodiments is a common framework that is independent of the HCM system . The Approval Framework is hardware software or hardware and software for supporting the approval of transaction and for hosting many applications including and in addition to the HCM system . The Approval Framework can be used to define and route transactions that require approvals. The Approval Framework can interface with an engine which may be referred to as an approval workflow engine AWE that provides the capability and framework for creating running and managing approval processes. In embodiments the engine is a component of the approval framework . It alternative embodiments the engine is a separate component.

The engine can use a series of database objects combined with application component configuration settings to determine how to process approvals using workflows. Approval workflows are triggered when requesters submit a transaction. The application passes the transaction over to the engine which finds the appropriate approval process definition and launches the approval workflow. A set of approvers then carry out tasks related to the transaction.

The engine allows multiple levels of users to develop configure and use transaction approvals that meet organizational requirements. In order to provide such functionality to an application the application must implement or integrate the Approval Framework in order to leverage the functionality. A power user or implementer registers the application with the engine . The registration requires the implementer to define or describe the application components event handler and records for example. The implementer can also create a record and table in which to store cross reference information and set up notification templates for events. In embodiments an Approval Process Definition is defined by an implementer to include items such as stages paths steps varying hierarchies and criteria among other configurable parameters which determine how the engine will manage the approval. The registration allows the Approval Framework to understand how to respond to an approval request from the application. Thereinafter the application in embodiments makes calls into the Approval Framework .

When a user submits a transaction for approval the submission action launches the approval process. In embodiments the engine reads an approval process definition and queues the transaction for approval. Each Approval Process Definition includes a process identifier ID that is registered with the engine . The engine allows a user to escalate an approval when not getting feedback and reassign approval tasks to another user or a proxy. The engine can generate a worklist and email notifications for any processed or requested approval so that there is a well documented path including information for each step of the approval process. The documentation path information can be used to provide a detailed description of approval transactions that have passed through the engine . The document path information in embodiments includes every step within the approval process date time stamps originator approver proxy proxies and transaction details and any other field that the engine is tracking for a transaction. Such a customizable tool can help with auditing and Sarbanes Oxley compliance for example.

In embodiments a system such as that described in conjunction with that provides an audit history report using the engine or AWE and Approval Framework is shown in . In embodiments the system includes an Integration Component which may be the same or similar to engine and an Approval Framework which may be the same or similar to Approval Framework . The Approval Framework and more specifically the Integration Component can generate a data file and a template . The data file in one embodiment is an XML data file generated from any appropriate data source. In embodiments the user executes a report by calling the engine of the Integration Component .

In embodiments the templates are the generic structure of the documents to be produced. The template in embodiments is a document based template for example a document from Microsoft Word available from Microsoft Corporation of Redmond Wash. In embodiments an implementer inputs information to generate the template and information describing the data file . The input from the implementers for a report definition can be associated with many templates for example by associating a template identifier with the report definition. A user can use preview or sample data with the template to see how the report will ultimately appear and the user can edit the template as needed.

The engine can also generate from user input a translation file that includes translations e.g. real world meanings for each of the codes used in the data for the report. For example the code CEO means Chief Executive Officer. The translation file data file and template can be created for multiple approvals. Thus the engine may store the translation file data file and template and extract the translation file data file and template when needed for an approval process. An identifier or other nomenclature may be used to associate the translation file data file and template with the approval needed. The application can request an approval and provide the identifier for the translation file data file and template to allow the engine to extract the translation file data file and template from a data store.

The engine in embodiments receives transaction data from the Approval Framework . The engine can translate the transaction data with the translation file to create the data file . In embodiments the engine also creates or retrieves the template . The engine may then call a XML Publisher XMLP component . The engine in embodiments passes the data file and the template to the XMLP through an appropriate interface here an Approval Framework application programming interface API to a publishing component . In embodiments the publishing component is the XMLP available from Oracle Corporation of Redwood Shores Calif. The XMLP component is able to accept the inputs from the engine and generate reports in many different formats as specified by the request initiating the report s .

In embodiments the XMLP generates one or more reports and or . Each of the reports are in a different format. For example report is a PDF file report is a web page in HTML report is an text document in RTF format and report is a spreadsheet in XLS. XMLP allows a user to create many different types of forms invoices checks reports etc. that a customer might need without having to use a number of different tools to define manage and deliver the report in different formats. Without XMLP a user might have to use separate spreadsheet document image creation check generation and other such applications all for a single report.

In embodiments an exemplary report is shown in . The report can be the same or similar to one of the reports and or that are generated as an audit history report with the system of . In embodiments the report is customizable by changing the template . A user can determine which fields to include and can determine how to arrange and format the fields. As shown the report template can include information such as an overview of process who originated the transaction etc. The report provides an audit trail of the entire transaction.

XMLP is advantageous as it allows for the separation of the data from the actual layout and from the actual user interface UI . In prior approaches if a user was generating a spreadsheet based report then the user would typically have to import the data into the spreadsheet application. Using XMLP the data can be separate regardless of the ultimate format s to be used. By keeping the data separate a user can manage the data without affecting the various UIs.

A series of screenshots is shown in showing the generation of the XML data file with the engine or AWE. As discussed above these screens act as a UI for the Approval Framework and AWE to generate the report for example the report shown in . shows an interface page wherein the user selects the data source to be used for the report. The user can locate the data source using information such as data source type and data source ID . In embodiments a user selects the data source ID to begin the data file generation process.

In embodiments a user selects the report to be generated from the exemplary page shown in . For example the user selects an Audit Report in text box . Further the user has selected to run the report for all active users as shown in text box . In embodiments selecting the report allows the engine determine the report template to use in generating the report. In an alternative embodiment the user selects the template as shown in the page shown in . In the exemplary page the user selected a template shown by template ID . In embodiments this is the default template for the report chosen as evidenced by the check box . The template may be a Microsoft Word template as discussed in conjunction with . In embodiments a user may also select the translation file .

A user may also select formats for the report as shown in page of . For example the user selects the output choices using check boxes . In the exemplary page four formats are shown HTML PDF RTF and XLS but there can be any number of types and any combination can be made available as may be specified by an administrator. In embodiments the user can also specify the security type or level for the report. For example the user can use page shown in to specify who is allowed to view or access the report. The user in this example defines the role or user type of the person s able to view the report by selecting the user type in drop down menu . In further embodiments the user may also select delivery options for the report. The user can for example specify segmenting or bursting of the report using page shown in . From a functional standpoint customers may wish to break reports into separate files due to size limitations data security etc. Bursting allows a user to break the report up into manageable pieces which can be delivered to different groups presented as different parts of a single report format or be presented in different formats. Users thus can segregate these reports as desired by choosing a parameter in drop down menu by which to burst. In an example where a user is printing paychecks the end result is preferably a separate document or report for each employee whereby the user can select to burst on the employee ID in order to generate a separate document for each employee rather than one long document including every paycheck.

An embodiment of a method for generating a report is shown in . In embodiments the method may be stored on a computer readable medium and performed by a computer system as a set of computer executable instructions. The method illustrates the collecting of data and the generating of information needed by the XMLP component to generate the reports.

Receive operation receives parameters for a user. In embodiments the engine retrieves customer input parameters from a Run Control UI on a computer system or . The engine can determine the parameters to be used to generate the report from the input parameters. For example a user may wish to examine all transactions within a HCM system that have been submitted after a predetermined date and before a different predetermined date. In another example the user also may wish to look at a specific approval process ID which could include all promotions that occurred this year. A user also can submit options such as filtering by requester or analyzing all transactions that are still pending.

Retrieve operation retrieves a data structure. Once these parameters are received the engine can retrieve the data structure from an appropriate location. The data structure is the representation of the data format required by the XMLP. In embodiments the engine retrieves the data structure from a FileLayout component. An exemplary data structure definition is shown in . The data structure definition in embodiments indicates how the data should be structured at runtime. This data structure definition example includes database symbols to indicate data records and rectangles for fields in order to define the record hierarchy. Such a data structure definition can be created and then called at runtime to help structure the data.

Retrieve operation retrieves data. In embodiments the engine retrieves the data. In alternative embodiments the approval framework retrieves the data and sends the data to the engine . Referring again to a box around the record HCSC ADT XREF in the data structure definition defines the data to be retrieved. This record HCSC ADT XREF corresponds to a high level tracking record wherein every transaction that gets submitted within HCM results in a row being written to a table for purposes of the audit report. The table provides a small local collection of one or more transactions that have passed through the engine for HCM.

Format operation formats the data to the structure. The engine in embodiments formats the retrieved data according to the retrieved data structure. The parameters provided to or generated by the engine are used to write a subset of the data in memory from the XREF record shown in in the format of the file layout structure. The parameters are used to query the audit reporting record to retrieve the rows that match the user parameters and the rows from that record can be written line by line and level by level into the data structure in that file layout. A data structure is thus created in memory that has a predetermined structure based on the data structure layout that is passed to the XMLP. In embodiments the data structure is in the XML format.

During the formatting process of the data structure the engine can use the translation file to translate data codes in the data. The translation of the data codes ensures the data in the data structure has useful text. Further the engine can parse comments or similar fields to associate those comments to predetermined actions items or times in the report. The engine can also perform functions such as converting any date time stamps to localized date time formats.

Transform operation transforms the data structure into an XML file. The engine can execute a single command that modifies the data structure in memory and writes customer legible data to a physical file on the application server. Send operation sends the XML file and parameters to the publishing component. In embodiments the engine sends the XML file and parameters to the XMLP . In embodiments the engine passes the XML file via a series of commands through an API . The engine can also pass the request for which report s are to be generated and which template s are to be used.

Generate operation generates the report s . The engine in embodiments sends another command to the XMLP API to indicate that the XMLP should generate the report and or . In embodiments the engine waits for the data and parameters to be passed to the XMLP before issuing the command to generate the report. The engine in alternative embodiments also issues a command to publish the report to a report repository.

A block diagram illustrating components of an exemplary operating environment is shown in . The various embodiments described herein may be implemented in the exemplary operating system . The system can include one or more user computers computing devices or processing devices which can be used to operate a client such as a dedicated application web browser etc. For example the client may be an application that is linked to the approval framework . The user computers can be general purpose personal computers including merely by way of example personal computers and or laptop computers running a standard operating system cell phones or PDAs running mobile software and being Internet e mail SMS Blackberry or other communication protocol enabled and or workstation computers running any of a variety of commercially available UNIX or UNIX like operating systems including without limitation the variety of GNU Linux operating systems . These user computers may also have any of a variety of applications including one or more development systems database client and or server applications and Web browser applications. Alternatively the user computers may be any other electronic device such as a thin client computer Internet enabled gaming system and or personal messaging device capable of communicating via a network e.g. the network described below and or displaying and navigating Web pages or other types of electronic documents. Although the exemplary system is shown with four user computers any number of user computers may be supported.

In most embodiments the system includes some type of network . In embodiments the network is the same or similar to network . The network may be any type of network familiar to those skilled in the art that can support data communications using any of a variety of commercially available protocols including without limitation TCP IP SNA IPX AppleTalk and the like. Merely by way of example the network can be a local area network LAN such as an Ethernet network a Token Ring network and or the like a wide area network WAN a virtual network including without limitation a virtual private network VPN the Internet an intranet an extranet a public switched telephone network PSTN an infra red network a wireless network e.g. a network operating under any of the IEEE 802.11 suite of protocols GRPS GSM UMTS EDGE 2G 2.5G 3G 4G Wimax WiFi CDMA 2000 WCDMA the Bluetooth protocol known in the art and or any other wireless protocol and or any combination of these and or other networks.

The system may also include one or more server computers which can be general purpose computers specialized server computers including merely by way of example PC servers UNIX servers mid range servers mainframe computers rack mounted servers etc. server farms server clusters or any other appropriate arrangement and or combination. The server computers function to execute the approval framework HCM system or other applications. One or more of the servers e.g. may be dedicated to running applications such as a business application a Web server application server etc. Such servers may be used to process requests from user computers . The applications can also include any number of applications for controlling access to resources of the servers .

The Web server can be running an operating system including any of those discussed above as well as any commercially available server operating systems. The Web server can also run any of a variety of server applications and or mid tier applications including HTTP servers FTP servers CGI servers database servers Java servers business applications and the like. The server s also may be one or more computers which can be capable of executing programs or scripts in response to the user computers . As one example a server may execute one or more Web applications. The Web application may be implemented as one or more scripts or programs written in any programming language such as Java C C or C and or any scripting language such as Perl Python or TCL as well as combinations of any programming scripting languages. The server s may also include database servers including without limitation those commercially available from Oracle Microsoft Sybase IBM and the like which can process requests from database clients running on a user computer . A database server can manage the HCM repository or data retrieved by the engine .

The system may also include one or more databases . In embodiments the database may store the HCM repository or data retrieved by the engine . The database s may reside in a variety of locations. By way of example a database may reside on a storage medium local to and or resident in one or more of the computers . Alternatively it may be remote from any or all of the computers and or in communication e.g. via the network with one or more of these. In a particular set of embodiments the database may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to the computers may be stored locally on the respective computer and or remotely as appropriate. In one set of embodiments the database may be a relational database such as Oracle 10g that is adapted to store update and retrieve data in response to SQL formatted commands.

An exemplary computer system that may implement one or more components of the systems described herein is shown in . The system may be used to implement any of the computer systems described above for example the clients or the HCM system or the approval framework . The computer system is shown comprising hardware elements that may be electrically coupled via a bus . The hardware elements may include one or more central processing units CPUs one or more input devices e.g. a mouse a keyboard etc. and one or more output devices e.g. a display device a printer etc. . The computer system may also include one or more storage devices . By way of example the storage device s can include devices such as disk drives optical storage devices solid state storage device such as a random access memory RAM and or a read only memory ROM which can be programmable flash updateable and or the like.

The computer system may additionally include a computer readable storage media reader a communications system e.g. a modem a network card wireless or wired an infra red communication device etc. and working memory which may include RAM and ROM devices as described above. In some embodiments the computer system may also include a processing acceleration unit which can include a digital signal processor DSP a special purpose processor and or the like.

The computer readable storage media reader can further be connected to a computer readable storage medium together and optionally in combination with storage device s comprehensively representing remote local fixed and or removable storage devices plus storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information. The communications system may permit data to be exchanged with the network and or any other computer described above with respect to the system .

The computer system may also comprise software elements shown as being currently located within a working memory including an operating system and or other code such as an application program which may be a client application Web browser mid tier application RDBMS etc. . It should be appreciated that alternate embodiments of a computer system may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices data signals data transmissions or any other medium which can be used to store or transmit the desired information and which can be accessed by the computer. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.

