---

title: Integrated development framework for composite applications
abstract: There is disclosed an integrated development environment for development of a composite application, wherein the development environment integrates a plurality of different heterogeneous development frameworks to provide a single user interface and perspective for developing a composite application including components from the different heterogeneous frameworks. In the environment, objects from different frameworks and layers may be viewed simultaneously, navigated between, edited and composed. Error checking functionality allows edits across different layers or objects of different frameworks to be checked at design time.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08341593&OS=08341593&RS=08341593
owner: SAP AG
number: 08341593
owner_city: Walldorf
owner_country: DE
publication_date: 20081023
---
The invention relates generally to software development tools and more particularly to systems methods and articles of manufacture for development of composite applications.

In computing the term composite application generally refers to an application built by combining multiple existing functions into a new application. Composite applications may leverage enterprise and enterprise ready sources for example existing modules or even enterprise web services of information. Composite applications can be built using any technology or architecture.

A composite application consists of functionality drawn from several different sources. The components may be individual selected functions from within other applications or entire systems whose outputs have been packaged as business functions modules or web services. Composite applications often incorporate orchestration of local application logic to control how the composed functions interact with each other to produce the new derived functionality.

According to various example embodiments there is provided an integrated development environment and related capabilities for developing a composite application.

In the following detailed description of exemplary embodiments of the invention reference is made to the accompanying drawings which form a part hereof and in which is shown by way of illustration specific exemplary embodiments in which the invention may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice the invention and it is to be understood that other embodiments may be utilized and that logical mechanical electrical and other changes may be made without departing from the scope of the present invention.

Referring now to there is illustrated an overview of an integrated development environment used to develop a composite application . Environment is used to integrate the development objects DOs and and development tools and of respective heterogeneous development frameworks . . . each having a respective development perspective and into a single development environment providing a single development perspective . In an embodiment objects are non native to environment . Their respective development frameworks may exist outside of environment . According to one example embodiment environment further includes additional development objects and development tools that are native to environment . Non native objects and tools may be less tightly integrated with environment than object and tools . In an example embodiment the content of tools may be imported into environment but with read only support e.g. creation of development objects is not supported . According to one example embodiment environment is a software development framework and includes support programs code libraries a scripting language and other software to help develop and connect together the different components of a software project. As illustrated in environment includes a graphical user interface a plurality of development tools a meta model repository an application programming interface API and error checking functions and application runtime functions necessary to run a composite application .

As described further below composite application includes functionality drawn from several different sources. According to one example embodiment the components of composite application may be individual selected functions from within other applications or entire systems whose outputs have been packaged as business functions modules or web services. As illustrated in composite application in one example embodiment may include one or more of the heterogeneous development objects . . . that are native to the one or more respective heterogeneous development frameworks . . . and non native to environment and one or more development objects . . . that are native to the integrated development environment . Objects and or objects may be collectively referred to herein as objects . Native development objects and non native development objects interface with the environment through the application programming interface API . In one embodiment one or more objects used in one of the respective frameworks are not capable of use without modification in another one of the respective frameworks . Further one or more objects native to environment are not capable of use in native form with one or more of the frameworks . According to one embodiment objects include adaptors enabling the non native objects to interface with API .

As illustrated in composite application further includes in one example embodiment one or more layers . . . . In object oriented design a layer is a group of classes that have the same set of link time module dependencies to other modules. In other words a layer may be formed of a group of reusable components that are reusable in similar circumstances. These layers can include but are not limited to a web program development layer a service layer a user interface technologies layer a process layer and or any other layers. A composite application may include only one layer such as a process layer or many layers. While specific examples of layers are enumerated above the invention is in no way limited to any particular layers or combination of layers.

According to one example embodiment illustrated in the heterogeneous development frameworks . . . are each designed for developing programs using corresponding programming models . . . . According to one embodiment a programming model is an abstract conceptual view of the structure and operation of a computing system. Such environments and models may be for example for development of web portals guided procedures visual composition of user interfaces or web based applications. Development frameworks . . . each include respective development tool sets . . . native to these environments. Tool sets each include a plurality of tools that are used to develop programs within these environments and in particular compose or edit objects used in such programs. Tools are in one example embodiment programs or applications that software developers use to create debug maintain or otherwise support other programs and applications.

According to one example embodiment illustrated in development tools accessible in environment include one or more of the tool sets native to the developmental frameworks such that a developer may access these tools if composing or editing an object within environment . Thus the integrated development environment enables a developer to implement a composite application using heterogeneous objects from heterogeneous development frameworks and using heterogeneous tool sets all from a single user interface . Accordingly environment subsumes all editors and views that are specific for any of the development frameworks providing at least the basic functionality for editing a composite application . Development in environment is further supported with model and code generation based methods via tools that store models in a meta model repository .

Referring now to one example embodiment of a user interface and associated functionality is described. According to one example embodiment illustrated in the integrated development environment provides a user interface that is used to browse edit and compose composite applications and in particular development objects and the relationships and dependencies between those objects. Objects are displayed in a tree view in a composite explorer illustrated in more detail in in graphical views in the composite designer illustrated in more detail in and in a detail view window . An outline view window is used to display an outline view of the composite application . A palette of development tools menus and options to support development are also provided.

Accordingly environment allows non native objects from a plurality of different development frameworks to be edited from the same user interface . According to one example embodiment the tools include a plurality of tool sets that are native to respective development frameworks . Each development framework may also include a context menu entry to navigate to objects of other programming models.

Referring now to there is shown a flow diagram illustrating one example embodiment of one example mode of use of the development environment . While a specific order of operations is given it shall be understood that the order of operations may be varied or used in any combination. A composite application is selected and loaded into the environment . Objects of the composite application at least two of which are native to respective different development environments are displayed together in a tree view and or in a graphical view showing the layer to which each object belongs. Relationships between the objects shown in the graphical view are graphically indicated for example across all objects or for a selected object. A user can select an object in any layer and navigate to a target object in the same or different layer. The target object s function may be edited for example by editing the code of the object by altering the object s relationships or by other means. Or a new object may be created. The user may navigate back to the source object. In addition the user may check the composite application and any errors in the composite application are displayed to the developer at design time. The developer may then debug any problems with the composite application prior to run time.

According to one example embodiment environment may use breadcrumbs wherein every object of a programming model that was a navigation target is also one node in the breadcrumb so that by clicking on a node a backward navigation is possible. A view provided by environment may contain the breadcrumb with a collection and history of all objects and the development framework of the programming model to handle the objects. According to one example embodiment each framework tool provides a context menu entry to navigate to entities of other programming models. Accordingly for example a developer can start from an entity in a process and navigate to a user interface. Next in the perspective of the user interface programming model the developers can navigate to a used service. Then within the implementation of the service the developer can change the coding. Finally after the change in the code a developer navigates back to the user interface or the process and is able to test the change.

According to another example embodiment the integrated development environment may integrate non native development frameworks either directly or indirectly. For example some of the tool sets may be built into environment and others may be downloaded from an external source such as a server holding server based tools . According to another example embodiment a composition application matches to a software component and the content of the different frameworks in a composite application are stored in specific development objects .

Referring now to there is illustrated a computing platform that may host the development environment . According to one example embodiment development environment may be stored on one or more machine readable media on platform such as a hard drive or memory circuits and execute on one or more processors . Platform may take the form of one or more servers or other computing systems such as workstations personal computers or mainframes.

Thus other embodiments may be realized. For example an article of manufacture such as a computer a memory system a magnetic or optical disk some other storage device and or any type of electronic device or system may include one or more processors coupled to a machine readable medium such as a memory e.g. removable storage media as well as any memory including an electrical optical or electromagnetic conductor having instructions stored thereon e.g. computer program instructions which when executed by the one or more processors result in performing any of the actions described with respect to the methods above.

The machine may take the form of a computer system having a processor coupled to a number of components directly and or using a bus. Such components may include main memory static or non volatile memory and mass storage. Other components coupled to the processor may include an output device such as a video display an input device such as a keyboard a cursor control device such as a mouse and a signal generation device such as a speaker. A network interface device to couple the processor and other components to a network may also be coupled to the bus. The instructions may further be transmitted or received over the network via the network interface device utilizing any one of a number of well known transfer protocols e.g. HTTP . Any of these elements coupled to the bus may be absent present singly or present in plural numbers depending on the specific example to be realized.

The processor the memories and the mass storage device may each include instructions which when executed cause the machine to perform any one or more of the methods described herein. In some examples the machine operates as a standalone device or may be connected e.g. networked to other machines. In a networked environment the machine may operate in the capacity of a server or a client machine in server client network environment or as a peer machine in a peer to peer or distributed network environment. The machine may be a personal computer PC a tablet PC a set top box STB a Personal Digital Assistant PDA a cellular telephone a web appliance a network router switch or bridge or any machine capable of executing a set of instructions sequential or otherwise that specify actions to be taken by that machine. Further the term machine shall also be taken to include any collection of machines that individually or jointly execute a set or multiple sets of instructions to perform any one or more of the methodologies discussed herein.

The term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers and or a variety of storage media such as the processor registers memories and the mass storage device that store the one or more sets of instructions. The term machine readable medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention or that is capable of storing encoding or carrying data structures utilized by or associated with such a set of instructions. The term machine readable medium shall accordingly be taken to include tangible media such as solid state memories and optical and magnetic media.

Accordingly described above is an integrated development environment that provides among other things for development of composite applications from a single perspective. The environment provides for display editing and creation of objects in different layers of the application and from different heterogeneous development environments using heterogeneous development tools. Environment enables a developer to view relationships between objects in different layers and to navigate from an object in one layer to an object in another layer and to check any edits to the application in design time. Environment therefore allows a developer to more readily develop or debug composite applications.

