---

title: Automated client/server operation partitioning
abstract: An operation (such as a relational query) may be processed on a processing engine (such as a relational database server) on behalf of a client. A conventional processing involves the delivery of the operation to the processing engine, which executes the entire operation to completion and returns a result data set. It may be more efficient to allocate part of the operation to be performed on the client, but a developer may be unable or unavailable to rewrite the operation in a distributed manner. Instead, the operation may be automatically partitioned into a pre-engine client portion, a processing engine portion, and a client portion, and the instructions of each portion may be automatically allocated respectively to the client, the server, and the client. The partitioning may be adjusted to conserve computing resources, such as bandwidth and storage, and the instructions may be reordered to improve the processing of the operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08364751&OS=08364751&RS=08364751
owner: Microsoft Corporation
number: 08364751
owner_city: Redmond
owner_country: US
publication_date: 20080625
---
Many computing scenarios involve the issuing of an operation such as a query to a server to be performed on behalf of a client. As one example a service may accept a relational query to be applied against a data store and may respond with a message indicating the success or failure of the operation and or a result data set. Such services may be invoked synchronously where the client blocks while waiting for the server to complete the service or asynchronously where the client continues to perform some other actions while the operation is pending and where the client is later notified or detects that the operation is complete. Moreover the server may concurrently handle many transactions on behalf of one or more clients and may have access to a finite though potentially very large set of resources e.g. processing bandwidth memory and network bandwidth for performing the queries on behalf of the clients. The taxing of the resources may result in diminished performance and latency in completing such operations if the queue of operations to be performed grows too large this may result in failed operations and or incorrect results.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

In many scenarios an operation such as a query may involve a series of instructions organized in a particular sequence in order to achieve a desired result. A conventional processing of the query simply involves sending the entire query e.g. an SQL string specifying a complete query to the data source which processes the operations in sequence and returns the result data set to the client. However this may be inefficient in one or more aspects. As a first example some portions of the operation may be performable on the client instead of the server and it may be desirable to allocate some of the processing to the client in order to conserve the resources of the server. As a second example it may be more efficient to allocate some processing in order to avoid network transport of a considerably large set of data e.g. if performing an operation on the server involves sending a large amount of data to the server while processing the operation on the client might involve less consumption of network bandwidth. 

Accordingly it may be desirable to partition the operation into a sever portion and a client pre processing portion performed before the server portion and or a client post processing portion performed after the server portion. However it may be difficult for a developer to partition such operations in an efficient manner e.g. where the operation is complicated or where the developer is not privy to the advantages of such reallocation. Instead automated techniques may be developed for partitioning the operation in a manner that improves utilization of resources e.g. by evaluating whether some instructions are more efficiently performed on the server or the client and accordingly partitioning the operation. Such techniques may also take into consideration the resources available to the server and client e.g. the comparative processing load presently allocated to the server and the client while allocating the partitions of the operation. Moreover in some scenarios the partitioning may be enhanced by reconfiguring the sequence of instructions comprising the operation e.g. in order to permit the allocation to the server of a first instruction notwithstanding the sequencing between the first instruction and a partition boundary of a second instruction that might otherwise preclude the allocation. By automatically partitioning the operation the server and client may cooperate to improve the efficiency and speed in processing the operation and the utilization of client and server resources.

To the accomplishment of the foregoing and related ends the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects advantages and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.

The claimed subject matter is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances structures and devices are shown in block diagram form in order to facilitate describing the claimed subject matter.

Many computing scenarios involve the processing of an operation on a server such as a processing of a database query on a database server on behalf of a client. The operation often comprises a sequence of instructions to be performed e.g. a database query involving a selection of attributes from a table a filtering of the selected attributes based on one or more criteria a sorting of the attributes according to a sort criterion and a grouping of attributes according to a category. In some scenarios the server may simply perform the instructions on behalf of the client in other scenarios the server may notify the client of an operation result and in still other scenarios the server may generate a result data set to be returned to the client e.g. a set of records retrieved from a database in response to the query. 

In relation to the data set the instruction set first selects all attributes of all records. The instruction set involves a filtering of the records of the data set according to the last name of the author such that only books written by authors having a last name of Crichton are included thereby filtering out records specifying authors named Shelley Orwell Banks and Fitzgerald. Next the instruction set involves a filtering based on the titles of the books such that only books with titles containing the letter E are selected. This may be performed by applying the compiled regular expression to the TITLE field of the records not yet filtered out of the data set and results in a selection of four records and a filtering out of the book entitled CONGO . Next the instruction set involves a sorting based on the PUBDATE field of the records which sorts the remaining records of the data set in an ascending order. Next the instruction set involves a grouping of the records according to the CATEGORY field which reorders the records while still preserving the ordering specified by the sorting e.g. the book State of Fear is sorted before the book Eaters of the Dead by the sorting instruction and remains so ordered when grouped together in the Horror category. Finally the query involves a filtering based on the grouping such that only books belonging to a group having more than one record are selected.

The result data set comprises records representing the books State of Fear and Eaters of the Dead both of which were published by Crichton contain an E in the title and are within the category Horror which contains two records and the records are correctly sorted by publication date. This result data set may be returned to the client in response to the relational query.

Accordingly it may be desirable to conserve the resources of the server in processing the operations on behalf of one or more clients . One technique for conserving resources involves partitioning the operation into portions that may be more efficiently performed on the client or that may be performed either on the server or the client with similar efficiency. The portions of the partitioned operation may therefore be allocated to the client or to the server based on the efficiency of such allocation. Several factors may affect the efficiency of such processing such as e.g. the computing power of the server and client the processing load of the server and the client other than the operation the memory resources both volatile and non volatile of the server and the client the locations of sets of data utilized by the operation the network capacity of the server and the client and the amount of data to be exchanged over the network while achieving a partitioning.

The techniques discussed herein may be devised with variations in many aspects and some variations may present additional advantages and or reduce disadvantages with respect to other variations of these and other techniques. Moreover some variations may be implemented in combination and some combinations may feature additional advantages and or reduced disadvantages through synergistic cooperation. The variations may be incorporated in various embodiments e.g. the exemplary method of and the exemplary system of to confer individual and or synergistic advantages upon such embodiments.

A first aspect that may vary among implementations of these techniques relates to the scenarios in which the automated partitioning of operations may be performed. As a first example the operation may comprise a query such as a relational query specified in SQL to be applied against a relational database. Alternatively the operation may comprise a language integrated query written in a programming language and designed for application against a queryable data source. The language integrated query may be transformed into an expression tree e.g. by an expression tree transforming component included in a system embodiment such as the exemplary system of . The nodes of the expression tree may represent the instructions comprising the language integrated query operation and the sequencing thereof and may be automatically partitioned between the client and the processing engine. As a second alternative the operation may comprise a work item issued by a client for processing on a server such as a high performance server that is capable of executing many instructions with a high rate of throughput e.g. through the use of superpipelining superparallelism manycore or multicore processing a large processor array a large set of field programmable gate array FPGA devices and or quantum computing technologies. Some aspects of the work item may be equivalently performable on the client and it may be advantageous to perform such processing locally before sending the work item to the server for processing of a more computationally portion of the work item. Those of ordinary skill in the art may devise many types of operations to which the automated partitioning and processing techniques discussed herein may be applied.

A second aspect that may vary among implementations of these techniques relates to the manner of choosing the partitions to allocate the computing either to the client or the processing engine. In many scenarios at least one instruction may only be performed by the processing engine e.g. a relational query targeted to a relational database may involve an INSERT SELECT UPDATE or DELETE operation that can only be performed by the processing engine interfacing with the relational database. However other instructions of the operation may be performed either on the client or the server hosting the processing engine. For example in the instruction of the operation specifying the selecting of all attributes of all records might not be performable on the client but the other instructions of the operation may be performed either on the client or on the server .

The partitioning may therefore be selected in many ways. As a first example the partitioning may be configured to expand portions of the partitioned query executed by one of the client and the processing engine and to equivalently compact portions of the partitioned query executed by the other of the client and the processing engine in order to allocate more of the computing burden to either the client or the server than to the other. Such allocating may be based on many factors such as e.g. the processing capacity of the processing engine the processing capacity of the client the computational load of the processing engine the computational load of the client the storage capacity of the processing engine the storage capacity of the client and or the communications capacity between the processing engine and the client. For example the sorting of a large number of records according to publication date may be performed either on the client or the server and the amount of data exchanged over the network does not change based on whether this instruction is allocated either to the server or the client. Accordingly the automated partitioning may allocate this instruction based on either the predicted availability of processing power of each machine e.g. if the automated partitioning is performed at compile time or by comparing the availability processing power of each machine on a just in time basis e.g. if the automated partitioning is performed at runtime. 

As another example the partitioning may be configured to reduce the size of at least one of the pre engine partially executed operation and the processing engine partially executed operation. As indicated in when the processing of the operation reaches the first partition between the pre processing client portion and the processing engine portion the contents of the partially executed operation are sent to the processing engine e.g. over a network and when the processing of the operation reaches the second partition between the processing engine portion and the post processing client portion the contents of the partially executed operation are sent back to the client . The partitioning may be selected in a manner that reduces the amount of data exchanged between the client and the server upon reaching these partitions. In some scenarios the amount of data exchanged over the network for different partitioning may be known or predicted and the automated partitioning may be chosen accordingly. However in other scenarios it may be difficult to determine a partitioning before the query is actually applied. For example the application of a regular expression to filter rows may involve two factors the number of rows to be filtered based on the regular query and the complexity of the regular expression. A tradeoff analysis may be reviewed of the network transport costs vs. the regular expression computing resources. If the number of rows to be filtered is comparatively small and the regular expression is computationally difficult to evaluate then it may be advantageous to send the unfiltered set of rows to the client and to allocate the filtering to the client thereby preserving some processing power of the server . Conversely if the number of rows to be filtered is very large the network transport costs may be prohibitive especially if many of the rows are likely to be filtered out and it may be more efficient to filter the rows at the server regardless of the computational complexity of applying the regular expression. Those of ordinary skill in the art may devise many techniques for partitioning the operation in view of many factors while implementing the automated partitioning techniques discussed herein.

A third aspect that may vary among implementations relates to a capability for reordering the instructions of the operation to facilitate the processing of the operation such as to adjust the partitioning of the operation between the client and the processing engine. After the partitioning but before executing the pre engine portion of the operation the instructions within the operation may be evaluated to determine whether a more advantageous configuration of instructions might be devised that might improve the processing of the operation while leading to an equivalent result i.e. while producing the same logical consequences and outcome of the operation. For example a set of instruction adjusting rules may be applied to the operation that specify a relocation of an instruction if certain conditions are met.

A first example of an instruction adjusting rule relates to the compacting of the operation to reduce network traffic upon reaching a partitioning which involves a sending of the partially executed operation from the client to the processing engine or vice versa. Because network bandwidth is frequently a performance bottleneck when large data sets are involved it may be advantageous to relocate instructions that compact the operation e.g. the number of rows or attributes in rows that are currently being handled by the operation to precede a partitioning and the associated sending of the partially executed operation over a network. Accordingly an instruction adjusting rule may be formulated that attempts to identify a compacting instruction in the processing engine portion of the query that compacts the processing engine portion but can be equivalently executed in the pre engine engine portion and if such a compacting instruction is identified the instruction may be moved to the pre engine engine portion. Another instruction adjusting rule may involve identifying a compacting instruction in the post engine portion that compacts the post engine portion and can be equivalently executed in the processing engine portion and upon identifying such a compacting instruction moving the instruction to the processing engine portion.

A second example of an instruction adjusting rule relates to a reordering of instructions that improves the economy of processing resources such as CPU utilization of the client and or the processing engine while performing the operation. This reordering may be utilized where the operation includes a computationally intensive instruction that involves a considerable amount of processing such as the application of a complicated regular expression a complicated mathematical expression or an iterative or recursive evaluation. The reordering might also be desirable where a portion of the processing is more efficiently completed on the client rather than the server or vice versa e.g. where one machine has better hardware for performing the operation such as a physics accelerator or FPGA configurable for the operation where one machine has faster or higher level access to a data source or object used in the processing etc. In some such operations a compacting instruction may follow the computationally intensive instruction but can be equivalently executed before the computationally intensive instruction e.g. where the compacting does not rely on the result of the intensive computation. In this scenario an instruction adjusting rule may be applied that moves the compacting operation to precede the computationally intensive instruction which may reduce the number of records on which the computationally intensive instruction operates thereby improving the conservation of computing resources.

A third example of an instruction adjusting rule relates to an execution of an instruction in a particular portion of the operation e.g. the pre engine client portion the processing engine portion or the post engine client portion. While many scenarios may permit the partitioning that so allocates the instruction in other scenarios it may be difficult to achieve this allocation only through partitioning. For example an instruction may be desirably performed in the pre engine client portion of the operation e.g. if the client has better resources for performing the instruction such as specialized hardware that can more quickly process the instruction. However this instruction may follow another instruction that cannot be relocated to the pre engine client portion e.g. an instruction that selects records from a database managed by the processing engine so the partition between the pre engine client portion and the processing engine portion cannot be chosen to permit this allocation. However it may be possible to equivalently execute the instruction in the pre engine client portion and before the unrelocatable instruction. In this case the instruction may be moved into the pre engine client portion and preceding the unrelocatable instruction. Thus instead of readjusting the partitioning to achieve the desired allocation of the instruction the instruction may be relocated without compromising the equivalent execution of the operation or relocating the partitions. Similar scenarios may arise where e.g. an instruction desirably executed by the processing engine is allocated to the post engine client portion but follows an unrelocatable instruction or is allocated to the pre engine client portion but precedes an unrelocatable instruction or where an instruction in the processing engine portion is desirably executed in the post engine client portion but precedes an unrelocatable instruction.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

As used in this application the terms component module system interface and the like are generally intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a controller and the controller can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Furthermore the claimed subject matter may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

Although not required embodiments are described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like. Computer readable instructions may be loaded in memory for execution by processing unit for example.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allows device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC an integrated network interface a radio frequency transmitter receiver an infrared port a USB connection or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB firewire IEEE 1394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments provided herein. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device .

Various operations of embodiments are provided herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment provided herein.

Moreover the word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as advantageous over other aspects or designs. Rather use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application the term or is intended to mean an inclusive or rather than an exclusive or . That is unless specified otherwise or clear from context X employs A or B is intended to mean any of the natural inclusive permutations. That is if X employs A X employs B or X employs both A and B then X employs A or B is satisfied under any of the foregoing instances. In addition the articles a and an as used in this application and the appended claims may generally be construed to mean one or more unless specified otherwise or clear from context to be directed to a singular form.

Also although the disclosure has been shown and described with respect to one or more implementations equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components e.g. elements resources etc. the terms used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. that is functionally equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes having has with or variants thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising. 

