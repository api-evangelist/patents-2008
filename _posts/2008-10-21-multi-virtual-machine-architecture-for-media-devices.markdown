---

title: Multi virtual machine architecture for media devices
abstract: A software computing based environment for providing secured authentication of media downloaded from a network or loaded from a media player includes two peer-mode operating virtual machines. The low-level virtual machine provides decoding and decryption functions whereas the high-level virtual machine provides application level functions such as user interface, input/output.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09003539&OS=09003539&RS=09003539
owner: Disney Enterprises, Inc.
number: 09003539
owner_city: Burbank
owner_country: US
publication_date: 20081021
---
This application is a Continuation of U.S. Utility patent application Ser. No. 10 890 009 filed Jul. 12 2004 which is a Continuation In Part of U.S. Utility Patent application Ser. No. 10 880 060 filed Jun. 28 2004 which claims the benefit of U.S. Provisional Application No. 60 481 034 filed Jun. 27 2003 U.S. Provisional Application No. 60 481 066 filed Jul. 7 2003 and U.S. Provisional Application 60 493 072 filed Aug. 5 2003. The content of application Ser. No. 10 880 060 filed Jun. 28 2004 is incorporated by reference herein in its entirety.

The disclosure relates to developing new systems and methods of security including copy protection for removable media players.

A virtual machine VM is a term used to describe software that acts as an interface between compiler code and the microprocessor or hardware platform that actually performs the program s instructions. A compiler is a special program that processes statements written in a particular programming language and turns them into binary machine language or code that a computer s processor uses. Like a real computing machine the virtual machine has an instruction set and manipulates various memory areas at run time. It is reasonably common to implement a programming language using a virtual machine the best known virtual machine may be the P Code machine of UCSD Pascal. Also a virtual machine may describe either an operating system or any program that runs in a computer.

Sun Microsystems developers of the JAVA programming language and runtime environment is well known for their development of the JAVA Virtual Machine. A JAVA virtual machine interprets compiled JAVA binary code called byte code for a computer s processor or hardware platform so that it can perform a JAVA program s instructions.

JAVA was designed to allow application programs to be built that could be run on any platform without having to be rewritten or recompiled by the programmer for each separate platform. Once a JAVA virtual machine has been provided for a platform any JAVA program can run on that platform. A JAVA virtual machine makes this possible because it is aware of the specific instruction lengths and other particularities of the platform.

There has been a long felt need to develop improved methods of copy protection in next generation media players such as a DVD or CD player.

One known content security system used for DVD s is the Content Scramble System CSS whereby the data on a DVD is encrypted. The DVD player then decrypts the data as it reads the disc using a 40 bit decryption key. A fatal flaw of CSS however proved to be that its keys and algorithms were static. The encryption algorithm was reverse engineered and every possible decryption key that would play existing DVD discs was made available. Once the secret escaped the system was forever compromised since there was no way to renew the security algorithms or keys. There are now many programs available to consumers which remove all security from DVD content with a single click .

Content owners do not want this to happen again especially as the fidelity of the content increases. The next content security system should therefore not be vulnerable in this way.

Software vendors have also faced their share of piracy but given the nature of computers they have taken a different approach than that used in the entertainment industry for DVDs. Historically packaged software program i.e. computer games manufacturers have protected their content with procedural security . That is there is no static pre defined method for securing programs instead each software producer writes or procures a security code to secure their content. This procedural security code varies in complexity and technique on a program by program basis but most importantly since each program has a different security software implementation it is not possible to write a general purpose remove security program like those written to circumvent DVD security.

Another known method of copy protection is writing hardware specific instructions. The problem with such a method is that this is extremely limiting. With this method a different set of instructions must be rendered for each hardware configuration. This is somewhat impractical.

Therefore a system and a method of providing copy protection to hardware such as media players that is not hardware specific is desired. Furthermore a system and a method of providing robust security to prevent unauthorized duplication of the media is desired.

A system and method of platform independent procedural copy protection is therefore provided whereby a dual virtual machine architecture is utilized. The dual virtual machine architecture comprises a high level virtual machine and a low level virtual machine. The low level virtual machine is designed to support low level media decryption and decoding functions whereas the high level virtual machine is designed to handle application layer activities. The architecture thereby partitions security functions from application functions.

In general a virtual machine that is best suited for procedural security more closely resembles the instruction set of an actual hardware CPU. That is it supports pointers and no underlying distinction is made between executable code and data. This first type of virtual machine is therefore named a low level virtual machine virtual machine or a re programmable security layer. The low level virtual machine is designed to resemble a conventional CPU supporting tamper resistant software techniques.

The disadvantages of the low level virtual machine is that programming errors or unexpected runtime conditions tend to be fatal as the low level virtual machine is designed to be very simple in its design and operation viz. for example the low level security virtual machine emulates a small and simple set of logic gates does not perform run time garbage collection and does not include balance checking and exception handling capabilities . However for a security system this fragility of the low level virtual machine can be considered a strength or advantage so that unauthorized access or attempted piracy of media can lead to a failure in the run time operations of the system employing this virtual machine.

For applications a high level virtual machine that manages more of the computational details behind the scenes allows more dependable application programs to be developed that behave in a more predictable and robust fashion. A typical example of a high level virtual machine is JAVA. For instance JAVA does not have support for the concepts of pointer or explicit memory management which are common sources of programming errors but does support exception handling which helps programs and programmers handle unexpected runtime conditions in a predictable way. The high level or application level virtual machine is designed to be full featured and provide for a rich application interface.

Therefore the present system combines the benefits of both a low level virtual machine and a high level virtual machine in order to provide robust platform independent security functions that work in combination with other applications. Furthermore a trusted platform module provides hardware based root of trust by securely querying and validating the execution environment.

Accordingly in one aspect the system and method of platform independent procedural copy protection is therefore provided to media players by combining a low level virtual machine and a high level virtual machine for next generation media players. The present dual virtual machine architecture provides a peer relationship between the virtual machines unlike the prior art where the virtual machines have a stacked relationship. An example of a stacked relationship is where one virtual machine is running on top of another such as in a POWERPC like in a Mac running a windows emulator x86 emulator or virtual machine which in turn executes JAVA virtual machine.

The present disclosure further utilizes a hardware based embedded security subsystem such as a trusted platform module TPM to interface with the virtual machine architecture for providing secured cryptographic computations.

In an exemplary embodiment the present disclosure provides procedural security and copy protection to media such as CD s and DVD s thereby allowing the content owner much more flexible rights management than declarative systems. This flexibility can be used to implement full fledged Digital Rights Management DRM systems as opposed to simple Copy Protection CP provided by prior art static security systems like CSS. Furthermore such a dual virtual machine architecture may also operate on a PC environment and support the playback of media stored on a hard drive solid state memory or that which is delivered over a network.

Thus the present system provides copy protection to hardware such as media players that is not hardware specific. Also the present system provides robust security to prevent unauthorized duplication of the media. In addition since the two virtual machines are separate the present system provides the advantages of distributed computing viz. low computational complexity low memory requirements ease in implementation and individualized functions for each virtual machine .

The foregoing and other objects features and advantages of the present disclosure will be become apparent from a reading of the following detailed description of exemplary embodiments thereof which illustrate the features and advantages of the disclosure.

Detailed descriptions are disclosed herein however it is to be understood that the disclosed embodiments are merely exemplary and may be embodied in various forms. Therefore specific structural and functional details disclosed herein are not to be interpreted as limiting but merely as a basis for claims and as a representative basis for teaching one skilled in the art to variously employ the present disclosure in virtually any appropriately detailed structure. Reference will now be made in detail to that disclosure which is illustrated in the accompanying drawing .

The system and method of the present disclosure provides a dual virtual machine architecture for use in media players. One virtual machine viz. the low level virtual machine or re configurable security layer is designed to support security functions such as media decryption and decoding. In next generation media applications the low level virtual machine may be responsible for bootstrapping the application level virtual machine. The high level or application level virtual machine handles application layer activities like advanced user interfaces misc. I O and network activities.

The media playback device in accordance with the present disclosure contains a central processing unit capable of running at least one Virtual Machine virtual machine . The Virtual Machine in an exemplary embodiment is a dual virtual machine architecture comprising a low level virtual machine e.g. a security virtual machine and a high level virtual machine e.g. an application virtual machine running on the CPU . Programs that are run in the virtual machine may execute and enforce usage rules as well as update cryptographic algorithms. The computing environment may also include Application Program Interfaces API s which are a set of routines or protocols for permitting various programs to communicate with each other.

In one aspect any one of the virtual machines or may control the other virtual machine. In another aspect the high level and low level virtual machines function as peers in a non hierarchical manner passing messages between themselves. These messages may be implemented as foreign function calls where one virtual machine calls a routine in the other virtual machine or as conventional messages passed along a communications channel. For instance the application virtual machine or high level virtual machine would call the security virtual machine or low level virtual machine in order to start playback and hence transparent decoding of media content . Likewise code in the security virtual machine would call the application virtual machine to let it know about synchronization events e.g. an end of clip or a frame number or decoding problems for example security or permission problems .

For example in the situation where media has been copied off of its original optical media the security virtual machine would inform the application virtual machine that it needs a key in order to continue playing. In response the application virtual machine would display a message through the user interface notifying the user that they may rent the media or media content for a certain duration. If the user chooses to do this the user must engage in a transaction with a studio server to obtain an opaque message decodable by the virtual machine that contains the key. The application virtual machine then passes the message containing the key back to the security virtual machine and the copy protection algorithms for authentication. The message passing between the virtual machines could occur through a remote procedure call RPC interface message passing socket or any other equivalent inter process communication IPC protocol.

In another example of message passing between virtual machines media downloaded via a communication network onto a storage medium of a device e.g. a PC portable media device etc. without appropriate permission would be delivered to the security virtual machine. The security virtual machine would in turn inform the application virtual machine that it would require a key in order to playback the media. The application virtual machine could deliver a message to the user via the user interface requesting the user subscribe to the media. Accordingly upon subscription the remote site may send a unique key to the application virtual machine on the communication network for subsequent delivery to the security virtual machine for decoding and authorization of media playback.

In yet another example of message passing between the virtual machines since the application level virtual machine i.e. high level virtual machine controls the input output I O functions it may send a message to the security virtual machine i.e. low level virtual machine to playback a file whenever a user selects a file for playback.

In yet another example of message passing between the virtual machines the high level virtual machine may deliver a request for signature on a form to the security virtual machine. The security low level virtual machine may sign the form after verification and deliver it back to the high level virtual machine. At this point the high level virtual machine may provide the signed form to a communication network for delivery to a remote site.

In yet another example of message passing between the virtual machines the application layer viz. the high level virtual machine may provide graphics on the screen for enabling an user to enter a personal identification number PIN in an alphanumeric field comprising N characters. Upon insertion of the PIN by the user through a standard interface e.g. through keyboard or voice commands the high level virtual machine may deliver the N character PIN to the security virtual machine for authentication. In the situation where the PIN is missing at least one or more alphanumeric characters viz. if the PIN length is M

In yet another example the security virtual machine may i load the boot code and as needed the security codes as well ii find and load the main application or content into the high level application layer virtual machine from the media source iii start the high level application layer virtual machine . Subsequently the high level virtual machine will obtain data such as menu functions icons user interface etc. from the media source .

The media playback device further contains a processing module e.g. a Trusted Processing Module or TPM . The TPM specification is part of the Trusted Computing Platform Alliance TCPA specification created by the Trusted Computing Group TCG . The TPM contains decryption keys and handles secure cryptographic computations. The media playback device further contains API s allowing any program running in the Virtual Machine to query the device s I O hardware and TPM. This allows a program executing in the virtual machine to make intelligent choices for usage rules. A decoding module attached to the CPU is further provided for unpacking encoded audio video streams.

In general a trusted platform enables an entity to determine the state of the software or computing environment in that platform and to seal data to a particular software environment in that platform. The entity deduces whether the state of the computing environment is acceptable and performs some transaction with that platform. If the transaction involves sensitive data that must be stored on the platform the entity can ensure that that data is held in a confidential format unless the state of the computing environment in that platform is acceptable to the entity.

To enable this a trusted platform provides information to enable the entity to deduce the software environment in a trusted platform. That information is reliably measured and reported to the entity. At the same time a trusted platform provides a means to encrypt cryptographic keys and to state the software environment that must be in place before the keys can be decrypted.

A trusted measurement root measures certain platform characteristics logs the measurement data in a measurement store and stores the final result in a TPM which contains the root of trust for storing and reporting integrity metrics . The TPM is therefore a secure storage location for all decryption keys. The TPM also handles most cryptographic computations and functions.

The media playback device furthermore has secure protected inputs and outputs the ability to network with other players memory devices e.g. RAM and ROM .

Thus according to the exemplary embodiment separate virtual machines virtual machine run in the same computing environment that includes a CPU. The present architecture partitions two virtual machines viz. the high level or application virtual machine and the low level or security virtual machine wherein the application and security virtual machines communicate through standardized APIs. The functionalities of the application virtual machine includes providing network services to the security code being executed in the security virtual machine whereas media access and decoding functions are mediated by the security virtual machine such that content security is transparent to application authors.

The security virtual machine has low impact on system resources is a simple has low computational complexity secure and appropriate software for this virtual machine may be provided by security vendors. The application virtual machine has relatively larger CPU and memory impact and is responsible for user Interface and input output functions. By providing a distributed computing approach viz. multiple virtual machines communicating in a peer relation and each handling appropriate security and application oriented functions the present system provides a robust security to the media against unauthorized access with low computational complexity.

In addition with the present system it is possible to have more than two virtual machines wherein the virtual machine s would include arbitrary combinations of low level and high level virtual machines. For example applications can be written in a first virtual machine e.g. FLASH from Macromedia and these applications may then be exported to another virtual machine e.g. JAVA residing on a player that further includes a security virtual machine.

In another embodiment of the present system the security system can yet be designed in the absence of a re programmable security layer or low level virtual machine. In other words a static security system may be implemented as long as the media player supports APIs Application Programming Interfaces that allow the Application Layer e.g. Multimedia Home Platform MHP or JAVA to interact with it. Not only does this technique allow the application layer to extend the life of the security system by acting as an programmable extension of the security subsystem it also allows the application to enable new business models by performing functions such as fetching content licenses from the Internet after some user interaction.

For example in the event that the decryption keys for a piece of media have been compromised a hacker could very easily decrypt all the content on a piece of packed media. In a conventional system such as a DVD this clear non encrypted content could be played uninhibitedly. However in the presence of a security aware application code as in the present system the task of pirating or copying media is no longer easy or automatic.

Thus in the present example of above instead of creating one or two large media files audio and video as is typically done the present system may segment a movie in to K for e.g. K 32 smaller pieces such that the application layer may play them in a seamless sequence. Furthermore the present system may also scramble those segments such that the correct forward order could be numerically labeled etc. This information can be stored in a correct order in an encrypted viz. desired array in the application itself. This encrypted array and its decryption can then be implemented using code obfuscation tools and techniques in the media device. The goal of this obfuscation technique is to defeat simple static analysis methods developed by hackers that would allow a program to determine the value of the array and hence the correct order in which to play the segments.

Thus the goal of the present system is to require the execution of the application code in order to generate the desired array. Additionally the application code may make calls into the security layer via the implemented API s in order to increase the application s dependence on being run inside the environment created by the outer security layer as depicted in . The array technique as mentioned above is only one example of putting some necessary data in the application layer outside of the possible compromised security layer.

Thus if the outer security layer is broken for any single piece of media it is possible to emulate the behavior of the security layer and it s interaction with the application layer. However in the present system the application layer program is designed to change from media to media in such a way that one automatic program is not practical to write by a person intending to copy the data in an unauthorized manner.

Thus in this manner the present system provides copy protection to hardware such as media players that is not hardware specific. Additionally the present system provides robust security to prevent unauthorized duplication of the media.

The foregoing description of the preferred embodiments of the disclosure has been presented for the purposes of illustration and description. Other objects features and advantages of the present disclosure will be become apparent from a reading of the following Appendix. It is not intended to be exhaustive or to limit the disclosure to the precise form disclosed. Many modifications and variations are possible in light of the teachings. For example the present disclosure is not limited for use in media players such as conventional CD and DVD players but could be expanded to run on a PC or more generalized hardware system which includes functionality to play removable media.

