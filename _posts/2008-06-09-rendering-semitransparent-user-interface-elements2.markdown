---

title: Rendering semi-transparent user interface elements
abstract: A computer-implemented method includes: determining an intensity of a visual effect to be applied to a user interface element; adjusting the intensity of the visual effect based on a characteristic feature of a background area; and rendering the user interface element based on the adjusted intensity of the visual effect.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09607408&OS=09607408&RS=09607408
owner: Apple Inc.
number: 09607408
owner_city: Cupertino
owner_country: US
publication_date: 20080609
---
This application claims the benefit under 35 U.S.C. 119 of U.S. Provisional Application No. 60 942 985 titled Rendering Semi Transparent User Interface Elements filed Jun. 8 2007 which is incorporated by reference herein in its entirety.

A graphical user interface generally includes multiple user interface elements that each represents individual components of the interface. Each user interface element has particular visual properties such as color and shape that together describe the appearance of the user interface element in the graphical user interface. When the graphical user interface is presented each user interface element is usually drawn so that any part of one element that overlaps another element completely occludes the other element. In some systems a user interface element is associated with a transparency value describing the extent to which the user interface element is semi transparent. This transparency value is used to render the user interface element so that whatever the element happens to occlude partially appears through the element. For any given transparency value however a user interface element may to a user appear significantly different depending only on colors in the area partially occluded by the semi transparent user interface element.

A computer implemented method includes determining an intensity of a visual effect to be applied to a user interface element adjusting the intensity of the visual effect based on a characteristic feature of a background area and rendering the user interface element based on the adjusted intensity of the visual effect.

Particular embodiments of the subject matter described in this specification can be implemented to realize one or more of the following advantages. A semi transparent graphical user interface element has a consistent appearance no matter what background is displayed behind the element. Text or other information that is displayed in the element is consistently legible because of consistent contrast between the text and the element.

The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the invention will become apparent from the description the drawings and the claims.

Each individual user interface element can generally include several parts. For example the menu bar user interface element includes a drawing area text that represents menu items and components such as an icon . The drawing area represents the area over which the user interface element can draw or otherwise render images or text so as to present information to a user. A window can include other parts including a title bar border drawing surface and a control area e.g. a status bar icon pallet or other user controls . These parts are typically rendered as a part of the graphical user interface so that the elements can be made visible to a user e.g. by way of a display device . Rendering refers to the adjustment of color values for pixels in a raster of pixels where the raster of pixels represents an image of the graphical user interface that is being or is about to be displayed to the user. The rendering of a user interface element is sometimes referred to as rasterizing painting drawing or compositing.

In general any user interface element or part thereof in the graphical user interface can be drawn semi transparently. When a user interface element is drawn semi transparently then whatever area of the graphical user interface that would be displayed under e.g. occluded by the user interface element appears at least partially through the user interface element. A background area refers to the part of the graphical user interface that is occluded by the user interface element. Generally the background area has the same shape as the user interface element and describes the visual appearance of the area that would be displayed if the user interface element did not appear in the graphical user interface at all.

The background represents the surface of the desktop. If a user interface element is rendered in the graphical user interface then the element must at least occlude part of the background . In some implementations the element may also occlude other parts of the user interface e.g. icons background windows or other visual components of the graphical user interface . For example the drawing surface of the menu bar is drawn semi transparently so that the part of the background occluded by the menu bar partly appears through the menu bar . A user interface element that is drawn semi transparently is not only aesthetically pleasing to most users but can advantageously make the element appear to hover above the desktop further emphasizing a sense of depth to the user.

In some implementations an opacity or alpha value is used to describe the degree to which a user interface element or part thereof is transparent or opaque. For example the drawing surface of the menu bar can be associated with the color white or in general some other color pattern or image but is also associated with a transparency value indicating for example that the drawing surface is 50 transparent. When the drawing surface associated with the color white is rendered a transparency effect can be applied. For example the color white associated with the drawing surface can be blended with the background area based on the specified 50 transparency. The opacity value of a user interface element is but one visual effect that affects the appearance of the user interface element in the graphical user interface. In other implementations other visual effects can be used to achieve semi transparency. For example to draw the drawing surface of the menu bar the background area can be blurred pixilated tinted or subjected to other optical effects. In some implementations several visual effects can be composed to produce a compound visual effect.

The visual appearance of a semi transparent user interface element can differ considerably depending on the color of whatever is behind the element. For example the menu bar drawn over the light background appears overall to be a particular shade of white. are screenshots of the same user interface elements displayed over a dark background . In the screenshot the menu bar is drawn over the dark background using the same opacity value as when the menu bar was drawn over the light background . In comparison the menu bar in the screenshot appears darker than in the screenshot . The seemingly inconsistent appearance of an otherwise static user interface element over varying backgrounds may be disconcerting to some users. Instead the visual effect of such element is adjusted based on visual characteristics e.g. brightness or darkness of the background area over which the element is presented. The background area can be sampled and analyzed to determine visual characteristics of the background area. For example pixels of the background area can be averaged together to determine an average color value. Alternatively gradient values can be determined that identify the extent to which color changes occur in the background area. This gradient value is sometimes considered a metric of complexity of the background area. Histograms can be derived that illustrate the frequency of particular color or color ranges. A system uses these values e.g. color averages gradient metrics or the shape of a histogram to adjust a visual effect of the user interface element. In the screenshot the same menu bar is drawn over the same dark background using an opacity value that has been adjusted based on the darkness of the background area of the menu bar. The appearance of the menu bar in particular the contrast between the text and the drawing surface of the menu bar is more consistent with that of the same menu bar drawn over the light background .

In general the visual effect of a semi transparent user interface element is varied based on the characteristics of the background area so that the appearance of the element is consistent no matter what background the element is rendered over. In the remaining discussion the menu bar is used as an example user interface element however in general the visual characteristics of any user interface element can be adjusted based on the visual characteristics of a background area. For example some or all of the user interface elements of the application can similarly be adjusted so as to appear consistent over a variety of backgrounds.

The second layer B is a gradient visual effect layer which is used to apply a visual effect that varies over a spatial feature e.g. height or width of the user interface element. The second layer is associated with a particular visual effect that further affects the colors of pixels covered by the user interface element. The visual effect can include color burning color dodging saturation adjustment hue adjustment brightness adjustment contrast adjustment or blurring. The extent to which the visual effect affects any particular pixel covered by the user interface element is determined by for example a gradient that varies across the surface e.g. height or width of the user interface element. For example the gradient associated with the second layer B specifies that the visual effect is maximized at a point and is minimized at a point . Thus a pixel at point is affected to a greater degree by the visual effect than a pixel at point .

The layer C is a border pixel that emphasizes the edge of the user interface element. The color of the border pixel is determined based on the visual characteristics of the background area. For example the color of a line of pixels that spans the bottom of the menu bar is selected based on the brightness of the background area. The color is selected to be brighter than the average color of the background area. Similarly the layer D is a border pixel emphasizing the top edge of the menu bar. In some implementations the color of the top edge of the menu bar is predetermined or selected based on color characteristics of the background area. In some implementations additional layers can be included each adding separate visual elements to the final appearance of the user interface element. These layers can further be associated with a specified transparency value that affects how the layers are blended together in the final appearance of the user interface element.

A fifth layer E is an information layer representing other user interface elements e.g. text symbols and icons of the user interface element. In general this layer is rendered last and is typically rendered opaquely so that the information being presented in the user interface element completely occludes the background area. The rendering of this layer as with the other layers can be subject to further processing for generating a desirable visual effect. For example text and icons can be rendered multiple times at multiple offsets and colors to produce an embossed or raised appearance or to generate a shadow or glow effect.

In some implementations a masked area can be defined. The masked area specifies an area of the user interface element that is not affected by any of the individual layers A E. The masked area can be associated with a masked visual representation that is used in lieu of the representation derived from the layers of the user interface element. The masked visual representation is drawn into the masked area when rendering the final appearance of the user interface element. The mask visual representation can correspond to a solid color a particular icon image or sprite. In some implementations the mask visual representation can be derived from several layers that can depend on a visual characteristic of the background. The specification of layers and the derivation of the visual representation can be effected in a fashion analogous to that of a user interface element. In other implementations a sprite specifying the appearance of the mask visual representation can include transparent or semi transparent areas e.g. per pixel alpha values . When such a sprite is rendered into the masked area at least part of the background can appear through the transparent or semitransparent areas specified in the sprite.

Each layer A E can in one implementation be composited in order by blending each respective layer with the background area. The rendering of layers yields a final appearance of the user interface element that appears consistently semi transparent over varying backgrounds. Note that each layer is shown as a separate and complete layer for illustration purposes. In some implementations the appearance of the user interface element is achieved without distinctly storing rendering or compositing separate layers. For example the same final appearance of the user interface element can be rendered given only a background color a visual effect border colors and the desired text and icons to present with the user interface element.

In general the curve can be described by one or more points e.g. points A B . The curve can be generated given the one or more points by interpolating between the points. In other implementations the points describe a Bezier curve. The points A B can be pre specified by an expert user or alternatively the points can be derived from a collection of empirical data samples as described in association with .

The system uses the samples to determine the value or set of values or function that can be used to derive a local value of the characteristic feature of the background area step . For example if the characteristic feature is brightness the color values of each of the sampled pixels can be for example averaged together to determine an average brightness for the background area. The system uses the value of the characteristic feature to determine an opacity value for the user interface element step . In some implementations a function or a curve such as the described in reference to is used to map the characteristic feature value to an opacity value. In other implementations multiple values that characteristic features of the background area can be used. For example a range of color values brightness saturation or complexity for separate areas e.g. individual pixels of the background area can be used to determine an opacity value. In still other implementations multiple characteristic feature values can be used. For example both the brightness and the complexity of the background area can be identified and used to determine an opacity value for the user interface element.

Optionally the system can use the value of the characteristic feature or the value of a spatial feature of the user interface element to determine the intensity of other visual effects e.g. color dodge that can affect the visual appearance of the user interface element step . For example a gradient effect using color dodge or color bum can be used to further effect the visual appearance of the user interface element.

The system renders the user interface element by blending the user interface element according to the determined opacity value step . In some implementations the blending and rendering of the user interface element or individual layers of the user interface element can be facilitated by a graphics sub system. The graphics sub system can include a combination of software modules and hardware components for rendering graphical primitives. These graphics sub systems are generally accessible through application programming interfaces API such as the Core Image API OpenGL or DirectX .

The example system includes a processing device a first data store a second data store a graphics device input devices output devices and a network device . A bus system such as a data bus and a motherboard can be used to establish and control data communication between the components and . Other example system architectures however can also be used.

The processing device can for example include one or more microprocessors. The first data store can for example include a random access memory storage device such as a dynamic random access memory or other types of computer readable medium memory devices. The second data store can for example include one or more hard drives a flash memory and or a read only memory or other types of computer readable medium memory devices.

The graphics device can for example include a video card a graphics accelerator card or a display adapter and is configured to generate and output images to a display device. In one implementation the graphics device can be realized in a dedicated hardware card connected to the bus system . In another implementation the graphics device can be realized in a graphics controller integrated into a chipset of the bus system . Other implementations can also be used.

Example input devices can include a keyboard a mouse a stylus a video camera etc. and example output devices can include a display device an audio device etc.

The network interface can for example include a wired or wireless network device operable to communicate data to and from a network . The network can include one or more local area networks LANs or a wide area network WAN such as the Internet.

In an implementation the system includes instructions defining an operating system stored in the first data store and or the second data store . Example operating systems can include the MAC OS X series operating system the WINDOWS based operating system or other operating systems. Upon execution of the operating system instructions access to various system objects is enabled. Example system objects include data files applications functions windows etc. To facilitate an intuitive user experience the system includes a graphical user interface that provides the user access to the various system objects and conveys information about the system to the user in an intuitive manner.

Upon execution the UI engine can cause the graphics device to generate a graphical user interface on an output device such as a display device. In one implementation the graphical user interface can include a multidimensional desktop and a multidimensional application environment . In an implementation the multidimensional desktop and the multidimensional application environment includes x y and z axis aspects e.g. a height width and depth aspect. The x y and z axis aspects may define a three dimensional environment e.g. a 3D or 2.5D environment that includes a z axis e.g. depth aspect.

In an implementation the multidimensional desktop can include icons an icon receptacle and stack items . The icons the icon receptacle and the stack items can be presented in the three dimensional environment as graphical objects having a depth aspect.

In an implementation the multidimensional application environment can include an application environment distributed along a depth aspect. For example a content frame e.g. an application window can be presented on a first surface and control elements e.g. toolbar commands can be presented on a second surface.

This written description sets forth the best mode of the invention and provides examples to describe the invention and to enable a person of ordinary skill in the art to make and use the invention. This written description does not limit the invention to the precise terms set forth. Thus while the invention has been described in detail with reference to the examples set forth above those of ordinary skill in the art may effect alterations modifications and variations to the examples without departing from the scope of the invention.

