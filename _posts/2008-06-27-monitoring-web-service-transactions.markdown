---

title: Monitoring web service transactions
abstract: Systems and methods for monitoring web service transactions include a monitoring server that is configured to monitor a web service transaction. The monitoring server allows a user to describe a sequence of web service requests that in combination define a web service transaction. The monitoring server sends out the web service requests in sequence to remote agents that are deployed in geographically diverse locations. The agents send the requests to the target web service and the results are provided back to the monitoring server. The monitoring server receives the results and then dynamically constructs the next request in the series based on the sequence of requests from the user and data from the response to a prior request. The dynamically constructed next request is then sent to remote agents for execution and the results are provided to the monitoring server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08892718&OS=08892718&RS=08892718
owner: NeuStar, Inc.
number: 08892718
owner_city: Sterling
owner_country: US
publication_date: 20080627
---
The present application claims priority to U.S. provisional patent application Ser. No. 60 946 931 filed Jun. 28 2007 which is incorporated herein by reference in its entirety.

The present invention is generally related to website monitoring and more specifically related to the monitoring of web service transactions.

In conventional web service monitoring it is difficult to test an online web service from a variety of remote locations on a regular interval. Typical solutions hard code a series of requests and related values for use in each step of the web service transaction. These conventional solutions are problematic and very labor intensive because they require manually updating the hard coded values each time the web service transaction is monitored. Data entry errors are introduced by operators that result in incorrect results that then require additional monitoring at high labor cost. Additionally the conventional solutions are unable to scale up to the necessary bandwidth required to monitor a web service transaction from remote locations on a regular interval. Therefore what is needed is a system and method that overcomes these significant problems found in the conventional systems as described above.

Accordingly described herein are systems and methods for monitoring web service transactions. A monitoring server is configured to monitor a web service transaction which is defined as a series of steps that include requests to one or more web services that can be hosted by one or more different servers such that each step can be discrete web service request. The monitoring server allows a user to describe a sequence of web service requests that in combination define a web service transaction. The monitoring server sends out the various web service requests in sequence to remote agents that are deployed in geographically diverse locations. The agents send the requests to the target web service and the results are provided back to the monitoring server. The monitoring server then dynamically constructs the next request in the series based on the sequence of requests from the user and data from the response to a prior request and sends the dynamically constructed next request to remote agents for execution. In this fashion a web service transaction can be monitored in a way that approximates the actual use of web services in the field. Other features and advantages of the present invention will become more readily apparent to those of ordinary skill in the art after reviewing the following detailed description and accompanying drawings.

Certain embodiments as disclosed herein provide systems and methods for monitoring of web service transactions. For example one method as disclosed herein allows for a monitor server to receive a sequence of web service requests from a user. The monitor server then causes each request to be sent to the particular web service and subsequent requests are dynamically constructed such that they may include information received by the monitor server in response to a prior web service request. The result of the processing of the sequence of web service requests allows the web service transaction to be automatically monitored without user involvement.

After reading this description it will become apparent to one skilled in the art how to implement the invention in various alternative embodiments and alternative applications. However although various embodiments of the present invention will be described herein it is understood that these embodiments are presented by way of example only and not limitation. As such this detailed description of various alternative embodiments should not be construed to limit the scope or breadth of the present invention as set forth in the appended claims.

Web services are becoming an industry standard mechanism of sharing data and they enable the linking together serial or parallel or both of applications hosted by one or more web servers. An example of a web service transaction can be illustrated by a simple car insurance application. An applicant fills out a request for insurance form at a particular car insurance website. The data collected in the insurance form is then encapsulated into a web service friendly format XML JSON etc . That data is then sent using REST or SOAP to the department of motor vehicles DMV web service for a record check. The response from the DMV comes back and is modified and then submitted to a state and or federal government crime web service to see if the applicant has a criminal history. The response from the crime web service comes back and is modified then submitted to a financial web service for a credit check. The aggregation of all of the responses from the various web services is then packaged and provided to the particular car insurance website that was offering the insurance product where the decision weather or not to approve the application can be made.

Another example of a web service transaction is a mashup. For example at a real estate website a user enters the zip code of the area in which he or she is interested in purchasing or renting a home. The zip code is then sent to a classifieds web service to determine what rental and for sale listings are available in that zip code. The data from the classifieds web service is then supplied to a mapping web service and the user is then presented with a map of apartments and or homes that are for rent or sale in the desired area code.

Web services allow machines to be interoperable regardless of architectural differences in software or hardware. A web service receives a request for information processes the request and returns the information requested typically in the form of extensible markup language XML data or similar languages used in the transmission of information across the internet. Types of web services include SOAP formerly an acronym for Simple Object Access Protocol although that definition for the acronym was dropped with SOAP version 1.2 representational state transfer REST hypertext transfer protocol hypertext markup language HTTP HTML and extensible markup language remote procedure call XML RPC .

SOAP is a standard maintained by the World Wide Web Consortium W3C . SOAP web services are defined by a web services description language WSDL file. This file contains the information needed to generate a properly formatted request and describes the format of the response. Setting up web services to monitor a SOAP web service requires a properly configured WSDL file. SOAP requests are typically sent using a POST HTTP request method.

REST does not have a standard that is maintained by the W3C. Accordingly the definition of the format for requests and replies are designed and implemented by the company person offering the web service. REST usage is very popular because of its simplicity and ease of implementation. REST requests are typically sent using a GET HTTP request method where all parameters are passed in the URL. However the response from the web service is typically XML JavaScript Object Notation JSON or something similar. POST can also be used as a request format for REST.

HTTP HTML TEXT is used for those web services that return strings of text or HTML rather than XML. This type of web service is similar to REST in that the format for the request and response is defined by the designer of the web service. One example of this is requesting information from a page that will do some sort of processing and returns a message indicating whether it was successful or not.

Hash message authentication code HMAC and message digest algorithm 5 MD5 are types of message authentication codes calculated using a cryptographic hash function in combination with a secret key. This is used in the context of web services to encode the request in such a way as to ensure its integrity and to distinguish one request from another. For example pieces of the web service request can be encoded using HMAC or MD5 algorithms. Other encoding techniques may also be used as will be understood by those skilled in the art.

In practice the SOA server employs the service oriented architecture to provide mash ups to consumers or for internal use for example to track sales information accounting information or the like. The various web services used by the SOA server may be hosted by a variety of web servers such as web server and web server as well as other web servers not shown . The SOA server has a need to monitor these various web servers including and to ensure that they are operating as needed. In one embodiment a mashup could also be correlated by a web browser alone without the need for a separate server doing the aggregation.

The monitoring server is configured to perform the monitoring of web service transactions. The monitoring server is configured to monitor a single web service for example a web service provided by web server . The monitoring server is also configured to monitor a plurality of web services that are intentionally used in sequence to achieve a desired result. Each of the plurality of web services may be hosted by a separate web server e.g. web server . Alternatively a single web server may also host more than one web service. Additionally the use of web services as part of a web service transaction can be sequential and may also be in parallel.

The monitoring server allows for a sequence of web service requests to be created and this sequence of requests is carried out by the various agents under the control of the monitoring server . The monitoring server is also configured to store data that is received in response to a request for example in data storage or as one or more variables in volatile memory. The response data can then be used by the monitoring server in subsequent requests. Advantageously this use of response data for subsequent requests approximates the fashion in which SOA servers such as SOA server actually employ web services that may be provided by web servers and .

The monitoring server is also configured to validate the data that is received in response to the various requests that are processed in order to determine the status of the various web servers and that are used in a sequence of web service requests that define a web service transaction.

The monitoring server provides the ability to assign values from a response at any given step to a variable and reuse the data stored in that variable in any subsequent requests. This ability allows the monitoring server to do an nth match for anything in the page. For example is a dialog box illustrating an example interface for defining a variable according to an embodiment of the present invention. As shown the variable being defined is named TITLE and the variable is to be assigned the contents between the Title and and 

To assign the value 123456789 to a variable called ITEM the word ITEM is entered into the variable name field the value item . 

The alert module is configured to provide an alert of some sort e.g. email text message phone call in response to a certain event. For example timeout errors connectivity errors and content errors may each cause an alert. Advantageously if a web service provides XML responses alerts e.g. diagnostic emails include both header information and content. In one embodiment the diagnostic email is sent with one file attached that includes the header information and a second file attached that includes the XML content so that when a user opens an XML attachment it will render properly in the browser otherwise the browser will try to interpret it as html and only display the contents of the tags and not the tags themselves.

The graph module is configured to provide illustrative information regarding the status of individual web services and web service transactions that are being monitored. Graphs for individual web services and web service transactions include 1 load time graphs response time by period transaction step averages transaction steps over time 2 city graphs response time city by city average response time city by city scatter uptime average response time all cities 3 error graphs errors by type errors by time and 4 performance trending graphs uptime table transfer rate performance variation worst hour worst day . Other graphs can also be included.

The transaction module allows a user to configure a web service transaction that includes a plurality of requests. The transaction module allows a user to define variables that will store data that can be used in subsequent requests. The data in a variable can be predefined static data or it may be dynamically defined from prior response data or from data in a local file or database that may change over time.

Additionally for SOAP requests using the POST method the transaction module allows users to configure fields that include a service location where the web service is located b SOAPAction usually optional but some web services require it to be set in the header of the transaction c XML message the entire request that will be sent to the web service d verify keyword keyword we can use to verify a successful transaction and e error keyword keyword we can use to verify an unsuccessful transaction.

For SOAP requests using the GET method the transaction module allows users to configure fields that include a service location where the web service is located b parameter name value pair e.g. parameter name name of data to be passed parameter value value of data to be passed c complete request users can opt to use this option to set the URL with all of the data included in the URL d verify keyword keyword to verify a successful transaction and e error keyword keyword to verify an unsuccessful transaction.

For REST requests using the POST method the transaction module allows users to configure fields that include a service location where the web service is located b XML message the XML block that we will submit to the web service c verify keyword keyword to verify a successful transaction and d error keyword keyword to verify an unsuccessful transaction.

For REST requests using the GET method the transaction module allows users to configure fields that include a service location where the web service is located b parameter name value pair e.g. parameter name name of data to be passed parameter value value of data to be passed c complete request users can opt to use this option to set the URL with all of the data included in the URL d verify keyword keyword to verify a successful transaction and e error keyword keyword to verify an unsuccessful transaction.

For web service requests that return HTML or TEXT the transaction module allows users to configure fields that include a service location where the web service is located b parameter name value pair e.g. parameter name name of data to be passed parameter value value of data to be passed c complete request users can opt to use this instead of the parameter name value pair but will have to specify the entire URL d verify keyword keyword to verify a successful transaction and e error keyword keyword to verify an unsuccessful transaction.

Once a web service transaction has been set up for monitoring the transaction module is configured to execute the monitoring in an automatic fashion. This function may also be separated out in alternative embodiments to provide separation between live production monitoring and the creation and testing of monitoring sequences.

The test module is configured to allow manual or automated testing of a web service monitoring sequence to ensure the settings are correct before automated monitoring begins.

Next in step the first request in the web service transaction is sent to the provider of the web service. In one embodiment the request may be sent to the web service provider by a plurality of geographically diverse agents operating under the control of the monitoring server. Next in step the response is received from the web service provider. If the data from the response is to be transformed i.e. used in a subsequent request as determined in step a subsequent request in the predetermined list is then modified with the prior response data. The modified request is then sent as shown in step . In one embodiment the modified request may be the next request that is sent as part of the overall web service transaction or it may be a subsequent request that is sent two or more requests later. If the data is not to be transformed the monitoring server then sends the next request as shown in step . The process continues until the sequence of web service requests that comprise the web service transaction is exhausted. The transformation process can modify data used in the most recent response remove data add predefined static data or add dynamic variables e.g. date time and random numbers just to name a few types of dynamic data.

The computer system preferably includes one or more processors such as processor . Additional processors may be provided such as an auxiliary processor to manage input output an auxiliary processor to perform floating point mathematical operations a special purpose microprocessor having an architecture suitable for fast execution of signal processing algorithms e.g. digital signal processor a slave processor subordinate to the main processing system e.g. back end processor an additional microprocessor or controller for dual or multiple processor systems or a coprocessor. Such auxiliary processors may be discrete processors or may be integrated with the processor .

The processor is preferably connected to a communication bus . The communication bus may include a data channel for facilitating information transfer between storage and other peripheral components of the computer system . The communication bus further may provide a set of signals used for communication with the processor including a data bus address bus and control bus not shown . The communication bus may comprise any standard or non standard bus architecture such as for example bus architectures compliant with industry standard architecture ISA extended industry standard architecture EISA Micro Channel Architecture MCA peripheral component interconnect PCI local bus or standards promulgated by the Institute of Electrical and Electronics Engineers IEEE including IEEE 488 general purpose interface bus GPIB IEEE 696 S 100 and the like.

Computer system preferably includes a main memory and may also include a secondary memory . The main memory provides storage of instructions and data for programs executing on the processor . The main memory is typically semiconductor based memory such as dynamic random access memory DRAM and or static random access memory SRAM . Other semiconductor based memory types include for example synchronous dynamic random access memory SDRAM Rambus dynamic random access memory RDRAM ferroelectric random access memory FRAM and the like including read only memory ROM .

The secondary memory may optionally include a hard disk drive and or a removable storage drive for example a floppy disk drive a magnetic tape drive a compact disc CD drive a digital versatile disc DVD drive etc. The removable storage drive reads from and or writes to a removable storage medium in a well known manner. Removable storage medium may be for example a floppy disk magnetic tape CD DVD etc.

The removable storage medium is preferably a computer readable medium having stored thereon computer executable code i.e. software and or data. The computer software or data stored on the removable storage medium is read into the computer system as electrical communication signals .

In alternative embodiments secondary memory may include other similar means for allowing computer programs or other data or instructions to be loaded into the computer system . Such means may include for example an external storage medium and an interface . Examples of external storage medium may include an external hard disk drive or an external optical drive or and external magneto optical drive.

Other examples of secondary memory may include semiconductor based memory such as programmable read only memory PROM erasable programmable read only memory EPROM electrically erasable read only memory EEPROM or flash memory block oriented memory similar to EEPROM . Also included are any other removable storage units and interfaces which allow software and data to be transferred from the removable storage unit to the computer system .

Computer system may also include a communication interface . The communication interface allows software and data to be transferred between computer system and external devices e.g. printers networks or information sources. For example computer software or executable code may be transferred to computer system from a network server via communication interface . Examples of communication interface include a modem a network interface card NIC a communications port a PCMCIA slot and card an infrared interface and an IEEE 1394 fire wire just to name a few.

Communication interface preferably implements industry promulgated protocol standards such as Ethernet IEEE 802 standards Fiber Channel digital subscriber line DSL asynchronous digital subscriber line ADSL frame relay asynchronous transfer mode ATM integrated digital services network ISDN personal communications services PCS transmission control protocol Internet protocol TCP IP serial line Internet protocol point to point protocol SLIP PPP and so on but may also implement customized or non standard interface protocols as well.

Software and data transferred via communication interface are generally in the form of electrical communication signals . These signals are preferably provided to communication interface via a communication channel . Communication channel carries signals and can be implemented using a variety of wired or wireless communication means including wire or cable fiber optics conventional phone line cellular phone link wireless data communication link radio frequency RF link or infrared link just to name a few.

Computer executable code i.e. computer programs or software is stored in the main memory and or the secondary memory . Computer programs can also be received via communication interface and stored in the main memory and or the secondary memory . Such computer programs when executed enable the computer system to perform the various functions of the present invention as previously described.

In this description the term computer readable medium is used to refer to any non transitory media used to provide computer executable code e.g. software and computer programs to the computer system . Examples of these media include main memory secondary memory including hard disk drive removable storage medium and external storage medium and any peripheral device communicatively coupled with communication interface including a network information server or other network device . These computer readable mediums are means for providing executable code programming instructions and software to the computer system .

In an embodiment that is implemented using software the software may be stored on a computer readable medium and loaded into computer system by way of removable storage drive interface or communication interface . In such an embodiment the software is loaded into the computer system in the form of electrical communication signals . The software when executed by the processor preferably causes the processor to perform the inventive features and functions previously described herein.

Various embodiments may also be implemented primarily in hardware using for example components such as application specific integrated circuits ASICs or field programmable gate arrays FPGAs . Implementation of a hardware state machine capable of performing the functions described herein will also be apparent to those skilled in the relevant art. Various embodiments may also be implemented using a combination of both hardware and software.

Furthermore those of skill in the art will appreciate that the various illustrative logical blocks modules circuits and method steps described in connection with the above described figures and the embodiments disclosed herein can often be implemented as electronic hardware computer software or combinations of both. To clearly illustrate this interchangeability of hardware and software various illustrative components blocks modules circuits and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled persons can implement the described functionality in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the scope of the invention. In addition the grouping of functions within a module block circuit or step is for ease of description. Specific functions or steps can be moved from one module block or circuit to another without departing from the invention.

Moreover the various illustrative logical blocks modules and methods described in connection with the embodiments disclosed herein can be implemented or performed with a general purpose processor a digital signal processor DSP an ASIC FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor can be a microprocessor but in the alternative the processor can be any processor controller microcontroller or state machine. A processor can also be implemented as a combination of computing devices for example a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration.

Additionally the steps of a method or algorithm described in connection with the embodiments disclosed herein can be embodied directly in hardware in a software module executed by a processor or in a combination of the two. A software module can reside in RAM memory flash memory ROM memory EPROM memory EEPROM memory registers hard disk a removable disk a CD ROM or any other form of storage medium including a network storage medium. An exemplary storage medium can be coupled to the processor such the processor can read information from and write information to the storage medium. In the alternative the storage medium can be integral to the processor. The processor and the storage medium can also reside in an ASIC.

The above description of the disclosed embodiments is provided to enable any person skilled in the art to make or use the invention. Various modifications to these embodiments will be readily apparent to those skilled in the art and the generic principles described herein can be applied to other embodiments without departing from the spirit or scope of the invention. Thus it is to be understood that the description and drawings presented herein represent a presently preferred embodiment of the invention and are therefore representative of the subject matter which is broadly contemplated by the present invention. It is further understood that the scope of the present invention fully encompasses other embodiments that may become obvious to those skilled in the art and that the scope of the present invention is accordingly not limited.

