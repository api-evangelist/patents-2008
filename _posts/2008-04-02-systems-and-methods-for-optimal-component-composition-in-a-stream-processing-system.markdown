---

title: Systems and methods for optimal component composition in a stream processing system
abstract: A system and method are provided for optimizing component composition in a distributed stream-processing environment having a plurality of nodes capable of being associated with one or more of a plurality of stream processing components. The system includes an adaptive composition probing (ACP) module and a hierarchical state manager. The ACP module probes a subset of the plurality of stream processing components to determine the optimal component composition in response to a stream processing request. The hierarchical state manager manages local and global information for use by said ACP module in determining the optimal component composition.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08286153&OS=08286153&RS=08286153
owner: International Business Machines Corporation
number: 08286153
owner_city: Armonk
owner_country: US
publication_date: 20080402
---
This application is a continuation of U.S. application Ser. No. 11 068 785 filed on Mar. 1 2005 now U.S. Pat. No. 7 562 355 which is incorporated by reference herein in its entirety.

This invention was made with Government support under Contract No. TIA H98230 04 3 0001 awarded by the U.S. Dept. of Defense. The Government has certain rights in this invention.

The description generally relates to stream processing and more particularly to systems and methods for optimal component composition in a stream processing system.

Emerging applications such as trade surveillance for security fraud network traffic monitoring for intrusion detection sensor data analysis audio video surveillance and value added voice over IP services call for sophisticated real time processing on data streams. In these applications data streams are continuously pushed to stream processing servers where they are processed by self contained stream processing elements called components . Each component provides an atomic stream processing function such as filtering aggregation and correlation. Since stream applications are inherently distributed stream processing should operate in a distributed fashion. Moreover distributed stream processing systems provide better scalability and availability for resource intensive and quality sensitive stream processing applications. Thus a challenging problem is to optimally compose distributed stream processing components into dynamically required stream processing applications.

Component composition has been studied under different contexts such as service composition and systems software composition. The work on service composition is described e.g. in the following articles all of which are included by reference herein in their entireties Raman et al. Load Balancing and Stability Issues in Algorithms for Service Composition Proc. of IEEE INFOCOM 2003 San Francisco Calif. pp. 1477 1487 April 2003 Gu et al. QoS Assured Service Composition in Managed Service Overlay Networks Proc. of IEEE 23rd International Conference on Distributed Computing Systems ICDCS 2003 Providence R.I. 194 201 May 2003 and Gu et al. SpiderNet An Integrated Peer to Peer Service Composition Framework Proc. of IEEE International Symposium on High Performance Distributed Computing HPDC 2004 Honolulu Hi. 110 119 June 2004. The work on systems software composition is described e.g. in the following article which is included by reference herein in its entirety Kohler et al. The Click Modular Router ACM Transactions on Computer Systems 18 3 pp. 263 297 August 2000. Disadvantageously the previous work falls short in addressing the optimization requirements in component composition which is especially important for stream processing systems.

Previous work on stream processing has addressed problems such as load shedding and load migration. Load shedding is described e.g. in the following article which is incorporated by reference herein in its entirety Tatbul et al. Load Shedding in a Data Stream Manager Proc. of the 29International Conference on Very Large Data Bases VLDB 03 Berlin Germany 309 320 September 2003. Further load migration is described e.g. in the following article which is incorporated by reference herein in its entirety Balazinska et al. Contract based Load Management in Federated Distributed Systems Proc. of 1Symposium on Networked Systems Design and Implementation NSDI San Francisco Calif. 197 210 March 2004. Disadvantageously the previous work does not address the optimal component composition problem.

Given the current state of the prior art it would be beneficial and highly advantageous to have a system and method for optimal component composition in distributed stream processing environments.

The present invention is directed to systems and methods for optimal component composition in distributed stream processing environment.

According to an aspect of the present invention there is provided a system for optimizing component composition in a distributed stream processing environment having a plurality of nodes capable of being associated with one or more of a plurality of stream processing components. The system includes an adaptive composition probing ACP module and a hierarchical state manager. The ACP module probes a subset of the plurality of stream processing components to determine the optimal component composition in response to a stream processing request. The hierarchical state manager manages local and global information for use by said ACP module in determining the optimal component composition.

According to another aspect of the present invention there is provided a method for optimizing component composition in a distributed stream processing environment having a plurality of nodes capable of being associated with one or more of a plurality of stream processing components. An adaptive composition probing ACP is performed which probes a subset of the plurality of stream processing components to determine the optimal component composition in response to a stream processing request. Local and global information are managed for use by the performing step in determining the optimal component composition.

According to yet another aspect of the present invention there is provided a program storage device readable by machine tangibly embodying a program of instructions executable by the machine to perform method steps for optimizing component composition in a distributed stream processing environment having a plurality of nodes capable of being associated with one or more of a plurality of stream processing components. An adaptive composition probing ACP is performed which probes a subset of the plurality of stream processing components to determine the optimal component composition in response to a stream processing request. Local and global information are managed for use by the performing step in determining the optimal component composition.

These and other objects features and advantages will become apparent from the following detailed description of illustrative embodiments thereof which is to be read in connection with the accompanying drawings.

The present invention is directed to a system and method for optimal component composition in distributed stream processing environments.

In contrast to the prior art the present invention provides an adaptive and real time system and method that is capable of solving constrained optimization problem in component composition. Of course given the teachings of the present invention provided herein other applications therefore may also be employed with respect to the present invention while maintaining the scope of the present invention.

The present description illustrates the principles of the invention. It will thus be appreciated that those skilled in the art will be able to devise various arrangements that although not explicitly described or shown herein embody the principles of the invention and are included within its spirit and scope.

All examples and conditional language recited herein are intended for pedagogical purposes to aid the reader in understanding the principles of the invention and the concepts contributed by the inventor to furthering the art and are to be construed as being without limitation to such specifically recited examples and conditions.

Moreover all statements herein reciting principles aspects and embodiments of the invention as well as specific examples thereof are intended to encompass both structural and functional equivalents thereof. Additionally it is intended that such equivalents include both currently known equivalents as well as equivalents developed in the future i.e. any elements developed that perform the same function regardless of structure.

Thus for example it will be appreciated by those skilled in the art that the block diagrams presented herein represent conceptual views of illustrative circuitry embodying the principles of the invention. Similarly it will be appreciated that any flow charts flow diagrams state transition diagrams pseudocode and the like represent various processes which may be substantially represented in computer readable media and so executed by a computer or processor whether or not such computer or processor is explicitly shown.

The functions of the various elements shown in the figures may be provided through the use of dedicated hardware as well as hardware capable of executing software in association with appropriate software. When provided by a processor the functions may be provided by a single dedicated processor by a single shared processor or by a plurality of individual processors some of which may be shared. Moreover explicit use of the term processor or controller should not be construed to refer exclusively to hardware capable of executing software and may implicitly include without limitation digital signal processor DSP hardware read only memory ROM for storing software random access memory RAM and non volatile storage.

Other hardware conventional and or custom may also be included. Similarly any switches shown in the figures are conceptual only. Their function may be carried out through the operation of program logic through dedicated logic through the interaction of program control and dedicated logic or even manually the particular technique being selectable by the implementer as more specifically understood from the context.

In the claims hereof any element expressed as a means for performing a specified function is intended to encompass any way of performing that function including for example a a combination of circuit elements that performs that function or b software in any form including therefore firmware microcode or the like combined with appropriate circuitry for executing that software to perform the function. The invention as defined by such claims resides in the fact that the functionalities provided by the various recited means are combined and brought together in the manner which the claims call for. It is thus regarded that any means that can provide those functionalities are equivalent to those shown herein.

In various components stream processing elements are designated by the reference characters Cdisposed within a circle where i is an integer various functions of the various components are designated by the reference characters Fdisposed within a circle a data stream is designated by a solid thick line which is generally indicated by the reference numeral an overlay link is designated by a solid thin line i.e. thin with respect to the thicker line used to designated a data stream which is generally indicated by the reference numeral and functional dependencies are designated by a dashed line which is generally indicated by the reference numeral .

The distributed stream processing system includes a set of stream processing server nodes V each of which can be one or more computers and thus are hereinafter interchangeably referred to as computer node or server . For failure resilience distributed nodes are connected using application level overlay links e into an overlay mesh. Each node provides a few stream processing components c . . . C. Each component provides an atomic stream processing function F such as filtering aggregation correlation and audio video analysis. Due to the constraints of security software licenses and hardware requirements it is not presumed that each node can provide all stream processing components. The component composition process is to select and connect currently deployed components into user required stream processing applications. Components can be dynamically migrated among nodes. The component composition operates based on the current component placement.

Each component receives continuous data units e.g. data tuples audio samples video frames and so forth via input queues from its preceding components as illustrated in . Each component has well defined interfaces describing its input requirements e.g. data format stream rate and so forth and output properties. Each component is associated with a QoS vector q . . . q describing the QoS values of the component such as processing time and loss rate. The component can drop data units when it is overloaded as described by Tatbul et al. in Load Shedding in a Data Stream Manager Proc. of the 29International Conference on Very Large Data Bases VLDB 03 Berlin Germany pp. 309 320 September 2003. Moreover each component is associated with a resource availability vector ra . . . ra describing the current available resources e.g. CPU memory and so forth on the node providing c. Similarly a QoS vector q . . . q and bandwidth availability baare also associated with each overlay link e .

Distributed components can be dynamically composed into composite stream processing services. Generally composition topology can be a directed acyclic graph DAG as illustrated in . A component graph may be used to represent a composed stream processing application. Although the input queue can accommodate transient stream rate mismatch the input output rates of two adjacent components must be compatible to provide continuous processing of long lived data streams. Such a compatibility check is based on the interface specifications of the components. The input output rates of the components are controlled by resource allocation policies. The QoS of a composed stream processing application is the QoS aggregation among its constituent components and overlay links. Herein it is presumed that QoS metrics are additive and minimum optimal. Non additive metrics e.g. loss rate and so forth can be made additive and minimum optimal using logarithm and inverse transformations. The connection between two adjacent components is called a virtual link l which includes a set of overlay links. The QoS of the virtual link q . . . qis the QoS aggregation among its constituent overlay links and its bandwidth availability bais the bottleneck bandwidth among the overlay links. If two adjacent components are co located on the same machine the virtual link is considered to have 0 network delay and bandwidth availability.

The problem of optimal component composition is to map a function graph into a component graph in the distributed stream processing system based on resource and QoS constraints and an optimization objective function. The function graph illustrated represents the stream processing function requirements of a user. Each node in the function graph denotes an atomic stream processing function such as aggregation filtering and correlation. Each function node can be mapped to multiple candidate components on different processing nodes. The optimal component composition has two principle goals. First the composed stream processing application should satisfy the function QoS and resource requirements the latter also referred to as resource needs of the user. Second the stream processing application should be instantiated on least loaded nodes and virtual links for balanced load distribution. The residual end system resources on the node providing care defined using rr . . . rr . The residual bandwidth on the virtual link lis defined using rb. The residual resources are the remaining resources after the required resources are subtracted from current available resources on the corresponding nodes and virtual links. Residual resources are used instead of currently available resources for accommodating component co locations as further described herein. The required end system resources for the component care defined using R r . . . r . The bandwidth requirement for the virtual link lis denoted by ba. The stream processing function provided by the component cis denoted by c.f.

Thus the optimal component composition problem can be formally defined as follows Given a distributed stream processing system G V E where V denotes the set of V stream processing nodes v and E denotes the set of E overlay links e . Given a stream processing request denotes the set of C stream processing components c and L denotes the set of L inter component virtual links l such that

Generally speaking the optimal component composition problem is a multi constrained optimization problem which optimizes a global system metric subject to a set of constraints. Herein the optimization goal is to minimize the congestion aggregation metric defined by Equation 1 for balanced load distribution. The smaller the congestion aggregation metric is the better load distribution the composition presents since the stream processing application on the nodes and virtual links are instantiated with larger residual resources. The constraints include the function of the user and QOS and resource constraints for the composed stream processing application. Equation 2 defines that the component graph should provide all stream processing functions specified in the function graph . Equation 3 specifies that the QoS of the composed stream processing application q . . . q processing time loss rate should satisfy the user QoS requirements q . . . q . Equation 4 and Equation 5 specify that user required system resources and bandwidth resource should be satisfied i.e. residual resources should not be negatives .

A general description of the present invention will now be provided following by more detailed descriptions of various aspects thereof.

Herein an optimal component composition system and method are provided that use adaptive composition probing ACP . ACP can efficiently discover a set of good candidate component compositions among which the best composition is selected. ACP addresses two key decision making problems 1 how many candidate components to probe and 2 which candidate components to probe. To accommodate dynamic stream processing systems ACP adaptively adjusts the probed component number to maintain target composition performance with minimal probing overhead. For scalability ACP selects good candidate components to probe under the guidance of a coarse grain global state.

The user can specify the stream processing request in terms of 1 function requirements described by a function graph 2 QoS requirements Q and 3 resource requirements R . The function graph illustrated in defines a stream processing application template which can be provided by the application developer. The function graph includes a set of function nodes F connected by dependency links . In contrast to conventional request response middleware interface stream processing middleware provides the following three session oriented interfaces.

The first interface namely Session ID Find Q R invokes the optimal component composition algorithm to find the best component graph . If the composition is successful then the middleware creates a session record with a session identifier sessionId for the user request. Otherwise a null sessionId is returned to indicate composition failure.

The second interface namely Process sessionId data streams starts the continuous data stream processing using the composed component graph. The middleware can map the session identifier to the component graph composed by the previous step.

The third interface namely Close sessionId tears down the stream processing session when the application finishes its task. The corresponding session information is deleted from the session table.

The basic idea of the ACP approach is to use a number of probing messages called probes to dynamically discover a set of good candidate compositions among which the best composition is selected. The probing process concurrently examines different compositions and collects precise state information from good candidate components. For scalability ACP avoids brute force exhaustive probing by performing adaptive selective probing. ACP addresses two key decision making problems in composition probing 1 how many candidate components should be probed and 2 which candidate components should be probe.

Intuitively the more candidate components that are probed the better component composition can be discovered. However the probing overhead also becomes larger when more candidate components are probed. A probing ratio 0 1 is introduced to define the percentage of the candidate components probed for each function. For example if there are ten candidate components for the function Fand the probing ratio 0.3 then 0.3 10 3 candidate components can be probed. ACP adaptively adjusts the probing ratio based on the target composition performance and current system conditions which are described further herein.

Next it is to be decided which candidate components to probe for maximizing the probability of finding the best composition. A hierarchical state management scheme is described herein to assist ACP in optimal component composition. The hierarchical state management maintains precise local state at each node and a coarse grain global state which is described further herein. Hence ACP can select good components to probe under the guidance of the coarse grain global state and select optimal component composition based on precise states collected by the probes. The candidate component selection is described further herein.

When a stream processing request is submitted the request is redirected to a node that is closest to the client based on a predefined proximity metric e.g. geographical location and so forth . The selected node called the deputy node see initiates the ACP protocol to discover the optimal component composition. is a diagram illustrating pseudo code for the ACP protocol. Four steps are shown in . Each of these steps will now be described.

Regarding step initialization in given the component composition request the deputy node first selects a proper probing ratio for the request which is further described herein below. The probing ratio decides the number of candidate components that are to be probed for each required function. Next the deputy node creates a probing message P that carries the composition request information e.g. the function graph QoS constraints Qresource constraints R and so forth and the probing ratio . The ACP protocol then enters the next step distributed hop by hop probe processing. The probes will visit a number of selected candidate components to collect precise QoS resource states.

Regarding step per hop probe processing in when a node vreceives a probe P the node processes the probe independently based on the information carried by the probe the local state and the coarse grain global state it is to be noted that this step also applies to the deputy node . First vchecks whether or not the QoS resource values of the probed partial stream processing application already violate the required QoS resource values. If the QoS resource values are already unqualified then the probe is dropped immediately to reduce the probing overhead. Otherwise the node performs transient resource allocation to avoid conflicting resource admission caused by concurrent probings for different requests. To avoid redundant resource allocation each node only temporarily reserves resources once for each component in each request. The transient resource allocation will be cancelled after a timeout period if the node does not receive a confirmation message. Second vderives the next hop functions using the function graph . The functions dependent on the current function are the next hop functions. Third vacquires the locations of all available candidate components for each next hop function using a decentralized service discovery system. For a description of a decentralized service discovery system see Gu et al. SpiderNet An Integrated Peer to Peer Service Composition Framework Proc. of IEEE International Symposium on High Performance Distributed Computing HPDC 2004 Honolulu Hi. 110 119 June 2004. Fourth vselects a number of good candidate components to probe based on the probing ratio and the global state. The candidate component selection is further described herein below. Fifth v spawns new probes from Pfor all selected next hop candidate components. Each new probe collects fine grain local states from vand inherits the states collected by its parent probe. Finally vsends all new probes to the selected next hop components.

Regarding step optimal composition selection in all the probes belonging to a composition request will return to the initial deputy node . First if the function graph is a DAG then the deputy node derives complete component graphs by merging the probed component paths. For example in which is a diagram illustrating an adaptive composition probing a probe can traverse c c c cor c c c c. These two component paths can be merged into a complete component graph. Second the deputy node calculates the residual resources and accumulated QoS values for the candidate component graphs based on the precise state information collected by the probes. Third the deputy node selects qualified component compositions according to the constraints specified by Equations 2 5. Fourth the deputy node selects the optimal component composition from all the qualified ones according to the congestion aggregation metric defined by Equation 1. For example in which is a diagram illustrating a congestion aggregation calculation the residual resource aggregation for the candidate component composition is calculated as 

The qualified composition with the smallest value is the optimal component composition. If two components are located on the same node e.g. cand c then the residual bandwidth is set since the virtual link between two co located components do not consume any network bandwidth.

Regarding step application session setup the deputy node finally establishes the stream processing application session by sending confirmation messages along the selected component composition. The confirmation message makes transient resource allocation permanent on the selected nodes and virtual links. If no qualified component composition can be found then the deputy node returns a failure message.

The hierarchical state management includes fine grain local state update and coarse grain global state maintenance. The local state of a node includes the QoS resource states of its neighbor nodes in the overlay mesh and its adjacent overlay links. Each node keeps its local state with high precision using frequent proactive measurement at short time intervals e.g. 10 seconds of course other time intervals may be used . For scalability the precise local state is not disseminated to other nodes.

The global state includes 1 the QOS and resource states of all nodes and 2 the QoS and resource states of all virtual links between all pairs of nodes. Since each node can provide multiple stream processing components the QoS states of each node includes the QoS states of all the stream processing components it provides. For scalability the global state update is performed at a coarse grain level. The global state update is triggered only when the QoS and resource state changes on a node or an overlay link exceeds a pre specified e.g. large threshold. Thus many insignificant state variations are filtered out to reduce the global state maintenance overhead. For example a node updates its available memory state in the global state only when the available memory variation is larger than 100 KB or some other pre specified amount. Similarly a node updates the available bandwidth of its adjacent overlay link in the global state only when the available bandwidth variation is more than 200 kbps or some other pre specified amount. It is to be appreciated that the preceding parameters are merely illustrative and thus other values may be used for available memory variation and available bandwidth variation while maintaining the scope of the present invention.

One complication in the global state update is that each virtual link is an overlay path that includes several overlay links. Thus the virtual link state update requires further aggregation from the states of its constituent overlay links. For example it is desired to update the available bandwidth of a virtual link l in the global state which is mapped to an overlay path l 

The distributed hash table DHT system is used to store the global state for scalability and failure resilience. Thus the global state storage load and query computation load can be distributed among all nodes. The global state hash table records the coarse grain QoS resource states of all nodes and virtual links in the form of and . If a node wants to acquire the coarse grain QoS resource states about a specific node or a virtual link then the node can query the global state hash table using the node identifier or link identifier. The DHT system can evenly partition the global state hash table and distribute hash table entries among all nodes.

The approach for deciding the number of probes used for each request will now be described. The concept of probing ratio will now be defined. If a function Fhas kcandidate components and the probing ratio is then ACP will use k probes to examine k candidate components for the function F. Intuitively the larger the probing ratio is the better composition performance the ACP can achieve since more candidate compositions are examined. However larger probing ratio also means larger probing overhead since more probes are generated. Thus the probing ratio represents a tuning knob to control the trade off between composition performance and probing overhead. Composition success rate t is used to characterize the composition performance of the system at sampling time t . The composition success rate is calculated as follows 

Ideally ACP should always use the minimal probing ratio t for achieving a target composition success rate t under different system conditions e.g. workload QoS resource requirements . For example are plots and illustrating composition performance i.e. success rate as a function of probing ratio under increasing workload and higher QoS requirements. The number of requests submitted per minute is denoted using the request rate. A higher request rate represents larger workload. For example in if it desired to achieve t 95 composition success rate when the request rate is 50 requests per minute then the ACP should set the probing ratio t 0.3. However the challenge of probing ratio tuning is that the mapping from probing ratio to success rate is non linear and dynamic. The mapping function can be affected by different system conditions e.g. request rate QoS resource requirements in a dynamic distributed stream processing system. For example illustrates the mapping functions from probing ratio to composition success rate under different request rates. illustrates the composition success rate as a function of the probing ratio under different QoS requirements. Higher QoS means shorter processing time and lower loss rate requirements.

To address the problem ACP performs on line profiling to dynamically derive the current mapping function from probing ratio to composition success rate. Based on the profiling results ACP can predict the minimal probing ratio t given a target success rate t . It is presumed that the target success rate is achievable. ACP stops increasing the probing ratio if the probing overhead already reaches its limit. The on line profiling is triggered when the prediction error exceeds a certain threshold e.g. 2 which means that the system conditions have changed. For example if the target success rate is t then ACP predicts the minimal probing ratio t based on the current profiling results. At the end of this sampling period ACP gets the measured success rate t . If t t then profiling is triggered to derive the new mapping function from the probing ratio to the composition success rate.

Since ACP is highly efficient the success rate increases very quickly and reaches the saturation value i.e. the highest achievable success rate at a small probing ratio illustrated by . Thus the probing ratio tuning space is very limited which makes probing ratio profiling a simple task. The profiling process starts from the base probing ratio e.g. 0.1 and gradually increases the probing ratio at a certain step e.g. 0.1 until the success rate hits the saturation value. To guarantee high prediction accuracy profiling should use a realistic workload that is representative of the current system conditions e.g. request rate QoS requirements resource requirements application templates and so forth . Such a workload can be the trace replay of actual workloads in the last sampling period.

After the deputy node decides the probing ratio the deputy node executes the ACP protocol to send out composition probes. When a node vreceives a probe the node vneeds to decide which next hop candidate components to examine under the probing ratio constraint. For example if the next hop function Fhas kcandidate components and the probing ratio is then the node vis allowed to probe k candidate components for F. Under the guidance of the coarse grain global state vselects the M best candidate components as described in the following three steps.

In the first step vqueries the global state to retrieve the coarse grain QoS resource states of all candidate components c . . . cand virtual links l . . . lto the candidate components. The QoS states of the candidate component cand the virtual link lare described by q . . . q respectively. The resource states of the candidate component cinclude current resource availabilities ra . . . ra . The resource states of the virtual link linclude its current available bandwidth ba. On the other hand vacquires the resource QoS requirement information from the received probe. The end system resource requirements of the application are denoted using r . . . r and the bandwidth requirement of the user is denoted using b. The residual resources of care calculated as rr ra r and the residual bandwidth of lis calculated as rb ba b.

In the second step vfilters out unqualified candidate components by checking the input output stream rate compatibility between the current hop component and candidate next hop components. Then vfurther removes unqualified candidate components according to the QoS resource requirements of the user and the state information retrieved from the global state. The user s QoS requirements for the composed stream processing application are denoted using q . . . q . It is presumed that the S accumulated QOS values of the probed partial component composition are q . . . q. A candidate component cis unqualified if any of the following inequalities is true q1 6 1 7 

Equation 6 means that the user s QoS constraints cannot be satisfied. Equation 7 means that the candidate component ccannot meet the end system resource requirements. Equation 8 means the virtual link to ccannot meet the bandwidth requirement.

In the third step vfurther selects good candidate components from the above derived qualified components. It is presumed that vfinds Z qualified candidate components. If Z M then vcan probe all the qualified candidate components satisfying the probing ratio constraint. Otherwise vneeds to select M best qualified components from Z qualified ones. The virtual link from the current component to cis denoted using l. To meet the multi constrained QoS requirements q . . . q a risk function D c is defined for a candidate component cas follows 

The component with smaller W c values is a better candidate to probe since it is less loaded. The candidate component selection approach described above essentially ensures that probes traverse along good candidate compositions. The fine grain QoS resource states collected by the probes will be used to select the best component composition. Thus ACP can most efficiently find the optimal component composition although ACP only examines a subset of all candidate compositions.

These and other features and advantages of the invention may be readily ascertained by one of ordinary skill in the pertinent art based on the teachings herein. It is to be understood that the teachings of the invention may be implemented in various forms of hardware software firmware special purpose processors or combinations thereof.

Most preferably the teachings of the present invention are implemented as a combination of hardware and software. Moreover the software is preferably implemented as an application program tangibly embodied on a program storage unit. The application program may be uploaded to and executed by a machine comprising any suitable architecture. Preferably the machine is implemented on a computer platform having hardware such as one or more central processing units CPU a random access memory RAM and input output I O interfaces. The computer platform may also include an operating system and microinstruction code. The various processes and functions described herein may be either part of the microinstruction code or part of the application program or any combination thereof which may be executed by a CPU. In addition various other peripheral units may be connected to the computer platform such as an additional data storage unit and a printing unit.

It is to be further understood that because some of the constituent system components and methods depicted in the accompanying drawings are preferably implemented in software the actual connections between the system components or the process function blocks may differ depending upon the manner in which the present invention is programmed. Given the teachings herein one of ordinary skill in the pertinent art will be able to contemplate these and similar implementations or configurations of the present invention.

Although the illustrative embodiments have been described herein with reference to the accompanying drawings it is to be understood that the invention is not limited to those precise embodiments and that various changes and modifications may be effected therein by one of ordinary skill in the pertinent art without departing from the scope or spirit of the invention. All such changes and modifications are intended to be included within the scope of the invention as set forth in the appended claims.

