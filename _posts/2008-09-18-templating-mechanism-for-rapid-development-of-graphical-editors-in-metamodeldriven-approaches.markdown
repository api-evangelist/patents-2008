---

title: Templating mechanism for rapid development of graphical editors in metamodel-driven approaches
abstract: The subject matter described herein relates to a templating system and method. In the templating system and method, each of the domain model and the graphic model are defined according to a template, and the corresponding elements of the domain model and graphic model are created. Next, a binder is created, which associates corresponding attributes in domain and graphic models. Path expressions such as XPath expressions, are used to describe locations in the domain and graphic models. These path expressions, templates, and binders are interpreted or called by a framework, which performs detailed synchronization.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08707247&OS=08707247&RS=08707247
owner: SAP AG
number: 08707247
owner_city: Walldorf
owner_country: DE
publication_date: 20080918
---
This disclosure relates generally to model driven software development and more particularly to templating mechanisms for rapid development of graphical editors for business process modeling.

Software programming tools sometimes use graphical modeling tools that employ a set of graphical notation techniques to create abstract models of software systems. One such modeling tool the Unified Modeling Language JML is a graphical language for visualizing specifying and documenting artifacts of the software. Business processing software such as the Business Process Execution Language BPEL which is a language for specifying business process behavior based on Web Services use a metamodel to define artifacts such as a combination of graphics and data of a domain model.

One approach used by graphical modeling tools is to describe the graphics by a graphic model and the artifact itself by a domain model. Building a suitable graphical editor requires programming a binding or synchronization between the domain model and the graphic model. In conventional software systems executing the functionality thereby demands executing on many events as well as navigation between the models via the binding code. Such an implementation is cumbersome and slow.

In a specific example the Graphical Modeling Framework GMF from the Eclipse open source community uses a combination of a declarative mapping model to define the binding and a generative approach to execute it afterwards. In other words the binding is defined in a mapping model and code is generated that invokes a GMF runtime. Thus the GMF implementation is static and not extensible since graphics themselves are not modeled.

The subject matter disclosed herein provides methods and apparatus including computer program products for a templating mechanism for rapid development of graphical editors in a metamodel driven approach.

In one aspect a system for generating a model based application is presented. In one implementation a system includes a graphical editor for graphically modeling the application and a template for a model of the application the template created by a templating mechanism and defining a domain model and a graphic model of the application. The system further includes one or more binders created by the templating mechanism. Each binder associates domain model elements with graphic model elements. The system further includes a synchronization framework configured to synchronize the domain model with the graphic model by calling and interpreting the template and one or more binders based on modeling commands received and processed by the graphical editor.

In another aspect a method of generating a model based application is presented. In one implementation a method includes the steps of generating a template for a domain model of the application generating a template for a graphic model of the application and defining a path between corresponding elements in the domain model and graphic model. The method further includes the steps of generating a binder for each corresponding element defined by the path and interpreting each template and binder to synchronize the domain model and the graphic model.

Articles are also described that comprise a tangibly embodied machine readable medium embodying instructions that when performed cause one or more machines e.g. computers etc. to result in operations described herein. Similarly computer systems are also described that may include a processor and a memory coupled to the processor. The memory may include one or more programs that cause the processor to perform one or more of the operations described herein.

The details of one or more variations of the subject matter described herein are set forth in the accompanying drawings and the description below. Other features and advantages of the subject matter described herein will be apparent from the description and drawings and from the claims.

The subject matter described herein relates to a templating system and method. In the templating system and method each of the domain model and the graphic model are defined according to a template and the corresponding elements of the domain model and graphic model are created. Next a binder is created which associates corresponding attributes in domain and graphic models. Path expressions such as XPath expressions are used to describe locations in the domain and graphic models. These path expressions templates and binders are interpreted or called by a framework which performs detailed synchronization. Accordingly much less code has to be programmed leaving the complex synchronization patterns to the framework.

The server system includes a model repository . The model repository is preferably structured as a Meta Object Facility MOF that stores data based on a metamodel. In an exemplary implementation the model repository includes a domain model that acts as a workflow gateway for data needed by a runtime system and a graphic model that represents the graphical objects that provide a visualization of the workflow.

The server system further includes a templating mechanism for generating a domain template based on the domain model i.e. original text and a graphical template based on the graphic model i.e. a graphical representation of the original text . The templating mechanism further creates one or more binders configured to synchronize the domain template and graphical template via path expressions that identify corresponding locations within each template. A synchronization framework calls and interprets the path expressions templates and binders to perform detailed synchronization between domain models and graphic models. Thus the templating mechanism makes writing and editing of graphical tools easier.

At one or more paths between the domain model and the graphic model is defined for corresponding elements in the domain and the graphic models. At a binder is generated or created for each path i.e. for each set of corresponding elements between domain and graphic models. At the templates and binders are called and interpreted to synchronize the domain model and graphic model at each corresponding element.

The patterns act as the glue or binding between one or more domain metamodel classes and their respective graphical representation according to the graphic model. In preferred implementations common functionality in base classes can be factored out of the template pattern for more efficient graphical editing of business processes.

The systems and methods disclosed herein may be embodied in various forms including for example a data processor such as a computer that also includes a database digital electronic circuitry firmware software or in combinations of them. Moreover the above noted features and other aspects and principles of the present disclosed embodiments may be implemented in various environments. Such environments and related applications may be specially constructed for performing the various processes and operations according to the disclosed embodiments or they may include a general purpose computer or computing platform selectively activated or reconfigured by code to provide the necessary functionality. The processes disclosed herein are not inherently related to any particular computer network architecture environment or other apparatus and may be implemented by a suitable combination of hardware software and or firmware. For example various general purpose machines may be used with programs written in accordance with teachings of the disclosed embodiments or it may be more convenient to construct a specialized apparatus or system to perform the required methods and techniques.

The systems and methods disclosed herein may be implemented as a computer program product i.e. a computer program tangibly embodied in an information carrier e.g. in a machine readable storage device or in a propagated signal for execution by or to control the operation of data processing apparatus e.g. a programmable processor a computer or multiple computers. A computer program can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.

Although the description above refers to a client and a server other frameworks and architectures may be used as well. For example the subject matter described herein may be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user may interact with an implementation of the subject matter described herein or any combination of such back end middleware or front end components.

The foregoing description is intended to illustrate but not to limit the scope of the invention which is defined by the scope of the appended claims. Other embodiments are within the scope of the following claims.

