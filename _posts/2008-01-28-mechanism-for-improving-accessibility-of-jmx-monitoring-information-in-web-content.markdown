---

title: Mechanism for improving accessibility of JMX monitoring information in web content
abstract: System, method and computer program product for monitoring the status of components in a data processing system that improves the accessibility of JMX monitoring information in web content. The system includes a mechanism for acquiring a text representation of component status for display as ALT and TITLE content associated with each status image. Because the component status is displayed in a manner that is indistinguishable from ALT/TITLE text that has already been statically included in an image attribute, user experience is improved for users with and without accessibility needs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07797569&OS=07797569&RS=07797569
owner: International Business Machines Corporation
number: 07797569
owner_city: Armonk
owner_country: US
publication_date: 20080128
---
This application is a continuation of application Ser. No. 10 881 596 filed Jun. 30 2004 now U.S. Pat. No. 7 337 349.

The present invention relates generally to the data processing field and more particularly to a method system and computer program product for monitoring the status of components in a data processing system.

Java Management Extensions JMX application programming interface API provides a mechanism for monitoring the status of components for example servers applications processes and other resources in a data processing system such as a Java Enterprise Edition J2EE server. The status monitoring API requires a user to perform complex queries in order to obtain the status of components and consequently it is advantageous to provide a simple client which allows a user to visualize the status of large groups of components. Such a client may conveniently comprise a web page containing a series of images corresponding to the states of the various components being monitored.

JMX queries are executed asynchronously and may not be completed within any specific period of time. The content of a web page however typically loads and displays serially. Accordingly a JMX query may not begin until a previous query has been completed. As a result although many queries may require only a short period of time to complete other queries may need more time and one long running query can block the completion and display of other shorter queries.

In a known technique for monitoring the status of a plurality of components in a data processing system a user at a client device such as a web based administrative console initiates JMX queries to determine the status of the components. The queries are first transmitted to a servlet which processes a first query to determine the status of a first component. The first component responds and the servlet then processes a second query to determine the status of a second component. Only when responses have been received from all of the plurality of components does the servlet provide the responses to a browser running in the client device.

Often a user is interested in only a subset of the components for which the status is presented or is interested in information other than or in addition to the status of the components for example a simple list of application servers. Because a JMX query can require as much as three minutes to complete and because the servlet does not provide the responses to any status queries until responses are received from all components the user may have to wait a substantial period of time to see the responses even though the specific information desired by the user may be available almost immediately.

A copending application entitled TOOL FOR DISPLAYING JMX MONITORING INFORMATION Ser. No. 10 721 819 filed on Nov. 24 2003 assigned to the same assignee as the present application and incorporated herein by reference describes a mechanism that allows the status of data processing system components obtained through JMX queries to be loaded asynchronously in web content such that the status value of each component is displayed as soon as the value becomes available without having to wait for the completion of any other query. The mechanism uses JMX and specialized images to acquire status information for a large number of components. An image s source attribute is set as a servlet and the servlet uses JMX to acquire the status of a component and streams data corresponding to the appropriate image back to the browser.

From an accessibility perspective a problem arises in that the mechanism used by accessible technologies to determine the value of an image i.e. the ALT or TITLE attribute on the image is not available to the user when the image is streamed back to the browser. This limitation can be overcome by including static content on those attributes that basically say click on this image to request text describing the component status. Such a procedure for accessing additional information regarding the status of a component however requires opening a new window within which the text for the status is displayed and is not an optimal solution to the problem.

For non accessible needs users such as visually impaired users dynamic HTML can be used to show a legend table that maps images to text for the status. Such an approach however is also not fully satisfactory.

It would accordingly be advantageous to provide a mechanism for monitoring the status of components in a data processing system that improves the accessibility of JMX monitoring information in web content.

The present invention provides a system method and computer program product for monitoring the status of components in a data processing system that improves the accessibility of JMX monitoring information in web content. The system includes a mechanism for acquiring a text representation of a status of a component for display as ALT and TITLE content associated with an image of the status of the component. Because the status text of the component is displayed in a manner that is indistinguishable from ALT TITLE text that has already been statically included in an image attribute user experience is improved for both users with and without accessibility needs.

With reference now to the figures and in particular with reference to a pictorial representation of a data processing system in which the present invention may be implemented is depicted in accordance with a preferred embodiment of the present invention. A computer is depicted which includes system unit video display terminal keyboard storage devices which may include floppy drives and other types of permanent and removable storage media and mouse . Additional input devices may be included with personal computer such as for example a joystick touchpad touch screen trackball microphone and the like. Computer can be implemented using any suitable computer. Although the depicted representation shows a computer other embodiments of the present invention may be implemented in other types of data processing systems such as a network computer. Computer also preferably includes a graphical user interface GUI that may be implemented by means of systems software residing in computer readable media in operation within computer .

With reference now to a block diagram of a data processing system is shown in which the present invention may be implemented. Data processing system is an example of a computer such as computer in in which code or instructions implementing the processes of the present invention may be located. Data processing system employs a peripheral component interconnect PCI local bus architecture. Although the depicted example employs a PCI bus other bus architectures such as Accelerated Graphics Port AGP and Industry Standard Architecture ISA may be used. Processor and main memory are connected to PCI local bus through PCI bridge . PCI bridge also may include an integrated memory controller and cache memory for processor . Additional connections to PCI local bus may be made through direct component interconnection or through add in connectors. In the depicted example local area network LAN adapter small computer system interface SCSI host bus adapter and expansion bus interface are connected to PCI local bus by direct component connection. In contrast audio adapter graphics adapter and audio video adapter are connected to PCI local bus by add in boards inserted into expansion slots. Expansion bus interface provides a connection for a keyboard and mouse adapter modem and additional memory . SCSI host bus adapter provides a connection for hard disk drive tape drive and CD ROM drive . Typical PCI local bus implementations will support three or four PCI expansion slots or add in connectors.

An operating system runs on processor and is used to coordinate and provide control of various components within data processing system in . The operating system may be a commercially available operating system such as Windows XP which is available from Microsoft Corporation. An object oriented programming system such as Java may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system . Java is a trademark of Sun Microsystems Inc. Instructions for the operating system the object oriented programming system and applications or programs are located on storage devices such as hard disk drive and may be loaded into main memory for execution by processor .

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash read only memory ROM equivalent nonvolatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the present invention may be applied to a multiprocessor data processing system.

For example data processing system if optionally configured as a network computer may not include SCSI host bus adapter hard disk drive tape drive and CD ROM . In that case the computer to be properly called a client computer includes some type of network communication interface such as LAN adapter modem or the like. As another example data processing system may be a stand alone system configured to be bootable without relying on some type of network communication interface whether or not data processing system comprises some type of network communication interface. As a further example data processing system may be a personal digital assistant PDA which is configured with ROM and or flash ROM to provide non volatile memory for storing operating system files and or user generated data.

The depicted example in and above described examples are not meant to imply architectural limitations. For example data processing system also may be a notebook computer or hand held computer in addition to taking the form of a PDA. Data processing system also may be a kiosk or a Web appliance.

The processes of the present invention are performed by processor using computer implemented instructions which may be located in a memory such as for example main memory memory or in one or more peripheral devices .

A user at console may request a web page containing the status of components such as servers and . The status may include whether the component is stopped started in error etc. As will be described in greater detail hereinafter the user may also request other information pertaining to components and . A panel servlet dynamically generates an HTML file which ultimately will be used to display the status information on console . Servlet includes an image tag which points to a status servlet associated with each component to be monitored such as status servlets and associated with servers and respectively. The image tags include enough information to perform a JMX query of their corresponding component.

In general requests for component status initiated by a user are transmitted to each server and and are processed by status servlets and respectively. The status servlets generate a JMX query on the corresponding server and after receiving a response processes the response and transmits the response to browser . The processed response includes an image corresponding to the value returned from the JMX query and appears as a standard displayable image. illustrates an exemplary screen shot of a display of component status information obtained for several resources in accordance with a preferred embodiment of the present invention.

The web page defined by the HTML file is loaded by a browser running in a user console step and places status requests for each of the image tags step . These requests are placed in parallel. The requests are transmitted to each component to be monitored step but are processed by copies or instances of a status servlet StatusServlet in the above example step . Each instance of the status servlet uses the information provided in the request and generates a JMX query on the corresponding component step .

After receiving a response to a query in the form of a value representing the status of a component step each servlet processes the response and transmits it to the browser step . The processed response includes an image corresponding to the value returned from the JMZ query. The processed response also preferably includes a directive to prevent the browser from caching the response.

The browser receives the response step which appears as a standard displayable image. As each response is received by the browser it is displayed for the user step for example as illustrated in even if other queries are still being processed.

Steps of method are described in the previously mentioned copending application and enable the status of data processing system components obtained through JMX queries to be loaded asynchronously in web content such that the status value of each component is displayed to a user as soon as the values become available. If the user does not desire additional information regarding the status of any of the components for which the status value is displayed the method ends as indicated by arrow . If however the user is interested in obtaining text concerning a component for example additional information about the status of a component this can be accomplished as described above by either including static content that says click on the status image to request text describing the object status in a new window as illustrated in which illustrates the exemplary screen shot of having status text displayed in a new window or the user can use dynamic HTML to show a legend table that maps the image to text status. These procedures however are not fully satisfactory.

In accordance with a preferred embodiment of the present invention a mechanism is provided for acquiring a text representation of component status that does not require a legend and does not require a user to go to a separate page to find and mentally map an image to the text description of the status.

The additional information concerning the status of a component can be acquired according to a preferred embodiment of the present invention by a user requesting the additional information after a response concerning the status of the component has been displayed for the user in step . In particular as indicated by arrow in method continues by the user requesting additional information concerning the status of a component step . The user can make the request for example by moving a mouse over or by tabbing to a displayed status image for which more information is desired for example one of the status images illustrated in . The request for additional information is transmitted to the component step but is processed by copies or instances of the second servlet StatusServlet in the above example step .

A JMX query is generated for each component step . A response is received to each query step and the response is processed and transmitted to the browser step . The response is received by the browser step and is then parsed to extract attribute value step . The HTML page DOM is parsed and attribute value is assigned to the appropriate element s attribute step and the browser automatically displays the retrieved text content as tooltip text step after which the method ends as indicated by arrow . illustrates the exemplary screen shot of having status text displayed thereon in accordance with a preferred embodiment of the present invention.

In particular when a request for additional information concerning a component is made by a user a function is called at onFocus or onMouseover that performs an xmlHTTP Request to a status servlet that retrieves the text description of the status. Upon receiving the text response the function sets the ALT TITLE text to the received value.

If the request for additional information made in step is unsuccessful the default ALT TITLE text remains and the method ends following step as shown by arrow . In this circumstance the user can use existing mechanisms to show text information e.g. click on the status image to request text describing the object status in a new window or use dynamic HTML to show a legend table that maps images to text status.

The present invention thus provides a system method and computer program product for monitoring the status of components in a data processing system that improves the accessibility of JMX monitoring information in web content. The system includes a mechanism for acquiring a text representation of component status for display as ALT and TITLE content associated with an image of the status of the component. Because the component status is displayed in a manner that is indistinguishable from ALT TITLE text that has already been statically included in an image attribute user experience is improved for users with and without accessibility needs.

It is important to note that while the present invention has been described in the context of a fully functioning data processing system those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in the form of a computer readable storage medium of instructions. Examples of computer readable storage media include recordable type media such as a floppy disk a hard disk drive a RAM CD ROMs DVD ROMs.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

