---

title: Gathering information for use in diagnostic data dumping upon failure occurrence
abstract: Techniques for gathering information during runtime of a monitored system such that the information is available for facilitating diagnostics for the monitored system. In one embodiment, upon detection of a condition (such as an error condition) in the monitored system, a portion of the gathered information provides contextual information that facilitates gathering of diagnostic data that is relevant for the detected condition. This facilitates capturing of diagnostic data that is relevant for diagnosing the detected condition. The information gathered and stored during runtime may include information related to local variables, information related to tagged information (e.g., tagged functions/processes) executing in the monitored system, information related to potential impacts to the monitored system due to failures, metadata information, and other information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07941707&OS=07941707&RS=07941707
owner: Oracle International Corporation
number: 07941707
owner_city: Redwood Shores
owner_country: US
publication_date: 20081015
---
This application claims the benefit and priority under 35 U.S.C. 119 e of U.S. Provisional Application Ser. No. 60 981 456 filed 19 Oct. 2007 entitled DIAGNOSABILITY FRAMEWORK the contents of which are herein incorporated by reference in their entirety for all purposes.

This application also incorporates by reference for all purposes the entire contents of the following related and commonly assigned non provisional applications all filed concurrently with the present application 

The present invention relates to system maintenance and diagnosis and more particularly to techniques for registering information for diagnostic data dumping in a monitored system.

When a system encounters a failure or error diagnostic data is typically collected and stored to a disk for diagnostic analysis. The diagnostic data may be communicated to a diagnosis site for analysis and resolution of the error. The amount of diagnostic data that is captured varies from one system to another. Using one conventional approach all of the data associated with the system is gathered and stored to the persistent memory e.g. a disk for diagnostic purposes. The stored data is then communicated to a diagnosis site for analysis. Such an approach of complete diagnostic data gathering however consumes a lot of time and valuable system resources. Further the amount of data that is collected may include thousands of files and many gigabytes of data. Sending such a large volume of data to the diagnosis site is cumbersome time consuming and expensive. Further if the data received at a diagnosis site is very large it takes the vendor a long time to analyze the received diagnostic data to identify relevant pieces of data for analyzing a particular problem.

Alternatively only a basic set of diagnostic data associated with the system is collected and stored during an initial diagnostic process. The diagnostic data gathered by the initial diagnostic process is then analyzed usually manually to determine what additional diagnostic processes have to be run to capture additional data that is more relevant to the specific failure and essential for error resolution. This iterative process continues until someone manually determines that sufficient data has been gathered to solve the problem. The second approach thus requires diagnostic data gathering to be performed over multiple stages. At the end of each stage a manual determination has to be made if sufficient diagnostic data has been gathered. This process is very time consuming and also very error prone due to its manual component.

Accordingly under either scenario developers at the vendor s diagnosis site cannot locate relevant diagnostic information in a timely manner. As a result the time needed to resolve the issue or problem is increased leading to customer dissatisfaction.

Embodiments of the present invention provide techniques for gathering information during runtime of a monitored system such that the information is available for facilitating diagnostics for the monitored system. In one embodiment upon detection of a condition such as an error condition in the monitored system a portion of the gathered information provides contextual information that facilitates gathering of diagnostic data that is relevant for the detected condition. This facilitates capturing of diagnostic data that is relevant for diagnosing the detected condition. The information gathered and stored during runtime may include information related to local variables information related to tagged information e.g. tagged functions or processes executing in the monitored system information related to potential impacts to the monitored system due to failures metadata information and other information.

According to an embodiment of the present invention techniques are provided for gathering and storing information for use in diagnostic data dumping in a monitored system. Information related to the monitored system may be gathered during runtime of the monitored system. The gathered information may be stored during runtime of the monitored system. A portion of the stored information may be retrieved in response to a condition detected in the monitored system. The retrieved information may be used for determining one or more diagnostic actions to be performed in response to the detected condition.

In one embodiment information related to one or more local variables that are used in a function may be gathered and stored during runtime of the monitored system. Information related to the one or more local variables may include an identifier associated with the local variable a type associated with the local variable a size of the local variable a callback function associated with the local variable. In one embodiment information related to a function or process that is tagged as relevant for diagnosis may be gathered and stored during runtime of the monitored system. In one embodiment information related to a probable impact related to the detected condition may be gathered and stored during runtime of the monitored system. In one embodiment information related to metadata information may be gathered and stored during runtime of the monitored system. The metadata information that is gathered may include one or more correlation keys.

In one embodiment the retrieved information may be dumped to a disk. The retrieved information may be used to determine a diagnostic action to be performed that gathers diagnostic data relevant to the detected condition.

In one embodiment information may be received identifying the information related to the monitored system to be gathered and stored during runtime of the monitored system. The information may be received during runtime of the monitored system.

The foregoing together with other features and embodiments will become more apparent when referring to the following specification claims and accompanying drawings.

In the following description for the purposes of explanation specific details are set forth in order to provide a thorough understanding of the invention. However it will be apparent that the invention may be practiced without these specific details.

Embodiments of the present invention provide techniques for gathering information during runtime of a monitored system such that the information is available for facilitating diagnostics for the monitored system. In one embodiment upon detection of a condition such as an error condition in the monitored system a portion of the gathered information provides contextual information that facilitates gathering of diagnostic data that is relevant for the detected condition. This facilitates capturing of diagnostic data that is relevant for diagnosing the detected condition. The information gathered and stored during runtime may include information related to local variables information related to tagged information e.g. tagged functions processes executing in the monitored system information related to potential impacts to the monitored system due to failures metadata information and other information.

As depicted in diagnosability system comprises a diagnosability framework deployed at a system site to provide diagnostic support for monitored system . Diagnosability system also comprises a diagnosability framework deployed at a diagnosis site. A diagnosis site may be for example a site of a vendor that is responsible for diagnosing problems that may occur in monitored system .

In a typical diagnostic workflow diagnostic data is captured and stored for monitored system by diagnosability framework . For example diagnosability framework may be configured to gather and store data related to monitored system upon occurrence or detection of a condition in monitored system . In one embodiment the condition detected in the monitored system may be an error condition which triggers gathering and storage of diagnostic data for the error condition. The diagnostic data collected and stored by diagnosability framework may include for example trace data diagnostic dumps run reports logs e.g. error logs results of diagnosability related actions and the like. Portions of the diagnostic data stored by diagnosability framework may be communicated to diagnosability framework located at the diagnosis site for analysis such as failure analysis. The diagnostic data may be communicated from diagnosability framework to diagnosability framework via a communication network . Communication network may be any network capable of communicating data such as the Internet an intranet a switched network and the like. Communication network may include wired or wireless communication links. Various communication protocols may be used to communicate data from diagnosability framework to diagnosability framework .

As depicted in diagnosability framework comprises a diagnostic data extractor DDE a diagnostic data repository DDR an active state module and various tools . The various components depicted in diagnosability framework are merely examples of components that may be included in diagnosability framework . In alternate embodiments diagnosability framework may have less or more components than those shown. The components in diagnosability framework may be implemented in software e.g. code program instructions that are stored on a machine readable medium and executed by a processor hardware or combinations thereof.

In one embodiment active state module is configured to gather and store information related to monitored system during runtime. Upon occurrence or detection of a condition in monitored system a portion of the information that is gathered and stored by active state module during runtime is then available and provided as useful contextual data for the detected condition and facilitates gathering of diagnostic data that is relevant to the detected condition. For example the information that is gathered and stored by active state module may be provided to DDE for determining one or more diagnostic actions to be performed upon occurrence or detection of the condition in system e.g. actions for gathering diagnostic data relevant to the condition detected in system . In one embodiment the information gathered and stored by active state module during runtime may be dumped to persistent memory e.g. disk upon occurrence or detection of a condition in system .

Various different types of information related to monitored system may be gathered and stored by active state module during runtime of monitored system . In one embodiment active state module may gather and store information related to one or more local variables that are used in one or more functions in the call stack. For example active state module may gather and store pointers to the local variables that are used in a function during runtime of the monitored system. If the pointers to the local variables are still pointing to something valid i.e. local variables are still active upon occurrence or detection of a condition in system then the information related to the local variables pointers to the variables and other information related to the variables may be dumped to persistent memory or output to other components of diagnosability framework for use in diagnostic data dumping.

In one embodiment active state module may gather and store information related to information that is explicitly tagged as relevant to diagnosis. The tagged information may be a specific section of system code or a specific function or process executing in the monitored system. The information related to the tagged information may include a name for the tag a tag identifier of the tag a tag state e.g. active or inactive and other information related to the tagged information. In one embodiment a user such as a developer may explicitly tag a specific section of a function or a specific operation in monitored system as relevant for diagnostics during design time. During runtime of system the tag state for a tag may be changed from inactive to active depending on whether the tagged information is active on the call stack or not. For example if a specific function is tagged and if the tagged function is currently active on the call stack then the tag state associated with the tag is set to active and the tag is deemed to be an active tag. On the other hand if the specific function is not active on the call stack then the tag state associated with the tag is inactive and the tag is deemed to be an inactive tag.

In one embodiment information related to the tagged information that is tagged by an active tag is provided as useful contextual data for diagnostic data dumping in monitored system . For example upon occurrence of an error information associated with the active tag such as tag name tag identifier etc. is provided to DDE for determining one or more diagnostic actions to be performed in response to the detect error condition e.g. gathering diagnostic data relevant to the detected condition . In this manner tagging provides a window into what was occurring in the monitored system at and around the time of the error. Tagging also enables a user to specify what specific contextual data may be gathered by active state module and used for diagnostic data dumping upon failure occurrence.

In one embodiment active state module may gather and store information related to probable impacts that a function or process may have on the monitored system before or during the execution of the function or process by monitored system . If the execution of the function or process fails resulting in a condition being detected in monitored system then the impact information that was gathered and stored by active state module is available and provided as useful contextual data for diagnostic data dumping in monitored system . In one embodiment a developer may configure the impact information for one or more functions and processes. For example a developer may specify a probable impact that a function or process may have on the monitored system if the function or process fails.

The impact information that is gathered and stored by active state module provides specific information about the status of monitored system upon occurrence or detection of a condition in monitored system . For example a memory corruption error related to the dictionary heap may be configured with an impact dictionary corruption while a different memory corruption error related to a heap that belongs to row cache may be configured with a different impact such as row cache corruption . In this manner the impact information that is gathered and stored by active state module provides the users with more specific information as to which particular memory was corrupted rather than some generic impact information such as memory corruption . In one embodiment the impact information that is captured by active state module provides the users with some indications as to what actions may be executed to repair or mitigate the conditions detected in monitored system . Active state module and its functions are discussed below in further details.

In one embodiment DDE is configured to determine one or more actions to be performed in response to conditions detected in system . For example in response to an error condition detected in monitored system DDE may be configured to determine one or more actions to be performed based upon the context data determined for the error condition. The context data determined for a condition may comprise information that is gathered and stored by active state module such as information related to tagged functions or processes information related to probable impacts that a function or process may have on the monitored system if the function or process fails and other information. The actions determined by DDE may include actions for gathering diagnostic data that is relevant for the detected condition.

In one embodiment DDE is a rule based engine. One or more DDE rules may be configured for and provided to DDE . A DDE rule may identify a DDE condition and one or more diagnostic actions also referred to as DDE actions to be performed when the DDE condition is met. The DDE condition specified in a DDE rule may comprise information related to one or more conditions detected in monitored system such as error number and error arguments information that is gathered and stored by active state module . For example a DDE rule may be specified based on information associated with an active tag such as Active Tag transaction rollback . The diagnostic actions specified in a DDE rule may include determining and gathering diagnostic data that is deemed to be relevant to the conditions detected in monitored system recommending one or more actions to be performed possibly for additional diagnostic data gathering or for minimizing the impact of the error invoking health checks for gathering monitored system related information for determining the health of the monitored system and the like. DDE rules may be user configurable.

In one embodiment only diagnostic data that is deemed to be relevant for diagnosis of a detected condition is gathered and stored dumped to disk . The contextual data provided by active state module coupled with the use of the DDE rules based engine enables diagnosability framework to intelligently gather and store relevant diagnostic data that is useful for resolution of the condition that triggered the diagnostic data dumping. The DDE rules may be configured such that the right level of detail is collected and stored for a detected condition. Once the DDE rules have been evaluated the actions to be performed for gathering diagnostic data that is relevant for the detected condition are automatically determined without requiring any human intervention. The actions may also be executed automatically without requiring any human intervention. Further information related to DDE and its functions may be found in the applications incorporated by reference in the present application.

Diagnostic data repository DDR also sometimes referred to as ADR in the applications incorporated by reference in the present application provides a centralized repository for storing diagnostic data related to monitored system collected by diagnosability framework . The data may be stored in a structured format that enables searching and database like querying capabilities. In one embodiment DDR is a file based repository. Various different types of diagnostic data may be stored in diagnostic data repository such as traces dumps alert logs health monitor reports and the like. Information gathered by active state module e.g. such as information related to one or more local variables for a particular function on the call stack may be stored or dumped in DDR

In one embodiment DDR is capable of storing diagnostic data for multiple monitored systems which may be different products or different instances of the same product . The diagnostic data for each monitored system may be stored under a separate directory e.g. an ADR HOME directory allocated to that system. The ADR HOME directories share a common structure to facilitate analysis of the stored data across multiple monitored systems. Multiple ADR HOME directories may be present under a single ADR BASE directory. In this manner diagnostic data for multiple monitored systems may be stored and organized in a consistent manner.

In one embodiment the data stored in DDR may be tagged or annotated with metadata information. The metadata information may be used to find correlations between pieces of the data stored in DDR . The metadata also enables navigation of the data stored in DDR . The metadata may include one or more correlation keys. Further information related to DDR and correlation keys may be found in the applications incorporated by reference in the present application.

Various tools may be provided as part of diagnosability framework . These tools may include tools for querying the diagnostic data or information stored in DDR tools for generating reports analysis tools and other tools that may use information collected and stored by diagnosability framework . Further information regarding tools can be found in the applications incorporated by reference in the present application.

As mentioned previously the diagnostics data collected by diagnosability framework may also be forwarded to diagnosability framework located at a remote site for example the site of a software system vendor for analysis. As depicted in diagnosability framework may comprise a diagnostic data repository and one or more tools . The various components depicted in the diagnosability framework are merely examples of components that may be included in the diagnosability framework. In alternate embodiments diagnosability framework may have less or more components than those shown in . The components depicted in diagnosability framework may be implemented in software hardware or combinations thereof.

In one embodiment diagnostic data repository provides a repository for storing diagnostic data received from one or more system sites. In one embodiment the structure of diagnostic data repository is the same as the structure of diagnostic data repository at system sites. This facilitates efficient storage and analysis of the data. In such an embodiment data received from system site packages is stored in the same directory location in diagnostic data repository as the data that was stored in diagnostic data repository

Various tools may be provided in diagnosability framework to help analyze the diagnostic data received from diagnosability framework and to guide management and resolution of problems and errors in monitored systems. These tools may include command line or GUI based tools for use by personnel at the diagnosis site. For example the tools may include a tool that may be used to analyze the diagnostic data received from the software system site and to identify causes for the errors tools for automatically routing the diagnostic data to a correct entity e.g. a particular group or department responsible for the software that experienced the error one or more software developers responsible for solving the error a system administrator etc. for diagnosis and the like.

The present application focuses on active state module of diagnosability framework . Information related to the various other components of diagnosability system may be found in the applications incorporated by reference in the present application.

As mentioned previously active state module is configured to gather and store information related to monitored system during runtime of the monitored system. Upon occurrence or detection of a condition in monitored system a portion of the information gathered and stored by active state module during runtime is then available and used as useful contextual data for diagnostic data dumping in monitored system . For example the information gathered and stored by active state module may be provided to DDE for determining one or more diagnostic actions to be performed upon occurrence or detection of one or more conditions in system e.g. gathering diagnostic data relevant to the conditions detected in system . In one embodiment the information that is gathered and stored by active state module during runtime may be dumped to persistent memory e.g. disk upon occurrence or detection of a condition in system .

As depicted in information gathering module is configured to gather a portion of information related to monitored system during runtime of the monitored system. Upon detection of a condition the portion of information that is gathered by information gathering module may be used as useful contextual information for diagnostic data dumping responsive to the detected condition. As depicted in information may be provided to information gathering module identifying the information to be gathered by information gathering module during runtime of monitored system . Information may identify information related to one or more local variables to be gathered information related to one or more tagged functions or processes to be gathered information related to probable impacts for one or more functions or processes on the monitored system to be gathered metadata information related to the monitored system to be gathered and other information that is to be gathered by information gathering module . A set of application programming interfaces APIs may be provided to invoke gathering and storing of information related to the monitored system during runtime.

Information may be provided by a user of diagnosability framework . For example a developer may identify one or more local variables of a particular function for which information is to be gathered and stored during runtime of monitored system such that the gathered information is available for facilitating diagnostic data dumping upon occurrence or detection of a condition in system . As another example a developer of monitored system may tag a specific section of the system code or a specific operation as relevant for diagnosis during design time for which information is to be gathered and stored during runtime of monitored system . Information may also be provided by other components of diagnosability framework .

In one embodiment the information that is gathered by information gathering module during runtime of monitored system may be user configurable prior to or during runtime of the monitored system. A user interface e.g. a GUI a command line interface may be provided that enables the user developer or other user e.g. customer of a product being monitored to browse through functions and processes to be executed or that are being executed by monitored system and identify information to be gathered related to the functions and processes. For example the user may select one or more local variables of a particular function for which the information is to be gathered by information gathering module .

Upon receiving information information gathering module is configured to automatically gather information as identified in information . For example if information identifies information related to a local variable of a function to be gathered information gathering module automatically gathers the information related to the local variable upon receiving information . The information related to a local variable that is gathered by information gathering module may include for example a pointer to the variable a value of the variable a key e.g.   that identifies the variable size of the variable to be gathered metadata related to the variable and other information related to the variable. In one embodiment the information related to a local variable that is gathered by information gathering module may include one or more attributes associated with the local variable. In one embodiment the attributes may include the following information 

If information identifies information related to a tagged function or process to be gathered information gathering module automatically gathers information related to the tagged function or process. Information related to a tagged function or process that is gathered by information gathering module may include a tag name e.g. a text string a tag identifier tag ID a tag state and other information related to the tagged function or process. The tag state associated with the tag may be set to active by information gathering module if the tagged function or process is currently executed by monitored system such a tag is sometimes referred to as an active tag . In one embodiment a default state inactive may be specified for the tag state associated with the tag indicating the function or process is not currently executed by monitored system such a tag is sometimes referred to as an inactive tag .

If information identifies information related to probable impacts associated with a specific function or process on the monitored system to be gathered and stored during runtime of the monitored system information gathering module automatically gathers the impact information related to the function or process before or during execution of the function or process. For example for a database system information may identify a particular function or process for which impact information is to be gathered before or during execution of the function or process. Upon receiving information information gathering module may derive the impact information from an external file e.g. table that maps the impact information to the function or process. In this embodiment given a function or process that is executed in monitored system information gathering module may use the external file to map the function or process to the corresponding impact information. The impact information gathered by information gathering module for a particular function or process may include an error number and error arguments associated with a condition that is caused by the failure of the function or process an impact name and other information related to the probable impacts.

In one embodiment information may identify that metadata information related to the monitored system is to be gathered during runtime. Information gathering module then automatically gathers the specified metadata during runtime of monitored system . For example one or more health monitor HM checks may be performed for monitored system to determine information related to system . For example a health check may be configured to gather information related to various aspects of system including information related to one or more layers components in system . In one embodiment a health check is a piece of code that is executed by a processor and the execution of which results in information related to system being determined and or gathered for diagnostic purposes. Before a health monitor check is performed in monitored system a developer may request information such as health check run identifier HEALTH CHECK RUN ID to be gathered and stored by active state module . The metadata information that is gathered by information gathering module may be used among other things for correlating different pieces of diagnostic data dumped for system .

The metadata information that is gathered by information gathering module may include one or more correlation keys comprising one or more key value pairs. For example the correlation keys may include SESSION ID PROCESS ID EXECUTION CONTEXT ID HEALTH CHECK RUN ID and the like keys and their associated values. The correlation keys may be used for finding correlations between pieces of diagnostic data gathered and stored in DDR

The portion of information that is gathered by information gathering module may be stored in memory which may be a combination of RAM memory and persistent disk memory. In one embodiment the information that is gathered by information gathering module is stored in a stack in RAM in memory . For example during runtime the information gathered by information gathering module may be pushed onto the stack. Upon occurrence or detection of a condition in monitored system a portion of the information stored in the stack in memory may be popped from the stack by information retrieval module and dumped to disk. For example by default if variable V of function foo is pushed before variable V is pushed onto the stack then variable V would be popped before variable V is popped. The information gathered by information gathering module may also be stored in other forms.

In one embodiment information purge module is configured to automatically remove or discard a portion of the information that is stored in memory under certain situations. For example one or more local variables for a function may be gathered and stored before the function calls another function and if the called function successfully returns to the calling function at a later time then the local variables that were previously stored for the calling function before calling the called function may be discarded and removed from memory . In this manner the amount of the information that is stored in memory is controlled to prevent memory overflow.

As another example information related to a tagged operation or function such as a Parsing SQL operation may be gathered and stored by active state module at or about the time that the tagged function or operation is executed. After the tagged function has been successfully executed the information related to the tagged operation may be removed or discarded from memory . In one embodiment instead of discarding information related to the tagged function or operation that is no longer active on the call stack the tag state associated with the tag may be set to inactive. In one embodiment information about inactive tags is not provided to other components of diagnosability framework such as DDE

In another example information related to probable impacts of a particular function or operation that is stored in memory may be removed or discarded after the function or operation has successfully completed execution. In one embodiment user can also specifically identify information stored in memory that is to be discarded. For example the information stored in memory may be presented to the user for review. The user may then determine or specify which information is to be removed or discarded from memory .

In this manner the information stored in memory is dynamic and may change over time. Information that is not longer relevant is discarded making room for newer more relevant information. This ensures that memory always stores information that is useful for diagnostic data dumping. The size of memory may be kept small for fast retrieval of information. For example the number of local variables that are stored in memory may be limited to a preconfigured number e.g. less than 200 variables . This enables active state module to efficiently and effectively gather store and retrieve interesting information to facilitate diagnostic data dumping in system upon failure occurrence.

Information retrieval module is configured to retrieve information that is stored in memory and provide the retrieved information to other components of diagnosability framework in response to a condition detected in monitored system . For example as depicted in information retrieval module may receive information identifying a condition detected in monitored system . In response information retrieval module retrieves all or a portion of information from memory that is relevant to and provides a context for the detected condition. For example information related to one or more local variables of a function may be gathered and stored in memory during execution of a function and before the function calls another function. If the called function fails which triggers a condition in system the information related to one or more local variables stored in memory may be determined by information retrieval module as being relevant to the detected condition and retrieved from memory . In one embodiment the information related to one or more local variables may be dumped to DDR for diagnosis at diagnosis site .

As another example information related to a tagged operation or function executing by monitored system may be gathered and stored in memory . If the execution of the tagged operation or function fails resulting in a condition being detected in system then the information related to the tagged operation or function that is stored in memory may be retrieved by information retrieval module from memory . In one embodiment the information related to the tagged operation or function that is retrieved may be provided to DDE for determining one or more diagnostic actions to be performed in system .

As described above upon receiving information identifying a detected condition information retrieval module is configured to retrieve information from memory that is relevant to the detected condition. Information may be considered relevant to a detected condition if it facilitates gathering of diagnostic data that is relevant for diagnosis of the detected condition. Various different criteria may be used to determine whether a certain piece of information stored in memory is relevant to a detected condition including time when the condition was detected and a time when the information was stored in memory the failing function or process which caused the detected condition information related to active inactive tags etc.

As depicted in at time T before segment S is about to be executed by the monitored system the current state or information related to the monitored system is gathered and stored. The current state or information gathered and stored at Tmay include information related to one or more local variables of a calling function that calls S information related to the tagged segment S assume that Sis tagged impact information related to S and the like. Subsequently at time Tafter Shas successfully completed execution information that was gathered and stored at time Tmay then be discarded.

At time T before segment S is about to be executed by monitored system the current state or information related to the monitored system is gathered and stored. The current state or information gathered and stored at Tmay include information related to one or more local variables of a calling function that calls S information related to the tagged segment S assume that Sis tagged impact information related to S and the like. Subsequently at time Tafter Shas successfully completed execution information that was gathered and stored at time Tmay then be discarded.

At time T before segment S is about to be executed by monitored system the current state or information related to the monitored system is gathered and stored. The current state or information gathered and stored at Tmay include information related to one or more local variables of a calling function that calls S information related to the tagged segment S assume that Sis tagged impact information related to S and the like. However at time T Sfails during execution. The failure of Smay cause an error condition to be detected in system . In response to the detected error condition at time T the information that was gathered and stored at time Tmay be retrieved and provided to other components of diagnosability framework for use in diagnostic data dumping for the detected error condition.

Referring to at information is received identifying information related to the monitored system that is to be gathered and stored during runtime and made available for purposes of diagnostic data dumping upon failure occurrence. The information received in may be provided by a user of the monitored system a developer or may even be received from some component of diagnosability framework . A set of application programming interfaces APIs may be provided to specify the information to be gathered. Information identifying the information to be gathered may be received prior to runtime of the monitored system or even during runtime of the monitored system.

In one embodiment a user interface is provided that enables a user developer to specify what particular information related to the monitored system is to be gathered and stored during runtime. For example the user interface enables the user to browse a list of functions and or processes related to the monitored system and allows the user to select one or more local variables of a particular function to be gathered and stored allows the user to tag functions for which information is to be gathered and the like. The user may provide information via the interface such as the name of the function the variable class that the particular variable belongs to the variable type and size and other information related to the variable.

At based upon the information received in information related to the monitored system may be gathered during runtime. For example information related to a local variable of a function being executed in the monitored system may be gathered. The information related to a local variable that is gathered during runtime of the monitored system may include a pointer to the local variable a value of the local variable a key that identifies the local variable e.g.   size of the local variable to be gathered metadata related to the variable one or more attributes related to the local variable and other information related to the variable. Other types of information may also be gathered at runtime such as information related a tagged function or process impact information related to a function or process metadata information etc.

At the information gathered in is stored. Various means may be used to store the information gathered in . In one embodiment the information gathered in is stored in a stack in a RAM memory for fast retrieval. In this embodiment the information is pushed onto the stack and popped from the stack upon retrieval. Alternatively the information gathered in may be stored in some other memory structure e.g. a list .

At information is received identifying a condition detected in monitored system . In one embodiment information received in identifies an error condition in system .

At all or a portion of the information stored in that is relevant to the condition identified in is retrieved. For example information related to one or more local variables of a calling function may be retrieved if the called function fails which triggers a condition to be detected in system . As another example information related to a tagged function may be retrieved if the tagged function or operation fails to be executed resulting in an error condition being detected in system . The information stored in may be retrieved by information retrieval module .

As previously describes information stored in may be considered relevant to a detected condition if it facilitates gathering of diagnostic data that is relevant for diagnosis of the detected condition. Various different conditions may be used to determine whether a certain piece of information stored in is relevant to the condition identified in including time when the condition was detected and a time when the information was stored the failing function or process which caused the detected condition information related to active inactive tags etc.

At the information retrieved in is provided to other components of diagnosability framework for analysis. In one embodiment the retrieved information facilitates gathering of relevant diagnostic data for the condition identified in . For example the information related to the tagged function that may be retrieved in may be provided to DDE for determining one or more diagnostic actions to be performed in system . As another example the information related to one or more local variables that may be retrieved in may be dumped to DDR for diagnosis at diagnosis site .

As shown in computer system includes a processor that communicates with a number of peripheral subsystems via a bus subsystem . These peripheral subsystems may include a storage subsystem comprising a memory subsystem and a file storage subsystem user interface input devices user interface output devices and a network interface subsystem .

Bus subsystem provides a mechanism for letting the various components and subsystems of computer system communicate with each other as intended. Although bus subsystem is shown schematically as a single bus alternative embodiments of the bus subsystem may utilize multiple busses.

Network interface subsystem provides an interface to other computer systems networks and portals. Network interface subsystem serves as an interface for receiving data from and transmitting data to other systems from computer system . For example for the diagnosability framework deployed at the customer site or site where the software system is deployed network interface subsystem may be configured to transfer diagnostic packages from the customer site to the vendor or diagnosis site.

User interface input devices may include a keyboard pointing devices such as a mouse trackball touchpad or graphics tablet a scanner a barcode scanner a touch screen incorporated into the display audio input devices such as voice recognition systems microphones and other types of input devices. In general use of the term input device is intended to include all possible types of devices and mechanisms for inputting information to computer system .

User interface output devices may include a display subsystem a printer a fax machine or non visual displays such as audio output devices etc. The display subsystem may be a cathode ray tube CRT a flat panel device such as a liquid crystal display LCD or a projection device. In general use of the term output device is intended to include all possible types of devices and mechanisms for outputting information from computer system .

Storage subsystem provides a computer readable medium for storing the basic programming and data constructs that provide the functionality of the present invention. Software code modules or instructions that provides the functionality of the present invention may be stored in storage subsystem . These software modules or instructions may be executed by processor s . Storage subsystem may also provide a repository for storing data used in accordance with the present invention such as the diagnostic data repository. Storage subsystem may comprise memory subsystem and file disk storage subsystem .

Memory subsystem may include a number of memories including a main random access memory RAM for storage of instructions and data during program execution and a read only memory ROM in which fixed instructions are stored. File storage subsystem provides persistent non volatile storage for program and data files and may include a hard disk drive a floppy disk drive along with associated removable media a Compact Disk Read Only Memory CD ROM drive an optical drive removable media cartridges and other like storage media.

Computer system can be of various types including a personal computer a portable computer a workstation a network computer a mainframe a kiosk a server or any other data processing system. Due to the ever changing nature of computers and networks the description of computer system depicted in is intended only as a specific example for purposes of illustrating the preferred embodiment of the computer system. Many other configurations having more or fewer components than the system depicted in are possible.

Although specific embodiments of the invention have been described various modifications alterations alternative constructions and equivalents are also encompassed within the scope of the invention. The described invention is not restricted to operation within certain specific data processing environments but is free to operate within a plurality of data processing environments. Additionally although the present invention has been described using a particular series of transactions and steps it should be apparent to those skilled in the art that the scope of the present invention is not limited to the described series of transactions and steps. While the embodiments of the diagnosability framework have been described as providing diagnostic support for software product instances in alternative embodiments embodiments of the present invention may be used for providing diagnostic support for software products hardware products or products having combination of software and hardware.

Further while the present invention has been described using a particular combination of hardware and software it should be recognized that other combinations of hardware and software are also within the scope of the present invention. The present invention may be implemented using hardware software or combinations thereof.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that additions subtractions deletions and other modifications and changes may be made thereunto without departing from the broader spirit and scope of the inventions.

