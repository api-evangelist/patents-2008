---

title: Query proxy system for client-specified models
abstract: A system for translating a query expression for a client-specified model (CSM) to a plurality of query expressions compatible with the object model(s) for a plurality of source systems. The source systems comprise a plurality of databases. The databases comprise source information and X sets of response data. The source information comprises mapping metadata and object model metadata. The X sets of response data is data response to a client query. The client comprises client-specified mapping metadata, a CSM, and a query proxy. The query proxy comprises an import module, a client interface module, and a translator module. The import module imports the source information from the plurality of source systems and determines the mapping metadata and the object model metadata. The client interface module receives the CSM, the client-specified mapping metadata, and a query from a client. The translator module parses the query expression and translates a plurality of query expressions compatible with the object model(s) for the plurality of source systems.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08918412&OS=08918412&RS=08918412
owner: Progress Software Corporation
number: 08918412
owner_city: Bedford
owner_country: US
publication_date: 20081113
---
This application also claims priority under 35 U.S.C. 119 e from U.S. Provisional Patent Application No. 60 988 309 titled A Method And System For Query Translation Utilizing Mapping MetaData filed Nov. 15 2007 which is incorporated by reference herein in its entirety.

The present invention relates to the field of model driven design in general and specifically to the field of data integration using client specified model.

In recent years the volume of data stored in databases has increased dramatically along with the need to share existing data under a single query interface. One solution to these problems is data integration. Data integration is the process of providing a client with a unified way of accessing data residing on multiple source systems. However prior art approaches of data integration have numerous problems that remain unresolved.

One prior art approach of data integration is data warehousing. Data warehousing involves Extracting data from different databases Translating the heterogeneous data to a uniform schema and then Loading the data into a single warehouse repository i.e. the ETL process . The data from the different databases can then be accessed by a client using a single or unified query interface. However this prior art approach is time consuming and computationally expensive.

The data warehousing approach has numerous additional problems. One problem is that the different data architectures are tightly coupled because the data resides in a single repository at query time. As a result it is difficult to maintain the freshness of the data stored in the warehouse without performing multiple ETL processes. For example assume that data from databases A B and C are processed and stored in Warehouse Z. Now assume that databases A B and C are updated with new data. Because the architecture of the data warehousing model is tightly coupled this update will not be realized at Warehouse Z unless a new ETL process in initiated. Another problem with the data warehousing approach is that the warehouse repository can be difficult to construct in web environments because the designer frequently only has access to a query interface instead of all the information on the databases. Yet another problem with the data warehousing approach is these systems do not allow the client to specify a data model for the data stored in the warehouse.

The present invention overcomes the deficiencies and limitations of the prior art by providing a query proxy system and method for retrieval using a plurality of query expressions for a plurality of source systems generated from a query expression for a client specified model.

In one embodiment a computing system includes a client having a query proxy system communicatively coupled to a source system. In particular the query proxy system comprises an import module a client interface module and a translator module. The client also comprises a Client Specified Model CSM and client specified mapping metadata in addition to the query proxy system. The client is communicatively coupled either directly or indirectly to a plurality of source systems. Each source system comprises one or more database s having source information. The source information includes mapping metadata object model metadata and response data for responding to client queries. The query proxy system imports source information from the database s determines which mapping metadata and object model metadata correspond to which source systems receives a CSM mapping metadata and a query expression for the CSM from the client parses the query expression for the CSM and translates the parsed query expression into a plurality of query expressions each of the plurality of query expressions being compatible with the object model for one of the plurality of source systems.

The present invention also includes methods for translating or generating a plurality of query expressions for a plurality of source systems.

A query proxy system and method for translating a query expression for a Client Specified Model CSM to a plurality of query expressions for a plurality of source systems is described.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in an embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

As used herein the terms comprises comprising includes including has having or any other variations thereof are intended to cover a non exclusive inclusion. For example a process method article or apparatus that comprises a list of elements is not necessarily limited to only those elements but may include other elements not expressly listed or inherent to such process method article or apparatus. Further unless expressly stated to the contrary or refers to an inclusive or and not to an exclusive or. For example a condition A or B is satisfied by any one of the following A is true or present and B is false or not present A is false or not present and B is true or present and both A and B are true or present .

Some portions of the detailed descriptions that follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or generating or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Some embodiments may be described using the expression coupled and connected along with their derivatives. It should be understood that these terms are not intended as synonyms for each other. For example some embodiments may be described using the term connected to indicate that two or more elements are in direct physical or electrical contact with each other. In another example some embodiments may be described using the term coupled to indicate that two or more elements are in direct physical or electrical contact. The term coupled however may also mean that two or more elements are not in direct contact with each other but yet still co operate or interact with each other. The embodiments are not limited in this context.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a tangible computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks solid state storage devices read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

The present invention also relates to the persistent storage of data in a database or data storage devices. The data storage device may be any suitable non volatile mass storage device capable of persistently storing data such as but not limited to hard disk drives solid state storage devices optical storage devices a flash memory devices magnetic storage devices etc.

Finally the algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition the present invention is not limited to any particular programming language application programming interface API driver type and or specification. It will be appreciated that a variety of programming languages APIs driver types and or specifications may be used to implement the teachings of the invention as described herein.

The client comprises a query proxy system and optionally a consuming application . The client is also communicatively coupled to the source systems and via one or more networks and or one or more servers . The client and its components are described in more detail below with reference to .

The network comprises any combination of conventional networks such as a local area network LAN a wide area network WAN the Internet an intranet including but not limited to an intranet in an enterprise computing environment an extranet or other suitable communication system wired or wireless. The network can be secure or unsecure. The network communicatively couples the client to the source systems and . The servers comprises any combination of conventional server types e.g. database servers web servers and or application servers and provides any combination of conventional features e.g. database management systems tangible computer readable storage devices model libraries driver libraries API libraries interface devices security devices input peripherals and or output peripherals .

The query proxy system imports source information from each database and on each source system and . The data models for the source systems and are relational object oriented or a data model adapted for web services e.g. XML etc. . The query proxy system is configured to retrieve data from the source systems and and transform the data based on a client side schema. The client side schema is defined by the CSM and client specified mapping metadata See . Thus the query proxy system gives the client total control of how data is translated between the source systems and and the client . This translation requires no custom programming and is completely automated once the data models for each of the source systems and are initially determined.

In some embodiments the CSM and the client specified mapping metadata are specified by a human user of the client via a graphical user interface.

In one embodiment the source system comprises a plurality of databases as shown in . For example the plurality of databases is a plurality of databases similar to database . While the description below will focus on a single database those skilled in the art will recognize that the other databases in the plurality of databases include the same or similar functionality and components. Each database further comprises a plurality of sets of source information . Each set of source information comprises a set of mapping metadata and a set of object model metadata . The database further comprises X sets of response data where X equals any nonnegative integer including zero . The X sets of response data comprises information responsive to queries received from the client .

The plurality of databases are conventional tangible databases that store sets structured collections of source information . The sets of source information comprise any combination of conventional relational object oriented or XML computer code stored on a plurality of tangible computer readable storage mediums e.g. databases and or . The mapping metadata comprises data describing relationships between the logical model and physical model for example a mapping between a logical schema and physical schema such as in JDBC or SQL. The object model metadata comprises any combination of conventional object models such as any relational object object relational hierarchical and or network models. In one embodiment the X sets of response data are stored across the plurality of databases a tangible computer readable storage medium and comprise data stored in heterogeneous or homogeneous data systems.

Optionally the databases also comprise or are communicatively coupled to a security device to prevent unintended access to data and or any combination of other conventional features that facilitate query processing such as a driver library comprising e.g. ODBC drivers JDBC drivers ODBC JDBC bridges JDBC ODBC bridges etc. an API library comprising e.g. ODBC APIs JDBC APIs etc. and or an interface device .

The storage medium comprises a hard disk flash memory or any similar computer readable storage device.

The CSM comprises any conventional object model specified by the client or a human user of the client . An object model is a description of the structural relationships among components of a database. For example the CSM comprises any object model imported from the Unified Universal Modeling Language UML any conventional object models based in whole or in part on the Open Applications Group Specification OAGIS or a customized object model unique to a specific enterprising environment e.g. an object model custom engineered for a particular enterprise computing environment .

The client specified mapping metadata is information that describes the relationship among classes of data stored on the client side. For example the client specified mapping metadata can describe the structure of data stored on one or more a client side databases not pictured in contrast to the databases and on the source side.

At a modeling stage the query proxy system imports a plurality of sets of source information from a plurality of source systems and . The query proxy system determines sets of mapping metadata e.g. one set per source system and and sets of object model metadata e.g. again one set per source system and based on the sets of source information . Once determined the sets of mapping metadata and sets of object model metadata are stored on any client side storage device e.g. storage medium for later use and reuse. The query proxy system receives a CSM client specified mapping metadata and a query from the client each of which can be specified by a human user of the client via a graphical user interface. In preferred embodiments the query is expressed in a query language expressed in any context free grammar e.g. Backus Naur Form etc. that is sufficiently general enough to express abstract queries including complex predicates over each of the source system object models.

At runtime the query proxy system transforms the query received from the client into a plurality of queries compatible with the object models for the plurality of source systems and executes the plurality of queries against the source systems and and receives results from the source systems and responsive to execution of the queries. Using the same client specified mapping metadata these results are transformed into instances of the CSM and are a subset of the X sets of response data stored across the plurality of databases . The query proxy system is described in more detail below with reference to .

Optionally the client can also comprise or be communicatively coupled to any combination of client input peripherals client output peripherals an interface device a security device and or a consuming application .

Referring now to one embodiment of the query proxy system is described. The query proxy system comprises an import module a client interface module and a translator module . In some embodiments the query proxy system further comprises a runtime module . In some embodiments modules and comprise computer readable computer code stored on a tangible computer readable storage medium e.g. storage medium . The query proxy system is communicatively coupled directly or indirectly to a plurality of source systems and in a conventional manner.

The import module is adapted to communicate with the source systems and . The import module imports the mapping metadata and the object model metadata using any combination of importation methods including parsing metadata from one or more XML databases querying tables in one or more databases importing APIs from one or more databases including e.g. Java API importer data reflection introspection across one or more databases SQL metadata querying across one or more databases or parsing header files from one or more databases. The import module stores the mapping metadata and the object model metadata on a storage device e.g. storage medium for later use by the client interface module and the translator module . While the import module is shown as being a separate module of the query proxy system in from the client interface module those skilled the art will recognize that in another embodiment the import module is part of the client interface module . Further those skilled in the are will also recognize that in other embodiments the mapping metadata is inherently part of the import module and need not be imported.

The client interface module is adapted to receive a CSM the client specified mapping metadata and a query from the client . In one embodiment the client interface module is routines or software that control the receipt of information the generation and presentation of interfaces and the receipt of input data. For example the client interface module generates a graphical user interface adapted to receive input from a human user including dialog boxes and or drop down menus in which a human user of the client specifies the CSM the mapping metadata and the query. Example user interfaces are shown in and described below. While the client interface module is shown as being a separate module of the query proxy system in from the CSM those skilled the art will recognize that in another embodiment the client interface module includes the CSM .

The translator module receives a query or query expression for a CSM from the client interface module and generates a plurality of query expressions each query expressions being compatible with the object models of a respective source system and . The translator module is described in more detail below with reference to .

The runtime module is adapted to execute a runtime command and cooperate with the translator module to transform the query received from the client into a plurality of queries each adapted to be compatible with the object model for a respective one of the plurality of source systems and . The runtime module is further adapted to receive the results of executing the plurality of queries against the source systems and and the results expressed as instances of the CSM by executing transformations described in the client specified mapping metadata .

In one embodiment the query proxy system further comprises a storage device comprising e.g. a buffer RAM or any other tangible computer readable medium a model library for storing one or more CSMs a driver library comprising e.g. ODBC drivers JDBC drivers ODBC JDBC bridges JDBC ODBC bridges etc. and an API library comprising e.g. ODBC APIs JDBC APIs etc. and or an interface device .

Referring now to one embodiment of the translator module is described. The translator module comprises a parsing module and a query expression module . The parsing module comprises a parser or regular expression algorithm adapted for communication to receive and parse the query expression received from the client in particular the client interface module . The query expression module receives the mapping metadata and the object model metadata from the source system or the CSM and the client specified metadata from the client and a parsed query from the parsing module and from these inputs generates a plurality of query expressions each compatible with a respective object model for the plurality of source systems and .

Turning now to depicted is a flow chart of one embodiment of a method for translating a query received from the client into a plurality of queries compatible with the object model s for the plurality of source systems and executing the plurality of queries against the source systems and and receiving results from the X sets of response data stored across the plurality of source systems and .

The import module imports the plurality of sets of source information including the sets of mapping metadata and sets of object model metadata from the source systems and . In one embodiment the import module then determines the plurality of sets of mapping metadata and the plurality of sets of object model metadata that correspond to the respective source systems and . Next the client interface module receives the CSM the client specified mapping metadata and a query from the client .

The translator module receives the object model metadata and the mapping metadata from the import module . The translator module also receives the CSM the client specified mapping metadata and the query from the client interface module . Alternatively in some embodiments the import module stores the object model metadata and the mapping metadata on a storage medium . In these embodiments the translator module retrieves the object model metadata and the mapping metadata from the storage medium instead of receiving the object model metadata and the mapping metadata from the import module .

The translator module parses the query expression and translates the parsed query expression into a plurality of query expressions each compatible with respective object models for the plurality of source systems and based on the CSM the client specified mapping metadata the object model metadata the mapping metadata and the parsed query. The translating step will be described in more detail below with reference to .

For example assume that the source systems and each have different object models object model A object model B and object model C respectively and that the import module has imported source information including the sets of mapping metadata and sets of object model metadata from each of the source systems and and determined which mapping metadata and object model metadata correspond to each of the source systems and . Next the client interface module receives the CSM the client specified mapping metadata and a query expression from the client . The translator module receives the object model metadata and the mapping metadata from the import module . The translator module also receives the CSM the client specified mapping metadata and the query expression from the client interface module . The translator module then parses the query expression and translates the parsed query expression into three query expressions each compatible with a respective one of object model A object model B and object model C. These translations are based on the CSM the client specified mapping metadata the object model metadata for a particular object model A object model B or object model C for a respective source system and and the parsed query. Still more particularly one query expression compatible with object model A is generated by the translator module based on the object model metadata for object model A as well as the CSM the client specified mapping metadata related to the source system and the parsed query. The query expressions for source systems and are generated using similar inputs but particular to their object model B or C and their source system and .

The runtime module receives the client specified mapping metadata the plurality of query expressions compatible with the object models for the plurality of source systems and and the mapping metadata from the translator module . The runtime module then executes the plurality of query expressions against the respective source systems and and generates results from the source systems and . Using the client specified mapping metadata these results are transformed into instances of the CSM . The instances of the CSM can then be used by client side resources not shown to further process the results as desired.

Thus based on the foregoing it will be understood to persons having ordinary skill in the art that the CSM beneficially enables bidirectional transformation of communications between the client and the source systems and by providing transformation of a query received from the client to a plurality of query expressions compatible with the object model s of a plurality of source systems and and transformation of X results from the source systems and to the client as instances of the CSM .

In some embodiments the translator module stores the client specified mapping metadata the plurality of queries compatible with the object models for the plurality of source systems and and the mapping metadata on a storage medium e.g. storage medium . In these embodiments the runtime module retrieves these inputs from the storage medium and then proceeds as described above to perform steps and .

Turning now to depicted is a flow chart of one embodiment of a method for translating the parsed query into a plurality of queries compatible with the object models for the plurality of source systems and . The translator module begins by building a plurality of abstract syntax trees based on the parsed query and the plurality of sets of mapping metadata .

An abstract syntax tree is a representation of the syntax of some source code that has been written in a programming language . Each node of the tree denotes a construct occurring in the source code. The tree is abstract in the sense that it may not represent some constructs that appear in the original source. For example grouping parentheses are generally omitted since in an abstract syntax tree the grouping of operands is implicit in the tree structure. In one embodiment a parser such as that used to compile source code is used to build the abstract syntax tree.

The translator module then translates path expressions against the plurality of abstract syntax trees generated in step and generates a plurality of queries compatible with the object models for the plurality of source systems and based on the abstract syntax trees.

Turning now to depicted is a flow diagram of one embodiment of a process for translating a query for a client specified model received from the client into a plurality of queries compatible with respective object models for the plurality of source systems and executing the plurality of queries against the source systems and and receiving results from the X sets of response data stored across the source systems and . The translator module receives the CSM the client specified mapping metadata and the query expression from the client interface module . The translator module also receives the object model metadata and the mapping metadata from the import module . The translator module parses the query expression and translates the parsed query into a plurality of queries compatible with the object models for the plurality of source systems and as described above with reference to .

The runtime module can receive the client specified mapping metadata the plurality of queries compatible with the object models for the plurality of source systems and and the mapping metadata from the translator module . The runtime module then executes the plurality of queries against the plurality of source systems and thereby generating results from the X sets of response data stored across the source systems and . When received by the runtime module the results are then transformed into instances of the CSM by executing the client specified metadata .

Turning now to depicted is a flow chart of one embodiment of an alternative method for translating a query received from the client into a plurality of queries compatible with the object model s for the plurality of source systems and executing the plurality of queries against the source systems and and receiving results from the X sets of response data stored across the plurality of source systems and . In this embodiment the translator module has processed the CSM and the metadata and at an earlier time and stored these inputs on a tangible storage medium e.g. the computer readable medium and or the storage devices .

The translator module receives a query from the client interface module . The translator module parses the query and translates a plurality of queries for the plurality of source systems and based on the stored inputs and and the parsed query. The runtime module then performs the same processes described above for steps to generate results from the X sets of response data stored across the plurality of source systems and . When received by the runtime module the results are transformed into instances of the CSM by executing the client specified metadata .

Turning now to depicted is a flow diagram of one embodiment of a process for translating a query received from the client into a plurality of queries compatible with the object model s for the plurality of source systems and executing the plurality of queries against the source systems and and receiving results from the X sets of response data stored across the source systems and . Similar to FIG. above this embodiment assumes that the translator module has processed the inputs and at an earlier time and stored these inputs and on a tangible storage medium e.g. the computer readable medium and or the storage devices .

The translator module receives a query expression from the client interface module . The translator module performs steps as described above for to translate the query expression into a plurality of queries compatible with the object model s for the plurality of source systems and based on the stored inputs and and the parsed query expression . The runtime module can perform steps as described above for to generate results from the X sets of response data stored across the plurality of source systems and . When received by the runtime module the X results are transformed into instances of the CSM by executing the client specified metadata .

In some embodiments any combination of the steps and or processes described above for can be performed contemporaneously and or automatically by the query proxy system .

Turning now to depicted is a screen shot of a first embodiment of a user interface for accessing the query proxy system . A user identifies and selects a CSM and one or more data sources and using this interface. A window comprises a user interface window adapted to receive input from a human user of the client . A first graphical image comprises a graphical representation of a CSM . A second graphical image comprises a graphical representation of a source system named AccountDatabase a third graphical image comprises a graphical representation of a second source system named CorporateAccount Database and a fourth graphical image comprises a graphical representation of a third source system named StockQuoteDataSource. Similar to source system and the source systems represented by graphical images and each comprise one or more database s the database s comprising a plurality of sets of source information including a set of mapping metadata and a set of object model metadata and X sets of response data .

As described in more detail with reference to the source systems and represented by graphical images and can be mapped to the CSM represented by graphical image .

Turning now to depicted is a screen shot of a second embodiment of a user interface for accessing the query proxy system . This user interface presents the mappings between the source system data and the CSM . A window comprises a user interface window adapted to receive input from a human user of the client . A graphical image comprises a graphical representation of the second source system CorporateAccountDatabase. A graphical image comprises a graphical representation of a table of client specified mapping metadata for the CorporateAccountDatabase source system represented by graphical image . A graphical image comprises a graphical representation of a table named corporate account. A graphical image comprises a graphical representation of an object of CSM named Account. 

As described in more detail with reference to a human user of the client maps the table corporate account represented by graphical image to the CSM Account represented by graphical image . Once mapped the client executes queries against the source system CorporateAccountDatabase represented by graphical image and receives results from the source system CorporateAccountDatabase represented by graphical image . When received the results are transformed to instances of the CSM object Account represented by graphical image .

Turning now to depicted is a screen shot of a third embodiment of a user interface for accessing the query proxy system . In particular this interface is used by the user to create mappings between the object model of the source systems and the CSM . A window comprises a user interface window adapted to receive input from a human user of the client . A graphical image comprises a graphical representation of a user input box configured to receive input from a keyboard or other input device operated by a human user of the client . A graphical image comprises a graphical representation of a button adapted to receive input from a mouse or keyboard operated by a human user of the client . Graphical images and will be described in more detail below.

As described above for graphical image comprises a graphical representation of a table named corporate account and graphical image comprises a graphical representation of the CSM object named Account. The corporate account table represented by graphical image comprises a plurality of columns. For example a graphical image comprises a graphical representation of a column named Business Group and a graphical image comprises a graphical representation of a column named Customer Id. A graphical image comprises a graphical representation of an aspect of the CSM Account named businessGroup represented by graphical image .

As further described above with reference to the coporate account table represented by graphical image is associated with the CorporateAccountDatabase source system represented by graphical image . The CorporateAccountDatabase source system represented by graphical image is mapped to the CSM Account represented by graphical image by mapping the columns represented by graphical images and to the businessGroup CSM aspect represented by graphical image . For example a human user of the client inputs the expression concat businessGroup customerId in the user interface window represented by graphical image using a keyboard and then clicks the button represented by graphical image using a mouse. This expression is represented graphically as depicted by the two lines and indicating that both Customer Id and Business Group columns on corporate account are related to the attribute businessGroup of the target class Account . The table corporate account represented by graphical image is now mapped to the to the CSM Account represented by graphical image . Thus a human user of the client can specify how data is mapped between the client and the source system CorporateAccountDatabase represented by graphical image . Once mapped the client uses this mapping metadata to translate queries for Account into queries for corporate account and these translated queries are executed against the source system CorporateAccountDatabase represented by graphical image and then the client receives results from the source system CorporateAccountDatabase represented by graphical image . When received the results are transformed to instances of the CSM Account represented by graphical image .

The foregoing description of the embodiments of the present invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the present invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the present invention be limited not by this detailed description but rather by the claims of this application. As will be understood by those familiar with the art the present invention may be embodied in other specific forms without departing from the spirit or essential characteristics thereof. Likewise the particular naming and division of the modules routines features attributes methodologies and other aspects are not mandatory or significant and the mechanisms that implement the present invention or its features may have different names divisions and or formats. Furthermore as will be apparent to one of ordinary skill in the relevant art the modules routines features attributes methodologies and other aspects of the present invention can be implemented as software hardware firmware or any combination of the three. Also wherever a component an example of which is a module of the present invention is implemented as software the component can be implemented as a standalone program as part of a larger program as a plurality of separate programs as a statically or dynamically linked library as a kernel loadable module as a device driver and or in every and any other way known now or in the future to those of ordinary skill in the art of computer programming. Additionally the present invention is in no way limited to implementation in any specific programming language or for any specific operating system or environment. Accordingly the disclosure of the present invention is intended to be illustrative but not limiting of the scope of the present invention which is set forth in the following claims.

