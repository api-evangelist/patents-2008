---

title: Exchange infrastructure system and method
abstract: An exchange infrastructure for message-based exchange and integration of a collection of heterogeneous software components is disclosed. The exchange infrastructure includes a repository for storing design-time collaboration descriptions of a plurality of software components, and a directory for storing configuration-specific collaboration descriptions of a runtime system landscape. The exchange infrastructure further includes a runtime engine configured for message-based exchange of information based on the configuration-specific collaboration descriptions. At runtime, the runtime engine receives messages, and resolves intended or required receivers based on message content and parameters provided by the configuration-specific collaboration descriptions from the directory.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08065657&OS=08065657&RS=08065657
owner: SAP AG
number: 08065657
owner_city: Walldorf
owner_country: DE
publication_date: 20080124
---
This application is a continuation of U.S. patent application Ser. No. 10 402 349 issued as U.S. Pat. No. 7 346 893 on Mar. 18 2008 which claims priority to U.S. Provisional Patent Application No. 60 368 848 filed Mar. 28 2002. The contents of both applications listed in the paragraph are incorporated by reference.

The following description relates to enterprise systems and associated architectures and techniques for collaborative business processes.

Companies face an increasing need for integration of and collaboration among their information and enterprise software systems. In most current system landscapes many components are directly connected in a one to one relationship with other components with the integration capabilities hardwired into the application components and individual mappings programs. Under these conditions collaborative sharing of information or process control is difficult if not impossible. Upgrades changes or extensions to an infrastructure of directly connected components are challenging and resource intensive.

New electronic business collaboration however typically requires connectivity among all applications inside and outside of company boundaries. Networks such as the Internet provide opportunities for systems to communicate almost instantly with other systems or individuals. Business processes that once were restricted to intranets and their users are now moving to the Internet to become an effective composition of Web services. A Web service is a programmable self contained self describing modular application function that can be published discovered or invoked through an open Internet standard.

Processes such as supply chain planning sourcing and demand forecasting are automated across enterprises and within regions and can be implemented across systems at only marginal communication costs. To achieve this result components from different vendors ideally should be integrated into a consistent infrastructure. However comprehensive system upgrades of existing enterprise software or large scale replacement strategies in heterogeneous system landscapes tend to be too costly or otherwise and simply unfeasible in terms of time and capital resource costs.

While technical connectivity is provided using open protocols and standards like the hypertext transfer protocol HTTP and extensible markup language XML the challenge of mapping different business semantics remains. To capture future rounds of efficiency gains enterprises increasingly will be required to deploy a new breed of collaborative business processes that cross enterprises or functions within an enterprise. In addition enterprises will increasingly need to process real time scenarios instead of performing batch processing. These collaborative processes will have significantly more sophisticated integration requirements than traditional processes.

This document discloses an exchange system and method that assists in integrating business process tools and applications. In one aspect a system for integrating a heterogeneous collection of software components is provided. The system includes a repository for storing design time collaboration descriptions of a number of software components. The system also includes a directory for storing configuration specific collaboration descriptions of a runtime system landscape. The runtime system landscape includes at least a portion of the software components described in the repository. The configuration specific descriptions can be based at least in part on the design time descriptions of the repository and add configuration specific information that is needed to execute message based exchange of information.

The design time collaboration descriptions include business scenarios business processes routing objects message transformation mappings and message interfaces for the software components. The configuration specific collaboration descriptions include runtime descriptions of the business scenarios business processes routing objects message transformation mappings and message interfaces for each software component in the runtime system landscape. A system landscape directory is also disclosed. The system landscape directory includes design time descriptions of the software components as well as configuration specific descriptions of the runtime system landscape.

A method for integrating a heterogeneous collection of software components is also disclosed. In the method design time collaboration descriptions of a plurality of software components are stored in a repository. Configuration specific collaboration descriptions of a runtime system landscape are then generated based on the design time descriptions. The configuration specific collaboration descriptions are stored in a directory. The directory is accessible by a runtime engine for executing the message based exchange of information according to one or more business processes set up by an enterprise. In the method recipients of each message need not be specified but the business processes are executed according at least in part to the content of each message and the parameters provided by the directory.

A method for integrating a heterogeneous collection of software components includes exchanging messages among software components in the runtime system landscape that are connected via an XI. The method includes receiving a message from a sending application and determining a logical receiving application of the message based on routing rules defined according to configuration specific collaboration descriptions stored in a directory. The method further includes mapping the message from an outbound interface description associated with the sending application to an inbound interface description associated with a logical receiving application. Accordingly a method to resolve a physical address associated with a receiving application is disclosed based at least in part on the content of the message and parameters provided by the directory.

Details of one or more implementations are set forth in the accompanying drawings and the description below. Other features and advantages may be apparent from the description and drawings and from the claims.

The systems and techniques described here relate to an exchange infrastructure for collaborative processing among various processing components.

The XI is a self contained modularized exchange platform for driving collaboration among the components . The exchange infrastructure includes a central integration repository and directory storing shared collaboration knowledge. The XI supports open standards such as various standard markup languages like the extensible markup language XML web service description language WSDL and simple object access protocol SOAP to provide an abstraction of technical interfaces for the components and for message based communications across heterogeneous component interfaces. The self contained modularized functions of the XI can be provided as one or more Web services based on standard Internet technology and therefore can be published discovered and accessed within a network of components using open standards.

The integration server includes a runtime engine that provides messaging and business process control at runtime for connecting services and managing the process flow of value chains. The integration server also includes other exchange services that typically require an application specific implementation. The exchange services include analytics and master data services. The exchange services can have access to all business documents within the system landscape. For each enterprise proprietary as well as third party components including Web based applications communicates with the integration server via one of a number of adapters .

Like the integration repository and integration directory the integration server is configured for deployment within any existing system infrastructure. The integration server can be a dedicated server that applies the shared collaboration descriptions in the integration directory of the supported system landscape in a runtime collaboration environment. A runtime workbench includes a monitoring application to allow organizations or users manage the operation of the XI reliably and efficiently.

Using the XI new interfaces can be defined for any application employing a proxy. The proxy hides the communication technology stack from the application and presents the application with a programming language dependent interface. Thus the interface for the application can be implemented locally with the XI and the proxy can implement all communication steps and eliminate the need to implement low level communications from the XI to the new interface.

A proxy generator based on information stored on the integration repository can generate proxies on demand. The proxy generator uses the interface information described via a standard Web based language such as WSDL or XML schema to create platform and programming language dependent code in the application development system. The communication logic can be implemented based on the proxy that represents the interface description of the respective development platform such as Java ABAP and .NET for the web based applications . The proxies convert platform specific data types into XML on the outbound side and vice versa on the inbound side and provide access to the component specific local runtime engine . On the outbound side proxies are generated completely. Outbound proxies can be called via a service invocation provided by an application developer. On the inbound side only proxy skeletons need to be generated as implemented by the receiving application. Inbound proxies require the service implementation of the application that must be provided by the application developer.

The structure and operation of the integration repository system landscape directory and integration directory will now be described in further detail. With reference to the integration repository includes descriptions of business processes routing objects mappings and interfaces all of which are defined according to one or more business scenarios . The business scenarios of the integration repository describe and configure message based interaction between application components or business entities. A user can select one or more business scenarios described in the integration repository as a best practice for rapid configuration of the XI .

The business processes are extensible compound Web services executed using a business process engine not shown . Each business process can be modeled centrally in the integration repository . A company or user designs each business process according to its business needs independently of the technical implementation. There may be several categories of business process templates i.e. generic business processes industry specific processes and company specific processes for example. Each business process identifies the Web services that are needed and that must be interconnected. In one specific implementation business processes are defined using a graphical interface and then stored in a standardized format such as Business Process Modeling Language BPML for example. The business process engine can then interpret and execute these models to drive collaboration among software components associated with the business process .

Routing objects are predefined criteria to determine potential receivers of messages that must be distributed between software components and business partners during collaborative processing. Information about the routing objects is used in determining receiving application s prior to processing a complete message for distribution and to be able to reuse certain criteria across different interfaces and provide a more abstract view on these interfaces. Mappings define transformations between message interfaces message types or data types in the integration repository that may be required. These transformations include structural conversions and value mappings. Structural conversions are used for semantically equivalent types that are syntactically or structurally different whereas value mapping may be used when an object is identified by different keys in multiple systems. In a specific implementation a graphical mapping tool is provided to a user to assist in mapping and transforming data is based on Extensible Styesheet Language Transformation XSLT Java code or any other code that could be generated by the graphical mapping tool.

The integration repository is the central point of entry for interface development storage and retrieval. To that end the interface repository includes one or more interfaces representing interface descriptions of all message interfaces of all software components in the environment. The interface repository even provides interfaces that may potentially be used in a certain environment whether or not they are actually used in that environment. Accordingly the interfaces can be implemented on any component using any technology. In one implementation the interfaces are based on WSDL and many other implementations are possible. Message interfaces are made up of message types which are in turn made up of data types. The data types can be described using XML Schema Definition Language XSDL . An example of a data type is address which is used in the message type Create PO and can be reused for the message type Create Invoice. Interfaces can be arranged according to any classification such as inbound and outbound or synchronous and asynchronous.

The integration directory contains detailed collaboration knowledge that describes the configuration of each component as installed in the system i.e. the integration directory is dependent on the concrete system landscape versus the landscape independent descriptions in the integration repository . The integration directory details information from the integration repository that is specific to that configuration and can be filled automatically using generated content from the integration repository or manually using graphical tools. In an exemplary implementation the integration directory is built on a Java platform and its content is represented via XML using open Internet standards. Like the integration repository the integration directory is open for third party and partner collaboration knowledge. The integration repository can be upgraded without affecting the integration directory or any active runtime collaborative processes. The user then decides which changes should be transferred to the integration directory either as predetermined automatic upgrades or manually via graphical tools.

The integration directory includes descriptions of business scenarios business processes configured routing rules and executable mappings . The integration directory also includes descriptions of active Web services and active business partners . The business scenarios in the integration directory represent the overall view of the interaction among interfaces and mappings in the context of the actual configuration relevant for the specific implementation. The business processes represents an executable description of all active business processes.

The routing rules determine the receivers of a message on a business level. In one specific implementation the content of a message is used as a routing rule . Other parameters may also be used. Relevant input parameters include the sender the sender message type the message to identify the receivers and the receiver message type. The routing rules can be described declaratively using XML Path Language XPath i.e. by using a graphical tool or can be coded in Java. Information on the routing rules is accessed by the runtime engine see at runtime.

The routing rules may use logical terms to describe senders and receivers to separate them from the physical address provided by the Web services described in the integration directory . The physical address can therefore be changed without changing business oriented content. Mappings in the integration directory represent mappings required in the runtime system landscape in contrast to the integration repository mappings that contains all supported mappings. Some new entries however such as a new sequence of mappings may be made only in the integration directory to address additional Web services for mapping for example. The runtime engine accesses the integration directory mappings at runtime.

Web services describe implemented interfaces of the current system landscape as well as active Web services supported by business partners. As such Web services information can be exchanged with UDDI compatible directories or added manually. Each Web service description also provides physical addressing details access information and other special attributes such as uniform resource locator URL protocol and security information. In one implementation the Web services are described in WSDL and SOAP and ebXML may be used for messaging protocols. The runtime engine accesses information about the Web services at runtime as well.

Business partners defines usual information for business partners of a company such as names addresses and URLs but may also contain more detailed and sophisticated information. For instance the business partners may include a description of the message formats the company s partner can directly receive and process or of security protocols used for safe communications or even trading terms. The kind of information stored in business partners can be governed by company specific decisions of the company using the XI .

The integration repository and integration directory use software component descriptions stored in the system landscape directory . The system landscape directory includes design time descriptions of components for the integration repository and a configuration specific collaboration description of a system landscape at runtime for the integration directory . The components represent component descriptions that include information about application components as well as information relating to their dependencies on each other. In a specific implementation the component descriptions are based on the standard Common Information Model CIM of the Distributed Management Taskforce DMTF . Since the integration repository includes design time information only component type information independent of actual installation is stored as components . The component descriptions can be added using an API or interactively using a graphical user interface.

The system landscape describes the runtime system landscape actively using the XI . The system landscape describes which components are installed and available on certain machines within the system which instance or client was chosen further information on the installed components other system landscapes and so on. The system landscape is also based on an open architecture and can adhere to a widely accepted standard such as CIM. As such many proprietary and third party components can be configured to automatically register themselves in the integration directory system landscape upon being installed. Access interfaces to the system landscape can be based on open standards as well such as the Web based Enterprise Management WBEM and SOAP standards.

With reference to a specific view of the integration directory the system landscape directory and the runtime engine in a collaborative runtime environment for executing collaborative business processes will now be described. The collaborative runtime environment integrates all runtime components relevant for exchanging messages among the connected software components and business partners. The collaborative runtime environment is executed by the integration server or Web application server each of which can include an instance of a runtime engine according to informational resources provided by the integration directory and system landscape directory .

The runtime engine which exchanges all messages between the various interconnected components includes two layers an integration layer and a messaging and transport layer . The integration layer includes a business process engine for executing centrally modeled business processes a logical routing service and a mapping service . The messaging and transport layer provides a physical address resolution service a messaging and queuing service and a transport service preferably via HTTP. Other exchange services in the integration server can complement the runtime engine .

At runtime business processes are instantiated and executed by the business process engine that executes the respective Web services described in Web services independent of their location according to the business process model. Thus a company can monitor and control the overall business processes in several ways by tracking the actual step of a given process instance and the Web services that have been successfully completed by reacting on events and by integrating the work set and alert management of a portal infrastructure. The business process engine is independent of the semantics of the executed business processes and is configured as a mediator and facilitator of business processes of their interaction with technical components.

With reference also to for a given message the logical routing service uses information on the sending application and the message interface to determine receivers and required interfaces by evaluating the corresponding routing rules as shown at . The routing rules are part of the configuration specific descriptions of the runtime system landscape provided by the integration directory and can be implemented as XPath expressions or Java code. The mapping service determines the required transformations that depend on message sender and sender interface as well as the receiver and receiver interface at . In the case of asynchronous communication even the message direction is determined to appropriately transform input output and fault messages.

After retrieving the required mapping from the integration directory the mapping service can either execute XSLT mappings or Java code or any combination in a given sequence to the content of the sent message. Below the integration layer messaging queuing and transport services move the message to the intended or required receiver s . After the message is transformed into the format expected by each receiver the physical address of the required receiver service and other relevant attributes are retrieved from the integration directory and mapped to the message at .

A queuing engine in the messaging and queuing service stores ingoing outgoing erroneous and work in progress messages persistently. The messaging layer of the runtime engine provides queuing functions for the physical decoupling of application components and guarantees messages are delivered exactly once according to a protocol i.e. the EO protocol . The transport service enables the runtime engine to act as both a client and server. The transport service implements a client that enables outbound communication and a server that handles inbound communication by accepting incoming documents. Additional server functions can address situations in which the receiver has no server by supporting polling over the transport protocol used. Preferably HTTP is used but other transport protocols may be used as well.

At configuration specific collaboration descriptions are generated based on the design time collaboration descriptions. The configuration specific collaboration descriptions include descriptions of configured business processes configured routing rules active Web services executable mappings and active business partners. The configuration specific collaboration descriptions relate to the specific system landscape at runtime and are stored in a directory at . Once in the directory the configuration specific collaboration descriptions are accessible to a runtime engine at and used for message based exchange of information among software components in the runtime system landscape as shown at .

At the runtime engine maps the message to one or more inbound interface descriptions associated with the one or more logical receiving applications. Accordingly the physical address of the one or more logical receiving applications is resolved at . The runtime engine then appends the physical address to the message and sends the message to each resolved physical address associated with a receiving application as shown at . In this way messages of any format protocol or standard can be exchanged between software components connected to the XI whether or not the software components share the same communication protocol or standard.

Although a few embodiments have been described in detail above other modifications are possible. Other embodiments may be within the scope of the following claims.

