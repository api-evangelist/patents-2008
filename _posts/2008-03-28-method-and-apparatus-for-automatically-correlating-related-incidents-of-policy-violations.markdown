---

title: Method and apparatus for automatically correlating related incidents of policy violations
abstract: A method and apparatus for automatically correlating policy violation incidents. In one embodiment, the method includes receiving user input identifying one of policy violation incidents stored in a data repository, where each policy violation incident is associated with one or more attributes. The method further includes automatically correlating the identified policy violation incident with other policy violation incidents that have in common at least one attribute with the identified policy violation incident, and presenting the resulting correlation information to a user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07996374&OS=07996374&RS=07996374
owner: Symantec Corporation
number: 07996374
owner_city: Mountain View
owner_country: US
publication_date: 20080328
---
Embodiments of the invention relate to the field of processing data more specifically to automatically correlate an identified incident with other incident that have in common at least one attribute with the identified policy violation incident.

A modern organization typically maintains a data storage system to store and deliver records concerning various significant business aspects of the organization. Stored records may include data on customers or patients contracts deliveries supplies employees manufacturing etc. A data storage system of an organization usually utilizes a table based storage mechanism such as relational databases client server applications built on top of relational databases e.g. Siebel SAP etc. object oriented databases object relational databases document stores and file systems that store table formatted data e.g. CSV files Excel spreadsheet files etc. password systems single sign on systems etc.

Table based storage systems typically run on a computer connected to a local area network LAN . This computer is usually made accessible to the Internet via a firewall router or other packet switching devices. Although the connectivity of a table based storage system to the network provides for more efficient utilization of information maintained by the table based storage system it also poses security problems due to the highly sensitive nature of this information. In particular because access to the contents of the table based storage system is essential to the job function of many employees in the organization there are many possible points of possible theft or accidental distribution of this information. Theft of information represents a significant business risk both in terms of the value of the intellectual property as well as the legal liabilities related to regulatory compliance. In order to prevent malicious and unintentional data breaches commercial and government regulations often impose restrictions on how confidential data may be stored the format of confidential data who can access that confidential data as well as whether confidential data may be transmitted e.g. by email . In order to comply with these regulations companies create policies to govern how confidential data is stored in the various applications in what format the confidential information is stored who can access that confidential data and to prevent transmission of confidential data. In order to implement these policies conventional systems can detect policy violations however each policy violation is treated as an individual incident and recorded individually.

For example for each recorded policy violation typically an administrator would manually try and find out what happened to cause each of the policy violations and subsequently perform remediation duties required by the policy for each of the policy violations. Although the administrator can manually correlate multiple policy violations by manually identifying similarities between the multiple policy violations this process may be very inefficient especially for a large number of policy violations. Also by manually correlating the policy violations it may be very difficult to correlate policy violations that occur as part of a related set of events. For example an email exchange involving many emails could generate multiple policy violations over time however the administrator may attempt to remediate each of the generated policy violations individually unless the administrator manually identifies that these policy violations are part of a single set of events. Since administrators need to be able to identify abnormal patterns of policy violating behavior the process of manual correlations is a cumbersome process that consumes a lot of time to identify similarities between various policy violations. This problem may be compounded with the time between the possibly related policy violations. For example it may be very difficult to manually correlate policy violations that have occurred in different moments of time such as twenty days between policy violations. In addition for cases that require immediate remediation manual correlation by an administrator may be not fast enough to identify the policy violations as being related for immediate remediation. For example manual correlation may not be efficient in a scenario where a given user commits many policy violations within a short time period.

There are conventional security oriented network monitoring products that attempt to deal with event correlation however these conventional solutions tend to be focused on correlating repeated sequences of events such as non policy violating events rather than finding multiple incidents with similar attributes. Moreover none of these conventional solutions deal with policy violations such as violations of data loss prevention policies.

A method and apparatus for automatically correlating an identified policy violation incident with other policy violation incidents that have in common at least one attribute with the identified policy violation incident. In one embodiment the method generates a list of the attributes of the identified policy violation incident and for each of the attributes generates a count of the number of other policy violation incidents that have in common the particular attribute with the identified policy violation incident.

A method and apparatus for automatically correlating policy violation incidents that have at least one common attribute. Policy violation incidents may concern a wide variety of policies including for example data loss prevention policies spam prevention policies virus prevention policies hacking prevention policies etc. In one embodiment a user interface is provided to specify policy violation incidents that are similar to a given policy violation incident. For each axis of similarity the number of similar violations and a list of the similar violations may be generated for the user. The user interface may also list violations which are similar to a given policy along several axes of similarity. The above correlation information allows an administrator to quickly remediate policy violations without having to manually determine what caused each of the policy violations. For example an email exchange involving many emails could cause multiple policy violations however an administrator does not need to remediate each policy violation individually. Instead the administrator can view correlation information associated with the email exchange and can remediate all of the detected policy violations surrounding the email exchange as a single set of related events.

In addition the above correlation information allows administrators to more easily recognize abnormal patterns of policy violating behavior. For example if a given user commits many policy violation incidents within a short time period the administrator might respond to these particular types of policy violation incidents differently than policy violation incidents that occur over a greater period of time. In addition automatic incident correlation may help identify patterns that denote either broken business processes or malicious intent e.g. an abnormally large number of policy violation incidents that have occurred on a single file server that were caused by a single user that have occurred between the same sender and recipient etc. 

Since automatic remediation and workflow are important factors in the cost of remediating any given policy violation incident automatic incident correlation decreases the cost of remediation by reducing the human effort required to remediate policy violation incidents. In addition the correlation information presented to an administrator allows the administrator better understand the vulnerabilities in the organization s business processes and take appropriate actions.

The following description sets forth numerous specific details such as examples of specific systems components methods and so forth in order to provide a good understanding of several embodiments of the present invention. It will be apparent to one skilled in the art however that at least some embodiments of the present invention may be practiced without these specific details. In other instances well known components or methods are not described in detail or are presented in simple block diagram formats in order to avoid unnecessarily obscuring the present invention. Thus the specific details set forth are merely exemplary. Particular implementations may vary from these exemplary details and still be contemplated to be within the spirit and scope of the present invention.

Some portions of the detailed descriptions which follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions and each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

The user interface is provided by the PMS to facilitate user input pertaining to policies such as pre configured template policies or customized policies source data to be protected by a policy or other policy parameters such as policy rules and logical connectives between the rules. In one embodiment the PMS receives the policy parameters via the user interface defines the policy based on the user input and stores the policies in the policy repository . In another embodiment the PMS receives the policy parameters from an Application Programming Interface API or via a configuration file formatted in text or a defined data format e.g. extensible markup language XML or binary format .

In one embodiment the policy includes a set of rules that specify which information should be present in a message to trigger a violation. The set of rules may specify specific conditions e.g. a sender or recipient identifier pattern a protocol to carry messages a destination of the message posted for public discussion e.g. a specific newsgroup name or the like that when present in a message trigger a violation whether the conditions apply to the characteristics of the entire message characteristics of the components of the message or characteristics of message attachments e.g. a message attachment type or size a file attachment name or the like . In yet other embodiments the policy includes rules requiring that the message contain a specific keyword s or an expression matching a specific regular expression pattern. In one embodiment the rules in the policy are combined using logical connectives of first order logic e.g. AND OR NAND NOR NOT equivalent nonequivalent or the like . It should noted that messages being examined for policy violations include messages being transmitted e.g. email message instant messages etc. as well as messages being stored in databases caches etc.

The policy repository may store policy templates configured based on regulations concerning handling of sensitive information maintained by an organization. These regulations may include for example the Health Insurance Portability and Accountability Act HIPAA ensuring the confidentiality of electronic protected health information California Senate Bill 1 SB1 or Senate Bill 1386 SB1386 controlling customer information leaving the company and affiliates the Gramm Leach Bliley Financial Services Modernization Act controlling customer information leaving a financial institution the Cardholder Information Security Program CISP controlling handling of customer credit card information maintained by an organization or the like. In another embodiment the policy repository stores policies that are not templates but have been configured based on corporate data governance policies. In one embodiment the policy templates or customized policies are pre configured based on input provided by individuals familiar with the relevant regulations and stored on a server not shown .

The DMS is responsible for monitoring the incoming messages based on the information received from the PMS e.g. policies to detect policy violation incidents. For example the DMS may be responsible for monitoring messages sent over the network e.g. email messages messages posted on the Internet for public discussion or the like. as well as data processed by personal computing devices and data stored on data storage media of personal computing devices such as portable computers desktop computers Personal Digital Assistants cell phones or the like. Once the DMS has detected a policy violation incident the policy violation incident is stored in the incident data repository .

In one embodiment the incident correlation engine is configured to access data stored in the incident data repository that stores data regarding multiple policy violation incidents as described below. In one embodiment the incident correlation engine resides on a server or a workstation and connects to the incident data repository over a computer network that communicates any of the standard protocols for the exchange of information. Alternatively the incident correlation engine can reside on the machine that manages the incident data repository . In one embodiment the incident correlation engine is part of the PMS . In another embodiment the incident correlation engine is part of the DMS . Alternatively the incident correlation engine may be part of an independent system from the PMS and the DMS such as part of an administrative or management console. In another embodiment multiple incident correlation engines are implemented at different locations to provide scalability and or protect multiple possible points of egress of information as well as multiple points of data storage. In another embodiment multiple incident correlation engines are used for parallel access to the policy violation incidents stored in the incident data repository .

In one embodiment the incident correlation engine receives user input via a user interface . The user input may identify one of the multiple policy violation incidents stored in the incident data repository a given time period and or one or more attributes of the identified policy violation incident. In one embodiment the user interface displays a list of the attributes of the identified policy violation incident and presents for each of the attributes a count of the number of other policy violation incidents e.g. generated by the correlation engine which have in common the particular attribute with the identified policy violation incident. The user interface may also provide a link for each of the counts and display a list of the other policy violation incidents e.g. generated by the incident correlation engine corresponding to the count when the link for the particular count is activated.

Although system includes two user interfaces user interfaces and alternatively the user interfaces and may be implemented as a single user interface that facilitates user input regarding policies as well as user input regarding the automatic correlation of policy violation incidents.

As discussed above the user interface enables an administrator to look for incidents with similar characteristics. For example the administrator may see all incidents from the same employee all incidents where the sender and recipient are the same or the like. In one embodiment the user interface allows an administrator to open an incident and then shows a set of links related to incidents pertaining to the open incident. These links may show for example how many times the sender has generated an incident in the last day 7 days 30 days.

In one embodiment the user interface also allows an administrator to detect email threads exposing the same data again and again. In particular an administrator may select in the user interface an incident with the subject The list we talked about. In response the incident correlations section of the user interface may present a collection of links to related reports about this incident including messages with a similar subject. Also in the incident correlations section a count for each of the links is displayed linking to reports that include the related incidents for the particular property. The administrator notices five messages with a similar subject e.g. Re The list we talked about in the last twenty four hours but none in the last 7 days or 30 days. The administrator may activate the link resulting in the user interface displaying a list of the five incidents which allows the administrator to notice the five incidents are all from the same sender to the same recipient. In one click of the link the administrator has collected five messages in an email thread that has exposed the same data each time the sender replied. After having identified these incidents as being related to a single set of events the administrator can easily follow up with all of these reported incidents at once in a single remedial action instead of multiple remedial actions for each individual incident. For example the administrator can send one email to the sender to indicate that the sender has exposed data each time the sender replied to the recipient and to remove the exposed data from any future correspondence or the like.

The user interface may provide a list generated by the incident correlation engine which lists a set of key attributes that are used to correlate to other possible incidents. Different incident types may have slightly different list of attributes. This list may correspond to the incident headers which are representative of the type of different incidents. For each attribute the user interface may display the number of incidents generated with that same attribute value within one or more periods of time for example 1 day 7 days and 30 days. Table 1 1 includes exemplary incident headers corresponding to the list of correlation attributes of a given correlation incident. Table 1 1 includes the attribute types in the rows that correspond to the available types of headers e.g. types of incidents in the columns. For example the correlation attribute of sender may be included when the detected policy violation incident has the header type of HTTP IM SMTP NNTP uTCP FTP and removable media. However the correlation attribute of Subject may be included only when the detected policy violation incident has a header type of SMTP or NNTP.

In one embodiment the automatic correlations may include two types of datapoints a default set of pre determined attributes e.g. attributes that apply to most incidents and a set of optional properties which correspond to specific types of attributes. In another embodiment the automatic correlations may be performed on only pre determined attributes for a given policy violation incident. Alternatively the automatic correlations may be performed on user defined attributes for a given policy violation incident.

In one embodiment the PMS the DMS and the incident correlation engine are coupled to a computer network that communicates any of the standard protocols for the exchange of information. In one embodiment the three subsystems PMS DMS and incident correlation engine run on one Local Area Network LAN . However the PMS DMS and incident correlation engine may be incorporated into the same physical or logical system. In another embodiment the PMS DMS and incident correlation engine may not necessarily reside on the same LAN. The PMS may reside on the same LAN as the incident correlation engine but the DMS may reside on a different LAN which is separated from the LAN on which PMS resides. In this configuration the two distinct LANs may ultimately be coupled together via the Internet but separated by firewalls routers and or other network devices. This is an advantageous configuration for the case where a company specifically wants to restrict another company that needs their database data such as a law firm or marketing agency from violating the first company s database data policy.

In another embodiment the system is directed to monitoring information content residing on a personal computing device of a user to detect user operations that may involve potential misuse of data e.g. saving or accessing restricted source data on any storage device on the computing system using restricted source data in an application printing restricted source data using restricted source data in any network communication protocol or the like . In this configuration the PMS component of the system may reside on a server and the DMS component of the system may reside on a device coupled to the server via a public network e.g. the Internet or a private network e.g. LAN . Alternatively the system may be implemented in other configurations such as hosted configurations distributed configurations centralized configurations or the like.

Although the embodiments described above include description of the PMS the policy repository and the DMS which monitors the incoming messages for policy violation incidents and stores any detected policy violation incidents in the incident data repository these components are not necessary for performing automatic correlation. The automatic correlation may be performed using the incident correlation engine which accesses policy violation incidents stored in the incident repository and provides correlation information via a user interface. That is in other embodiments the policy violation incidents may be detected by other types of systems so long as the other types of systems store the detected policy violation incidents for retrieval by the incident correlation engine .

The EDM detection algorithm may detect structured data that is data stored in databases and other tabular formats. Structured data may include for example customer employee patient pricing information or the like. EDM detection algorithm may allow a policy authors to manage fingerprints of protected data to be matched against information that is copied stored or sent. The EDM detection algorithm can find entire records rows partial rows or individual cells of data that are inappropriately exposed.

The IDM detection algorithm may detect unstructured data stored in documents from file systems or other document repositories. The unstructured data may include for example design plans source code CAD drawings financial reports and any other sensitive or proprietary information stored in documents. IDM detection algorithm may allow policy authors to manage fingerprints of protected documents to be matched against information that is copied stored or sent. The IDM detection algorithm can find full binary matches of documents or partial matches including extracts versions or derivatives.

The DCM detection algorithm detects all types of data in cases where it is impossible or impractical to fingerprint the information to be protected. The DCM detection algorithm uses a combination of lexicons pattern matching contextual validation and file and message attribute information to find confidential data.

The detection engine may use any of the detection algorithms described herein or alternatively other types of detection algorithms known by those of ordinary skill in the art. In addition the detection engine may analyze the context in which the particular sensitive content appears. Context refers to any information about the message or file under analysis other than the content itself. Elements of context may include the sender recipients logged in user protocol of communication language file type or the like. Some elements of context change depending on the data loss threat for example senders and recipients only make sense for network data loss prevention and have no meaning for endpoint data loss prevention. Other pieces of context hold true across the board file type and language have meaning for any type of data loss detection. The context may reveal how data is being stored or moved and can completely change the outward appearance of the data. This may completely change the seriousness of a data loss incident or determine whether there was an incident at all. For example a confidential design document sent to an outsourcing partner may be part of a normal business process but that same document sent to a competitor is a critical data loss event. Because the same data can look vastly different the detection engine may be configured to scan different languages encryption methods and file formats.

Once the detection engine detects a policy violation incident the detection engine stores the policy violation incident in the policy violation database operation . The policy violation incidents may be stored in the policy violation database for later retrieval by an administrator to analyze the policy violation incident and possibly remediate the policy violation incident described below. The detection engine may continuously monitor messages and store the policy violation incidents in the policy violation database .

The incident correlation engine can access the policy violation database . The incident correlation engine can generate a list of all policy violation incidents operation and display the list to the user through a user interface operation . To generate the list of all policy violation incidents the incident correlation engine accesses the policy violation incidents stored in the policy violation database . It should be noted that the list may include all or less than all policy violation incidents and may also be filtered using one or more pre configured parameters or user defined parameters. Once the list of all policy violation incidents is displayed to the user the user can select one of the policy violation incidents from the list and the incident correlation engine receives the user input through the user interface operation . Using the identified policy violation incident the incident correlation engine can perform automatic correlation operation to correlate the identified policy violation incident with other policy violation incidents that are similar to the identified policy violation incident along the time axis and or at least one attribute axis as described below. The incident correlation engine performs the automatic correlation by accessing and searching the policy violation incidents stored in the policy violation database . Once the automatic correlation is performed the incident correlation engine can display the correlated results to the user through the user interface operation .

Although the embodiments described above are directed to automatic correlation of the policy violation incidents that are similar to the identified policy violation incident along the time axis and at least one attribute axis in other embodiments the components of may be used to automatically correlate other types of incidents along only one or more attribute axes as described herein.

Processing logic begins with detecting multiple policy violation incidents block and storing the detected policy violation incidents according to a predefined format block . The policy violation incident may be triggered by a misuse or breach of storing transmitting accessing sensitive information such as confidential data. Confidential data may include personally identifiable information PII which may expose identities of patients or customers intellectual property e.g. design documents source code customer lists or the like corporate data such as sensitive marketing plans and financial statements previously classified data and documents and other sensitive data such as social security numbers credit card numbers marketing plans product pricing schedules of the like. The confidential data may be located on servers desktops and laptops copied to removable storage devices such as Universal Serial Bus USB drives CD ROMs or the like downloaded to local drives transmitted within an organization s LAN transmitted outside of the organization s LAN or the like. Alternatively the policy violation incident may also be triggered by other events such as by unauthorized access to the resources within the network spam events virus events or the like. For example the DMS may monitor machines within a LAN for viruses and for each detected virus store a policy violation incident in the incident data repository . In one embodiment the operations at blocks and may be performed by the DMS of .

Next the processing logic receives user input identifying one of the stored policy violation incidents block . Once the processing logic has received the user input the processing logic automatically correlates the identified policy violation incident with other policy violation incidents that have in common at least one of the attributes with the identified policy violation incident block . In one embodiment for each of the attributes of the identified policy violation incident the processing logic as part of the automatic correlation generates a count of the number of other policy violation incidents that have in common a particular attribute with the identified policy violation incident. In another embodiment the processing logic receives user input specifying correlation parameters such as which particular attributes to be included in the correlation and subsequently generates a count of the number of other policy violation incidents that satisfy the specified correlation parameters or a list of the other policy violations that satisfy the specified correlation parameters. Once the processing logic has performed the automatic correlation the processing logic displays the results of the automatic correlation block . In one embodiment the operations at blocks are performed by the incident correlation engine of .

Upon displaying the results of the automatic correlation the processing logic may receive a user request to display a list of the other policy violations that correspond to a particular count e.g. administrator clicks a link that corresponds to the count and then automatically generate the list of the policy violation incidents to be displayed in the user interface. In another embodiment the processing logic receives a user request to find similar incidents according to one or more user identified attributes and automatically generates a list of the similar incidents that have in common the user identified attributes with the identified policy violation incident. In one embodiment the processing logic provides a dialog box that allows an administrator to identify one or more attributes to be included in the request to find similar incidents.

In another embodiment for each attribute the processing logic generates a list and or provides a hyperlink to the list of policy violation incidents with the same attribute value. In another embodiment the processing logic receives user input identifying multiple attributes of a policy violation incident and generates a list of policy violation incidents that share the same attribute value as that of the given violation for every identified attribute e.g. Policy1 attribute1 Policy2 attribute1 AND Policy1 attribute2 Policy2 attribute2 .

Policy violation incidents may happen at a specific time or may happen as part of a specific scan for policy violation incidents. In the context of a given policy violation incident an administrator may view other policy violation incidents that are similar to the given policy violation incident with respect to one or more periods of time or one or more scan sessions. In one embodiment the periods of time or the scan sessions may be predetermined and automatically included as part of the automatic correlation. In another embodiment the periods of time or the scan sessions may be specified by the user prior to automatic correlation. The user interface can display the automatic correlation of the identified policy violation incident as well as trends of policy violations incidents over one or more periods of time or over one or more scan sessions. In one embodiment when the administrator views the details of a given policy violation incident the automatic correlations and trending described above may be automatically performed and displayed to the administrator alongside the details of the given policy violation. For example the processing logic for each of the attributes of the given policy violation incident generates a count of the number of other policy violation incidents sharing that particular attribute with the given policy violation incident e.g. same attribute value . For example the count of the number of similar policy violation incidents in the last 7 days last 30 days and since the system has existed may be generated and displayed in the user interface as part of the automatic correlation. For another example the count of the number of similar policy violation incidents that happened in the last scan and the count of the number of similar policy violations that happened in all scans may be generated and displayed in the user interface as part of the automatic correlation. Alternatively other types of trends may be performed and displayed in the user interface as part of the automatic correlation.

The policy violation incidents can be correlated across many different attributes. The attributes of similarity may be any of the following attributes 1 attachment name 2 file name 3 application database 4 file owner 5 message subject 6 policy 7 message recipient 8 message recipient Internet Protocol IP address 9 message sender 10 message sender address 11 endpoint user name 12 host name or 13 file server. Alternatively other types of attributes may be used for the identification and automatic correlation of other related incidents.

The incidents may be detected in various scenarios as described below with respect to the listed attributes listed above. For example an email that violates a policy may have an attachment. The attachment name attribute refers to the name of an attached file. A file on disk or written to a disk may violate a policy. The file name attribute may refer to the name of that particular file. A file or message stored in an application database e.g. a Lotus Notes database may violate a policy. The application database attribute may refer to name type and or location of the application database. A file on disk or written to a disk may violate a policy. The file owner attribute may refer to the owner of that file as recorded by the file system. When a message e.g. email violates a policy the message subject attribute may refer to the subject of that message. It should be noted that this attribute can also be used to find correlated violations based on a substring of the message subject. For example High Value Account Numbers might be correlated to Re High Value Account Numbers and Fwd High Value Account Numbers . The policy attribute may refer to the policy that was violated. The message recipient attribute may refer to the recipient e.g. email address of that message and the message sender attribute may refer to the sender e.g. email address of that message for example when a message e.g. email violates a policy. A message such as an HTTP POST may violate a policy. The recipient IP address attribute may refer to the IP address where the message is directed and the sender IF address attribute may refer to the IP address where the message originated. Also when a message such as an email violates a policy the message sender attribute may refer to the sender e.g. email address of that message. The detected policy violation incident may also include the user name of the user who violated the policy since operating system may keep track of the logged in users. The endpoint user name attribute may refer to the user name of the user who violated the policy. Similarly the host name attribute may refer to the name of computer e.g. host computer where the policy violation incident occurred and the file server attribute may refer to the name of the server where the file which violates a policy is located.

As described above with respect to block the detected policy violation incidents are stored according to a pre defined format. In one embodiment each of the policy violation incidents is stored in a policy violation database e.g. policy violation database of having one or more tables. In one embodiment the policy violation database also includes a mapping table that specifies where each attribute is stored e.g. the table name and the column name and a comparison operator e.g. strictly equals case insensitive equals or the like to be used when evaluating the similarity of the attribute values for the particular attribute. Table 1 2 illustrates an exemplary mapping table according to one embodiment.

Referring to method begins with processing logic receiving block user input identifying which policy violation incident should be used for automatic correlation. Once the policy violation incident has been identified the processing logic determines block for each attribute of the policy violation incident the 1 table name of the attribute 2 the column name of the attribute and 3 the comparison operator of the attribute. In one embodiment the processing logic performs a lookup operation to determine the table name column name and comparison operator of the attribute using Table 1 2 discussed above. Next the processing logic reads block the attribute values for the identified policy violation incidents. This may be done by performing a lookup operation in the policy violation database using the table name and column name for each of the attributes and reading the attribute values from those locations. Next the processing logic constructs block one or more queries e.g. SQL queries using the attribute table names the attribute column names the comparison operators and the attribute values for the identified policy violation incident. Next the processing logic performs a search block of the policy violation incidents e.g. stored in the policy violation database using the one or more constructed queries to generate counts of the similar policy violation incidents. In particular for each attribute a count of the number of other policy violation incidents that share the particular attribute with the identified policy violation incident may be generated. In one embodiment a count can be generated for the number of similar policy violation incidents that occurred within a given time period. In another embodiment a count can be generated for the number of similar policy violations using multiple time periods e.g. 1 day 7 days and 30 days . Next the processing logic renders a user interface with the results of the one or more queries block . It should be noted that multiple time periods or scan sessions may be specified and the search may be performed according to each of the specified time periods or scan sessions .

In one embodiment the policy violation incident is identified at block by receiving a user request to perform automatic correlation on the identified policy violation incident. In another embodiment the policy violation incident is identified at block by the administrator selecting the policy violation incident from a list of policy violations incidents and the automatic correlation of the selected policy violation is then performed without the user specifically requesting automatic correlation of the policy violation incident. For example when the administrator selects a policy violation incident to analyze the user interface displays the results of the automatic correlation automatically alongside the details of the selected policy violation. It should be noted that although the embodiment of performs automatic correlation of a single identified policy violation incident in other embodiments multiple policy violation incidents may be identified for automatic correlation. It should also be noted that the method of is used to generate the counts of similar incidents for each of the attributes of the identified policy violation incidents.

In one embodiment the identified policy violation incident is a policy violation that was detected in a message. The message may have one or more attributes that can be used for automatic correlation including for example one or more of the following attributes 1 a message recipient attribute that is representative of an email address of a recipient of the message that triggered the policy violation incident 2 a recipient address attribute that is representative of a network address e.g. IP address of the recipient of the message that triggered the policy violation incident 3 a message sender attribute that is representative of an email address of a sender of the message that triggered the policy violation incident 4 a sender address attribute that is representative of a network address e.g. IP address of the sender of the message that triggered the policy violation incident 5 a message subject attribute that is representative of a subject of the message that triggered the policy violation incident 6 an attachment name attribute that is representative of an attached file of the message that triggered the policy violation incident or the like.

In one embodiment the processing logic is configured to correlate a substring of the message subject attribute with a substring of the message subject attribute of the other policy violation incidents. For example a message with a subject including Re The list we talked about may be correlated with other policy violation incidents that contain the similar subject e.g. Re Re The list we talked about Fwd The list we talked about or Update on the list we talked about . This may be done by correlating a substring The list we talked about with substrings of the other policy violation incidents e.g. the list we talked about .

In another embodiment the identified policy violation incident is a policy violation incident that was detected in a message or a file. The message or file may have one or more attributes that can be used for automatic correlation including for example one or more of the following attributes 1 a policy type attribute that is representative of a policy type of the policy violation incident 2 a user name attribute that is representative of the name of a user e.g. endpoint user name or logged in user that triggered the policy violation incident 3 a host name attribute that is representative of a name of a computer where the policy violation incident occurred 4 a file server name attribute that is representative of a name of a server where the policy violation incident occurred 5 a file name attribute that is representative of a name of a file that triggered the policy violation incident 6 a file owner attribute that is representative of a name of an owner of the file that triggered the policy violation incident or 7 a database attribute that is representative of a name of a database in which a file or a message that triggered the policy violation incident is stored. The attributes may also be a sender a recipient a user a source address e.g. IP address email address or the like destination address e.g. IP address email address or the like a location a server a file type a media type a subject an attachment name or type an extension of a file or the like.

As part of the automatic correlation the processing logic may generate for each of the counts presented at block a list of the other policy violation incidents that have in common the particular attribute corresponding to the particular count and link each of the counts to the corresponding list of the other policy violation incidents. The list may be generated using the operations described below with respect to .

Referring to method may start with processing logic receiving block user input. In the depicted embodiment the user input includes 1 an identified policy violation incident 2 one or more attributes of the identified policy to correlate and 3 a time range. The one or more policy attributes specify which attribute of the identified policy violation incident the user wishes to correlate and the time range specifies a time window in which the other policy violation incidents occurred. The time range may further restrict the amount of correlated results returned. It should be noted however that the time period may be the entire life of the system which would allow all policy violation incidents meeting the attribute criteria to be correlated. Once the policy violation incident has been identified the processing logic determines block for each attribute of the policy violation incident the 1 table name of the attribute 2 the column name of the attribute and 3 the comparison operator of the attribute. In one embodiment the processing logic performs a lookup operation to determine the table name column name and comparison operator of the attribute. Next the processing logic reads block the attribute values for the identified policy violation incidents. This may be done by performing a lookup operation in the policy violation database using the table name and column name for each of the attributes and reading the attribute values from those locations. Next the processing logic constructs block a query e.g. SQL query using the attribute table names the attribute column names the comparison operators and the attribute values for the identified policy violation incident. Next the processing logic performs a search block of the policy violation incidents e.g. stored in the policy violation database using the constructed query to generate a list of the similar policy violation that satisfy the user input conditions specified. In particular the list includes similar policy violations that have in common the one or more identified attributes with the identified policy violation incident within the given time range. Next the processing logic renders a user interface with the results of the query block .

In one embodiment the method is performed in response to a user selecting a given count with the user interface generated by the method . In this embodiment the processing logic receives user input regarding a request to display a list of the other policy violation incidents that correspond to a particular count and generates the list of other policy violation incidents that corresponds to the count. The user may select the particular count by clicking on a link e.g. generated by the processing logic . Once the user has selected the given count which specifies the 1 policy violation incident 2 the particular attribute and 3 the time range block the method performs the operations at blocks as described above to generate and display the list of similar incidents. Alternatively the lists for each of the counts may be have been automatically generated when the counts were generated and may be accessed by clicking on the link which associates the particular count with the corresponding list.

In another embodiment the method is performed in response to a user request to find similar incidents. In this embodiment the processing logic also receives user input identifying one or more attributes of the given policy violation. In response to receiving the request the processing logic constructs a query to search the incident data repository for the similar policy violation incidents that occurred within the given time period and that share the similar attribute with the particular attribute of the given policy violation incident. Using the constructed query the processing logic searches the incident data repository and the search results are used to generate a list of similar policy violation incidents that occurred within the given time period and that share the one or more identified attributes with the identified policy violation incident. For example the user interface which presents the counts for the attributes of the identified policy violation incident may also present a button which opens a dialog box when activated such as the Find Similar button of . The dialog box may allow a user to identify one or more correlation parameters such as specific attributes to be included in the search of similar incidents and specific attribute values for those specific attributes. Alternatively other types of user interface elements may be used to facilitate user input of the particular attributes and the corresponding attribute values. Once the user has selected the specific attributes and the corresponding attribute values the method performs the operations at blocks as described above to generate and display the list of similar incidents.

In one embodiment the processing logic performs automatic correlation of the policy violation incidents that have in common two or more attributes with the identified policy violation incident. For example the user may select two attributes such as the sender and recipient attributes of the identified policy violation incident and the processing logic performs the automatic correlation for other incidents that share the same two identified attributes. The user may also specify which operator to use when selecting more than one attribute. For example the user may specify an AND operator an exclusive or XOR operator an OR operator or the like.

In another embodiment the processing logic begins by receiving user input identifying a given policy from multiple stored policy violation incidents e.g. stored in the incident data repository . Once the processing logic has received the user input the processing logic generates a table having one axis represent a given time period and another axis represent attributes of the given policy violation incident such as illustrated in the GUI of . The processing logic for each attribute of the table generates a count of the number of similar policy violation incidents that occurred within the given time period and that share a similar attribute with the particular attribute of the given policy violation incident. In one embodiment the processing logic generates each of the counts by constructing a query to search the incident data repository for the similar policy violation incidents that occurred within the given time period and that share the similar attribute with the particular attribute of the given policy violation incident. Using the constructed query the processing logic searches the incident data repository and counts the number of similar policy violation incidents in the search results to generate the count for each of the counts.

The GUI also includes a find similar button that can be activated to find similar incidents which opens a dialog box or a new window . The dialog box allows a user to specify which attributes should be used for correlation. In the depicted embodiment the various attributes of the identified policy violation incident are already present in the fields e.g. DJohnson company.com in the sender attribute field of the dialog box . These fields allow a user to select which attributes to include in the correlation as well as further specify the data values of the identified attributes. Once the user has identified one or more attributes and the corresponding values for those attributes the user can initiate the execution of the filter by for example activating the Find Similar button . Upon activation a query is constructed using the specified information as described herein to generate a list of the similar incidents such as illustrated in .

The exemplary computer system includes a processor a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a secondary memory e.g. a data storage device which communicate with each other via a bus .

Processor represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processor may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor processor implementing other instruction sets or processors implementing a combination of instruction sets. Processor may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. Processor is configured to execute the processing logic for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The secondary memory may include a machine readable storage medium or more specifically a computer readable storage medium on which is stored one or more sets of instructions e.g. software embodying any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting machine readable storage media. The software may further be transmitted or received over a network via the network interface device .

While the machine readable storage medium is shown in an exemplary embodiment to be a single medium the term machine readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable storage medium shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term machine readable storage medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media.

Certain embodiments may be implemented as a computer program product that may include instructions stored on a computer readable medium. These instructions may be used to program a general purpose or special purpose processor to perform the described operations. A computer readable medium includes any mechanism for storing or transmitting information in a form e.g. software processing application readable by a machine e.g. a computer . The computer readable storage medium may include but is not limited to magnetic storage medium e.g. floppy diskette optical storage medium e.g. CD ROM magneto optical storage medium read only memory ROM random access memory RAM erasable programmable memory e.g. EPROM and EEPROM flash memory or another type of medium suitable for storing electronic instructions. The computer readable transmission medium may include but is not limited to electrical optical acoustical or other form of propagated signal e.g. carrier waves infrared signals digital signals or the like or another type of medium suitable for transmitting electronic instructions.

Additionally some embodiments may be practiced in distributed computing environments where the computer readable storage medium is stored on and or executed by more than one computer system. In addition the information transferred between computer systems may either be pulled or pushed across the transmission medium connecting the computer systems.

Although the operations of the method s herein are shown and described in a particular order the order of the operations of each method may be altered so that certain operations may be performed in an inverse order or so that certain operation may be performed at least in part concurrently with other operations. In another embodiment instructions or sub operations of distinct operations may be in an intermittent and or alternating mariner.

In the foregoing specification the invention has been described with reference to specific exemplary embodiments thereof. It will however be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

