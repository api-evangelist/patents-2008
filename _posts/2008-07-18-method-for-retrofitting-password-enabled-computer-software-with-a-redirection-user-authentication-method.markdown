---

title: Method for retrofitting password enabled computer software with a redirection user authentication method
abstract: A device, method, and system disclosed herein may be used to integrate and control authentication and passwords among various applications and platforms. The exemplary method may obtain a service ticket from a key distribution center of the key distribution center authentication process and generate a random key. A port between the client and the service may be created and utilized to transmit the service ticket and the random key to a service from the client. The random key may replace a password provided by the user. The random key in the password field of the service logon is transmitted to the service. The service authenticates the random key in the password field with the stored random key in the cache of the service. Once authenticated the service ticket is validated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08196193&OS=08196193&RS=08196193
owner: PistolStar, Inc.
number: 08196193
owner_city: Amherst
owner_country: US
publication_date: 20080718
---
This application claims priority to U.S. Patent Application No. 61 012 167 filed Dec. 7 2007 entitled Password Generation and U.S. Patent Application No. 61 012 086 filed Dec. 7 2007 entitled Single Sign On which are incorporated fully herein by reference.

The present invention relates to user authentication and more particularly relates to pre authentication integration.

In complex computing environments passwords are often the source of frustration wasted time and unnecessary expense. Users regularly access about eight to ten different systems. This frustrates users by requiring them to remember too many passwords having multiple password prompts and the chore of resetting their passwords when they forget them. For example employees in companies using IBM Lotus applications typically have numerous password prompts. Passwords are needed to access Microsoft Windows as well as Domino HTTP sessions such as Lotus Domino Web Access iNotes Sametime QuickPlace and Domino Web applications. Users are often so afraid they will not be able to get back in or utilize a service in the future they leave the figurative key in the door with weak passwords like password or sticky notes posted all over their cubicles. With the increase in remote access and demand for greater resource access by members security issues are becoming a greater concern and bigger challenge. Dictionary attacks hacking and other vulnerabilities caused by poor password quality are putting sensitive information and or resources at risk.

Frequently companies implement an authentication solution that provides a secure and comprehensive security solution. One such solution is a Kerberos network authentication protocol. Kerberos is a network authentication system that has been publicly available since introduced by the Massachusetts Institute of Technology MIT in 1989. Kerberos has become a popular authentication mechanism in Microsoft Windows and Active Directory making it widely employed in the operating system market utilizing the operating system Microsoft Windows . Because of its openness Kerberos can be utilized to create single sign on network environments allowing end users to employ one set of credentials to access all services regardless of platform or operating system.

However many services or applications may still require their own independent security measures which may still require the user to provide identification and password independent of the platform or operating system. This may still result in multiple passwords and user identification maintenance which again may lead to frustration wasted time and unnecessary expense. Many of these services or applications may include an architecture specific to the security measures of the service or application which prevent integration or compromise the effectiveness of another authentication solution.

The present invention is a novel device system and method for key distribution center authentication integration. The exemplary method may identify a user obtain a service ticket from a key distribution center of the key distribution center authentication process and generate a random key by the client prior to authenticating with the service. A secure port between the client and the service may be produced to transmit the user identification the service ticket and the random key to a service from the client. The transmitted user identification the service ticket and the random key may be stored in a cache of the service. The user identification may be entered into a user identification field and the random key may be entered into a password field of the service logon at the client. The random key may replace a password provided by the user or may be hidden to the user and occur without any prompt to the user. The user identification in the user identification field and the random key in the password field of the service logon are transmitted to the service. The service matches the random key in the password field with the stored random key in the cache of the service. Once matched the associated service ticket from the cache is validated.

Embodiments of the invention may have one or more of the following advantages. Embodiments of the invention may generate a random key for each logon and each user. Embodiments may identify the user obtain the service ticket from the key distribution center and generate a random key at various stages of service initiation or logon. The invention may be utilized with a Kerberos or other Public Key Infrastructure PKI and may be in combination with a service utilizing a clear text password. Embodiments of the invention may additionally map the user identification of the service ticket with a user identification in a user directory of the service.

The present invention is not intended to be limited to a system or method that must satisfy one or more of any stated objects or features of the invention. It is also important to note that the present invention is not limited to the exemplary or primary embodiments described herein. Modifications and substitutions by one of ordinary skill in the art are considered to be within the scope of the present invention which is not to be limited except by the following claims.

An authentication integration method may be used to integrate and control authentication and passwords among various applications and platforms of a service. The authentication integration method may extend a service s existing authentication framework to utilize a single sign on authentication platform in a secure fashion. The authentication integration may be carried out pre validation and or pre issuance of keys by certifying authority or trusted third party of a public key infrastructure PKI . One such exemplary certificate authority authentication is the Kerberos network authentication protocol.

Referring to Kerberos utilizes a centralized authentication server s referred to as a Key Distribution Center KDC . The KDC is the trusted third party through which all authentication requests are routed. Kerberos may require direct connectivity to the KDC as the KDC may contain the database of user identifications and passwords for both clients and the Kerberos enabled services. In Microsoft Windows the KDC is a Microsoft Active Directory domain controller. A client first authenticates to the KDC using an Active Directory domain account.

If successful they receive a Ticket Granting Ticket TGT which is cached by the local security subsystem of the client s workstation for a time period of for example 8 24 hours. The TGT is used to prove the client s identity to the KDC when the client requests authentication to other services or resources for example Domino HTTP. The KDC validates the client s TGT ensures the requested service exists within its directory and then encrypts the client s information and a session key in a service ticket. The client s browser may automatically transmit this service ticket to the service but the client cannot actually decrypt the service ticket. Only the service and the KDC can decrypt the service ticket to get the client s information and the session key. The service trusts the credentials in the service ticket because the service knows the ticket could only be created by the KDC and thus recognizes the client must have been authenticated by the KDC in order to receive the ticket. The service ticket has a limited lifetime and the receiving service can store used tickets thus preventing replay attacks. It should be understood that a service may be a variety of resources for example a server an application another user or other resource accessed by a user.

Some services with authentication architecture specific to that service may prevent the integration of a key distribution system. Due to a limit in container sizes of the specific authentication architecture the key distribution system may not be able to piggyback onto the service s authentication architecture. Generally the service s authentication architecture may prompt the user for a user identification and a password. The user may enter or utilize script to automatically enter the user identification and or a password into fields provided by the service at the client . In some services the containers may be designed to hold user identification and passwords directly entered by the user. These containers may be designed with relative limited size. Since the containers are designed to hold a character string memorized by a human and not a larger string designed for security purposes they may be of limited size relative to the size of service tickets or keys. The size of the containers may prevent their use to hold a service ticket granted by the KDC . An exemplary authentication integration system may still leverage these containers by generating a random key designed to fit within the container of the service s specific authentication architecture.

Prior to utilizing the containers the exemplary authentication integration system may establish a secondary channel or portal between the client and the service . The client transmits the user identification a service ticket associated with the certifying authority and the random key to the service prior to the user logging on or accessing the service through the default standard client application. The portal may be a secure portal produced by script on both ends of the communication channel. The secure portal may prevent usurping the overall security of the system by preventing the eavesdropping or snooping during transmission for the user identification the service ticket the random key or other vital information. Once received the service temporally stores the user identification the service ticket and the random key in a cache or other temporary storage.

When the user attempts to logon or access the service the authentication architecture specific to the service may prompt the user for a user identification and a password as previously discussed. Script at the client places the generated random key into the container of the user identification or password. The containers are then transmitted to the service . The service matches the random key in the container with the random key sent via the portal and currently stored in the cache. If the random key is matched the service accesses the service ticket stored and associated with the random key. The service then uses the service ticket as if it had been validly sent to the service .

Referring to an exemplary method for authentication integration according to the invention may be utilized by an authentication system. The process may be initiated by an event occurring prior to the logging on or access of a service block . This event may be triggered by for example but not limited to the startup of the application or operating system of the client . Script on the client side may be used to initiate the process and produce and gather user information block . The client side script may access the user identification in Active Directory. The script may use the user identification and other information to obtain a service ticket from the KDC of the key distribution center authentication process. The script may also generate a random key. The random key may be generated at the client and designed specifically for the service based on the user identification or password containers as previously discussed. The random key may be generated for each session and or for each user. The random key may be base64 encoded and sent via multiple packets over a network. The random key may be designed to only fit within the password container or other embodiment designed to be fit in the user identification container or other container and or combination of containers used by the service s authentication process.

The script may also work in conjunction with script executed on the service side to provide a portal between the client and service . The script may utilize an Eclipse framework. In another exemplary embodiment the service may create a listener socket on a configurable port at startup of the service . The script on the service side may produce a thread designed to listen for the transmission of information from the client . The script on both sides of the transmission may follow predetermined security protocol to authenticate and provide secure communications between the client and service . The client transmits the user identification the service ticket and the random key to the service block .

When the service receives the user identification the service ticket and the random key the information may be stored in a cache of the service block . The script may also produce and manage a single global hash map data structure in which to store the service ticket. The hash map may allow for very fast lookups based on a unique key value. The hash map can contain multiple tickets for a single user and may only be saved in memory. By preventing storage to a hard drive access to the information may be limited. Once a ticket is used during a session its associated object may be immediately purged from the hash map. If the server is shutdown all entries in the hash map may be automatically destroyed.

Script executed on the service may utilize an application programming interface API of the service to override authentication of the service . The method may use or validate the credentials for example user identification and password as desired. The script may be used to override the service s authentication process and accept authentication by the script and ignore the authentication processes of the service . In an example using Kerberos and Sametime server the user identification field may default to the last value input by the user since it s ignored by the Kerberos process the user identification field may be left unmodified. The Password field may be populated with the random key value as previously discussed. In various embodiments the script may override features of the service s authentication or may work in conjunction with features of the service s authentication.

The authentication process of the service may be recognized transparent or a hybrid to the user. For example the user may not even be aware that the user is logging into a service when the user accesses the service . In the example provided the user may be prompted by the service to enter a user identification and password. The user may enter both items but be unaware that the entered password is replaced by the generated random password and the generated random password is actually used to log into the service .

The script may override the authentication processes of application of the service by for example the UI Branding extension point that allows for application to display their own corporate graphic or logo on the logon dialog. By registering for this extension the script may effectively inject code into the code of the application. Through window hierarchy child and parent structures the script is able to obtain a reference to the top level window of the logon dialog. With the Eclipse framework the script may be able to register for the event that fires when the logon dialog is activated created. By listening for this event the script may delay the window from appearing displaying while it attempts the SSO process and even completely prevent it from appearing by drilling down into the window hierarchy to find handles references to the user identification and password fields populating them automatically and simulating the user pressing the Logon button which would normally close the logon dialog . This may be done using standard Eclipse API calls block .

The user identification and password containers are transmitted from the client to the service block . This may be accomplished using the authentication architecture of the service . The authentication architecture may use encrypted packets to transmit the containers. When the service receives the packets the script on the service side may match the random key in the password field with the stored random key in the cache of the service block . If invalid the service may deny access to the service by the client . If matched the service may validate the service ticket. The service may utilize the user identification as the fully authenticated identity to the service or map it to some other application specific name. The client may now access resources of the service and make use of the service ticket authentication process. Script on the service side may limit duration of the random key. The process may be completed once the random key is authenticated or after expiration of the random key or service ticket block .

Since the random key may be specific for each user and or each session the ability to determine the random key by third party may be limited or even prevented. The random key may be tied to the duration of the service ticket. Therefore the random key may be valid only for the period of time the service ticket is valid. The duration of the random key may be tied to the complexity of the key. For example a smaller password container may utilize shorter session duration to limit the ability of the random key being compromised.

The components of the exemplary embodiments may use libraries executable files and plug ins to carry out the embodiments of the invention. The exemplary computer system provides a block diagram for demonstrating action and components of the system. Although the exemplary block diagram utilizes a computer system it is understood that various components and actions may be substituted combined or performed externally.

As should be understood by the previous examples provided in the exemplary embodiments may be implemented in a variety of computer software firmware hardware digital electronic circuitry or in combinations of them. The exemplary embodiments described herein can be implemented as a computer program product i.e. a computer program tangibly embodied in an information carrier e.g. in a machine readable storage device or in a propagated signal for execution by or to control the operation of a communications processing apparatus e.g. a processing device a computer or multiple computers. A computer program can be written in any form of programming language including compiled assembled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine library or other unit suitable for use in a computing environment. A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.

Modifications and substitutions by one of ordinary skill in the art are considered to be within the scope of the present invention which is not to be limited except by the following claims.

