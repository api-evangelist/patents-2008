---

title: Method for data transmission
abstract: A method for data transmission in a system is disclosed. The system includes a computer () and a peripheral device (), which are connected to each other via a network (). The computer has hardware resources (), including a network interface () and a controller (), which is designed to provide a virtual machine system in that it maps the hardware resources (), including the network interface () onto logical interfaces () in virtual machines (). A peripheral device adapter () provided in the computer () is mapped by the controller () onto a logical peripheral device interface () in one of the virtual machines () and data is exchanged between the peripheral device () and the virtual machine () via the network (), the peripheral device adapter (), and the logical peripheral device interface () while bypassing the logical interfaces () mapping the network interface () into the virtual machines ().
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08356298&OS=08356298&RS=08356298
owner: Fujitsu Siemens Computers GmbH
number: 08356298
owner_city: Munich
owner_country: DE
publication_date: 20080604
---
This application claims priority to German Patent Application 10 2007 025 989.3 which was filed Jun. 4 2007 and is incorporated herein by reference.

The invention relates to a method for data transmission e.g. between a virtual machine of a computer and a peripheral device that can be connected via a network. The invention further relates to a controller e.g. for a virtual machine system for executing such a method for data transmission.

On computers with virtual machines often also designated as virtual machine systems different users can execute tasks independently and separately from each other. In virtual machine systems the common hardware resources of the computer are distributed over several virtual environments the so called virtual machines. For the user or users the virtual machines are presented as stand alone independent units. In this context independent means that different operating systems with a wide variety of different applications programs or scripts can be executed on the individual virtual machines. The virtual machines are partitioned from each other so that one virtual machine cannot access the resources for example memory area used by another virtual machine.

The core element of a virtual machine system is a controller which makes available the hardware resources of the computer via logical interfaces to the individual virtual machines. An operating system or application program provided within a virtual machine accesses the logical interfaces provided by the controller in the same way as an operating system or application program executed directly on the computer would access the hardware resources. In this sense the controller is transparent for the virtual machines.

In principle two different types of virtual machine systems can be distinguished. In a first type of virtual machine system the controller accesses the hardware resources directly or optionally with the use of BIOS Basic Input Output System . This is designated as a non hosted or native system. In such a case the controller is also called a hypervisor. One example for a non hosted system is the VM2000 system from the company Fujitsu Siemens.

In the other case which is designated as a hosted system the controller is an application program within an operating system environment executed directly on the computer. This approach offers the advantage that the controller can run during access to the hardware resources of the interfaces e.g. the API Application Programming Interface provided by the operating system. However a disadvantage compared with a non hosted system can be that limitations of the operating system environment executed as a host apply for all of the virtual machines. One example of a hosted system is the virtual machine environment Virtual Server from the company Microsoft.

Especially for large non hosted virtual machine systems the individual virtual machines are typically used by different users at remote locations relative to the virtual machine system. The peripheral devices needed for this remote operation by the user such as monitor keyboard and mouse and also audio input or output units or printers are connected for this purpose to a local computer. The transmission of input and output data between the local computer and the corresponding virtual machine in the central virtual machine system takes place via suitable networks. As the computer often a standard PC is used by the user or a so called thin client which however is also essentially a standard PC in a minimum configuration and extremely compact construction.

For transmitting the input and output data various usually proprietary protocols are known. Many operating systems make available special protocols in order to transfer the work environment desktop of the virtual machine to the local computer for example RDP Remote Desktop Protocol for Windows XP and XDMCP X Display Manager Control Protocol for Linux. For this purpose the local computer executes a matching application. Furthermore all of the software elements necessary for controlling the peripheral devices drivers must be installed and configured on the local computer.

Known solutions in order to make available a local workstation with corresponding peripheral devices via a network remote from the virtual machine system always require a local computer with special applications and drivers for using the local peripheral devices.

In one aspect the present invention provides a method for data transmission between the virtual machines of a virtual machine system and peripheral devices connected via a network in which the use of a local computer can be eliminated. Another aspect provides a controller suitable for executing such a method for a virtual machine system.

According to a first aspect of the invention a method for data transmission in a system with a computer and a peripheral device is disclosed. The computer has hardware resources including a network interface and a controller. The controller is designed to make available a virtual machine system in that it maps the hardware resources including the network interface to logical interfaces in the virtual machines. The computer and the peripheral device are coupled to a network.

In one embodiment the method includes the following steps. A peripheral device adapter provided in the computer is mapped by the controller to a logical peripheral device interface in one of the virtual machines. Then data is exchanged between the peripheral device and the virtual machine via the network the peripheral device adapter and the logical peripheral device interface while bypassing the logical interfaces mapping the network interface into the virtual machines.

In various embodiments peripheral devices are represented at the level of the controller by the peripheral device adapter. These peripheral device adapters are then mapped into the individual virtual machines analogously to local hardware resources. The transmission of input and output data into an operating system or an application program of the virtual machines is thus performed in the same way as data would be transmitted from local peripheral devices connected to the computer. In this way because no special transmission protocol and no interface provided uniquely for the purpose of remote operation are required in the operating system or the application protocol no corresponding data conversion is necessary on the side of the peripheral device that is on the workstation of a user. Therefore the standard PC or thin client typically required for this purpose can be eliminated in the method according to the application. On the user workstation peripheral devices can be used which are based on standard components and which also must have only one network interface.

As another advantage it results that operating systems which do not have the special interface for remote operation necessary according to the state of the art can be operated with the method according to the invention with remote peripheral devices connected via a network. The method manages the logical interfaces of an operating system that local directly connected peripheral devices would also use. If an interface to a local peripheral device is provided which is the case at least for peripheral devices such as keyboard mouse or output devices e.g. monitor for nearly every operating system the operating system can be operated remotely with the aid of the described method.

According to an advantageous implementation of the method for data transmission from the peripheral device to a program running in one of the virtual machines the following steps are executed. At least one data packet is received from the peripheral device via the network and the data contained in the one or more data packets is made available to a data interface of the peripheral device adapter. The data made available to the peripheral device adapter is transmitted by the controller to the logical peripheral device interface in the virtual machine after which the data is transmitted from the logical peripheral device interface to the program running in the virtual machine.

According to another advantageous implementation of the method for data transmission in the reverse direction the following steps are executed. First data is transmitted from a program running in the virtual machine to the logical peripheral device interface in the virtual machine. Then the data is transmitted to a data interface of the peripheral device adapter by the controller. Then the data transmitted to the peripheral device adapter is sent in the form of at least one data packet via the network interface and the network to the peripheral device.

Both implementations named above allow the transparent representation of a peripheral device connected remotely via the network in an operating system of a virtual machine or in some other program running in the virtual machine. For the program the peripheral device connected via the network is no different from a peripheral device connected locally which is why no compatibility problems appear. The controller takes over the allocation of a peripheral device into one of the virtual machines and the partitioning relative to other virtual machines in the same way as hardware resources provided locally.

According to another advantageous implementation the data transmitted between the peripheral device and the peripheral device adapter has a data format that is specific for the peripheral device and or is encrypted and or compressed for transmission.

According to a second aspect of the invention a controller is provided for a virtual machine system in a computer. The controller is designed to map hardware resources of the computer onto logical interfaces in virtual machines. The controller is further designed to map peripheral device adapters provided in the computer onto a logical peripheral device interface in one of the virtual machines. The advantages of this second aspect of the invention correspond to those of the first aspect.

In addition the computer has the peripheral device adapters . . .or . . . and . and the virtual machines have the logical peripheral device interfaces . . . .or . . . and .

In the following reference symbols without more precise specification that is for example without a . or a designate each element corresponding to the higher order group. For example the reference symbol is used for the combined designation of the peripheral devices . . and .. The reference symbol . relates analogously for example to the logical interfaces .and .and the reference symbol includes all of the logical peripheral device interfaces that is .to .and .to .

As an example the figure shows a virtual machine system based on the computer of the type of a non hosted system with two virtual machines . For using the virtual machines the peripheral devices coupled via the network are provided. Here examples of the devices . are display units e.g. with a monitor examples of peripheral devices . are keyboards and examples of peripheral devices . are mice. The display unit the keyboard and the mouse with the index a form a workstation A for a first user who is using the virtual machine . The corresponding peripheral devices with the index b form a workstation B for a second user who is using the virtual machine . Logically the peripheral devices or are therefore connected to the corresponding virtual machine or

The number of only two virtual machines is here merely an example and not to be understood as a restriction. Virtual machine systems with a plurality of virtual machines and a corresponding number of peripheral devices connected via the network are conceivable. The network can involve both a local network e.g. intranet or a global network e.g. Internet or a combination of the two. Physically the network can be constructed as an Ethernet Token Ring or Fiber Channel network wherein for data transmission preferably a packet oriented protocol is used for example the connection oriented protocol TCP Transmission Control Protocol based on IP Internet Protocol or the connection free UDP User Datagram Protocol based on IP.

In the operation of the virtual machine system on the computer the hardware resources are projected by the controller as logical interfaces into the individual virtual machines . For example the hardware resource . represents one or more processors of the computer . This processor . is made available to the virtual machines and by the controller as virtual hardware resources in the form of the logical interfaces .and . respectively. From the operating system or or the application programs or the virtual processor represented by the logical interface .or .could also be accessed like an operating system or an application program running directly i.e. not within a virtual environment on the computer could access the processor .. In the same way the hardware resources . to . are represented by the logical interfaces . to .. As an example let the hardware resource . be a working memory of the computer the hardware resource . one or more network interfaces and the hardware resource . one or more hard disk drives. The methods used by the controller for representing the hardware resources by the logical interfaces are here known and not the subject matter of the present application.

So that the user can work with the virtual machines on the user workstations A and B via the peripheral devices input and output data must be transmitted between the virtual machines and the peripheral devices . According to embodiments of the invention for this purpose the peripheral device adapters are provided in the virtual machine system. In the peripheral device adapters are drawn as independent units but they could also be integrated into the controller . Even if the individual peripheral device adapters are eventually allocated to individual virtual machines they are logically not arranged within the virtual machines but instead comparable with the hardware resources at the level of the common resources of the computer at which the controller also works.

The peripheral device adapters are designed so that data is output via the network interface . and the network to a peripheral device or data transmitted from a peripheral device is received. Furthermore the peripheral device adapters make available a data interface at which data transmitted from a peripheral device can be retrieved or to which data can be transmitted that is to be transmitted to a peripheral device .

The peripheral device adapters are comparable with so called device drivers. Device drivers are software elements which are usually executed as background processes and receive data from a device connected to a predetermined connection of a computer and make the data available in a usually standardized form for further processing or which conversely receive data in a usually standardized form and forward it via the predetermined connection to the device. Receiving the data or making it available for further processing can be realized by means of a so called programming interface by means of which an operating system or an application program can call routines of the device driver and can transmit data to be transmitted to the routines as parameters. For transmitting parameters optionally a predefined memory area can also be used. The format in which data is transmitted from the device driver to the device is typically device specific. Through the conversion in the device drivers however it is achieved that program in standardized form can be accessed on devices independent of which physical interface and which type or which data format is used for the data transmission between the computer and the device.

Just like device drivers the peripheral device adapters are adapted specifically to a certain peripheral device . In the embodiment shown in for each peripheral device there is a peripheral device adapter . For example the peripheral device adapter .is provided for the peripheral device . the keyboard at the user workstation B and the peripheral device adapter .is provided for the peripheral device . the mouse at the user workstation B. Analogously the peripheral devices .and .are provided for the corresponding peripheral devices .and .at the user workstation A. The peripheral device adapters with a comparable function that is e.g. the peripheral device adapters .and . can involve two instances of the same adapter if the connected peripheral devices .and .are identical or compatible or else also instances of different adapters.

The peripheral device adapter . shows an alternative embodiment. Here for several identical or compatible peripheral devices not shown in the figure only one adapter is provided which however differentiates between the different peripheral devices to which it is allocated at its output for example the programming interface.

To allow a unique allocation between the peripheral devices and the peripheral device adapters the peripheral devices are equipped with a unique identifier for example an identification number. This identifier is transmitted in each data exchange between the peripheral devices and the peripheral device adapters . For the data transmission provided in the network in the form of data packets each exchanged data packet is then provided for example with the identifier of the peripheral device or the corresponding peripheral device adapter . One form of identifier is already given by the network address which must be allocated uniquely to each device in a network. Independently or additionally a fixed identification number allocated to each device can be specified for example the MAC media access control address which is allocated by the manufacturer to each network adapter and is assigned to this adapter uniquely worldwide.

According to embodiments of the invention for data transmission between the peripheral devices and the virtual machines there is a two step mapping process. The first step is realized by the peripheral device adapter and the second step includes mapping the data interfaces of the peripheral device adapter onto the logical peripheral data interfaces in individual virtual machines by the controller . This mapping is performed analogously to the mapping of the hardware resources onto the logical interfaces in the virtual machines . The operating system or an application program in one of the virtual machines can access the logical peripheral device interfaces just like an operating system or an application program running directly on the computer would access a peripheral device represented by a device driver.

In the following the transmission of data between one of the peripheral devices and one of the virtual machines will be described in more detail using two examples.

For example when the user at the user workstation A presses a button on the keyboard .connected to the network this generates a key code assigned to the key in the keyboard .. The key code is embedded in a data packet by a network interface which is provided in the keyboard .or connected after the keyboard and this data packet is provided with the network address of the network interface as the source address and transmitted via the network and the network interface . to the peripheral device adapter .of the virtual machine system. For this purpose the address of the network interface . of the computer is known to the network interface of the keyboard . e.g. with reference to a configuration by means of manual setting options on the keyboard .or in that the address is transmitted once via the network to the network interface of the keyboard .for configuring this interface.

Such a data packet received by the network interface . of the computer is then identified with reference to the source address contained in the data packet as a data packet originating from the keyboard .. The keyboard code contained in the data packet is extracted and fed to the proper peripheral device adapter .. This allocation can be performed with the aid of the controller in which the keyboard .and the peripheral device adapter .are registered and allocated to each other. For example it can be provided that the data packets are transmitted from the keyboard .to the virtual machine system with a predetermined port number assigned to and reserved for the peripheral devices . In IP protocol the port number represents a sub address which is typically used for distinguishing between different services Web server FTP server database server etc. . The controller can then be designed to listen to the predetermined port and to receive data packets directed to the port with the predetermined port number.

The reaction to a keyboard input is typically controlled by a keyboard driver by means of calling a predefined interrupt routine. The adapter .is designed accordingly to output an appropriate interrupt call to its output the data interface after detection of a key code transmitted by the keyboard .

Because the peripheral device adapter .is mapped by the controller onto the logical peripheral device interface .in the virtual machine the output interrupt call is thus forwarded into the virtual machine . Within the virtual machine the interrupt call leads in a known way to the result that a routine provided in the operating system for interrupt handling receives the keyboard code and a character code assigned to the key code is determined with reference to a keyboard table and further processed. For the virtual machine the key code received via the network is presented exactly as if it had been output from a keyboard connected in the usual way locally to the PS 2 Personal System 2 or a USB Universal Serial Bus port of a computer. The transmission of data from the keyboard .via the network is performed in the form of key codes also called scan codes which are packed into network suitable packets of the network protocol in use. Key codes feature a data output format that is typical and common for commercially available PC keyboards. In this sense in the embodiment the transmission of data from the peripheral device to the computer system is realized in the data format that is specific for the peripheral device .

This offers the advantage that the data output by the keyboard . does not have to be converted at the user workstation A into a special data format. In the known solutions in which input and output data is transmitted directly in an operating system according to a special protocol via an interface provided in this operating system especially for the purpose of remote operation appropriate data conversion is necessary on the side of the user workstation A. The standard PC or thin client typically required for this method is unnecessary in the method according to the application. Instead at the user workstation peripheral devices can be used that are based on standard components and that also must have only one network interface.

As another advantage even operating systems that do not have the special interface for remote operation necessary according to the state of the art can be operated with the method according to the invention with remote peripheral devices connected via the network . The method operates the interfaces of an operating system where these interfaces also use local peripheral devices connected directly. If such an interface is present which is the case for almost every operating system at least for peripheral devices such as keyboard mouse or monitor output devices the operating system can be used remotely with the aid of the described method.

If the character code assigned to a character of a key is transmitted due to the conversion of the key code into the character code required on the user workstation A a corresponding configuration of the keyboard is necessary. For example the key assignments and the desired output format of the character code e.g. ASCII American Standard Code for Information Interchange or UTF Unicode Transformation Format must be set by the user at the user workstation A.

In contrast except for the configuration of the network address mentioned above to which the keyboard .sends its data packets in the embodiment no configuration at the user workstation A is necessary. Settings for the keyboard e.g. the assignment of keys to key codes are performed in the operating system of the virtual machine by selecting a matching keyboard assignment table. This can be performed in a simple way centrally by an administrator of the virtual machine system and does not burden the user at the user workstation A. Especially for peripheral devices with extensive setting options this represents a large advantage in simplifying the remote operation of the virtual machine system.

It is also conceivable that some settings are performed at the level of the peripheral adapter by an administrator of the computer . Such remote peripheral devices already preconfigured by means of their peripheral adapters can then be used without any additional configuration with any operating system and application program . This is finally possible in that data is transmitted from the peripheral device to the peripheral device adapter in the data format that is specific for the peripheral device and thus all of the configuration options lie in the virtual machine system.

As another example the graphics output of an application program of the virtual machine onto the remote display unit .at the user workstation A will be described below.

The logical peripheral device interface .is presented to the application program or the operating system connected in between as a standardized graphics interface for example according to the VGA Video Graphics Array or the XGA Extended Graphics Array standard. According to these standards routines are provided by means of which text and graphics output is enabled at a certain fixed resolution and color depth on a monitor.

The logical peripheral device interface .is mapped in turn onto the peripheral device adapter .by the controller . This mapping leads to the result that the commands transmitted to the logical peripheral device interface .are forwarded to the peripheral device adapter .. The peripheral device adapter .is designed to forward these commands packaged in data packets via the network interface . and the network to the peripheral device the display unit . allocated to it. Also here the allocation between the peripheral device adapter .and display unit .is managed by the controller in which the address of the network interface of the display unit .needed for the transmission of the data packets is also stored. Here it can also be provided to encrypt the data packets for transmission for security reasons and or to compress the data for transmission for performance reasons. For encrypted transmission the SSL Secure Sockets Layer protocol is suitable. The data packets received by the network interface of the display unit .are if necessary decoded and decompressed for forwarding to the graphics card .

The graphics card now executes the commands output by the application program and writes contents according to these commands into a graphics memory that is provided on the graphics card . In a known way the contents of this graphics memory is then converted by the graphics card continuously into corresponding analog or digital graphics signals that are fed to the monitor and thus made visible at the user workstation A.

In this example the transmission of data from the peripheral device adapter to the peripheral device also occurs in a data format that is specific for the peripheral device here the command set of the graphics card of the display unit .. In turn the advantage is produced that in contrast to a system in which the graphics card is part of a local computer connected in between via which information is exchanged between the peripheral devices and the virtual machine according to the state of the art no configuration is necessary on the side of the user workstation A.

