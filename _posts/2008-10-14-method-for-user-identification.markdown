---

title: Method for user identification
abstract: A method for user identification, the method comprising relaying an identifier of an application server user to a database associated with the application server, wherein the relaying is performed via a transaction request from the application server to the database.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09641495&OS=09641495&RS=09641495
owner: MCAFEE, INC.
number: 09641495
owner_city: Santa Clara
owner_country: US
publication_date: 20081014
---
This application claims the benefit of U.S. Provisional Patent Application No. 60 982 467 filed Oct. 25 2007 the entire disclosure of which is incorporated herein by reference.

A database or a DB for short is a computerized tool for storing digital data in an orderly manner. A database is often physically stored in a memory which allows direct access to data such as a magnetic hard drive or a flash memory device. Access to the data is usually performed using designated software often referred to as a database management system DBMS commonly coupled to the database itself and therefore sometimes considered as a part of the term database .

Databases may be used by a user directly but are often accessed through a software intermediary or a middleware which is sometimes referred to as an application server. An application server commonly includes a user interface coupled to a software engine to handle the application server s business logic and functional characteristics. An application server also usually includes means for interfacing with a database which stores its pertinent data.

Applicant s U.S. Published Patent Application No. 2007 0204342 and PCT Published Patent Application WO2007 096890 disclose a database intrusion detection sensor. U.S. Published Patent Application No. 2005 0234926 to Warner discloses a method to support authentication and authorization of a web application user to a database management system in web server based data driven applications.

There is provided according to an embodiment a method for user identification the method comprising relaying an identifier of an application server user to a database associated with the application server wherein the relaying is performed via a transaction request from the application server to the database.

There is further provided according to an embodiment a method for database security the method comprising attaching an identifier of an application server user to a transaction request from the application server to a database associated with the application server and receiving the transaction request and the identifier at the database.

There is further provided according to an embodiment a method for user identification the method comprising relaying an identifier of a rich client user to a database associated with the rich client wherein the relaying is performed via a transaction request from the rich client to the database.

In some embodiments the identifier is selected from a group consisting of an Internet Protocol IP address a login name a Uniform Resource Locator URL a HyperText Transfer Protocol HTTP request method and a user environment variable.

In some embodiments the method further comprises intercepting the identifier using an interface filter.

In some embodiments the method further comprises attaching the identifier to the transaction request using an outgoing filter.

In some embodiments the attaching of the identifier to the transaction request comprises implanting the identifier in an end to end metric of the transaction request.

In some embodiments the attaching of the identifier to the transaction request comprises implanting the identifier in a connection property of the transaction request.

In some embodiments the attaching of the identifier to the transaction request comprises implanting the identifier as a note in a Structured Query Language SQL query.

In addition to the exemplary aspects and embodiments described above further aspects and embodiments will become apparent by reference to the figures and by study of the following detailed description.

An aspect of some embodiments relates to a system and a method for user identification including relaying of information pertaining to a user of an application server to a database associated with the application server. This information may be used by the database and or one or more software application s essentially coupled to it for purposes such as database transaction auditing and security monitoring as well as other purposes.

Users often connect to application servers in order to perform various operations supported by these servers. An application server may run software used for purposes such as financial or account management customer relations management CRM project management business inventory management various web services e commerce and or the like. An application server may be viewed as an essentially centralized software application remotely accessible by end users over a communication channel. In contrast decentralized configurations often include individual software applications installed on each user s personal computer.

Centralizing software resources is said to have a number of benefits. It usually spares the need to install individual software applications on end users personal computers. It often further allows system administrators to perform software updates on essentially one software application instead of on multiple applications installed on the end users personal computers. Security is also usually said to be enhanced with application servers since an application server functions somewhat as a firewall separating users from data stored in a database associated with the application server.

Application servers are often accessible by users using a web browser such as Microsoft Internet Explorer or Mozilla Firefox similar to the way Internet websites are accessed. An application server may have an Internet Protocol IP address and or a nominal designator identifying it in a network such as a LAN or the Internet. Many application servers provide a web style user experience such as by presenting information to users via HyperText Markup Language HTML pages and or other technologies used on Internet websites. Such application servers often interact with users over a HyperText Transfer Protocol HTTP .

Access to some application servers is limited to authorized users or is wider and more permissive for authorized users compared to unauthorized users. Users often utilize a set of credentials such as a username and a password to log in to application servers. Some application servers such as Java based application servers may use a Java Authentication and Authorization Application Program Interface JAAS for handling user log in. Additionally or alternatively authorized users may be recognized by an application server using their network identity their computer identity and or network address such as an IP address.

An application server sometimes stores some or all of its pertinent data in an associated database so that a separation is kept between the application server s business logic and its associated data. When a user interacts with an application server the application server in turn often interfaces with its associated database for retrieving storing altering and or otherwise handling data hereinafter database operations required for serving the user. In many cases the interface between an application server and a database is transparent to a user who is only required to interact with the application server and not directly with the database. The application server in turn is usually the one interacting with the database on behalf of the user.

An application server often serves multiple users simultaneously but interacts with its associated database essentially over one connection path. This mode of operation is sometimes referred to as connection pooling since multiple user requests are united by the application server and sent over substantially one connection interface to the database. Connection between an application server and a database often involves the application server logging in to the database using a set of credentials such as a username and a password designated to the application server.

Reference is now made to which shows a first network diagram . First network diagram includes a client a rich client an application server a database and a storage device . A combination of client application server and database or storage device is hereinafter referred to as a three tier topology and a combination of rich client and database or storage device is hereinafter referred to as a two tier topology .

Client is optionally a computer such as a personal computer PC a mobile computer a Personal Digital Assistant PDA a mobile phone or the like. The computer may function as a database an application server a terminal and or the like. Additionally or alternatively the computer may function as and or run a rich client software application such as a Java client which may be used for accessing application server . Client is adapted to communicate with application server through a communication channel such as over a closed network like an internal office network or an open network such as the Internet. Rich client is optionally a computer adapted to communicate with database essentially directly such as using a software application which stores some or all of its pertinent data in the database. In the foregoing description the term rich client refers to either the computer the software application installed on it or both. Application server is a computer adapted to serve at least one client and to communicate with at least one database over a communication channel. Storage device may be a non volatile memory or a computer comprising a non volatile memory such as a database a storage server or the like adapted to receive data from application server and or rich client .

In an embodiment optionally involving a three tier topology information pertaining to a user this information hereinafter referred to as a user identifier or simply an identifier of application server is relayed to database and or to storage device . The term user may refer to a person using client for communicating with application server or to client itself communicating with application server essentially automatically. The user identifier is optionally one or more of the following 

In an embodiment involving a two tier topology at least one user identifier associated with rich client is relayed to database and or to storage device . The term user may refer to a person using rich client for communicating with database or to a rich client itself communicating with database essentially automatically. The user identifier is optionally similar to what is disclosed above with necessary adaptations that will become clear to persons of skill in the art.

It should be noted that both in a two and a three tier topology the term user which relates to an identifier of a user of the application server or the rich client may also be regarded as an end user of the database. That is the user of the application server or the rich client indirectly uses the database and is therefore an end user of the database. In contrast simply a user of the database may be regarded as the application server or the rich client since they are the ones directly connecting to the database.

Reference is now made to which shows a block diagram of application server illustrating an exemplary embodiment of a user identifier relay from the application server to database and or to storage device of . Application server may be for example a Java EE application server a Microsoft .NET dot net application server a web oriented application server such as WordPress Joomla or Drupal a SAP NetWeaver application server or the like. Additional types of application servers are listed in The Server Side Application Server Matrix Mar. 27 2005 and in Wikipedia The Free Encyclopedia Comparison of application servers both incorporated herein by reference.

Application server optionally includes a business logic core hereinafter business logic . In an embodiment it may further include a client interface filter hereinafter interface filter and an outgoing filter each or both also referred to as control logic .

Application server may be adapted to receive at least one incoming request such as from client of and to transmit at least one outgoing request such as to database and or to storage device of . Incoming request may be a request of a user to perform data retrieval storage alteration and or the like. Outgoing request may be a request of application server to perform operation s corresponding to the user s request s in database of .

Business logic is optionally a set of rules procedures algorithms and or the like that essentially define a behavior of a software application such as that of application server . By way of example if application server is a warehouse inventory management system business logic may include rules procedures algorithms and or the like that essentially govern inventory classification quota location and so forth.

In an embodiment interface filter is adapted to identify collect catch and or intercept hereinafter jointly referred to as intercept at least one user identifier. For example interface filter may identify an IP address of a user communicating with application server . Optionally when a user initially connects to application server interface filter stores the at least one user identifier in memory. Saving the at least one user identifier in memory may spare the need to repeatedly perform identification every time a same user during essentially one session interacts with application server . Optionally interface filter stores the at least one user identifier as one or more HTTP session s objects. An HTTP session is essentially a lasting connection between a client and a server such as client of and application server commonly involving an exchange of information and or requests between the two. Optionally interface filter stores the at least one user identifier as a cookie . A cookie sometimes referred to as an HTTP cookie or a web cookie is essentially a data package sent by a server such as application server to a client such as client of and stored by the client s web browser. When the client connects to the server in the future the stored cookie may be served for purposes such as authentication tracking shopping cart retention and or the like. For example the cookie may be used to identify and authenticate the client in its future connections to the server without the need to type a user name and a password again. Optionally interface filter stores the at least one user identifier in a Java Naming and Directory Interface JNDI . JNDI is a component in Java EE application server providing applications based on Java technology with an essentially unified interface to multiple naming and directory services. Using JNDI applications based on Java technology can store and retrieve named Java objects of many types such as client login information. JNDI may be used for example by a Java Authentication and Authorization Service JAAS optionally operating in conjunction with an Enterprise JavaBeans EJB component. JAAS is an optional component in Java EE application servers which may manage client login authentication sessions and or the like. EJB is an optional server side component in Java EE application servers which may provide architecture for modular construction of enterprise applications.

Interface filter may be essentially integrally formed with application server or coupled to it essentially without altering its core code. By way of example if application server is a Java EE application server interface filter may be coupled to the application server as a Java EE filter . A Java EE filter is an optional extended component of Java EE which may dynamically intercept requests and or responses and transform and or use the information contained in them. Java EE filters are further explained in Sun Microsystems The Essentials of Filters incorporated herein by reference. An example of implementing a user identifier intercepting filter in a Java EE enterprise server is available in Slavik Markovich Propagating Middle Tier and Application Users to the DBMS Part 1 of 3 May 22 2007 and in Slavik Markovich Propagating Middle Tier and Application Users to the DBMS Part 2 of 3 Jun. 10 2007 both incorporated herein by reference.

In another example where application server is a .NET application server interface filter may be implemented as a web module registered in the application server s configuration file often called Web.config so that the web module is called during web requests for intercepting data in the flow of these requests.

The user identifier intercepted by the web module may be stored for example in a thread static storage and or in an object associated with the respective HTTP request such as an HttpContext object.

The web module may be executed right before or upon initiation of a database connection by the .NET application. For example an interceptor Dynamic Link Library DLL may be set using .NET s profiling API to rewrite a code of methods that perform database access. The rewritten code is optionally a Microsoft Intermediate Language MSIL code of the database access methods such as System.Data.SqlClient.SqlCommand.ExecuteReader System.Data.SqlClient.SqlCommand.Execute NonQuery and the like. The rewritten code of the database access methods may include a method that calls the web module. This way every time a database access method is executed the web module is called to intercept the user identifier.

In an embodiment the at least one user identifier that is intercepted by interface filter is conveyed to outgoing filter . For example in a Java EE application server conveying may be performed by storing the at least one user identifier in a ThreadLocal storage sometimes referred to as TLS and having outgoing filter essentially pull the at least one user identifier from the ThreadLocal. Optionally conveying may be performed by storing the at least one user identifier in a static hash map having a unique thread ID. A static hash map is a component that may exist in many application servers such as for example a Java EE application server. It is essentially a data container which may be accessed using a unique thread ID. A thread is essentially a portion of a running computerized process. A thread may have a unique ID identifying it which may enable direct access to it.

In a .NET application server as another example conveying may be performed by pulling the user identifier from the thread static storage the HttpContext object and or the like.

In an embodiment outgoing filter is optionally adapted to receive and or pull the at least one user identifier that is intercepted by interface filter and to attach it or them to a carrier transmitted to database and or to storage device of . Outgoing filter may be essentially integrally formed with application server or coupled to it essentially without altering its core code. Referring now to application server may generally transmit one or more command s to a database such as database ordering it to retrieve store alter and or otherwise handle data such commands are also referred to as transaction requests . The at least one user identifier may be planted in such a transaction request or in a plurality of transaction requests acting essentially as carriers sent from application server to database over an outgoing request of so that they are received by the database and or by storage device . The term carrier as referred to herein may refer to any data that is being transmitted from the application server to the database including any transmitted along with the actual description of the transaction being requested.

By way of example if application server is a Java EE application server and database is an Oracle database such as Oracle 10g or Oracle 11g the at least one user identifier may be implanted within one or more End To End information placeholders metrics which may exist within a command. These information placeholders may be programmed for example using an Application Programming Interface API supported by the Oracle database. In current versions of Oracle the information placeholders may be programmed using an API command OracleConnection.setEndToEndMetrics . The at least one user identifier may be implanted inside one two or three information placeholders available using the Oracle API 

1. metrics OracleConnection.END TO END ACTION INDEX user identifier 1 This placeholder which contains the phrase user identifier 1 in this example may contain up to 32 characters in Oracle 10g Release 2.

2. metrics OracleConnection.END TO END MODULE INDEX user identifier 2 This placeholder which contains the exemplary phrase user identifier 1 may contain up to 48 characters in Oracle 10g Release 2.

3. metrics OracleConnection.END TO END CLIENTID INDEX user identifier 3 This placeholder which contains the exemplary phrase user identifier 1 may contain up to 64 characters in Oracle 10g Release 2.

 End To End metrics are further discussed in Venkatasubramaniam Iyer Elizabeth Hanes Perry Brian Wright Thomas Pfaeffle Oracle End To End Metrics Support Oracle Database JDBC Developer s Guide and Reference 10g Release 2 chapter 30 January 2007 incorporated herein by reference.

As another example if application server is a .NET application server the at least one user identifier may be planted within a connection object or any other connection property that is transmitted to the database. For example the at least one user identifier may be set as a value of a context info property of the connection object.

As yet another example if application server is of the type that uses SQL to format its database transactions the at least one user identifier may be planted within the SQL query itself. This may be done for instance by adding the user identifier to the request as a note that is not interpreted by the database as a part of the actual transaction but is still received by the database. A single line note may be marked using a double dash at its beginning and a multi line note may be marked with a sign at its beginning and a sign at its end. A note may also be marked differently.

Referring now back to in an embodiment interface filter and outgoing filter may be implemented as essentially one software module or one filter. In this one module or filter which may also be jointly referred to as control logic at least one user identifier is intercepted and attached to a command sent to the database such as database and or to storage device of .

Reference is now intermittently made to and to which shows a block diagram of rich client illustrating an exemplary embodiment of a user identifier relay from the rich client to database and or to storage device of . Rich client may comprise for example a Java a Microsoft .NET dot net an Oracle Forms and or other one or more client platform s .

Rich client optionally includes a business logic core hereinafter business logic a client interface filter hereinafter interface filter and an outgoing filter each or both also referred to as control logic .

Rich client is adapted to transmit at least one outgoing request to database of . Outgoing request may be a request of a user of rich client to perform data retrieval storage alteration and or the like in database of .

Business logic is optionally a set of rules procedures algorithms and or the like that essentially define a behavior of a software application such as that of rich client . By way of example if rich client comprises a warehouse inventory management system business logic may include rules procedures algorithms and or the like that essentially govern inventory classification quota location and so forth.

In an embodiment interface filter is adapted to identify collect catch and or intercept hereinafter jointly referred to as intercept at least one user identifier. For example interface filter may identify an IP address of rich client . Optionally when a user initially starts working on rich client interface filter stores the at least one user identifier as one or more HTTP session s objects. Interface filter may be essentially integrally formed with rich client or coupled to it essentially without altering its core code. By way of example if rich client comprises a Java EE platform interface filter may be coupled to the rich client as a Java EE filter.

In an embodiment the at least one user identifier that is intercepted by interface filter is conveyed to outgoing filter . For example in a Java EE platform conveying may be performed by storing the at least one user identifier in a ThreadLocal storage and having outgoing filter essentially pull the at least one user identifier from the ThreadLocal.

In an embodiment outgoing filter is optionally adapted to receive and or pull the at least one user identifier that is intercepted by interface filter and to attach it or them to a carrier transmitted to database of . Outgoing filter may be essentially integrally formed with application server or coupled to it essentially without altering its core code. Referring now to rich client may generally transmit one or more command s to a database such as database ordering it to retrieve store alter and or otherwise handle data. The at least one user identifier may be planted in such a command or in a plurality of commands acting essentially as carriers sent from rich client to database over an outgoing request of so that they are received by the database.

By way of example if rich client comprises a Java EE platform and database is an Oracle database such as Oracle 10 g or Oracle 11g the at least one user identifier may be planted within one or more End To End information placeholders metrics which may exist within a command.

Referring now back to in an embodiment interface filter and outgoing filter may be implemented as essentially one software module or one filter. In this one module or filter at least one user identifier is intercepted and attached to a command sent to the database such as database of .

Reference is now made to which shows a second network diagram according to an embodiment. Second network diagram optionally includes elements similar or identical to those shown in Client rich client application server and database . further includes a sniffer essentially positioned on a communication line connecting application server and or rich client with database this communication line is hereinafter referred to as COMM . Alternatively sniffer may be positioned in a location enabling it to sense traffic flowing in COMM. Sniffer is a computer software or a computer hardware also known as a network analyzer a protocol analyzer an Ethernet sniffer or a wireless sniffer that can intercept and or log traffic passing over a digital network or part of a network. For example sniffer may be implemented with network equipment such as a router or a switch through which network traffic is flowing. Sniffer may intercept one or more database command s user identifier s and or user identifier s attached to carrier s which are essentially encompassed within network traffic. Intercepting may be performed without substantially harming the traffic flow beyond sniffer . Sniffer may optionally store the intercepted object s in its internal memory. Additionally or alternatively sniffer may transmit the intercepted object s to storage device which may in turn store them.

Reference is now made to which shows a flow chart of an exemplary process of relaying at least one user identifier from application server or a rich client to database and or to storage device of .

In a block at least one user identifier is optionally intercepted such as by interface filter of and or by interface filter of . Optionally the at least one user identifier is stored in an HTTP session a cookie a JNDI and or a ThreadLocal storage.

In a block the at least one user identifier is optionally attached to a carrier such as a command to be transmitted from application server or rich client to database of .

In an embodiment comprising essentially one filter or one software module acting as a combination of interface filter or and outgoing filter or of respectively operations of blocks and may be essentially performed by one software component.

In a block the carrier such as the database command is optionally transmitted from application server or rich client to database of .

In a block the carrier such as the database command is optionally transmitted from application server or rich client to storage device of .

In a block the at least one user identifier is optionally correlated with a corresponding one or more database command. For example a list may be created including one or more user identifiers and their corresponding database commands.

In a block the correlation data created in block such as the list is optionally transmitted to and or stored by storage device of .

While a number of exemplary aspects and embodiments have been discussed above those of skill in the art will recognize certain modifications permutations additions and sub combinations thereof. It is therefore intended that the following appended claims and claims hereafter introduced be interpreted to include all such modifications permutations additions and sub combinations as are within their true spirit and scope.

In the description and claims of the application each of the words comprise include and have and forms thereof are not necessarily limited to members in a list with which the words may be associated.

