---

title: Coordinating application state and communication medium state
abstract: The present invention extends to methods, systems, and computer program products for coordinating application sate and communication mediums state. Embodiments of present invention provide a mechanism for a communication medium to provide a view of message content for a message (a peek) to an application along with the communication medium preventing further access to the message (a lock) until the application signals back how to handle the message. Thus, the communication medium indicates that the message is locked for the duration of processing at the application. Indicating that the message is locked significantly reduces the chance of the message being provided to another application (or another consumer of the same application) during the time the application is processing the view of message content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09021503&OS=09021503&RS=09021503
owner: Microsoft Technology Licensing, LLC
number: 09021503
owner_city: Redmond
owner_country: US
publication_date: 20080124
---
This application claims the benefit of U.S. Provisional Application No. 60 988 736 entitled Coordinating Application State and Communication Medium State filed on Nov. 16 2007 which is incorporated herein in its entirety.

Computer systems and related technology affect many aspects of society. Indeed the computer system s ability to process information has transformed the way we live and work. Computer systems now commonly perform a host of tasks e.g. word processing scheduling accounting etc. that prior to the advent of the computer system were performed manually. More recently computer systems have been coupled to one another and to other electronic devices to form both wired and wireless computer networks over which the computer systems and other electronic devices can transfer electronic data. Accordingly the performance of many computing tasks are distributed across a number of different computer systems and or a number of different computing components.

As computerized systems have increased in popularity so have the complexity of the software and hardware employed within such systems. In general the need for seemingly more complex software continues to grow which further tends to be one of the forces that push greater development of hardware. For example if application programs require too much of a given hardware system the hardware system can operate inefficiently or otherwise be unable to process the application program at all. Recent trends in application program development however have removed many of these types of hardware constraints at least in part using distributed application programs.

In general distributed application programs comprise components that are executed over several different hardware components. Distributed application programs are often large complex and diverse in their implementations. One can appreciate that while this ability to combine processing power through several different computer systems can be an advantage there are various complexities associated with distributing application program modules.

For example applications can change internal state in accordance with the contents of messages received over a communication medium. In addition to application state change the communication medium can also change state e.g. in that it no longer contains the message . Generally the process of receiving a message involves at least two steps a an application accesses message content and b the state of the communication medium is updated. When these two steps are coupled into a single receive function coordinating the respective state changes in the application and the communication medium can be difficult.

For example the delivery of a message alters the state of the communication medium in that the message is no longer present in the communication medium following delivery. The receipt of a message also alters the state of an application determined by the particular custom logic of that application. The custom logic may require access to the contents of the message being delivered. Thus processing difficulties e.g. duplicate and inappropriate processing by competing application consumers can occur when access to the contents of a message is coupled to the state change in the communication medium.

In some environments the difficulties are partially addressed by allowing the application to execute the receive function on the communication medium and its own internal state change under the same two phase commit transaction. However under such circumstance the application is unable to use two phase commit transactions as part of the process of deciding on its final state. This would happen for example if an application was executing multiple processing attempts to arrive at the final state.

The present invention extends to methods systems and computer program products for coordinating application state and communication medium state. An application sends a message request to a communication medium. The communication medium receives the message request from application. The communication medium identifies the next available message at the communication medium.

The communication medium provides a view of the contents of the next available message to the application. The communication medium locks the next available message to prevent further access to the contents of the next available message.

The application receives a view of the contents of a message from the communication medium. Receiving the content view indicates that the communication medium has locked the message for exclusive access by the consumer. The application attempts to update application state for the application based on the content view. The application determines the results of the attempted application state update.

The application signals the communication medium how to update communication medium state based on the determined results to coordinate the communication medium state with the application state. The communication medium receives the signal from the application indicating how to update communication medium state. The communication medium updates the communication medium state based on and in response to the signal to coordinate the communication medium state with the application state.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Additional features and advantages of the invention will be set forth in the description which follows and in part will be obvious from the description or may be learned by the practice of the invention. The features and advantages of the invention may be realized and obtained by means of the instruments and combinations particularly pointed out in the appended claims. These and other features of the present invention will become more fully apparent from the following description and appended claims or may be learned by the practice of the invention as set forth hereinafter.

The present invention extends to methods systems and computer program products for coordinating application state and communication medium state. An application sends a message request to a communication medium. The communication medium receives the message request from application. The communication medium identifies the next available message at the communication medium.

The communication medium provides a view of the contents of the next available message to the application. The communication medium locks the next available message to prevent further access to the contents of the next available message.

The application receives a view of the contents of a message from the communication medium. Receiving the content view indicates that the communication medium has locked the message for exclusive access by the consumer. The application attempts to update application state for the application based on the content view. The application determines the results of the attempted application state update.

The application signals the communication medium how to update communication medium state based on the determined results to coordinate the communication medium state with the application state. The communication medium receives the signal from the application indicating how to update communication medium state. The communication medium updates the communication medium state based on and in response to the signal to coordinate the communication medium state with the application state.

Accordingly in some embodiments a message receive function is separated into an access action and a separate lock action. An application executes those actions separately while performing an internal state update between them. The separation permits an application to determine its final state before signaling the completion of the receive operation to the communication medium e.g. a logical delete of the message from the communication medium .

An application can be distributed into several competing consumers. In a first discrete action one of the consumers accesses or peeks at the contents of a message. In a second discrete action the communication medium locks the message to the accessing consumer for the duration of message receipt. The message access or peek can trigger the message lock. Thus the separation of actions also significantly increases the chance that the application receives the message only once.

The state coordination can be further enhanced by allowing the application to use a two phase commit transaction around its internal state change and the delete operation. Further embodiments include an application programming interface API for implementing the separate discrete actions. The API can be used to decouple application implementations and different communication mediums.

Embodiments of the present invention may comprise or utilize a special purpose or general purpose computer including computer hardware as discussed in greater detail below. Embodiments within the scope of the present invention also include physical and other computer readable media for carrying or storing computer executable instructions and or data structures. Such computer readable media can be any available media that can be accessed by a general purpose or special purpose computer system. Computer readable media that store computer executable instructions are physical storage media. Computer readable media that carry computer executable instructions are transmission media. Thus by way of example and not limitation embodiments of the invention can comprise at least two distinctly different kinds of computer readable media physical storage media and transmission media.

Physical storage media includes RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium which can be used to store desired program code means in the form of computer executable instructions or data structures and which can be accessed by a general purpose or special purpose computer.

A network is defined as one or more data links that enable the transport of electronic data between computer systems and or modules and or other electronic devices. When information is transferred or provided over a network or another communications connection either hardwired wireless or a combination of hardwired or wireless to a computer the computer properly views the connection as a transmission medium. Transmissions media can include a network and or data links which can be used to carry or desired program code means in the form of computer executable instructions or data structures and which can be accessed by a general purpose or special purpose computer. Combinations of the above should also be included within the scope of computer readable media.

Further it should be understood that upon reaching various computer system components program code means in the form of computer executable instructions or data structures can be transferred automatically from transmission media to physical storage media or vice versa . For example computer executable instructions or data structures received over a network or data link can be buffered in RAM within a network interface module e.g. a NIC and then eventually transferred to computer system RAM and or to less volatile physical storage media at a computer system. Thus it should be understood that physical storage media can be included in computer system components that also or even primarily utilize transmission media.

Computer executable instructions comprise for example instructions and data which cause a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions. The computer executable instructions may be for example binaries intermediate format instructions such as assembly language or even source code. Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the described features or acts described above. Rather the described features and acts are disclosed as example forms of implementing the claims.

Those skilled in the art will appreciate that the invention may be practiced in network computing environments with many types of computer system configurations including personal computers desktop computers laptop computers message processors hand held devices multi processor systems microprocessor based or programmable consumer electronics network PCs minicomputers mainframe computers mobile telephones PDAs pagers routers switches and the like. The invention may also be practiced in distributed system environments where local and remote computer systems which are linked either by hardwired data links wireless data links or by a combination of hardwired and wireless data links through a network both perform tasks. In a distributed system environment program modules may be located in both local and remote memory storage devices.

Communication medium can be virtually any type of medium such as for example a queue system or database that can provide messages to applications. Thus communication medium can carry message flow . Message flow includes a plurality of messages including messages and .

Each of messages and can be an envelope that contains message headers and a message body with message content. For example a message object can be a SOAP envelope that includes XML instructions in both a message header and message body. Messages can be associated with local message properties. Local message properties can indicate temporary message state not necessarily derived from transfer of the message. In some embodiments local message properties are associated with messages by being attached to the messages.

The messages of message flow can be sent from some other network connectable system or device for delivery to application . Alternately message flow can be from another application on the same computer system as application or even between different consumers of application . That is one consumer of application can send a message to communication medium . Subsequently another consumer of application can receive the message from communication medium .

Application includes a plurality of competing consumers including consumer A and B which compete for messages being received at application . For example consumers A B etc can be configured to process purchase orders included in message flow .

For any number of reasons such as for example scalability the plurality of consumers A B etc can be physically distributed across a number of nodes. Each consumer can have a copy of application logic to compete for message delivered from communication medium . Thus there can be several instances of the application logic running concurrently competing with each other for messages from communication medium .

In such an environment one competing consumer can examine a message at a time. Communication medium can lock a message that is being examined by an application. For example communication medium can lock message when consumer A examines message .

When a message is locked another competing consumer sees the next message in a message flow as the message immediately behind the locked message. Communication medium can maintain a next message pointer to point to the next available message or message that isn t already being examiner by a consumer in message flow . For example communication medium can maintain next message pointer . Thus when consumer A is examining message next message pointer points to message . Accordingly consumer B sees message as the next message.

Accordingly application through consumer A is permitted to examine or peek at message while communication medium maintains a lock on message . After a state transition application can signal communication medium to delete message . A delete signal completes the successful receipt of a message. Alternately consumer A can also signal communication medium to release the lock of i.e. unlock message if application cannot accept the message . An unlock completes an unsuccessful receipt of a message.

In some embodiments an application receives a message content from a communication medium by executing a receive function. The message content is the object returned by the execution of that receive function. In some embodiments a receive function gives an application consumer a view on a locked copy of message contents. For example consumer A can execute a receive function to have a view of the content of message returned as an object to consumer A. In these embodiments a standard receive function e.g. one that returns the actual message can be overloaded to return a view on a locked copy of a message as opposed to the actual message . The overloading of the receive function facilitates a level of polymorphism within the application code such as for example in a front end message processing pipeline.

The message object can then be extended with a property associated with the message. The property is an abstraction of a portion of temporary state the communication medium is holding and associating with the message. The consumer interacts with the property to complete message receipt. When a locked view of message contents is provided to a consumer the property can indicate that the view is locked e.g. the value can be set to LOCKED . The property can be examined to prevent communication medium from providing a view of the contents of the message to another consumer. When processing of the view of the contents is complete the consumer can signal either the delete of the message in the communication medium e.g. set the value of the property to DELETED or the release of the lock e.g. set the value of the property to UNLOCKED .

An application program interface can be defined for an adding a message property. Such as for example 

Thus the temporary state can be the message lock that prevents other competing consumers from accessing the contents of the message. Accordingly one consumer can request to receive a message. In response to the request the extended communication medium behavior provides a view of the contents of the message to the consumer and locks the message from other competing consumers. The one consumer can then complete the receive process with success i.e. signal delete or complete the receive process with failure i.e. signal unlock .

Embodiments of the invention that is peeking into and locking a message overload the receive function executed against the communication medium. The overloading permits the logic in the application to be polymorphic at this initial stage of this receive process. Embodiments utilize a further delete or unlock step to complete the message receipt. As such applications can query communication medium to determine whether an overloaded receive function provides peek and or lock functionality. A query can take the form of asking the communication medium for a PeekLockSettings object. The communication medium can respond indicating support for peeking into and or locking messages.

Method includes an act of sending a message request to a communication medium act . For example consumer A can send request to communication medium . Request can be a request for a message from communication medium . Method includes an act of receiving a request for a message from an application act . For example communication medium can receive request .

Method includes an act of identifying the next available message act . For example communication medium can refer to next message pointer to identify that message is the next available message. When a message is locked next message pointer can be moved from the current message to the next message communication medium can be first in first out FIFO in accordance with message flow . Thus when message is locked i.e. another consumer is viewing the contents of message next message pointer can be adjusted to point to message .

Method includes an act of providing a view of the contents of the next available message to the application act . For example communication medium can provide content view A e.g. a view of the message body of message to consumer A. Method includes an act of locking the message to prevent further access to the contents of the message act . For example communication medium can lock message to prevent further access by other consumers of application such as for example consumer B. Locking message can include changing the value of a local property or other temporary message state for message to LOCKED.

Method includes an act of receiving a view of the contents of a message from the communication medium act . For example consumer A can receive content view A from communication medium . Method includes an act of attempting to update application state based on the content view act . For example application can attempt to update state based on content view A such as for example transitioning from state to state or state .

Method includes an act of determining the results of the attempted application state update act . For example consumer A can determine if application state for application was successfully or unsuccessfully updated based on content view A. A successfully update can result from application processing content view A without error. On the other hand an unsuccessful update can result when there is an error during application s processing of content view A.

Method includes an act of signaling the communication medium how to update communication medium state based on the determined results act . For example consumer A can send signal to communication medium . The signal can indicate that message is to be deleted or unlocked. A signal to delete can be sent when application state of application is successfully updated. On the other hand a signal to unlock can be sent when there is an error updating application state of application .

Method includes an act of receiving a signal from the application indicating how to update communication medium state based on the results of the attempted application state update act . For example communication medium can receive signal from consumer A. Method includes an act of updating communication medium state based on and in response to the signal act . For example communication medium can update its state based on and in response to signal . Signal can indicate an update to durable state or temporary state of communication medium

For example signal can indicate that message is to be deleted an update to durable state or unlocked an update to temporary state depending on the results of the attempted application state update. Thus communication medium can unlock e.g. for failed application state update message based on and in response to signal . Alternately communication medium can delete e.g. for successful application state update message based on and in response to signal .

The arrangement of acts in method is merely one example embodiment of present invention. Embodiments that omit and or combine acts of method and or that perform acts of method in different orders are included within the scope of present invention.

In some embodiments state coordination can be further enhanced when an application uses a two phase commit transaction around its internal state change and the delete operation. illustrates an example sequence diagram of state coordination pattern semantics that includes transactions. Sequence diagram depicts an example application interaction with a communication medium when a two phase commit transaction is being used. On receipt of content view A the application attempts an update to application state BEGIN TXN . In this example the initial update fails and so the application aborts the two phase commit transaction it had performed that update under ROLLBACK TXN .

As the initial receive of content view A from communication medium was not performed under this transaction the state of communication medium remains unchanged by the abort of the transaction. That is the creation and aborting of the transaction is at this stage just part of the internal logic of the application and the communication medium is not yet involved. Up to this point communication medium has simply provided a view on content view A and is keeping a lock on it. The state of the lock is unaltered by the abort of this transaction.

Application now attempts an alternative update BEGIN TXN to its application state . This second update is successful and so it now proceeds to perform the delete operation against communication medium . This delete operation can be performed as previously described by calling the appropriate method on the PeekLockMessageProperty. The delete operation can be carried out under the same transaction that was just used to successfully update application state COMMIT TXN . In this transactional example the delete can update the durable state of communication medium to remove content view A and clean up any locks that are being held associated with message . If the transacted processing should now fail the transaction aborts undoing any changes made to application state communication medium and content view A. However when a transaction aborts the lock on a message can remain. The receiving application can then use another transaction for a subsequent attempt to process the delete operation. Alternately the receiving application can unlock message.

If application transitions to a stage that it decides it cannot accept content view A application signals communication medium by calling unlock. Unlock does not alter the durable state of a communication medium . Unlock cleans up releases the lock i.e. temporary state created for the message receive operation of message . Cleaning up the lock can include modifying the temporary state associated with message . For example a message property can be changed from a value LOCKED to a value of UNLOCKED. Thus in some embodiments unlocking does not participate in any two phase commit transaction.

Accordingly embodiments of present invention provide a mechanism for a communication medium to provide a view of message content for a message a peek to an application along with the communication medium preventing further access to the message a lock until the application signals back how to handle the message. Thus the communication medium indicates that the message is locked for the duration of processing at the application. Indicating that the message is locked significantly reduces the chance of the message being provided to another application or another consumer of the same application during the time the application is processing the view of message content.

The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is therefore indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

