---

title: Extensible pre-boot authentication
abstract: In one embodiment, the present invention includes a method for obtaining a pre-boot authentication (PBA) image from a full disk encryption disk in a pre-boot environment, executing the PBA using a chipset to obtain user credential information, authorizing the user based on the user credential information and stored credential information, and storing the user credential information in a PBA metadata region of the disk. Other embodiments are described and claimed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08201239&OS=08201239&RS=08201239
owner: Intel Corporation
number: 08201239
owner_city: Santa Clara
owner_country: US
publication_date: 20080623
---
To improve security of computer systems various efforts have been made in both hardware and software to lock down a system and ensure that unauthorized access is not permitted. One such effort is full disk encryption FDE in which virtually all data stored on a disk is encrypted.

In a pre boot environment Unified Extensible Firmware Interface UEFI code in accordance with the UEFI Specification Version 2.0 dated Feb. 21 2006 or later revision which calls for the separation of pre boot and boot environments into a variety of phases may execute before handoff to an OS. Many FDE schemes require some pre operating system OS user authentication. But this user authentication cannot wholly occur in the OS since the OS image is itself encrypted. As such a rich plurality of authentication tokens credentials and credential providers need to be hosted in this pre OS regime. In some systems a different OS e.g. Linux is launched in the pre OS space to perform the user authentication. However this pre OS launch of a different OS is typically outside of the UEFI specification. Further this pre OS launch then needs to return to the platform basic input output system BIOS UEFI or legacy and continue to the main OS boot. This is a huge impediment to boot time is a large storage overhead and effectively entails duplication of many platform BIOS capabilities.

Embodiments may enable a platform to provide an extensible pre boot authenticator PBA that can interact with security enhancements such as a full disk encryption FDE scheme. Embodiments allow for conjoining chipset hooks and capabilities with UEFI pre OS and runtime flows to have a high assurance implementation of FDE.

In one embodiment security firmware which may be present within a chipset or other system component can perform isolated access controlled storage for provisioning UEFI PBA executables in band and out of band via a manageability engine ME and a remote web services networking capability. A virtualization engine VE in the chipset provides for a trusted path via console input virtualization and output via a trusted sprite.

Various devices and other ingredients may contribute to enable different embodiments. First a user identity manager or other UEFI driver may be used to manage the process of determining the user s identity and storing information about the user. A user enrollment manager is an application that adds or enrolls new users gathering the necessary information to ascertain their identity in the future. A credential provider driver manages a single class of credentials. Examples include a Universal Serial Bus USB fingerprint sensor a smart card or a password.

The implementation of these drivers can have defaults which use platform resources such as flash memory to store pre shared keys PSK s such as hashes of passwords and can include standard USB tokens that adhere to profiles such as USB mapping for smart cards. The same holds true for consoles. A simple input protocol can be implemented on top of a standard USB interface a keyboard or other device and the text output can be sent to a video graphics adaptor VGA or to another console such as an integrated graphics frame buffer. In other implementations the same application programming interfaces APIs can be published on top of accessors to a virtualization engine controller interface VECI in order to have access to integrated credential providers and a trusted path for the input and output console.

Referring now to shown is a boot flow diagram for booting a system in accordance with one embodiment of the present invention. As shown in a system includes various hardware resources including a processor such as a central processing unit CPU . A chipset may be coupled to processor . Specifically chipset may be one or more integrated circuits to interface with system memory peripherals and so forth. One such component to which chipset is coupled is a non volatile storage which may be a hard drive in which data may be encrypted using full data encryption FDE . That is chipset may encrypt all data resident in storage . As further shown in a layout of storage includes a master boot record data and a metadata storage which in one embodiment may be unencrypted i.e. not using FDE metadata associated with various secure operations. Various data may be stored in metadata region including a pre boot authentication PBA image . A host connect interface HCI may through a BIOS driver provide access to security resources such as PBA image that is stored in metadata storage which may be a hidden partition of storage . Note that this portion is not encrypted using full disk encryption although the data may be encrypted in another manner.

As will be discussed further below user input such as credential information e.g. passwords fingerprints other codes and so forth may be input via these user interfaces and provided via trusted path to chipset e.g. during pre boot authorization activities.

After such operations one or more option read only memories ROMs may be enabled which may execute various EFI drivers and extensions including a UEFI security extension . As shown this code may obtain PBA image and execute a PBA module PBAM to obtain the user input such as authorization information credential information and so forth. The image may compare this information to stored credential information to determine whether to authorize the user. Further the received user credential information may be stored in a given storage such as metadata storage . PBAM may thus act as a collector to collect authentication values via an interface to a user e.g. fingerprint password or so forth and to pass the same to e.g. secure firmware present in the chipset which then evaluates the data based on an expected value. Upon successful authentication the firmware can decrypt the metadata which essentially wraps the disencryption keys to allow communication between the chipset and a given device such that normal advanced host controller interface AHCI processing can occur. When the PBA image is read from the disk the security firmware will verify an integrity check value. In this way a threat of a drive being inserted into another platform can be prevented.

Then the normal PBA code can run to authenticate the user and pass that information to security firmware. Then a secure exit can be performed to return to the regular environment to continue a bootstrap to the OS loader. Additional operations such as various UEFI block input output IO operations may be performed and a flush of non volatile random access memory NVRAM may be performed. After successful initiation of option ROMs control passes to block for further pre OS operations such as enabling of a system management BIOS SMB and an Advanced Configuration and Power Interface ACPI and preparing for an OS load. Finally if all such events are successful a normal boot may occur via an EFI OS loader . While shown with this particular implementation in the embodiment of the scope of the present invention is not limited in this regard.

Referring now to shown is a block diagram of a model for EFI access at runtime. As shown in at block credential drivers are published. These can be standard UEFI drivers that use a UEFI USB stack or drivers that use a VECI to communicate with hardware e.g. via a virtualization engine VE as will be described below. These drivers will expose the same protocol so that various pre boot authenticators PBAs can access these hardware capabilities. At block various PBAs e.g. UEFI PBA drivers are executed that can expose a set of questions and manage user credentials into the platform. In UEFI presentation management is under control of BIOS i.e. they manage their own look and feel etc so the PBA s will post UEFI host information HII forms obtained from a HII database with internationalization friendly strings and questions. The platform browser will expose the user authentication questions to the user as shown at block . In one embodiment console drivers published on a system use a trusted path namely simple input protocol and graphics output protocols respectively to be abstracted to the browser via drivers that have a trusted path via the VECI into a chipset. Note that the actual user interaction with the system can be at a local console or via an actively managed hosted remote session e.g. a keyboard video mouse controller . This user authentication may thus enable high security in FDE.

The above blocks represent the conjunction of the UEFI hosted PBA and a trusted path. Note that the drivers can be provisioned into the file allocation table FAT partition of the metadata with protected UEFI driver load list variables. This will allow for addition of successive credential providers and PBA s after an original equipment manufacturer OEM ships the system i.e. under information technology IT authority . This hosted driver store will also allow for out of band OOB provisioning of these drivers by IT remotely as will be described below. Driver provisioning from a hidden disk range controlled by firmware in a manageability engine ME as well as driver context sharing is described in more detail below.

At runtime after booting a single sign on SSO usage model can be realized. Therein some of the pre OS user information can be passed into the OS runtime. The UEFI standard for user identification only stipulates the pre OS API s i.e. protocols in UEFI parlance . The passing of proof information beyond pre OS is not treated. As such the ability to proxy this information into an OS runtime and have an OS driver that opaquely accesses either the proof information via UEFI protected variables or via access to protected metadata via a VECI is possible.

Thus as shown in during runtime a user authentication applet may execute and which can access UEFI variable storage runtime variables such as system management mode SMM data and UEFI variables . Still further applet may perform a HECI access to retrieve and or provide authentication access to authentication metadata which may be stored in the hidden disk partition as discussed above.

As shown in the embodiment of such vendor authentication devices can include console input a smart card a fingerprint scanner and a graphics driver . As shown in each of these devices can communicate with various other components via interfaces to a pre OS user interface which may be a given OEM setup browser communication to a given one of PBAs and and or to chipset . For example communication from a user to the console input may be by a simple text input protocol or to graphics driver via a graphics output protocol. In turn the information to be shown to a user may be published by PBAs via HII forms to user interface . Other protocols may also be used. For example an EFI USER CREDENTIAL PROTOCOL may be used to communicate fingerprint information from fingerprint scanner to first PBA and a USB HC PROTOCOL may be used to communicate information from console input to chipset . Still further communications between chipset and HECI interface may be via a given HECI protocol while communications between chipset and VECI interface may be via a given HECI or VECI protocol. As further shown in a file allocation table FAT file system may be in communication with third PBA to receive information from third PBA .

The layer above the device layer is the service driver layer . Service layer contains PBA building blocks components that may be called by a controlling PBA module. However flexibility exists in the architecture for a service driver to operate independently of a controlling PBA application. For example a complete authentication challenge protocol can be performed stand alone. Service driver layer modules necessarily can call into a ME of chipset via a host embedded controller interface HECI or control channel side of chipset where embedded capabilities can be leveraged. For example user account metadata can become active only when a given service driver or other PBA successfully produces authentication credentials that unlocks account data. Still other ME firmware can manage enterprise user account state having the ability to interact with enterprise identity management servers especially over ME Common Services out of band OOB channel such that enterprise managed users can maintain up to date account metadata within the ME. An EFI PBA module therefore does not need to be updated in order to respond to remotely applied user account changes.

Service driver modules can be highly specialized modules that focus on a particular class of authentication or recovery protocol. Other service drivers or a controlling PBA module can leverage this specialized behavior by invoking specific interfaces that may be proprietary or standard . In some embodiments server drivers may be called from an OS present mode see such that users may re authenticate or authenticate with additional factors while still retaining full features contained in PBA modules. This is achieved by leveraging EFI framework. By leveraging this capability for authentication IT can maintain a consistent authentication scheme across pre and post boot environments.

Thus in various ME platforms with security technology a portion of unprotected but hidden metadata can be exposed to the EFI. This metadata is not directly accessible via the VE or EFI drivers. It can only be accessed via a secure host controller interface. Embodiments thus can enforce an access control policy that is specific to pre boot authentication requirements. For example a third party PBA vendor can use this metadata area to store a copy of their PBA and have it be called from the pre boot PBA environment even through the third party module was not included in the BIOS flash region by the OEM.

Referring now to shown is a block diagram of post boot context management in accordance with one embodiment of the present invention. In a security aware application either EFI or legacy BIOS establishes a pre boot authentication context. This context is communicated across the pre post boot boundary through an EFI framework e.g. service device drivers such as shown in which communicates with a manageability engine ME which may be of a chipset or other component in communication with a hard disk drive HDD which may be a FDE drive having an encrypted region . This context is saved into an unencrypted but hidden to non security aware applications in a PBA metadata region of HDD that is under the control of security firmware .

After the platform transitions to post boot a non EFI aware OS is launched. EFI facilities are not available post boot either because EFI was dismantled as part of a BIOS legacy compatibility mode operation or because the OS is not able to invoke EFI post boot interfaces. During runtime a security aware application is able to obtain the pre boot PBA context by issuing a call which may be performed after a re authorization of the user. The call may generate a read command that produces the pre boot context previously saved by the security aware PBA module . Thus the post boot PBA may perform administrative or operational tasks based on the PBA context even though the OS is not EFI aware.

It is also possible for a post boot agent to affect the state and operation of the PBA i.e. next time the system boots by reversing the direction of the steps outlined above which may store revised or updated policy metadata in a policy metadata region of hard drive . Hence the PBA can read context from a previously executed post boot agent. This may be useful when post boot authentication is performed that results in the user credentials being modified or policy affecting how the user is authenticated impacts PBA logic. For example a password strength policy can be provided by a remote agent to provision both a PBA image and the password policy e.g. via an OOB channel to a chipset ME. In this way the security firmware can apply the policies and write the policies into the storage area of the drive for a host environment to access the policies and understand what policies were applied. Thus ME PBA and the post boot authentication environment all know what the policies have been provisioned e.g. dynamically through a network. In run time the system can authenticate the user and update authentication state using EFI variables and so the EFI has variable storage. A HECI driver can communicate with the security firmware and provide the authentication information back to the metadata store in the disk drive. Thus via a runtime environment updated metadata can be stored into the metadata area such that at a next pre boot environment that updated metadata can be discovered in the pre boot module to ascertain that a user logged in during runtime changed credentials or so forth.

Referring now to shown is a block diagram of system . As shown in system may include a core package that includes at least one core and is coupled through an integrated memory controller to a system memory which in one embodiment may be a dynamic random access memory DRAM . Core package is further coupled to an input output controller hub ICH which in turn may be coupled to a hard disk drive such as drive which may be encrypted using FDE. As shown certain data may be stored in a security enabled hidden but unencrypted portion . Such data as discussed above may include UEFI PBA images PSKs and so forth. As further shown in ICH may be coupled to an integrated smart card such as an integrated trusted platform module iTPM .

Still further as shown in ICH may be coupled to a manageability engine virtualization engine ME VE . In one embodiment ME VE may be a separate component or it may be part of ICH . In the embodiment shown in ME VE includes a microcontroller a cache memory and a read only memory ROM . ME VE may be coupled to a flash memory which may store in one embodiment UEFI BIOS and ME firmware . In turn ME VE may be coupled to a network port which in turn couples to a network .

As shown in a remote agent may couple to system remotely through network . In this way the remote agent which may be an IT personnel or other such remote user may provision the UEFI PBA remotely. Still further during such provisioning ME VE may evaluate a policy against local user settings credentials in TPM or so forth to determine whether to allow the remote provisioning e.g. of hidden storage region . While shown with this particular implementation in the embodiment of the scope of the present invention is not limited in this regard.

By providing the hidden metadata area rich features of pre boot authentication can be made available even when legacy OSs are used that do not support EFI. For example a third party vendor of authentication solutions can provide a pre boot EFI capability and a post boot agent can synchronize state between pre and post boot by using this metadata storage area to pass synchronization variables. This allows more consistent authentication behavior on platforms even when PBA architecture is limited to EFI compatibility or legacy BIOS implementations and where post boot environments are limited to non EFI aware OSs. Thus the PBA image itself can be provisioned out of band the integrity policy for the PBA can be provisioned and authentication policies such as password strength can be provisioned. Those policies can either be consumed locally by the ME and they can be forwarded to the pre boot or the post boot environment by storing it in a hidden metadata region of the drive.

Embodiments thus allow IT personnel to use the user administrative capability of an implementation of UEFI e.g. UEFI2.2 and authenticode signed UEFI system partition on the larger open disk or into the FAT partition of the protected hidden metadata region.

Embodiments may be implemented in code and may be stored on a storage medium having stored thereon instructions which can be used to program a system to perform the instructions. The storage medium may include but is not limited to any type of disk including floppy disks optical disks compact disk read only memories CD ROMs compact disk rewritables CD RWs and magneto optical disks semiconductor devices such as read only memories ROMs random access memories RAMs such as dynamic random access memories DRAMs static random access memories SRAMs erasable programmable read only memories EPROMs flash memories electrically erasable programmable read only memories EEPROMs magnetic or optical cards or any other type of media suitable for storing electronic instructions.

While the present invention has been described with respect to a limited number of embodiments those skilled in the art will appreciate numerous modifications and variations therefrom. It is intended that the appended claims cover all such modifications and variations as fall within the true spirit and scope of this present invention.

