---

title: Generation of engineering change order (ECO) constraints for use in selecting ECO repair techniques
abstract: Static timing and/or noise analysis are performed on a netlist of an integrated circuit, to estimate behavior of the netlist and to identify at least one violation by said behavior of a corresponding requirement thereon, such as setup time, hold time or bump height in a quiescent net. Thereafter, effect of engineering change order (ECO) to correct the violation are automatically analyzed, based on the layout, the parasitics, the timing and/or noise behavior, and the violation, followed by generation of a constraint on the behavior (called “ECO” constraint), such as a timing constraint and/or a noise constraint. Next, the ECO constraint is automatically used, e.g. in a place and route tool, to select an ECO repair technique, from several ECO repair techniques that can overcome the violation. The selected ECO repair technique is automatically applied to the layout, to generate a modified layout which does not have the violation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07962876&OS=07962876&RS=07962876
owner: Synopsys, Inc.
number: 07962876
owner_city: Mountain View
owner_country: US
publication_date: 20081031
---
This application is a continuation application of U.S. application Ser. No. 11 525 578 filed on Sep. 22 2006 now U.S. Pat. No. 7 454 731 by Nahmsuk Oh et al. U.S. application Ser. No. 11 525 578 is incorporated by reference herein in its entirety.

The invention relates to verification of a design of an integrated circuit IC . More specifically the invention relates to a method and an apparatus to overcome undesirable electrical interaction called capacitive crosstalk which may arise between wires and or devices that are physically placed and or routed adjacent to one another in an IC design.

Crosstalk is an undesirable electrical interaction between two or more physically adjacent nets due to capacitive cross coupling. As integrated circuit technologies advance toward smaller geometries crosstalk effects become increasingly important. The reasons for crosstalk are apparent from reviewing . As circuit geometries become smaller wire interconnections become closer together and taller thus increasing the cross coupling capacitance between nets. At the same time parasitic capacitance to the substrate see becomes less as interconnections become narrower and cell delays are reduced as transistors become smaller. With circuit geometries at 0.25 micron and above substrate capacitance is usually the dominant effect. However with geometries at 0.18 micron and below the coupling capacitance between nets becomes significant making crosstalk analysis increasingly important for accurate timing analysis.

For example consider the signal waveforms on a pair of nets A and B in that are cross coupled due to being placed adjacent to one another. Net B also called victim net should be constant but the rising edge on net A also called aggressor net causes a noise bump or glitch on net B. If the bump is sufficiently large and wide it can cause an incorrect logic value to be propagated to the next gate in the path containing net B. As another example consider the signal waveforms in . Due to capacitive cross coupling the transitions on aggressor nets A and C can affect the time at which the transition occurs on victim net B. A rising edge transition on net A at the time T shown in can cause transition which occurs later on net B possibly contributing to a setup violation for a path containing B. Similarly a falling edge transition on net C at time T can cause transition which occurs earlier on net B possibly contributing to a hold violation for a path downstream that receives the signal from net B.

Prior art software tools are available to analyze when the software is loaded into a computer and executed therein and report on signal delays due to crosstalk of the type shown in . For example a tool called PrimeTime SI available from Synopsys Inc. of Mountain View Calif. can be used to report on delay changes and static noise. Note that PrimeTime SI is an enhancement to a static timing analysis tool called PrimeTime also available from Synopsys Inc. A timing report which is generated by crosstalk analysis typically identifies violations in setup time hold time and or signal arrival used to generate an Engineering Change Order ECO . The ECO is typically used by a human as per act in who operates another prior art software tool that performs placement and routing and an example the tool is called Astro also available from Synopsys Inc.

As noted above an aggressor net at top of injects a crosstalk glitch onto a victim net through one or more coupling capacitors. The crosstalk glitch impacts the delay of victim net by increasing or decreasing it. The amount of this increase or decrease is called crosstalk delay . Such a victim net is typically present in a path called critical path consisting of timing nodes which represent pins on the path. A timing requirement on such a path may be expressed as the latest or the earliest time at which a signal can arrive without making the clock cycle longer or shorter than desired. Specifically the arrival time is signal propagation time from a given starting point. Another timing requirement may be expressed in the form of slack which is the difference between the required time and the arrival time. When the slack of a path is negative the path has a timing violation.

Correction of crosstalk induced violations using prior art methods known to inventors is difficult and often requires significant manual intervention across several iterations between the crosstalk analysis tool and the place and route tool. For example the human can make some layout changes in a place and route tool to correct the crosstalk violations and then send the updated parasitic data e.g. in Standard Parasitic Exchange Format abbreviated as SPEF and IC design data e.g. in Verilog to the static timing and noise analysis tool to verify that the problems are corrected and that there are no new problems. If the static timing and noise analysis tool finds any violations in the modified design then the process is repeated requiring significant human effort.

For faster repair of crosstalk induced violations a human can directly perform a what if analysis on certain design changes entirely within a static timing analysis tool. For analyzing these changes the static timing and noise analysis tool uses a fast incremental analysis taking just a fraction of the time needed for a full analysis because it updates only a portion of the design which is affected by the changes proposed by the human to correct the crosstalk induced violations. Examples of manually driven changes include increasing the drive strength of victim nets by increasing the sizes of the driving cells using a command size cell or by inserting buffers using another command insert buffer. Another technique is to move apart adjacent victim aggressor nets with the command set coupling separation. 

However even with what if analysis manual work is required e.g. to come up with the what if scenarios to type the just described commands and to evaluate results of what if analysis which are reported by the static timing analysis tool. Sometimes fixing a problem does not solve it because the problem simply moves to another location an example of which is illustrated in . Specifically sizing up a victim driver cell see bottom net in reduces its drive holding resistance resulting in smaller crosstalk delay. However the sized up victim driver cell see now behaves as a strong aggressor for a receiver cell in the original aggressor net the top net in . This causes a large crosstalk delay for the aggressor net which in turn may create a new timing violation.

Moreover even if it appears during crosstalk analysis that sizing up a cell is feasible it is possible that the place and route tool is unable to size up the same cell e.g. if there is no physical space available for upsizing in its neighborhood. Also in certain situations each of several parallel paths n n in a tree may have a negative slack. One repair technique is to repair all nets n n. Another alternative technique is to only repair net n. Both techniques remedy the timing violation and they may both appear equally good at the crosstalk analysis stage but which one of these two techniques can be used without requiring further iteration is unknown until after invoking the place and route tool with appropriate ECO s . Hence these types of problems cause multiple iterations of ECO based on human input and or trial and error which may not necessarily converge especially in case of large IC designs.

A computer is programmed in accordance with the invention to automatically perform static timing and or noise analysis on a netlist of an integrated circuit to estimate behavior of the netlist and to identify at least one violation by said behavior of a corresponding requirement thereon such as setup time hold time or bump height in a quiescent net. Thereafter changes in behavior of the layout in response to an engineering change order ECO to address the violation are automatically analyzed by the computer based on the layout the parasitics the behavior and the violation. Based on the behavior changes the computer automatically generates one or more constraints on the behavior called ECO constraint such as a timing constraint and or a noise constraint. The ECO constraint s are eventually used to automatically select an ECO repair technique from among known ECO repair techniques that can overcome the violation. The selected ECO repair technique is applied to the layout to generate a modified layout which does not have the violation. The computer may repeat the just described acts on the modified layout to check if new violations have arisen and if so the new violations are also corrected as just described.

A computer is programmed in several illustrative embodiments of the invention to automatically perform static timing and or noise analysis on an IC design in the form of a netlist to estimate timing and or noise behavior of a layout for the netlist obtained from a place and route operation which places blocks of circuitry and routes wires therebetween and to identify at least one violation by the behavior of a corresponding requirement thereon such as setup time hold time or bump height in a quiescent net.

Timing violations are typically identified at the end of static timing analysis as a list of endpoints of corresponding paths in the netlist. The computer then identifies one or more victim nets that are located in a fanin cone of each endpoint in the list of timing violations and also identifies a group of aggressor nets wherein each aggressor net is capacitively coupled to one of the victim nets. Noise violations are typically identified at the end of static noise analysis as a list of victim nets in the netlist. The computer then identifies a group of aggressor nets wherein each aggressor net is capacitively coupled to one of the victim nets.

Thereafter changes in behavior of the layout that would arise on performance of an engineering change order ECO to address the violation s are automatically estimated by software called ECO constraints generator A in the computer as per act in based on the layout the parasitics the behavior and the violation s . Based on the behavior changes the computer when programmed with the ECO constraints generator A automatically identifies a subset of nets that are to be repaired as per act in followed by generation as per act of one or more constraints on ECO repair techniques that can be used called ECO constraint such as a timing constraint and or a noise constraint. ECO constraints generator A of these embodiments is tightly coupled to a static timing and noise analysis tool see .

When preparing ECO constraints as per acts generator A of some embodiments does not require accurate physical information which is normally needed to decide which ECO repair technique is best for a given location in the layout. Instead generator A of these embodiments simply identifies in act a precise constraint on any behavioral change that can arise from ECO repair by location and amount. An example of an ECO constraint output by generator A is 10 delay reduction on pin A . Note that the ECO constraint of this example identifies a specific location e.g. pin A as well as a specific amount of change e.g. 10 that must be accomplished in order to overcome the violation. To generate ECO constraints generator A of some embodiments quickly estimates new timing information before repair in act and minimizes the number of repairs needed for the layout when possible in act .

Depending on the embodiment ECO constraints can be stored in non volatile memory e.g. in a file on disk see which is useful for transfer to another computer. Alternatively the ECO constraints can be retained in main memory of the computer. The ECO constraint s are eventually received in a computer which may or may not be the same computer that generated the ECO constraints that is programmed with certain software called ECO generator B to receive and use the ECO constraints as shown by branch in . In some embodiments ECO constraints are encrypted for transfer from ECO constraints generator A to ECO generator B although encryption is not used in certain other embodiments of the invention. Note that encryption is not a critical aspect of the invention and any encryption method and or keys may be used or not used depending on the embodiment.

Based on each ECO constraint the ECO generator B automatically selects a specific ECO repair technique from among several ECO repair techniques that are known to overcome capacitive coupling and thus reduce or eliminate the violation from which the ECO constraint was generated. For example ECO generator B checks if an ECO repair technique as per act in satisfies an ECO constraint and if so that ECO repair technique is marked as being selected for use in repair as per act and if not then another ECO repair technique is checked as per branch A . Some embodiments of the invention select one of the following three ECO repair techniques to fix the just described violation a upsizing also called enlarging a cell in a victim net b adding a buffer in the victim net and c increasing spacing between the victim net and its aggressor net s . Hence in act software B automatically selects whichever one of these three techniques a c is found to satisfy the ECO constraint generated by software A. ECO generator B repeats the just described act for all ECO constraints as per act . The selected ECO repair techniques are thereafter used to automatically correct one or more violations that were identified in act . Hence a computer when programmed with softwares A and B eliminates the prior art method of manual fixing by trial and error.

ECO generator B of some embodiments is tightly coupled to a place route tool with access to a layout used to identify the violations. Via the ECO constraints ECO generator B receives accurate timing and noise information about each location in the layout and evaluates one or more ECO techniques such as sizing a cell inserting a buffer or rerouting wires based on the physical limitations inherent in the layout and picks an ECO technique which satisfies the specified ECO constraints. Thereafter the selected ECO repair techniques are applied by the place and route tool to the layout to generate a modified layout which does not have the violation.

Note that ECO constraints generator A of several embodiments estimates in act a number of timing delay and bump height changes that arise from repair. Some embodiments compute stage delay see in as the summation of cell delay see in net delay also called wire delay and crosstalk delay and a change in each of these delays is individually estimated. Note that net delay and crosstalk delay are shown together as in . The computation of these behavioral changes that will arise from ECO repair is done in act of by software A even before any actual ECO repair is done by software B in act of . Hence iteration between softwares A and B converges quickly in most IC designs that are close to timing signoff. Moreover in some embodiments this iteration process is fully automated and does not require any manual intervention.

Note that in some embodiments of the invention a computer is not programmed with five separate softwares A and B and instead all of them are merged into a single tool that performs a place and route operation a parasitic extraction operation a static timing noise analysis operation as well as ECO constraint generation and ECO generation automatically all within the same tool in the same computer. Numerous embodiments will be apparent to the skilled artisan in view of this disclosure.

For example in some other embodiments the software and B are merged into a single tool which forms an enhanced place and route tool such as Astro available from Synopsys Inc while the software and A are merged into another tool which forms an enhanced static analysis tool such as PrimeTime SI also available from Synopsys Inc . Hence an enhanced timing noise analysis tool in accordance with the invention automatically generates ECO constraints while an enhanced place route tool in accordance with the invention automatically uses the ECO constraints.

In certain alternative embodiments a static timing and noise analysis tool is further enhanced to not only generate ECO constraints but to also automatically invoke and operate a normal i.e. not enhanced place route tool to identify the best ECO techniques applicable to the layout and then outputs the ECO techniques as commands to the place route tool. Examples of commands to the normal place route tool that are generated in such alternative embodiments are re sizing a cell inserting a buffer or rerouting wires. Hence the alternative embodiments may implement all aspects of the invention in a super enhanced static timing and noise analysis tool which contains therein a version of softwares A and B followed by use of a normal place route tool that is unchanged i.e. same as the prior art .

Several embodiments use three acts as shown in to perform act of before the actual ECO operation. Specifically estimation of ECO driven change in delay is performed in act as follows in some embodiments. One ECO repair technique requires upsizing a victim cell driver which changes its crosstalk delay as well as the crosstalk delays of the aggressors of that victim. Moreover this ECO repair technique also changes the previous stage delay and current stage delay due to input capacitance and driver resistance changes. Hence to upsize one victim cell the computer is programmed to estimate in act the following delays previous stage cell delay see previous stage net delay new sized victim cell delay victim net delay and victim net crosstalk delay together shown as and aggressor nets crosstalk delay . Another ECO repair technique requires buffer insertion whose effect on delay is estimated similar to cell upsizing except for adding a buffer cell delay. Let dand ddenote the original previous and current stage delays and d and d denote the estimated previous stage and current stage delays. Then estimated delay change d is computed as 1 

Specifically act computes ECO caused change in crosstalk delay in an aggressor net see in as well as in the victim net shown together with net delay of the victim as in . Act computes change in net delay of the victim see in as well as of the net delay of the previous stage see in . And act computes changes in cell delay of the victim net see as well as the previous stage see . Depending on the previous stage delays and an input signal to the driver of the victim net may itself be delayed and this is also taken into account e.g. when summing up delays . Note that ECO repair techniques may change the input capacitance as well as the strength of the driver . After all such delays are computed and summed up the change in delay due to ECO repair is obtained.

In some embodiments the amount of re sizing of a victim cell is determined by finding a cell in the technology library which performs the same function as the victim cell but satisfies a predetermined criterion on one or more delays in the victim net such as crosstalk delay and or stage delay. Certain embodiments use as the predetermined criterion an X reduction in crosstalk delay and a Y reduction in stage delay. Note that as stage delay includes crosstalk delay as one of its components Y

In an illustrative example a cell denoted as L for being first alternate larger than the victim cell is tested for its use in the victim net and its estimates result in 10 and 1 improvement in crosstalk delay and stage delay. As each of these two values are less than the corresponding predetermined criterion values of 50 and 10 respectively the process is repeated. In this example another cell denoted as L for being the second alternate larger than the first alternate L is tested and its estimates result in 30 and 2 improvement which are still below the corresponding predetermined criterion values of 50 and 10 respectively the process is once again repeated. In this example yet another cell denoted as L for being the third alternate larger than the second alternate L is tested and its estimates result in 60 and 8 improvement. Since the crosstalk delay improvement exceeds the corresponding predetermined criterion value of 50 this cell L is rejected and L is selected as being the cell to use in upsizing the victim cell.

Note that the just described process is performed when determining the ECO constraints to be generated in software A and hence it is unrelated to any process that may be performed in modifying the IC design in software B . There is a tradeoff in the values of X and Y analyzed as follows. If the X and Y values are set e.g. by an IC chip designer to be too large the resized cells may become too large to fit within the physical space available in the layout. If the X and Y values are set to be too small then the number of ECO repairs that are needed is likely to increase and may not be possible e.g. due to lack of convergence . Some embodiments use as default the values of 50 and 10 for X and Y respectively.

Act is thereafter performed to minimize the number of ECO repairs that are required because fixing a single net may fix timing violations in multiple paths that contain that single net so that other nets in these paths need not be fixed thereby to reduce the chance of perturbing other parts of the design. Finally as per act one or more ECO constraints are generated which are then sent from the timing noise analyzer to the place route tool.

The acts shown in of some embodiments are very fast and only require a few additions and multiplications. They are selected to be sufficiently accurate to guide an ECO repair decision when combined with scaling as discussed next. Act of some embodiments uses a simplified circuit model representation as illustrated in for an original circuit shown in . More details on this model are described in detail in an article by A. Vittal and M. Marek Sadowska Crosstalk Reduction for VLSI IEEE Trans. on CAD vol. 16 no. 3 pp. 290 298 1997 that is incorporated by reference herein in its entirety.

The just described model in the previous paragraph produces an upper bound for crosstalk glitch height Vas calculated by equation 2 below. In this equation 2 Ris an aggressor cell s resistance and Cis the aggressor cell s load capacitance computed as the sum of the aggressor net s wire capacitance and all pin capacitances of the aggressor net . Cis the total coupling capacitance between the aggressor net and the victim net. Ris the victim cell s resistance. Cis the victim cell s load capacitance computed as the sum of the victim net s wire capacitance and all pin capacitances of the victim net . Vrepresents the voltage rail of the aggressor net. This model is used in some embodiments because it provides a closed form equation for bump i.e. glitch height and can be evaluated much quicker than an iterative calculation.

After applying this equation 2 for each aggressor and getting individual glitch heights caused by each aggressor the computer is further programmed to add them up to obtain a total glitch height based on the superposition principle . Although this value is just a first order approximation and doesn t represent the exact glitch height in the victim net it is nonetheless computed and it is used in act in some embodiments specifically by interpolation via scaling . Alternative embodiments of act obtain an exact value by transistor level simulation or any other method such as PRIMA described in the following article by A. Odabasioglu M. Celik and L. Pileggi PRIMA Passive Reduced Order Interconnect Macromodeling Algorithm IEEE Trans. on CAD vol. 17 no. 8 pp. 645 654 1998 that is incorporated by reference herein in its entirety.

In the following description Vand Vrepresent approximated glitch height values obtained from application of equation 2 for the original and sized network respectively. Note that Vis typically smaller than Vbecause driver resistance of a larger cell is smaller i.e. in equation 2 Rof the new victim cell is smaller than that of the original victim cell. Also in the following description Vand Vrepresent the exact glitch height for the original and new network respectively. Similarly Vis typically smaller than Vdue to the new smaller driver resistance. Hence many embodiments of act approximate the value V by assuming that a ratio of the approximated and actual glitch heights remains constant as shown in equation 3 below.

In some embodiments Vis computed by use of a circuit simulator e.g. SPICE and hence it is known at this stage. Therefore act easily obtains Vby applying the above equation 3 . Then act computes crosstalk delay with the approximation shown in . Specifically by aligning the crosstalk glitch on the slope of the victim act estimates the crosstalk delay using equation 4 below. In the following equation 4 value d represents the estimated crosstalk delay and tthe full rail to rail transition time of the victim. Vrepresents the voltage rail of the victim net. This formulation allows the victim and aggressor nets to be at different rail voltages.

In several embodiments the static timing and noise analysis tool does not have access to the layout of the IC design and therefore these embodiments use cell upsizing as a technique to estimate the ECO constraints. In some alternative embodiments the static timing and noise analysis tool has access to the layout of the IC design generated by the place and route tool. Hence the just described alternative embodiments use the layout to test out other techniques such as wire re routing increased wire spacing and or wire re sizing reduced wire length to estimate the ECO constraints. Note that such layout based techniques for ECO repair may be used alone individually or in combination with one another and or with the above described cell upsizing.

For example when applying wire re routing the static timing and noise analysis tool tests out increase in wire spacing by 1P 2P 3P etc from the victim net to find an appropriate value that meets the predetermined constraint s wherein P is the pitch between adjacent wires. These alternative embodiments provide to an enhanced place and route tool with not only an ECO constraint but also an identification of the technique or combination of techniques used to prepare the ECO constraint. The enhanced place and route tool of such alternative embodiments then uses the identified technique s to modify the layout to achieve the specified ECO constraints.

Act is performed in some embodiments to identify a subset of nets to be repaired from among a set of nets that contribute delay to a number of paths. Specifically the computer s objective in act is to find a minimum set of nets to be repaired to fix all timing violations of the paths. An example configuration of nets and paths that are optimized by act is shown in wherein four timing paths p p pand pwith timing violations due to crosstalk delays at nets n n nand n as shown in and their path slacks are all negative i.e. 1 ns 2 ns 2 ns and 1 ns respectively. In the figure for simplicity nodes represent cross coupling nets and any nets without cross coupling are omitted from the paths. Assume repairing crosstalk at n n nand ncan reduce net delay by 1 ns 2 ns 1 ns and 2 ns respectively. Then consider two sets of nets N and N as follows. N n n N n n n 9 Both set Nand set Ncan repair all violations of the paths but Nhas less number of nets to repair because nand nare more critical in terms of crosstalk impact. The computer is programmed in act to identify such critical nets to minimize the number of repairs. In several embodiments the computer is programmed to formulate an NP complete problem to achieve this objective.

In certain embodiments of the type discussed next the computer formulates this problem using Integer Linear Programming ILP and then applies a heuristic to solve this problem. These embodiments start with a set of timing violation paths P and a set of nets with coupled nets on P and formulate a problem of minimization of the number of repairs of the nets using Integer Linear Programming as follows. In the following formulation M denotes the number of paths that have to be repaired and N denotes the number of repairable nets on the paths. The computer is programmed in act to set up in its memory an M N matrix called connectivity matrix C in which elements are defined as c 

In some embodiments of the invention the computer uses a heuristic to solve equation 14 in an iterative fashion. In the following description xrepresents x in the kth iteration and the computer is programmed with the assumption that only one element in x can be equal to 1 in each iteration. Equation 14 re written in an iterative manner is as follows . 16 Since x 1 in each iteration the iteration process is continued until all elements in Swould become less or equal to zero. To guide selecting an element of xin the kth iteration the computer is programmed to use in act a 1 N matrix B where its elements are defined as b 

The heuristic is applied to the example shown in as follows. At this stage the computer has already determined C R and S as per equation 15 above. Then the computer finds B and D by using equations 17 and 18 as follows. B 3 1 1 2 D BR 3 2 1 4 20 The largest element in D is the fourth element d and for this reason the computer selects nas the first repair candidate i.e. x 0 0 0 1 . The second largest element is d thus the computer selects x 1 0 0 0 as the next repair candidate. The computer starts with Sthat is the same as S in equation 15 . In a first iteration of the heuristic the computer computes as follows 

Note that although the ILP problem is NP complete a heuristic of the type described herein reduces its solution time by using matrix operations that are linear in solution time as will be apparent to a person skilled in computer programming. Any sorting algorithm can be used to sort the matrix elements. For example some embodiments of act use Quick sort. Note that in practice if an IC design is in sign off condition and has only a handful of violations then M is much greater than N.

Several experiments have been performed to study the feasibility of the method illustrated in . In one experiment the ECO change estimation is used to predict a new crosstalk delay when a victim cell is replaced by a cell that has about half of the original cell s resistance. A design with half a million gates in 90 nm process was used and the worst 10 000 nets with crosstalk delays were identified and their victim drivers were replaced with new cells and estimated new crosstalk delays. Then exact crosstalk delays were computed using a circuit simulation tool such as SPICE and compared with the estimated ones as shown in . In the graph horizontal axis is the estimated value and vertical axis is a real computed value. If estimation matches the real value without any error it sits on the 45 degree line in the graph. As shown in the graph all points are within 10 error range and accurate enough to determine whether to re size or insert buffers for repair.

The method illustrated in was also tested with several industrial designs. Table 1 below shows details of the designs used in the experiment. All designs have from two hundred thousand to half a million cells. Two of the designs were at sign off state and the others were relatively clean when their timings were analyzed without crosstalk with commercial static timing analysis software. However when they were analyzed with considering crosstalk some additional timing violations were discovered. The method illustrated in was also applied to the designs and generated ECO constraints for timing repair. A commercial place and route tool was used to read these constraints and further used to implement ECO operations. The modified layout from the place and route tool was sent to parasitics extraction tool that created a new parasitics data. Then the timing analysis tool was again applied to the modified layout to analyze the timing with ECO changes. The acts in were all automated so that they could be run over night without any human intervention.

Note that to evaluate some embodiments experiments were done and three parameters were measured worst negative slack WNS total negative slack TNS and number of endpoint violations. WNS shows the worst timing in the design. TNS shows summation of all negative slacks of the design. The method of showed very good reduction ratio in all three measurement criteria. Most IC designs reach a sign off state after a handful of iterations e.g. two or three iterations.

Crosstalk repair in the prior art known to the inventors has been a difficult problem requiring laborious manual trial and error iterations to converge due to several issues. The method of resolves such issues and enables automation of the repair process. An act which performs fast estimation of behavior changes that will result from ECO operations allows act to find the best repair candidates based on predicted new timing information and a heuristic that identifies the minimum number of repairs. Experimental results show that the method of can be applied to industrial designs to repair crosstalk violations for sign off purposes.

Accordingly the method of is used in some embodiments of an EDA software design process shown as in . Process is actually composed of a number of stages shown in linear fashion for simplicity. In an actual ASIC design process the particular design might have to go back through steps until certain tests are passed. Similarly in any actual design process these steps may occur in different orders and combinations. This description is therefore provided by way of context and general explanation rather than as a specific or recommended design flow for a particular ASIC. A brief description of the components of the EDA software design process stage will now be provided.

System design stage The circuit designers describe the functionality that they want to implement they can perform what if planning to refine functionality check costs etc. Hardware software architecture partitioning can occur at this stage. Exemplary EDA software products from Synopsys Inc. that can be used at this stage include Model Architect Saber System Studio and DesignWare products.

Logic design and functional verification stage At this stage the VHDL or Verilog code for modules in the system is written and the design which may be of mixed clock domains is checked for functional accuracy. Exemplary EDA software products from Synopsys Inc. that can be used at this stage include VCS VERA DesignWare Magellan Formality ESP and LEDA products.

Synthesis and design for test stage Here the VHDL Verilog is translated to a netlist. The netlist can be optimized for the target technology. Additionally the design and implementation of tests to permit checking of the finished chip occurs. Exemplary EDA software products from Synopsys Inc. that can be used at this stage include Design Compiler Physical Compiler Test Compiler Power Compiler FPGA Compiler Tetramax and DesignWare products.

Design planning stage Here an overall floorplan for the chip is constructed and analyzed for timing and top level routing. Exemplary EDA software products from Synopsys Inc. that can be used at this stage include Jupiter and Floorplan Compiler products.

Netlist verification stage At this step the netlist is checked for compliance with timing constraints and for correspondence with the VHDL Verilog source code. Exemplary EDA software products from Synopsys Inc. that can be used at this stage include VCS VERA Formality and PrimeTime products applied to pre layout IC designs . Note that timing analysis at this stage is performed in PrimeTime based on simplified models that do not take into account capacitive coupling and crosstalk.

Physical implementation stage The placement positioning of circuit elements such as the above described sequential cells and combinational cells and routing connection of the same occurs at this step. Exemplary EDA software products from Synopsys Inc. that can be used at this stage include the Astro product. Note that an ECO generator B of the type described above in reference to can be used in an iteration through this stage as shown in after ECO constraints have been generated. Although circuitry and portions thereof such as rectangles may be thought of at this stage as if they exist in the real world it is to be understood that at this stage only a layout exists in a computer . The actual circuitry in the real world is created after this stage as discussed below.

Analysis and extraction stage At this step the circuit function is verified at a transistor level this in turn permits what if refinement. Exemplary EDA software products from Synopsys Inc. that can be used at this includes Star RC XT Raphael Aurora and PrimeTime SI products applied to post layout IC designs . Note that timing analysis at this stage is performed in PrimeTime SI based on capacitive coupling and crosstalk models. Hence some embodiments use PrimeTime SI at this stage to generate ECO constraints.

Physical verification stage At this stage various checking functions are performed to ensure correctness for manufacturing electrical issues lithographic issues and circuitry. Exemplary EDA software products from Synopsys Inc. that can be used at this stage include the Hercules product.

Resolution enhancement stage This involves geometric manipulations of the layout to improve manufacturability of the design. Exemplary EDA software products from Synopsys Inc. that can be used at this stage include iN Phase Proteus and AFGen products.

Mask data preparation stage This provides the tape out data for production of masks for lithographic use to produce finished chips. Exemplary EDA software products from Synopsys Inc. that can be used at this include the CATS R family of products. Actual circuitry in the real world is created after this stage in a wafer fabrication facility also called fab .

The data structures and software code for implementing one or more acts described in this detailed description can be encoded into a non transitory computer readable medium which may be any storage medium that can hold code and or data for use by a computer. Storage medium includes but is not limited to magnetic and optical storage devices such as disk drives magnetic tape CDs compact discs and DVDs digital versatile discs that includes instructions to perform the methods illustrated in .

Note that a computer system used in some embodiments to implement an ECO constraints generator A and an ECO generator B of the type described herein uses one or more linux operating system workstations based on IBM compatible PCs and or unix operating systems workstations e.g. SUN Ultrasparc HP PA RISC or equivalent each containing a 2 GHz CPU and 1 GB memory that are interconnected via a local area network Ethernet .

Numerous modifications and adaptations of the embodiments described herein will become apparent to the skilled artisan in view of this disclosure. For example although Integer Linear Programming ILP is used in some embodiments of act other embodiments in accordance with the invention use other methods such as simulation annealing as described below in Appendix B. Accordingly numerous modifications and adaptations of the embodiments described herein are encompassed by the scope of the invention.

In some embodiments ECO constraints are transferred from an enhanced static timing analysis tool such as PrimeTime SI to an enhanced place and route tool such as Astro as follows. The constraints are objectives that the enhanced static timing and noise analysis tool asks the enhanced place and route tool to meet in selecting appropriate ECO repair techniques. As noted above an example of an ECO constraint is when the enhanced static timing and noise analysis tool asks the enhanced place and route tool to reduce a stage delay by 20 on a specific net and it does not matter whether the enhanced place and route tool inserts buffers or sizes cell to reduce the stage delay by the specified amount. In some embodiments violations related to signal integrity SI are addressed first to fix timing violations. If the signal integrity repair technique doesn t correct a timing violation then other timing repair techniques are considered. This means for example correction of crosstalk delay is considered first rather than reducing stage delay.

Certain embodiments start with a set of SI bottleneck nets that are generated by an act in an enhanced static timing and noise analysis tool. This tool then automatically generates ECO constraints to make the slacks of the paths going through the bottleneck nets positive. The ECO constraints for Signal Integrity to reduce crosstalk delays are considered first. If timings are not met after reducing the crosstalk delays reducing stage delay is considered. Note that methods of the type described herein may also start with a set of paths with negative slacks and generate ECO constraints to make the slacks of the paths positive.

In some embodiments the enhanced static timing analysis tool generates two types of ECO constraints in a predetermined format also called ECO constraint format . A first type of constraint specifies how much crosstalk delay reduction should be achieved for the given pin. This can be achieved by reducing bump height caused by capacitive couplings. An application programming interface API for this type of ECO constraint between the enhanced static timing analysis tool and the enhanced place and route tool specifies the following items of information 1 identifier of the ECO constraint e.g. arrival time reduction or crosstalk delay reduction or both 2 identifier of a pin in the IC design at which the ECO repair is to be done 3 minimum rise delay 4 maximum rise delay 5 minimum fall delay and 6 maximum fall delay. If an example of ECO constraint requires 20 reduction of crosstalk delay in max rise and fall for pin U A and if both rise and fall max net delays are 2 ns then the reduction is specified as 0.4 ns for both these delays. Another example of ECO constraint specifies stage delay should be reduced by 10 for a given pin U B based on both rise and fall max stage delays to be 5 ns as being 0.5 ns for both these delays.

A flow of the type described above in some embodiments is designed to be applied in ECO stage and the softwares A and B described above assume that there are not many paths with violations. An ideal test case is an IC design that meets the timing without SI analysis but has a small set of violations after applying SI analysis. Thus the method of is not recommended for any designs with a large number of timing violations. Otherwise it may result in many iterations between the static timing analysis tool and place and route tool.

Although these ECO constraints eliminate timing violations from path P and P there are still negative slacks remaining for P P and P. At this stage the static timing and noise analysis tool already has fixed SI violations from P P and P thus the remaining fixing options are to reduce stage delays along the paths. Now the static timing analysis tool needs to find a minimum number of stage delay reductions that can remove timing violations from the paths.

In this example path P has ten stages along the path the static timing and noise analysis tool decides to reduce the stage delay of the net marked with black square S instead of other nets because S has three violating paths P P and P passing through it. Thus it will consequently reduce the arrival time of path P and P. If the static timing and noise analysis tool could reduce the stage delay of S by 0.4 ns and it results in removing timing violations from P and P as well as P then the static timing and noise analysis tool needs only one constraint for the stage delay reduction. However if another net on P is chosen instead of S and the stage delay of the net is reduced the static timing and noise analysis tool needs to generate more constraints to reduce stage delays for P and P. Thus in this example reducing stage delay of S produces the minimum number of constraints.

In the above described example the static timing and noise analysis tool started with five negative slack paths that go through the bottleneck nets. However it is common that a large number of paths pass through the nets. For example in practice the inventors have observed more than 0.1 million paths that go through one net exist in some IC designs. As the proposed method of is linear and proportional to the number of paths finding minimum number of constraints for the paths takes a long time if the number of paths is huge. The following section describes how to address this kind of issue by iteration.

Next the computer first checks whether the reduced crosstalk delay as computed by the static timing and noise analysis tool makes the slack of an entire path positive. If the slack is still negative after fixing crosstalk delays the computer applies the iterative algorithm to reduce stage delays on the path and generates updated stage delays as per act . Next in act the ECO constraints are back annotated to the static timing and noise analysis tool for example by overwriting pre existing stage delays of the N bottleneck nets with the corresponding updated stage delays obtained e.g. by upsizing a victim cell driver . Next the timing of all paths in the entire IC design is updated in act and then the computer checks the N nets to see if they still have any paths with negative slacks. If there still exist negative slack paths P of them with worst slack are again collected and the iterative algorithm is applied again by returning via branch to act described above . If no negative slack paths exist then the computer goes to act to generate ECO constraints expressed in the above described ECO constraint format for consumption by the place and route tool

In the method shown in P is the number of paths to be analyzed and determines the overall runtime of the computer when executing this method. If P is large the static timing and noise analysis tool requires a long time to generate constraints but this reduces the number of iterations. On the other hand if P is small the static timing and noise analysis tool might quickly generate constraints but this increase the number of iterations which may result in lengthening overall runtime because each iteration requires updating the timing database that sometimes takes a couple of hours for large designs.

For example if P is selected to be 10 the static timing and noise analysis tool analyzes only maximum 10 paths for each bottleneck. Thus it takes less than 70 seconds for each iteration but it requires 3 iterations to remove all violations. On the other hand if P is 100 the first iteration takes 90 seconds to analyze maximum 100 paths for each net but all violations are removed after the second iterations resulting in shorter overall runtime than the previous. By choosing one million for P the static timing and noise analysis tool could potentially remove all violations in the very first iteration but it results in the longest overall runtime. Hence a tradeoff is required to choose an appropriate value for P. Unfortunately the optimum value for P is dependent on the IC design. However empirical results show that the static timing and noise analysis tool can get good results when P is between 100 and 1000.

The amount of improvement one can make for stage delay also determines the number of ECO constraints generated for the place and route tool. Suppose a path with 1 ns slack consists of 10 stages and each stage has 2 ns of stage delay. If we can improve stage delay by 10 we need 5 stages 0.2 ns 5 1 ns to be improved to make the slack positive. However if improving stage delay by 30 only 2 stages need to be fixed because each stage can reduce 0.6 ns. Accordingly the static timing and noise analysis tool is used to generate a minimum number of constraints for the place and route tool not only because runtime is improved but also because it reduces the probability of disrupting other parts of the design.

The maximum limit on stage delay also depends on design characteristics and is to be determined by users. A higher limit produces less number of ECO constraints from the static timing and noise analysis tool but increase the number of ECO constraints that are rejected by the place and route tool because the constraints are too aggressive to be achieved. Lower limit satisfies the place and route tool to achieve the specified constraints but could create other violations due to a large number of changes requested for the design. Experiments on industrial designs have shown that stage delay limit is a sensitive setting. We found that for some IC designs when we increase the mentioned limit P linearly number of ECO constraints increase exponentially.

In some embodiments the method of is implemented by in a TCL script which can be invoked with various parameters as follows. Specifically the Tcl version of this ECO constraint generation method accepts a list of size N of Signal Integrity bottleneck nets. User can specify the maximum number of paths P to be analyzed. It allows the user to specify the limitation on crosstalk delay change as a percentage of the original crosstalk delay e.g. 50 . It further allows the user to specify a limitation on the stage delay change as a percentage of original stage delay e.g. 10 . It also allows the user to set the number ECO constraint loop iteration which imposes an upper limit on the number of times the branch in is taken. It reads in a pin map that translates the pins in static timing and noise analysis tool to the pins in place and route tool. Finally it generates an output file as the above described ECO constraint format.

The following appendices A B and C are integral parts of this detailed description and are incorporated by reference herein in their entirety. These appendices provide further detailed descriptions of implementation of an illustrative embodiment of the type shown in .

In some embodiments a computer implemented method in accordance with the invention estimates at least one change in timing behavior of each candidate net required to be made to overcome a violation as follows computing a change in cell delay in an enlarged version of a cell in a victim net in a set of candidate nets computing a change in net delay in at least the victim net using a simplified representation of a path in the netlist and computing a change in crosstalk delay in at least the victim net by using values of total resistance and total capacitance of the victim net and the aggressor net and the input capacitance of the receiver cells of the victim net and the aggressor net and the resistance of the victim net driver cell and the resistance of the aggressor net driver cell. In certain embodiments the computer implemented method applies a closed form equation for the aggressor net with rail voltage of the aggressor cell and the values of total resistance and total capacitance of the aggressor net and the victim net to obtain a maximum height of a bump arising in the victim net due to crosstalk from the aggressor net. In the certain embodiments the applying is repeated with the values of the rail voltage of the aggressor and the values of total resistance and total capacitance of the aggressor net and the victim net and an enlarged version of said victim net driver cell thereby to obtain a smaller maximum height of said bump for each aggressor net capacitively coupled to a repaired version of said victim net wherein the repaired version of the victim net comprises the enlarged version of the victim net s driver cell.

