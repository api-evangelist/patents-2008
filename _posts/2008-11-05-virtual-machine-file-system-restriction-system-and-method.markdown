---

title: Virtual machine file system restriction system and method
abstract: A method includes creating a virtual machine including a remote file system, a file system service, and a security application. Access to the remote file system is restricted with the security application upon an unknown malicious code outbreak. The more that is known about the threat, the more precise are the restrictions placed upon the file system thus reducing the impact on users of the file system to an absolute minimum.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09450960&OS=09450960&RS=09450960
owner: Symantec Corporation
number: 09450960
owner_city: Mountain View
owner_country: US
publication_date: 20081105
---
The present invention relates to computer system security. More particularly the present invention relates to a system and method of providing security to virtual machines.

A virtual machine VM is a software implementation of a computer that executes programs like a real physical computer. A system virtual machine provides a complete system platform which supports the execution of a complete operating system such as a Windows operating system.

It is not uncommon to have several virtual machines running on a single real physical computer. Each of these virtual machines typically includes a security service e.g. an antivirus scanner as does any real computer. However providing a separate security service for each virtual machine is overhead intensive.

Malicious code often resides in executable computer code and is activated when the computer code is executed. Malicious code can spread rapidly throughout computer networks during outbreaks of the malicious code. Unknown malicious code can contaminate hundreds of thousands of computers worldwide in a few hours or days and cause enormous damage.

Often reactive technologies e.g. anti virus scanning software are used to scan computer files to detect malicious code that is known and has been analyzed. The reactive anti virus software often fails to catch or prevent unknown malicious code.

In accordance with one embodiment a method includes creating a virtual machine including a remote file system a file system service and a security application. Access to the remote file system is restricted with the security application upon an unknown malicious code outbreak.

The security application is insinuated at the chokepoint provided by the virtual machine to changes to the file system. This allows the security application to inspect changes to the file system e.g. access of files on the file system as well as writing of files to the file system from the shared and controlled environment of the virtual machine. The protection of the file system provided by the security application is absolute. Accordingly the security application facilitates a simple convenient yet extremely secure solution for restricting access to files and writing of files to the file system.

The security application enables reliable and precise protection of the file system from an emerging threat during the window between the release of the threat and the delivery of the virus signature for the threat. More particularly the security application restricts access to and writing of files to the file system having attributes matching characteristics of the threat. The more that is known about the threat the more precise are the restrictions placed upon the file system thus reducing the impact on users of the file system to an absolute minimum.

Embodiments are best understood by reference to the following detailed description when read in conjunction with the accompanying drawings.

Common reference numerals are used throughout the drawings and detailed description to indicate like elements.

As an overview in accordance with one embodiment referring to a method includes creating a virtual machine including a remote file system A a file system service and a security application . Access to remote file system A is restricted with security application upon an unknown malicious code outbreak.

Security application is insinuated at the chokepoint provided by virtual machine to changes to file system A. This allows security application to inspect changes to file system A e.g. access of files on file system A as well as writing of files to file system A from the shared and controlled environment of virtual machine . The protection of file system A provided by security application is absolute. Accordingly security application facilitates a simple convenient yet extremely secure solution for restricting access to files and writing of files to file system A.

Security application enables reliable and precise protection of file system A from an emerging threat during the window between the release of the threat and the delivery of the virus signature for the threat. More particularly security application restricts access to and writing of files to file system A having attributes matching characteristics of the threat. The more that is known about the threat the more precise are the restrictions placed upon file system A thus reducing the impact on users of file system A to an absolute minimum.

Now in more detail is a diagram of a client server system that includes a virtual machine file system content protection application executing on a host computer system in accordance with one embodiment. Host computer system sometimes called a client or user device typically includes a central processing unit CPU hereinafter processor an input output I O interface and a memory .

Host computer system may further include standard devices like a keyboard a mouse a printer and a display device as well as one or more standard input output I O devices such as a compact disk CD or DVD drive floppy disk drive or other digital or waveform port for inputting data to and outputting data from host computer system . In one embodiment virtual machine file system content protection application is loaded into host computer system via I O device such as from a CD DVD or floppy disk containing virtual machine file system content protection application .

Host computer system is coupled to a server system of client server system by a network . Server system typically includes a display device a processor a memory and a network interface . Server system may further include standard devices like a keyboard a mouse a printer and an I O device s . The various hardware components of server system are not illustrated to avoid detracting from the principles of this embodiment.

Further host computer system is also coupled to an unknown malicious code outbreak reporting server system and an unknown malicious code source server system by network . In one embodiment unknown malicious code outbreak reporting server system and unknown malicious code source server system are similar to host computer system and or server system for example include a central processing unit an input output I O interface and a memory.

Unknown malicious code outbreak reporting server system and unknown malicious code source server system may further include standard devices like a keyboard a mouse a printer a display device and an I O device s . The various hardware components of unknown malicious code outbreak reporting server system and unknown malicious code source server system are not illustrated to avoid detracting from the principles of this embodiment.

Network can be any network or network system that is of interest to a user. In various embodiments network interface and I O interface include analog modems digital modems or a network interface card.

Virtual machine file system content protection application is stored in memory of host computer system and executed on host computer system . The particular type of and configuration of host computer system server system unknown malicious code outbreak reporting server system unknown malicious code source server system i.e. real physical computer systems are not essential to this embodiment.

Further host computer system includes a virtual machine architecture that includes at least one virtual machine hereinafter referred to as virtual machines and a virtual machine monitor that manages the virtual machines as described in greater detail below in reference to .

Virtual machine VM e.g. a system virtual machine is a software implementation of a computer that executes programs like a real computer and provides a complete system platform which supports the execution of a complete operating system such as a Windows operating system.

In one embodiment virtual machine includes a page based virtual memory system that uses pages sometimes called memory areas. For example Windows operating systems provide page based virtual memory management schemes that permit programs to realize a virtual memory address space. When the computer system processor is running in virtual memory mode all addresses are assumed to be virtual addresses and are translated or mapped to physical addresses in main memory each time the processor executes a new instruction to access memory.

Conventionally the virtual memory address space is divided into two parts a lower user address space also referred to as user mode address space or ring 3 available for use by a program and a high system address space also referred to as kernel address space or ring 0 reserved for use by the operating system.

To protect the integrity of the operating system code and other kernel address space code and data structures from errant or malicious programs and to provide efficient system security user rights management Windows operating systems separate code executing in the user address space i.e. user mode from code executing in the kernel address space i.e. kernel mode. User mode code typically does not have direct access to kernel mode code and has restricted access to computer system resources and hardware.

To utilize kernel mode code functionalities such as access to disk drives and network connections user mode programs utilize system calls that interface between the user mode and kernel mode functions.

Accordingly virtual machine includes a user mode and a kernel mode . Kernel mode includes a security application a file system and a block device .

Security application provides security for virtual machine . Illustratively security application includes an antivirus scanner for scanning code e.g. files in file system for malicious code. In one embodiment malicious code is defined as any computer program module set of modules or code that enters a computer system without an authorized user s knowledge and or without an authorized user s consent.

File system is a system for storing and organizing computer files and the data they contain to make it easy to find access and store them. In one embodiment file system is designed for the storage of files on a data storage device such as a hard disk drive of host computer system . In one embodiment file system is a New Technology File System NTFS file system although other file systems can be used.

File system utilizes block device . Block device handles reading and writing of blocks of data e.g. to the hard disk drive or other storage medium of host computer system as directed by file system .

Generally security application resides between file system and programs on virtual machine e.g. user mode programs in user mode and drivers in kernel mode that access file system . In this manner security application intercepts file system exchanges with file system evaluates the file system exchanges to determine whether they are legitimate or malicious and takes appropriate action e.g. allows a valid file system exchange and takes protective action when a file system exchange is malicious.

However security application is susceptible to deception by malicious code executing on virtual machine . More particularly if the malicious code has the same or greater privileges than security application it is possible for the malicious code to circumvent security application to directly access file system .

Virtual machine is similar to a conventional virtual machine and is set forth herein to illustrate how security application within virtual machine can be circumvented by malicious code. Further a plurality of virtual machines executing simultaneously on host computer system would each require a security application and thus would be overhead intensive. Accordingly although virtual machine architecture includes virtual machine for the purpose of illustrating a conventional virtual machine structure and the deficiencies thereof in other embodiments virtual machine architecture would not include virtual machine .

Virtual machine architecture further includes virtual machines in accordance with one embodiment. Virtual machine includes a user mode A and a kernel mode A in a manner similar to user mode and kernel mode of virtual machine as described above the discussion of which is herein incorporated by reference. However in accordance with this embodiment kernel mode A includes a Uniform Naming Convention UNC file system driver sometimes called a redirector the function of which is discussed in detail below.

Virtual machine includes a file system service a security application a file system A and a block device A. Security application provides security for virtual machine . Illustratively security application includes an antivirus scanner for scanning code e.g. files in file system A for known malicious code or autoprotect function for protecting file system A e.g. rolling back the state of file system A. In one embodiment security application includes a file access writing restriction module for restricting access to and writing of files to file system A during an unknown malicious code outbreak as discussed in greater detail below with reference to and .

File system A sometimes called a remote file system is a system for storing and organizing computer files and the data they contain to make it easy to find access and store them. In one embodiment file system A is designed for the storage of files on a data storage device such as a hard disk drive of host computer system . In one embodiment file system A is a NTFS file system although is another file system in another embodiment.

File system A utilizes block device A. Block device A handles reading and writing of blocks of data e.g. to the hard disk drive or other storage medium of host computer system as directed by file system A.

Virtual machine sometimes called a security partition is a remote file system for virtual machine . More particularly UNC file system driver and file system service provide a file system interface for remote access of virtual machine from virtual machine e.g. an operating system executing in virtual machine and files of file system A of virtual machine . Although various actions are described for virtual machines in light of this disclosure those of skill in the art will understand that the actions are for operating systems executing on the virtual machines. Illustratively virtual machine and or virtual machine is a virtualization of a Windows based server.

Generally file system service sometimes called a shim is a complimentary interface to UNC file system driver i.e. works in conjunction with UNC file system driver to provide a file system interface for remote access of virtual machine from virtual machine .

To illustrate virtual machine monitor sometimes called a virtual machine manager or VMM is a virtualization platform that allows multiple virtual machines such as virtual machines to run on host computer system at the same time. Virtual machine monitors similar to virtual machine monitor will be understood by those of skill in the art in light of this disclosure and only the relevant functionality of virtual machine monitor is described herein.

Typically there is a specific distinction between a virtual machine monitor and a hypervisor. The hypervisor handles only the basic virtualization of the lowest level machine resources such as the memory management unit MMU CPU privilege level states and dispatching of Hyper Calls . In contrast the virtual machine monitor handles the higher level support of virtual machines such as provisioning the virtual machines e.g. creating starting and stopping the virtual machines scheduling virtual machine time slices and priorities virtualizing devices servicing Hyper Call requests dispatched by the hypervisor and so forth. Further the functions of the hypervisor and virtual machine monitor can be combined into a monolithic hypervisor. Accordingly although virtual machine monitor is set forth as having specific functions herein in light of this disclosure it is to be understood that virtual machine monitor can also support functions of a hypervisor and or a monolithic hypervisor in other embodiments.

Virtual machine monitor has a higher privilege level than virtual machines allowing virtual machine monitor to manage virtual machines . More particularly any interactions between virtual machines are through or authorized by virtual machine monitor . The requirement that any interaction between virtual machines occur through or with permission from virtual machine monitor is enforced in hardware e.g. by processor and thus is a very secure requirement.

Virtual machine thus must remotely access file system A e.g. through a Common Internet File System CIFS interface or a Network File System NFS interface. All file system requests from virtual machine must be funneled through the remote file system interface provided by UNC file system driver and file system service .

In one embodiment the remote file system interface can use shared memory which is very fast as the remote file system interface is on a single physical computer . In other embodiments the remote file system interface uses a network interface a paravirtualizaton enlightenment technique and or a hypercall technique or combinations thereof. In yet another embodiment hardware can assist or accelerate the transfer of data.

In one embodiment UNC file system driver uses a common syntax to describe the location of resources e.g. files within file system A. Illustratively the UNC syntax used is computername sharedfolder resource wherein computername is the name of virtual machine sharedfolder is a folder within file system A and resource is the particular file desired. Although one syntax is set forth any uniform naming convention to identify resources can be used.

More generally UNC file system driver packages file system requests from virtual machine to form a packaged file system request according to the communication protocol used. UNC file system driver sends the packaged file system request. The packaged file system request is received by virtual machine monitor which forwards the packaged file system request to virtual machine if allowed.

Upon receipt by virtual machine the packaged file system request is unpackaged by file system service . The unpackaged file system request is passed to security application which in turn passes the unpackaged file system request to file system A if allowed. Alternatively the unpackaged file system request is passed directly to file system A depending upon the particular file system request.

File system A returns the file system request result to security application which in turn passes the file system request result to file system service if allowed. Alternatively the file system request result is passed directly to file system service depending upon the particular file system request result.

File system service packages the file system request results from virtual machine to form a packaged file system request result according to the communication protocol used. File system service sends the packaged file system request result.

The packaged file system request result is received by virtual machine monitor which returns the packaged file system request result to virtual machine if allowed.

Upon receipt by virtual machine the packaged file system request result is unpackaged by UNC file system driver . The unpackaged file system request result is passed to the operating system of virtual machine .

Although file system requests and the related replies results e.g. file system exchanges are set forth above as passing through virtual machine monitor in another embodiment virtual machine monitor authorizes direct communication between virtual machine and as indicated by the dashed connector arrow. Illustratively the communication is directly between UNC file system driver and file system service .

Illustratively virtual machine is similar to a UNC file server for purposes of how virtual machine interacts with virtual machine in one example.

Generally security application resides between file system A and file system service . In this manner security application intercepts file system exchanges with file system A evaluates the file system exchanges to determine whether they are legitimate or malicious and takes appropriate action e.g. allows a valid file system exchange and takes protective action when a file system exchange is malicious.

Further file system A is securely protected from any malicious code executing on virtual machine by the hardware enforced partitioning between virtual machine and virtual machine . More particularly malicious code executing on virtual machine can at best attack and possibly disable UNC file system driver . However in this event the file system interface between virtual machine and virtual machine is disabled. As a result the malicious code on virtual machine has lost all access to file system A i.e. access to file system A is a fail closed model. This is in contrast to malicious code on virtual machine which can gain access to the entire file system should security application be defeated or disabled as discussed above which is an example of a fail open model for access to file system .

More particularly security application is insinuated at the chokepoint provided by virtual machine to changes to file system A. This allows security application to inspect changes to file system A from the shared and controlled environment of virtual machine and remain immune and insulated from the effects of any malicious code e.g. rootkits on virtual machine .

In one embodiment file system A is mapped directly for virtual machine . In another embodiment a read only base with copy on write capabilities is provided.

In yet another embodiment virtual machine provides remote file system A for a plurality of virtual machines A B . . . of virtual machine architecture . Each of virtual machines A B . . . are similar to virtual machine and include a UNC file system driver . In this manner a single security application is provided for a plurality of virtual machines A B . . . thus minimizing overhead as compared to providing each virtual machine with a security application.

Further by providing a remote file system A for virtual machines A B . . . virtual machine provides a single instance storage capability in one embodiment. A single instance storage capability is the capability of remote file system A to keep one copy of content for virtual machines A B . . . . This increases efficiency as compared to each virtual machine A B . . . storing a separate copy of the content.

In one particular embodiment remote file system A is shared by virtual machines A B . . . with changes stored for each virtual machine A B . . . . For example a test version of an environment can be booted and all writes go to remote file system A and can be sandboxed and later deleted. In another embodiment virtual machines A B . . . boot from the same master files in remote file system A with changes such as registry and users settings being persistently stored and returned as needed.

In yet another embodiment instead of being within virtual machine security application is within another virtual machine herein referred to as a security application virtual machine separate from virtual machines . File system requests from virtual machine are routed to the security application virtual machine and if allowed from the security application virtual machine to virtual machine and vice versa. In yet another embodiment various functionality of virtual machine are incorporated directly into virtual machine monitor .

From an ENTER OPERATION flow moves to a VIRTUAL MACHINE BOOTING CHECK OPERATION . In VIRTUAL MACHINE BOOTING CHECK OPERATION a determination is made as to whether a virtual machine is booting. As is well known to those of skill in the art booting is a bootstrapping process that starts the operating system of the virtual machine when the virtual machine is created.

If a virtual machine is not booting flow remains a VIRTUAL MACHINE BOOTING CHECK OPERATION . Conversely if a virtual machine is booting flow moves from VIRTUAL MACHINE BOOTING CHECK OPERATION to a REDIRECT BOOTING TO REMOTE FILE SYSTEM OPERATION .

For purposes of illustration assume the case where virtual machine is booting and virtual machine includes remote file system A for virtual machine as described above. In one embodiment virtual machine sometimes called a first virtual machine is created prior to booting of any virtual machine that will use remote file system A. In another embodiment upon a determination that virtual machine sometimes called a second virtual machine is booting virtual machine is created.

In REDIRECT BOOTING TO REMOTE FILE SYSTEM OPERATION booting of the virtual machine is redirected to the remote file system. In one embodiment a protocol similar to a network booting protocol is used to redirect the booting to the remote file system. As those of skill in the art will understand in light of this disclosure network booting is the process of booting a computer from a network rather than a local drive. In accordance with this embodiment instead of loading the boot block across a network the boot block is loaded from virtual machine .

Illustratively virtual machine includes a version of Windows that can boot entirely from a network such as for example network booting versions of Windows Server or Vista Enterprise. However instead of booting across a network booting is redirected to a boot block in virtual machine .

In one particular embodiment an environment similar to a Preboot eXecution Environment PXE also known as Pre Execution Environment or pixie is used to boot virtual machine from virtual machine . PXE is an environment to boot computers using a network interface independent of the available data storage devices like hard disks i.e. network booting. See for example Sobel et al. U.S. patent application Ser. No. 12 059 817 entitled SIMULATING PXE BOOTING FOR VIRTUALIZED MACHINES filed on Mar. 31 2008 which is herein incorporated by reference in its entirety.

Boot block e.g. boot files therein in turn identifies and initiates a loader . Loader loads the operating system of the virtual machine including UNC file system driver . Accordingly from REDIRECT BOOTING TO REMOTE FILE SYSTEM OPERATION flow moves to a CAUSE ALL INPUT OUTPUT I O TO BE REDIRECTED TO REMOTE FILE SYSTEM OPERATION where all input output of virtual machine is redirected to virtual machine by UNC file system driver . From CAUSE ALL I O TO BE REDIRECTED TO REMOTE FILE SYSTEM OPERATION flow moves to and exits at EXIT OPERATION .

In another embodiment in addition to BIOS one or more of the functions of boot block loader and UNC file system driver can be installed into virtual machine at boot time. However this involves more modification to the boot sequence of virtual machine which may be undesirable depending upon the particular virtual machine and ability to modify the same.

From an ENTER OPERATION flow moves to a FILE SYSTEM CHANGE REQUEST BY VIRTUAL MACHINE CHECK OPERATION . In FILE SYSTEM CHANGE REQUEST BY VIRTUAL MACHINE CHECK OPERATION a determination is made as to whether a virtual machine has requested a file system change i.e. made a file system change request. If a file system change request has not been made flow remains at FILE SYSTEM CHANGE REQUEST BY VIRTUAL MACHINE CHECK OPERATION . Conversely if a file system change request has been made flow moves to a FILE SYSTEM CHANGE ALLOWED CHECK OPERATION .

Illustratively virtual machine requests a change of file system A on virtual machine . This file system change request is intercepted by security application .

In FILE SYSTEM CHANGE ALLOWED CHECK OPERATION a determination is made as to whether the requested file system change is allowed or not. If the requested file system change is allowed i.e. is determined not to be malicious flow moves from FILE SYSTEM CHANGE ALLOWED CHECK OPERATION to an ALLOW FILE SYSTEM CHANGE REQUEST OPERATION . In ALLOW FILE SYSTEM CHANGE REQUEST OPERATION the file system change request is allowed i.e. passed to file system A. From ALLOW FILE SYSTEM CHANGE REQUEST OPERATION flow moves to and exits at an EXIT OPERATION or returns to FILE SYSTEM CHANGE REQUEST BY VIRTUAL MACHINE CHECK OPERATION and awaits the next file system change request.

Conversely if the requested file system change is not allowed i.e. is determined to be malicious flow moves from FILE SYSTEM CHANGE ALLOWED CHECK OPERATION to a TAKE PROTECTIVE ACTION OPERATION . In TAKE PROTECTIVE ACTION OPERATION protective action is taken e.g. the file system change request is not allowed or other protective action taken. In another embodiment in TAKE PROTECTIVE ACTION OPERATION the file system change is allowed to occur but the old file system state is saved allowing reversion back to the old file system state and thus to a known good condition at will.

In one particular example assume the case where the file system change request is a file write request to write a file to file system A. The file is scanned by security application for known malicious code and is determined to be malicious i.e. to contain known malicious code in FILE SYSTEM CHANGE ALLOWED CHECK OPERATION . Accordingly the file is not written in TAKE PROTECTIVE ACTION OPERATION preventing the malicious code from being written to file system A. In another example the file is scanned by security application for known malicious code and is determined to be non malicious i.e. to not contain known malicious code in FILE SYSTEM CHANGE ALLOWED CHECK OPERATION . Accordingly the writing of the file to file system A is allowed in ALLOW FILE SYSTEM CHANGE REQUEST OPERATION .

In another particular example assume the case where the file system change request is a file access request to access a file on file system A. The file is scanned by security application for known malicious code and is determined to be malicious i.e. to contain known malicious code in FILE SYSTEM CHANGE ALLOWED CHECK OPERATION . Accordingly access to the file is denied in TAKE PROTECTIVE ACTION OPERATION preventing the malicious code from being propagated from file system A to another location e.g. virtual machine . In another example the file is scanned by security application for known malicious code and is determined to be non malicious i.e. to not contain known malicious code in FILE SYSTEM CHANGE ALLOWED CHECK OPERATION . Accordingly access to the file of file system A is allowed in ALLOW FILE SYSTEM CHANGE REQUEST OPERATION .

From an ENTER OPERATION flow moves to an UNKNOWN MALICIOUS CODE OUTBREAK CHECK OPERATION . In UNKNOWN MALICIOUS CODE OUTBREAK CHECK OPERATION a determination is made as to whether there is an unknown malicious code outbreak sometimes called a new virus outbreak. In one embodiment unknown malicious code sometimes called a threat is malicious code for which a malicious code signature sometimes called a virus signature has not been created. As those of skill in the art will understand in light of this disclosure a malicious code signature is used by security application to find malicious code patterns inside of files by scanning the files for the malicious code signature. In one specific example a malicious code signature is a characteristic byte pattern that is part of certain malicious code. Typically several malicious code signatures are stored as a virus definition file.

Unfortunately malicious code must be captured and then analyzed to create the malicious code signature. Thus there is typically a significant delay between the emergence of new unknown malicious code i.e. an unknown malicious code outbreak and the creation of the associated malicious code signature. An outbreak of unknown malicious code is a sudden increase in the number of computer systems infected with the unknown malicious code typically during the early release of the unknown malicious code into the wild.

Once a malicious code signature is created for malicious code the malicious code is no longer unknown malicious code but is known malicious code. Accordingly in UNKNOWN MALICIOUS CODE OUTBREAK CHECK OPERATION a determination is made as to whether there is an outbreak of unknown malicious code for which a malicious code signature has not been created.

If a determination is made that there is not an unknown malicious code outbreak flow remains at UNKNOWN MALICIOUS CODE OUTBREAK CHECK OPERATION . Conversely upon a determination that there is an unknown malicious code outbreak flow moves to a DETERMINE UNKNOWN MALICIOUS CODE CHARACTERISTICS OPERATION .

In one embodiment upon an unknown malicious code outbreak an unknown malicious code outbreak report is issued e.g. from a security company a news reporter or other reputable source. In one particular embodiment a malicious code outbreak report is issued from unknown malicious code outbreak reporting server system and received by host computer system .

In another embodiment an unknown malicious code outbreak report is issued and an administrator and or user of host computer system receives the unknown malicious code outbreak report.

The unknown malicious code outbreak report contain actionable descriptions sometimes called unknown malicious code characteristics of the fast moving unknown malicious code prior to having a complete description and corresponding malicious code signature for the unknown malicious code at which point the malicious code would be known malicious code . These actionable descriptions of the unknown malicious code define the unknown malicious code characteristics which are used by security application to protect file system A i.e. to restrict file access writing to file system A.

Accordingly upon receipt of an unknown malicious code outbreak report a determination is made that there is an unknown malicious code outbreak and flow moves to DETERMINE UNKNOWN MALICIOUS CODE CHARACTERISTICS OPERATION . In DETERMINE UNKNOWN MALICIOUS CODE CHARACTERISTICS OPERATION the characteristics i.e. at least one characteristic of the unknown malicious code are determined. Generally a characteristics is distinguishing trait quality or property sometimes called attribute of the unknown malicious code. A characteristic specifically excludes a malicious code signature as once a malicious code signature is created the malicious code is no longer unknown malicious code but known malicious code.

Examples of characteristics include 1 the outbreak time period e.g. the date and or time of emergence of the unknown malicious code 2 the unknown malicious code file type e.g. the type of file containing the unknown malicious code 3 the unknown malicious code source e.g. the source of the unknown malicious code 4 the unknown malicious code file name e.g. the file name of the file containing the unknown malicious code 5 the unknown malicious code file size e.g. the file size of the file containing the unknown malicious code.

In one embodiment the outbreak time period is the time period from the first emergence of the unknown malicious code to the present time. The first emergence of the unknown malicious code is sometimes called the unknown malicious code emergence time and is usually expressed as a date and time.

Any files created or modified prior to the outbreak time period will not contain or at least are highly unlikely of containing the unknown malicious code and are deemed un suspect i.e. not suspect of containing the unknown malicious code. Conversely any files created or modified during the outbreak time period may contain the unknown malicious code and may be deemed suspect i.e. suspect of containing the unknown malicious code.

In one embodiment the unknown malicious code file type is the type of file containing the unknown malicious code. For example the unknown malicious code file type is any executable file e.g. a .EXE file a .COM file a browser help object file or an ActiveX control file. In another example the unknown malicious code file type is any macro containing file for example a non executable file containing macros. In another example the unknown malicious code file type is any file e.g. executable or non executable containing malformed content e.g. content that does not conform to the content expected for the particular type of file. For example JPEG or TIFF files containing malformed content are examples of unknown malicious code file types in one embodiment.

Any files not having the unknown malicious code file type will not contain or at least are highly unlikely of containing the unknown malicious code and are deemed un suspect i.e. not suspect of containing the unknown malicious code. Conversely any files having the unknown malicious code file type may contain the unknown malicious code and may be deemed suspect i.e. suspect of containing the unknown malicious code.

The unknown malicious code source is the source of the unknown malicious code. In one embodiment the unknown malicious code source includes the particular Internet sites from which the unknown malicious code is downloaded. For example if the unknown malicious code is originating from servers located in a particular foreign country the unknown malicious code source includes servers located in the particular foreign country. In another embodiment the unknown malicious code source is the Internet regardless of where the computer system from which the file is being downloaded is located. In another embodiment the unknown malicious code source includes file share servers.

Any files not originating from the unknown malicious code source will not contain or at least are highly unlikely of containing the unknown malicious code and are deemed un suspect i.e. not suspect of containing the unknown malicious code. Conversely any files originating from the unknown malicious code source may contain the unknown malicious code and may be deemed suspect i.e. suspect of containing the unknown malicious code.

The unknown malicious code file name is the file name of the file containing the unknown malicious code. In one embodiment the unknown malicious code has a unique file name which is the unknown malicious code file name. In another embodiment the unknown malicious code file name is similar or identical to a common non malicious file in an attempt to disguise the unknown malicious code file name.

Any files not having the unknown malicious code file name will not contain or at least are highly unlikely of containing the unknown malicious code and are deemed un suspect i.e. not suspect of containing the unknown malicious code. Conversely any files having the unknown malicious code file name may contain the unknown malicious code and may be deemed suspect i.e. suspect of containing the unknown malicious code.

The unknown malicious code file size is the file size of the file containing the unknown malicious code. Any files not having the unknown malicious code file size especially those files that are smaller than the unknown malicious code file size will not contain or at least are highly unlikely of containing the unknown malicious code and are deemed un suspect i.e. not suspect of containing the unknown malicious code. Conversely any files having the unknown malicious code file size may contain the unknown malicious code and may be deemed suspect i.e. suspect of containing the unknown malicious code.

Some examples of characteristics for unknown malicious code are set forth in Nachenberg et al. US Pub. No. 2003 0088680 entitled TEMPORAL ACCESS CONTROL FOR COMPUTER VIRUS PREVENTION published on May 8 2003 which is herein incorporated by reference in its entirety.

In one embodiment DETERMINE UNKNOWN MALICIOUS CODE CHARACTERISTICS OPERATION is repeatedly performed. For example as updated malicious code outbreak reports are issued having updated information about the characteristics of the unknown malicious code the malicious code characteristics are updated.

From DETERMINE UNKNOWN MALICIOUS CODE CHARACTERISTICS OPERATION flow moves to a RESTRICT ACCESS TO FILES HAVING ATTRIBUTES MATCHING UNKNOWN MALICIOUS CODE CHARACTERISTICS OPERATION . In RESTRICT ACCESS TO FILES HAVING ATTRIBUTES MATCHING UNKNOWN MALICIOUS CODE CHARACTERISTICS OPERATION access to files having attributes matching the unknown malicious code characteristics is restricted. Recall that the unknown malicious code characteristics were determined in DETERMINE UNKNOWN MALICIOUS CODE CHARACTERISTICS OPERATION as described above.

More particularly access to files of file system A is restricted by security application . For example a malicious file i.e. a file containing malicious code is propagated from unknown malicious code source server system and to file system A e.g. during the early stages of the outbreak of the unknown malicious code before the unknown malicious code outbreak report is issued. Based on the matching of the attributes of the malicious file to the unknown malicious code characteristics access the malicious file is restricted as discussed further below.

Examples of file attributes of a file being accessed include 1 the file creation or modification date and time e.g. the date and or time of creation or modification of the file such as that set forth in a time stamp of the file 2 the file type 3 the file name and 4 the file size.

In one embodiment access to files that were created or modified during the outbreak time period is restricted. In another embodiment access to files that are of the unknown malicious code file type is restricted. In another embodiment access to files having the unknown malicious code file name is restricted. In yet another embodiment access to files having the unknown malicious code file size is restricted.

Although access to various files is described as being restricted based on the file having a single attribute matching a single malicious code characteristic in other embodiments access is restricted based upon more than one attribute matching more than one characteristic. In one embodiment configurable rules are created for defining the required correspondence between one or more of the file attributes and one or more of the unknown malicious code characteristics to result in a conclusion that a match has occurred.

For example the unknown malicious code file type is that the file must be executable and the unknown malicious code file size specifies that the file must have a size equal to or greater than a predefined size. In accordance with this example access to executable files having a file size equal to or greater than the predefined size is restricted. However access to a non executable file or a file smaller than the predefined size is not restricted.

From RESTRICT ACCESS TO FILES HAVING ATTRIBUTES MATCHING UNKNOWN MALICIOUS CODE CHARACTERISTICS OPERATION flow moves to a RESTRICT WRITING OF FILES HAVING ATTRIBUTES MATCHING UNKNOWN MALICIOUS CODE CHARACTERISTICS OPERATION . In RESTRICT WRITING OF FILES HAVING ATTRIBUTES MATCHING UNKNOWN MALICIOUS CODE CHARACTERISTICS OPERATION writing of files having attributes matching the unknown malicious code characteristics is restricted. Recall that the unknown malicious code characteristics were determined in DETERMINE UNKNOWN MALICIOUS CODE CHARACTERISTICS OPERATION as described above.

More particularly writing of files to file system A is restricted by security application . For example a malicious file i.e. a file containing malicious code is being downloaded from unknown malicious code source server system and to file system A e.g. at a later stage of the outbreak of the unknown malicious code and after the unknown malicious code outbreak report is issued. Based on the matching of the attributes of the malicious file to the unknown malicious code characteristics writing of the malicious file is restricted as discussed further below.

Examples of file attributes of a file being written include 1 the file creation or modification date and time e.g. the date and or time of creation or modification of the file such as that set forth in a time stamp of the file 2 the file type 3 the file source e.g. the source from which the file is being downloaded or written from 4 the file name and 5 the file size.

In one embodiment writing of any files or files that were created or modified during the outbreak time period is restricted. In another embodiment writing of files that are of the unknown malicious code file type is restricted. In another embodiment writing of files from the unknown malicious code source is restricted. In another embodiment writing of files having the unknown malicious code file name is restricted. In yet another embodiment writing of files having the unknown malicious code file size is restricted.

Although writing of various files is described as being restricted based on the file having a single attribute matching a single malicious code characteristic in other embodiments writing is restricted based upon the file having more than one attribute matching more than one characteristic. In one embodiment configurable rules are created for defining the required correspondence between one or more of the file attributes and one or more of the unknown malicious code characteristics to result in a conclusion that a match has occurred.

For example the unknown malicious code file type is that the file must be executable and the unknown malicious code file size specifies that the file must have a size equal to greater than a predefined size. In accordance with this example writing of executable files having a file size equal to or greater than the predefined size is restricted. However writing of a non executable file or a file smaller than the predefined size is not restricted.

From RESTRICT WRITING OF FILES HAVING ATTRIBUTES MATCHING UNKNOWN MALICIOUS CODE CHARACTERISTICS OPERATION flow moves to and exits at an EXIT OPERATION or returns to UNKNOWN MALICIOUS CODE OUTBREAK CHECK OPERATION and awaits the next unknown malicious code outbreak.

In one embodiment upon receipt of an unknown malicious code outbreak report virtual machine file system content protection application automatically restricts access to files and writing of files having attributes matching the unknown malicious code characteristics as set forth above in OPERATIONS . In another embodiment an administrator and or user of host computer system receives the unknown malicious code outbreak report. The administrator and or user of host computer system manually restricts access to file and writing of files having attributes matching the unknown malicious code characteristics as set forth above in OPERATIONS .

From an ENTER OPERATION flow moves to a FILE ACCESS REQUEST CHECK OPERATION . In FILE ACCESS REQUEST CHECK OPERATION a determination is made as to whether there has been a request to access a file. If there has not been a file access request flow remains at FILE ACCESS REQUEST CHECK OPERATION . Conversely upon a file access request flow moves from FILE ACCESS REQUEST CHECK OPERATION to an ACCESS RESTRICTED CHECK OPERATION . Generally a file access request is referred to as a file system change request.

As described above all file access requests i.e. requests for access to files of file system A are routed through security application . For example a file access request from virtual machine for a file of file system A is received by security application . Accordingly upon receiving a file access request by security application a determination is made that there has been a file access request and flow moves to ACCESS RESTRICTED CHECK OPERATION .

In ACCESS RESTRICTED CHECK OPERATION a determination is made as to whether access to the requested file is restricted. Recall that access to files was restricted in RESTRICT ACCESS TO FILES HAVING ATTRIBUTES MATCHING UNKNOWN MALICIOUS CODE CHARACTERISTICS OPERATION as described above. Generally the file attributes of the requested file are determined. Based upon a comparison of the file attributes with the unknown malicious code characteristics a determination is made as to whether access to the requested file is restricted as discussed above in reference to .

If there is a match between the file attributes and the unknown malicious code characteristics a determination is made that access to the requested file is restricted. Conversely if there is not a match sometimes called a mismatch between the file attributes and the unknown malicious code characteristics a determination is made that access to the requested file is not restricted.

If a determination is made that access is restricted in ACCESS RESTRICTED CHECK OPERATION flow moves to a TAKE PROTECTIVE ACTION OPERATION . In TAKE PROTECTIVE ACTION OPERATION protective action is taken with regards to the file access request. In one embodiment access to the requested file is denied.

In another embodiment the requested file is made safe and access to the requested file is granted. For example macro sections of the requested file are locked or otherwise made non accessible and access is then granted to the requested file. Generally access is granted to the requested file in a safe manner e.g. access to the requested file in any manner that is dangerous is denied.

In another embodiment the requested file is quarantined. Once the malicious code signature for the unknown malicious code is later obtained at which point the unknown malicious code becomes known malicious code the file is scanned using an antivirus scanner e.g. of security application to determine if the file is malicious or not. If the file is determined to be non malicious access to the file is granted in one embodiment.

In another embodiment access to an earlier version of the file that is known to be non malicious is granted instead of access to the file that may contain malicious code. For example an attribute of the requested file indicates that the file was created during the malicious code outbreak period i.e. an unknown malicious code characteristic. Accordingly in TAKE PROTECTIVE ACTION OPERATION access to the file is denied. However existing within file system A is an earlier version of the requested file that was created prior to the malicious code outbreak period. As this earlier version was created prior to the malicious code outbreak period this earlier version is presumed unsuspicious of containing the unknown malicious code. Accordingly access to this earlier version of the file is granted.

From TAKE PROTECTIVE ACTION OPERATION flow moves to and exits at an EXIT OPERATION or returns to FILE ACCESS REQUEST CHECK OPERATION and awaits the next file access request.

Returning again to ACCESS RESTRICTED CHECK OPERATION upon a determination that access to the requested file is not restricted flow moves to an ALLOW ACCESS OPERATION . In ALLOW ACCESS OPERATION access to the requested file is allowed sometimes called granted.

In accordance with this embodiment the requested file does not have attributes matching the malicious code characteristics and thus is not suspected of containing the unknown malicious code. Accordingly access is allowed to the requested file. From ALLOW ACCESS OPERATION flow moves to and exits at EXIT OPERATION or returns to FILE ACCESS REQUEST CHECK OPERATION and awaits the next file access request.

From an ENTER OPERATION flow moves to a FILE WRITE REQUEST CHECK OPERATION . In FILE WRITE REQUEST CHECK OPERATION a determination is made as to whether there has been a request to write a file. If there has not been a file write request flow remains at FILE WRITE REQUEST CHECK OPERATION . Conversely upon a file write request flow moves from FILE WRITE REQUEST CHECK OPERATION to a WRITE RESTRICTED CHECK OPERATION . Generally a file write request is referred to as a file system change request.

As described above all file write requests i.e. requests for writing of files to file system A are routed through security application . For example a file write request from virtual machine to write a file to file system A is received by security application . Accordingly upon receiving a file write request by security application a determination is made that there has been a file write request and flow moves to WRITE RESTRICTED CHECK OPERATION .

In WRITE RESTRICTED CHECK OPERATION a determination is made as to whether writing of the requested file is restricted. Recall that writing of files was restricted in RESTRICT WRITING OF FILES HAVING ATTRIBUTES MATCHING UNKNOWN MALICIOUS CODE CHARACTERISTICS OPERATION as described above. Generally the file attributes of the file being written are determined. Based upon a comparison of the file attributes with the unknown malicious code characteristics a determination is made as to whether writing of the file is restricted as discussed above in reference to .

If there is a match between the file attributes and the unknown malicious code characteristics a determination is made that writing of the file is restricted. Conversely if there is not a match sometimes called a mismatch between the file attributes and the unknown malicious code characteristics a determination is made that writing of the file is not restricted.

If a determination is made that writing is restricted in WRITE RESTRICTED CHECK OPERATION flow moves to a TAKE PROTECTIVE ACTION OPERATION . In TAKE PROTECTIVE ACTION OPERATION protective action is taken with regards to the file write request. In one embodiment writing of the requested file is denied.

In another embodiment the file is made safe and writing of the file is granted. For example macro sections of the file are locked or otherwise made non accessible and writing of the file is then granted. Generally writing of the file is granted in a safe manner e.g. writing of the file in any manner that is dangerous is denied.

In another embodiment the requested file is written to a secure storage area and quarantined. Once the malicious code signature for the unknown malicious code is later obtained at which point the unknown malicious code becomes known malicious code the file is scanned using an antivirus scanner e.g. of security application to determine if the file is malicious or not. If the file is determined to be non malicious the file is copied from quarantine to the target location of file system A in one embodiment.

From TAKE PROTECTIVE ACTION OPERATION flow moves to and exits at an EXIT OPERATION or returns to FILE WRITE REQUEST CHECK OPERATION and awaits the next file write request.

Returning again to WRITE RESTRICTED CHECK OPERATION upon a determination that writing of the requested file is not restricted flow moves to an ALLOW WRITE OPERATION . In ALLOW WRITE OPERATION writing of the requested file is allowed sometimes called granted.

In accordance with this embodiment the requested file does not have attributes matching the malicious code characteristics and thus is not suspected of containing the unknown malicious code. Accordingly writing of the requested file is allowed. From ALLOW WRITE OPERATION flow moves to and exits at EXIT OPERATION or returns to FILE WRITE REQUEST CHECK OPERATION and awaits the next file write request.

As described above security application is insinuated at the chokepoint provided by virtual machine to changes to file system A. This allows security application to inspect changes to file system A e.g. access of files on file system A as well as writing of files to file system A from the shared and controlled environment of virtual machine . The protection of file system A provided by security application is absolute. Accordingly security application facilitates a simple convenient yet extremely secure solution for restricting access to files and writing of files to file system A.

Security application enables reliable and precise protection of file system A from an emerging threat during the window between the release of the threat and the delivery of the virus signature for the threat. More particularly security application restricts access to and writing of files to file system A having attributes matching characteristics of the threat. The more that is known about the threat the more precise are the restrictions placed upon file system A thus reducing the impact on users of file system A to an absolute minimum.

Referring again to virtual machine file system content protection application is in computer memory . As used herein a computer memory refers to a volatile memory a non volatile memory or a combination of the two.

Although virtual machine file system content protection application is referred to as an application this is illustrative only. Virtual machine file system content protection application should be capable of being called from an application or the operating system. In one embodiment an application is generally defined to be any executable code. Moreover those of skill in the art will understand that when it is said that an application or an operation takes some action the action is the result of executing one or more instructions by a processor.

While embodiments have been described for a client server configuration an embodiment may be carried out using any suitable hardware configuration or means involving a personal computer a workstation a portable device or a network of computer devices. Other network configurations other than client server configurations e.g. peer to peer web based intranet internet network configurations are used in other embodiments.

Herein a computer program product comprises a tangible storage medium configured to store or transport computer readable code in accordance with an embodiment. Some examples of computer program products are CD ROM discs DVDs ROM cards floppy discs magnetic tapes computer hard drives and servers on a network.

As illustrated in this medium may belong to the computer system itself. However the medium also may be removed from the computer system. For example virtual machine file system content protection application may be stored in memory that is physically located in a location different from processor . Processor should be coupled to the memory . This could be accomplished in a client server system or alternatively via a connection to another computer via modems and analog lines or digital interfaces and a digital carrier line.

More specifically in one embodiment host computer system and or server system is a portable computer a workstation a two way pager a cellular telephone a digital wireless telephone a personal digital assistant a server computer an Internet appliance or any other device that includes components that can execute the virtual machine file system content protection functionality in accordance with at least one of the embodiments as described herein. Similarly in another embodiment host computer system and or server system is comprised of multiple different computers wireless devices cellular telephones digital telephones two way pagers or personal digital assistants server computers or any desired combination of these devices that are interconnected to perform the methods as described herein.

In view of this disclosure the virtual machine file system content protection functionality in accordance with one embodiment can be implemented in a wide variety of computer system configurations. In addition the virtual machine file system content protection functionality could be stored as different modules in memories of different devices.

For example virtual machine file system content protection application could initially be stored in server system and then as necessary a portion of virtual machine file system content protection application could be transferred to host computer system and executed on host computer system . Consequently part of the virtual machine file system content protection functionality would be executed on processor of server system and another part would be executed on processor of host computer system . In view of this disclosure those of skill in the art can implement various embodiments in a wide variety of physical hardware configurations using an operating system and computer programming language of interest to the user.

In yet another embodiment virtual machine file system content protection application is stored in memory of server system . Virtual machine file system content protection application is transferred over network to memory in host computer system . In this embodiment network interface and I O interface would include analog modems digital modems or a network interface card. If modems are used network includes a communications network and virtual machine file system content protection application is downloaded via the communications network.

This application is related to Sobel et al. U.S. patent application Ser. No. 12 059 622 entitled virtual machine file system content protection system and method filed on Mar. 31 2008 which is herein incorporated by reference in its entirety.

This disclosure provides exemplary embodiments. The scope is not limited by these exemplary embodiments. Numerous variations whether explicitly provided for by the specification or implied by the specification or not may be implemented by one of skill in the art in view of this disclosure.

