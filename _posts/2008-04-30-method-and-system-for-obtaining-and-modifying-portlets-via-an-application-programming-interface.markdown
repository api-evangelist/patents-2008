---

title: Method and system for obtaining and modifying portlets via an application programming interface
abstract: A method and a system for obtaining and modifying a plurality of Web components, such as portlets, via an application programming interface (API) are described. The method includes permitting a portal application to invoke a portlet, wherein the portlet runs inside a portlet container and the portal application runs independently from the portlet container; providing information to the portlet container about the invoked portlet related to a runtime environment of the portal application; and modifying the provided information from the portal application to customize the portlet. The system includes a portal application, a portlet container to permit the portal application to invoke a portlet, the portlet to run inside the portlet container and the portal application to run independently from the portlet container, an interface to provide and modify information about the invoked portlet that is related to a runtime environment of the portal application, and an interface to provide a portlet mode, a window state, and a set of Uniform Resource Locator (URL) parameters to the portal application to create a valid portlet URL.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08082508&OS=08082508&RS=08082508
owner: SAP AG
number: 08082508
owner_city: Walldorf
owner_country: DE
publication_date: 20080430
---
This application claims the priority of U.S. Provisional Patent Application Ser. No. 60 926 989 entitled Web Container et al. and filed on Apr. 30 2007.

Embodiments of the invention relate generally to the software arts and more specifically to a method and a system for obtaining and modifying Web components such as portlets.

Many organizations implement an enterprise portal to host internal and external applications. A portal is an application which aggregates portlet applications together in a presentable format. Beyond merely being a presentation layer a portal typically allows users to customize their presentation including what portlet applications to display. A portal can also provide a convenient single sign on mechanism for users. Single sign on allows access to all applications once a user logs into a portal that is the user does not have to log into every application separately.

A portlet is an individual Web component that is made accessible to users via a portal application. Typically a single portlet generates only a fragment of the markup that a user sees from a browser. Users issue requests against portlets from a portal page. The portal in turn forwards those requests to a portlet container which manages the lifecycle of a portlet. The portlet container is part of the portal application. The portlet container provides the run time environment to portlets much in the same way a servlet container provides the environment for servlets. The portlet container manages portlets by invoking their lifecycle methods. The portlet container forwards requests to the appropriate portlet. When a portlet generates a response the portal renders it to the user. The sequence of events results in the user s portal page.

Portlets and servlets have a number of similarities. A servlet is an object that receives a request and generates a response based on that request. Portlets are similar to servlets in that 1 portlets are managed by a specialized portlet container 2 portlets generate dynamic content 3 a portlet s life cycle is managed by the portlet container and 4 portlets interact with a client device via a request response paradigm. Portlets are different from servlets in that 1 portlets only generate markup fragments not complete documents 2 portlets are not directly Uniform Resource Locator URL addressable and 3 portlets cannot generate arbitrary content since the content generated by a portlet is going to be part of portal page.

Portlets also have access to additional functionality such as 1 portlets ways to access and store persistent configuration and customization data 2 portlets have access to user profile information 3 portlets have URL rewriting functions for creating hyperlinks within their content thus allowing the portal server agnostic creation of links and actions in page fragments and 4 portlets can store transient data in the portlet session in two different scopes the application wide scope and the portlet private scope.

However portlets do not have access to the following functionality provided by servlets 1 setting the character set encoding of the response 2 setting Hypertext Transfer Protocol HTTP headers on the response and 3 the URL of the client request to the portal.

A portlet container is very similar to a servlet container in that every portlet is deployed inside a portlet container that controls the life cycle of the portlet and provides it with necessary resources and information about its environment. A portlet container is responsible for initializing and destroying portlets and also for passing user requests to the portlet and collecting responses from the portlet. The portlet container also provides persistent storage for portlet preferences.

A method and system for obtaining and modifying a plurality of Web components such as portlets via an application programming interface API . The method includes permitting a portal application to invoke a portlet wherein the portlet runs inside a portlet container and the portal application runs independently from the portlet container providing information to the portlet container about the invoked portlet related to a runtime environment of the portal application and modifying the provided information from the portal application to customize the portlet.

Embodiments of the invention relate to obtaining and modifying a plurality of Web components such as portlets from a portal application via an application programming interface API . The portlets lifecycle is managed by a portlet container wherein the portlet container runs independently from the portal application. The portlet container sits between the portal application and the portlets. Thus a portal application invokes and administers portlets from the portlet container using an API. Having the portlet container running independently from the portal application enables different portal applications remote or local and from different vendors as well to invoke the deployed and available portlets managed by the portlet container using the API. The API provides easy integration between a portal application and a portlet container. The API allows portal applications to invoke a portlet and retrieve information about portlets and expose it to the portal application. The portlet container forwards user requests to the appropriate portlet. When a portlet generates a response the portlet container sends it to the portal to be rendered to the user. The sequence of events results in the user s portal page. It should be noted that in this document the words portal and portal application have identical meaning.

Portlets are developed as any other Web component in a development environment such as the SAP NetWeaver Developer Studio. During development process of the portlets one or more portlets are packed in a portlet module. The portlet module includes a number of elements for example the portlets as Java classes and a portlet deployment descriptor a document in an eXtensible Markup Language XML format that describes the portlet. The portlet module may be packaged as a Web archive file WAR . A plurality of portlet modules may be included in one portlet application. Thus the portlet application provides the functions and business logic of all portlets contained within the portlet application.

In one embodiment user sends a client request to portal that requires portal page to be generated. An HTTP session is established between the user and the portal . The portal has to obtain portlets from a plurality of portlet applications and to aggregate their content to generate portal page . Therefore the request is forwarded to portlet container which manages the portlet applications. Portlet sessions are created for every portlet application that needs to be invoked. Each portlet session from portlet session  to portlet session N refers to an HTTP session that is specific to the portlet application and this portlet session. For example portlet session  refers to HTTP session  and so on to portlet session N which refers to HTTP session N .

These HTTP sessions differ from the initial HTTP session established between the user and the portal . Thus the different portlet applications do not share the same HTTP session. However portlets servlets and JavaServer Pages JSPs within the same portlet application share the same HTTP session. For portlets that reside within one and the same portlet application every portlet request is generated as a result of a group of requests originating from the portal application to complete a single client request and acquires the same portlet session. The portlet session stores all attributes in the HTTP session of the portlet application. All user attributes set in the portlet session are visible in the HTTP session of the portlet application and vice versa. When a portlet invalidates a portlet session the HTTP session also gets invalidated and vice versa. In addition creating a new portlet session results in creating a new HTTP session on which the portlet session is based.

Portal application manages the order of invocation of action requests and renders requests of the portlets in portal page . Portal application invokes the render requests after the action request is completed. Both methods receive request and response objects as parameters. When the render method of IPortletContainer interface is invoked the portlet container prepares render request and response objects sets render request parameters initializes the runtime environment and invokes the render method of the targeted portlet. There is a third parameter for these methods an object of IPortletNode interface . IPortletNode interface represents the portlet that is the target of processAction and render methods. The IPortletNode object provides additional information for an invoked portlet related to portal application runtime environment.

IPortletNode interface includes at least a subset of the following methods getPortletApplicationName getPortletName getWindowState setWindowState isWindowStateAllowed getPortletMode setPortletMode isPortletModeAllowed convertPortletURLToString getParameter getParameterValues getParameterNames getContextName setProperty addProperty setRenderParameters getPortletPreferences getUser setPortletTitle getPortalContext setPortletTitle setExpirationCache and getMethod . Set as used herein is deemed to have a positive integer number of members subset is also deemed to have a positive integer number of members.

The getPortletApplicationName method returns the name of the portlet application to which the portlet belongs. The getPortletName method returns the name of the portlet.

The getWindowState method returns the current window state of a portlet a portlet s window state shows the amount of portal page space that will be assigned to the content generated by the portlet. There are three standard window states Normal Minimized and Maximized. In some embodiments more than three window states may exist. The setWindowState method sets the window state of a portlet to a particular window state Normal Minimized and Maximized. Normal will display the portlet s data in the amount of window space defined by the portal application Maximized will present only that portlet in the user s window and Minimized may display a single line of text or nothing at all. The isWindowStateAllowed method checks whether the current user is allowed to switch the window state to a particular window state.

The getPortletMode method returns the current mode of a portlet. The setPortletMode method sets a particular mode to a portlet. The isPortletModeAllowed method checks whether the current user is allowed to switch to a particular mode there are three portlet modes view edit and help. In some embodiments of the invention there can be more portlet modes.

The convertPortletURLToString method returns a string representation of a portlet s URL the string representation of the portlet URL may not be a well formed URL but a special token instead that is created at the time the portlet is generating its content. Portal servers often use a technique called URL rewriting that post processes the content resolving tokens into real URLs.

The getParameter method returns a parameter included in the request of the current portlet. The getParameterValues method returns a value of a request parameter associated with the name of the parameter. The getParameterNames method returns an array of String objects containing the names of the parameters included in a request.

The getContextName method returns a unique identification name for a portlet even if the same portlet is included twice in one portal page . The returned name must not contain a character as it is used for encoding of portlet s attributes in the portlet session. The setProperty method sets a property for the subsequent render request this property will be accessible to be returned to portal application . The addProperty method adds a value to an existing property for the subsequent render request and allows properties of response objects to have multiple values.

The setRenderParameters method sets render parameters to be used by the targeted portlet in the subsequent render request. The getPortletPreferences method retrieves user specific preferences of a portlet which are stored by portal application . The getUser method returns the user making the current request. The setPortletTitle method sets a preferred portlet title to be used by the portal application as a title bar. The getPortalContext method returns the portal context. The setExpirationCache method sets an expiration timeout defined for this portlet. The getMethod returns the type of the portlet request Action or Render with which the portlet is invoked.

Using IPortletContainer interface portal application invokes the portlets needed to generate portal page . Via the methods of IPortletNode interface the portlet container obtains information about the portlet to be invoked. IPortletNode interface is implemented by the portal application . Portal application obtains additional information for the invoked portlets via IPortletAdmin interface during administration of the portlets. IPortletAdmin interface includes at least a subset of the following methods getVendors getPortletApplicationNames getPortletModuleNames getAllPortlets getPortletPreferences getExpirationCache and getSupportedModes .

The getVendors method returns a list of all vendor names of deployed applications that contain porlet modules. The portlet module includes a number of elements such as the portlets as Java classes and a deployment descriptor a document in an XML format that describes the portlets. The getPortletApplicationNames method returns a list of all applications that contain portlet modules. The getPortletModuleNames method returns a list of all portlet Web modules that are within a particular portlet application.

The getAllPortlets method returns a list of all portlets within a particular portlet web module. The getPortletPreferences method returns an object of the portlet s initial preferences loaded from the portal application. The getExpirationCache method returns the expiration cache timeout defined in the portlet deployment descriptor for the specified portlet. The getSupportedModes method returns a map containing Multi Purpose Internet Mail Extensions MIME type String objects as keys and arrays of portlet modes as values which the portlet has declared to support for the corresponding MIME type including the view mode.

The convertPortletURLToString method of IPortletNode interface uses IPortletURL interface as an input parameter. Thus portal application can obtain the mode and window state of a portlet and all parameters needed to create a URL for the portlet. This is necessary in case the portlet wants to obtain a String representation of portlet URL to include it in the portlet content. Portlet s mode determines what actions should be performed on a portlet and window state determines how much content should appear in the portlet. There are two types of portlet URLs 1 action URLs that trigger an action request followed by a render request and 2 render URLs that trigger a render request. Each portlet URL is targeted to a particular portlet. Therefore based on the portlet URL type two basic approaches can be used for the portal to invoke a portlet to handle a client request 1 a client request triggered by an action URL which results in one action request and many render requests and 2 a client request triggered by a render URL which results in many render requests one per portlet in a portal page.

The IPortletURL interface includes at least a subset of the following methods getMethod getMode getState isSecure and getParameters .

The getMethod method returns the type of the portlet URL action or render. The getMode method returns the portlet mode in which the portlet should be if the portlet URL triggers a request. The getState method returns the window state in which the portlet should be if the portlet URL triggers a request. The isSecure method checks whether the portlet requests a secure connection between user and the portlet window for this URL. The getParameters method returns all parameters associated with a particular portlet URL.

Using the interfaces and methods of portlet container API portal application obtains and customizes portlets from portlet container .

Elements of embodiments may also be provided as a machine readable medium for storing the machine executable instructions. The machine readable medium is an article of manufacture and may include but is not limited to flash memory optical disks CD ROMs DVD ROMs RAMs EPROMs EEPROMs magnetic or optical cards or other type of machine readable media suitable for storing electronic instructions. Some embodiments of the invention may be downloaded as a computer program which may be transferred from a remote computer e.g. a server to a requesting computer e.g. a client by way of a communication link e.g. a modem or network connection .

It should be appreciated that reference throughout this specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Therefore it is emphasized and should be appreciated that two or more references to an embodiment or one embodiment or an alternative embodiment in various portions of this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined as suitable in one or more embodiments of the invention.

In the foregoing specification the invention has been described with reference to the specific embodiments thereof. It will however be evident that various modifications and changes can be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

