---

title: Program determining apparatus and program determining method
abstract: A disclosed program determining apparatus includes a log recording unit configured to record, in response to at least one of a use request for use of a predetermined function of the image forming apparatus from a program for use in the image forming apparatus and consumption of a predetermined resource of the image forming apparatus by the program, content of said at least one of use request and consumption as log information; and a determining unit configured to determine whether said at least one of use of the predetermined function requested by the program and consumption of the predetermined resource by the program satisfies a predetermined restriction.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09003394&OS=09003394&RS=09003394
owner: Ricoh Company, Ltd.
number: 09003394
owner_city: Tokyo
owner_country: JP
publication_date: 20080703
---
The present invention generally relates to a program determining apparatus and a program determining method and particularly relates to a program determining apparatus configured to determine a program for an image forming apparatus and a program determining method of determining a program for an image processing apparatus.

In these years some of image forming apparatuses called multifunction machines or compound machines can after their shipment have developed and installed new applications using published APIs Application Programming Interfaces see for example Japanese Patent Laid Open Publication No. 2005 269619 . In such an image forming apparatus not only applications developed by a vendor of the image forming apparatus but also applications developed by other software vendors may be installed and used.

The resource usage restrictions imposed on built in type devices such as these image forming apparatuses are stricter than the resource usage restrictions imposed on general purpose computers. Therefore the restrictions on the resource usage such as memory consumption of applications are previously determined and the software vendors are required to design applications that can operate within such restrictions hereinafter referred to as resource restrictions .

Meanwhile the software vendors wish to provide more useful and higher performance applications. Generally the higher the performance of programs the higher the memory usage of the programs. If the software vendors place too much focus on the usability for end users applications not satisfying the resource restrictions might be put on the market.

In the case where plural applications are used in parallel even if each of the applications satisfies the resource restrictions the resources of the image forming apparatuses might run out depending on the way users use the applications.

If the resources are used up the applications are not guaranteed to operate correctly which results in inconvenience for end users. Furthermore the vendors of the image forming apparatuses and the vendors who have developed the applications need to investigate the cause of malfunction.

In view of the forgoing the present invention is directed to provide a program determining apparatus a program determining method and a computer readable recording medium storing a program determining program that can reduce the risk of an image forming apparatus malfunctioning due to a program.

In an embodiment of the present invention there is provided a program determining apparatus that comprises a log recording unit configured to record in response to at least one of a use request for use of a predetermined function of the image forming apparatus from a program for use in the image forming apparatus and consumption of a predetermined resource of the image forming apparatus by the program content of said at least one of use request and consumption as log information and a determining unit configured to determine whether said at least one of use of the predetermined function requested by the program and consumption of the predetermined resource by the program satisfies a predetermined restriction.

This program determining apparatus can reduced the risk of the image forming apparatus malfunctioning due to the program.

In another embodiment of the present invention there is provided a program determining method executable by a computer. The method comprises a log recording step of recording in response to at least one of a use request for use of a predetermined function of the image forming apparatus from a program for use in the image forming apparatus and consumption of a predetermined resource of the image forming apparatus by the program content of said at least one of use request and consumption as log information and a determining step of determining whether said at least one of use of the predetermined function requested by the program and consumption of the predetermined resource by the program satisfies a predetermined restriction.

According to an aspect of the present invention it is possible to provide a program determining apparatus a program determining method and a computer readable recording medium storing a program determining program that can reduce the risk of an image forming apparatus malfunctioning due to a program.

According to this embodiment an application that is newly installed in the multifunction machine is provisionally activated Step S . Provisional activation is to activate an application to determine the resource usage of the application and services functions of the multifunction machine to be used by the application. Information indicating services of the multifunction machine to be used by an application is hereinafter referred to as application operational information. In this embodiment the provisionally activated application cannot provide regular functions of the application to users. During provisional activation the multifunction machine outputs application operational information as a provisional activation log Step S . After completion of the provisional activation the multifunction machine determines whether the provisional activation is successful based on the provisional activation log Step S . If the provisionally activated application is determined to operate within predetermined restrictions restrictions on resource usage and services of the multifunction machine to be used the provisional activation is determined to be successful. If the provisionally activated application does not operate within the predetermined restrictions the provisional activation is determined to have failed.

If the provisional activation is successful the application is installed into the multifunction machine and full activation of the application is allowed. Therefore in response to an activation request from a user the application is fully activated Step S . Full activation an antonym of provisional activation is to activate an application to provide regular functions of the application. That is full activation allows normal use of the application. Upon and during full activating of the application the multifunction machine controls operations of the application based on the provisional activation log. For example the multifunction machine rejects activation of the application limits the timing of activation of the application controls a state transition of the application the progress of a process and restricts use of services of the multifunction machine by the application.

As described above the multifunction machine provisionally activates an application to be newly added to i.e. an application to be installed into the multifunction machine in advance and therefore can control operations of the application during full activation based on the provisional activation log acquired during the provisional activation. Accordingly it is possible to limit operations of an application that does not satisfy predetermined restrictions on resources such as resource usage restrictions and can control timings of use of resources by individual applications that are activated concurrently in parallel .

The provisional activation of an application does not need to be performed by the multifunction machine in which the application is to be fully activated. For example as shown in provisional activation may be performed by a general purpose computer Step S . During provisional activation the computer outputs application operational information as a provisional activation log Step S . After completion of the provisional activation the computer determines whether the provisional activation is successful based on the provisional activation log Step S . If the provisional activation is successful the application may be installed into the multifunction machine .

A detailed description is given below. is a diagram showing an example of a hardware configuration of the multifunction machine according to this embodiment of the present invention. In the multifunction machine includes a controller an operations panel a facsimile control unit FCU an imaging unit and a printing unit .

The controller includes a CPU an ASIC an NB an SB an MEM P an MEM C an HDD hard disk drive a memory card slot an NIC network interface controller a USB device an IEEE 1394 device and a Centronics device .

The CPU is an IC for performing various types of information processing. The ASIC is an IC for performing various types of image processing. The NB is a north bridge of the controller . The SB is a south bridge of the controller . The MEM P is a system memory of the multifunction machine . The MEM C is a local memory of the multifunction machine . The HDD is a storage unit of the multifunction machine . The memory card slot is a slot for a memory card . The NIC is a controller for network communications based on MAC addresses. The USB device serves to provide connection terminals conforming to the USB specification. The IEEE 1394 device serves to provide connection terminals conforming to the IEEE 1394 specification. The Centronics device serves to provide connection terminals conforming to the Centronics specification.

The operations panel serves as a hardware unit operations unit by which an operator enters an input into the multifunction machine and also serves as a hardware unit display unit through which an operator obtains an output of the multifunction machine .

The native service layer serves to provide an interface for using functions of the hardware and software of the multifunction machine to higher modules and in response to a call to the interface a request for use of a function performs controls for realizing the function. For example the native service layer includes a module that provides an interface for controlling network communications a module that provides an interface for controlling facsimile functions a module that provides an interface for controlling transmission of stored documents document image data stored in the HDD an interface for controlling the imaging unit and the printing unit a module that provides an interface for controlling the memory and and the HDD a module that provides an interface for controlling the operations panel a module that provides an interface for controlling authentication and billing and a module that provides an interface for managing user information.

The JSDK platform is a software platform that provides an execution environment for the JSDK application and provides a Java registered trademark interface to higher modules. The JSDK platform includes standard Java classes class libraries for classes extended for the multifunction machine and a Java virtual machine. In a security manager and a logging service are shown as examples of the components of the JSDK platform .

The security manager restricts access by the JSDK application to resources such as files network sockets and a printer according to access control information previously defined in a policy file. That is the JSDK platform is configured to place a call to the security manager upon receiving a request for access to the resources. The security manager determines whether to permit access to the resource in response to the call. In an alternative embodiment the security manager may be provided using a standard Java SecurityManager class.

The logging service outputs a provisional activation log during provisional activation of the JSDK application .

The JSDK platform is implemented as an OSGi Open Service Gateway initiative platform. The OSGI platform is a standardized technology by the OSGi Alliance and is a software platform that provides an execution environment for software components that are created using an open software component technology based on the Java language. Software written in the Java language is implemented on the OSGi platform in the form of a software component called a bundle . A single JAR Java Archive forms a single bundle. Bundles can be installed independently and dynamically without a need to restart the machine .

The JSDK application is an application hereinafter referred to as an SDK application that is developed using a dedicated SDK software developing kit disclosed in the JSDK platform. The SDK applications that are developed using the Java language are called JSDK applications. In this embodiment provisional activation of JSDK applications is performed.

In an SAS SDK Application Service manager an application bundle and a service bundle are shown as examples of the JSDK application . The SAS Manager controls installation addition uninstallation deletion activation and termination of activation of the other JSDK applications the application bundle and the service bundle .

The application bundle is a bundle of the JSDK application that causes an operations screen to be displayed on the operations panel and is directly used operated by an end user through the operations screen. In a scan application is shown as an example of the application bundle . The scan application is configured to read an image of a document using the imaging unit .

The service bundle is a bundle of the JSDK application that provides services to the application bundle etc. That is the service bundle executes operations corresponding to individual bundles in response to calls from the application bundle etc. and transmits processing results to the application bundle etc. In a scan service a panel service and a provisional activation service are shown as examples of the service bundle .

The scan service provides a service related to an image reading function. The panel service provides a service related to display control of the operations panel . The provisional activation service provides a service for controlling provisional activation based on descriptions of a provisional activation script . The provisional activation script is described below in greater detail.

In this embodiment applications such as the application bundle and the service bundle operate according to a state transition model in which the state is shifted i.e. the processing proceeds from an init state to a pause state to an active state and then to a destroy state. The init state is an initial state where initial processing is performed. The application first moves to the init state immediately after activation. The pause state is a waiting state. In the pause state the application waits to be executable. The active state is a state where regular functions of the application are performed. The destroy state is a termination state. The application to be terminated moves to the destroy state in which the application is terminated after performing termination processing such as releasing the resources .

The application bundle and the service bundle are configured as described below in order to realize such a state transition model. is a diagram showing an implementation example of a state transition model of the application bundle and the service bundle . As shown in the application bundle and the service bundle referred to as application bundle etc. in the following description in connection with include an instantiated object corresponding to each state. That is an init state object a pause state object an active state object and a destroy state object are instantiated corresponding to the init state the pause state the active state and the destroy state respectively.

In response to an event message that causes a state transition the application bundle etc. moves control of processing control of the application from the current object to the next object. For example the processing control moves from the init state object to the pause state object . Such a transition of control realizes a state transition.

Note that although the application bundle etc. operates according to the state transition model this does not mean that applications need to be implemented according to a certain state transition model in order to apply an embodiment of the present invention.

The request path control unit monitors a request request for use of a predetermined function issued from the JSDK application to the native service layer and controls a transmission path of the request depending on whether the JSDK application which issued the request is provisionally activated. If the JSDK application is provisionally activated the request is transmitted to the provisional activation service . If the JSDK application is not provisionally activated i.e. the JSDK application is fully activated the request is transmitted to the native service layer .

On the other hand the request path control unit transmits a call sent from the provisionally activated application B via the JSDK platform not to the native service layer but to the provisional activation service Step S . In this case the provisional activation service acts like the native service layer and transmits a response indicating the result to the application B in the same form as the form used by the native service layer . Therefore it appears to the application B that the native service layer has been successfully called and the function has been performed. In this way during provisional activation the request path control unit prevents the native service layer and its lower components from functioning i.e. prevents the multifunction machine from actually operating so that the JSDK application is examined.

The provisional activation script and the provisional activation service are described below in greater detail. is a diagram illustrating the provisional activation script and the provisional activation service .

As shown in the provisional activation script includes three files namely a main script a scenario script and an action script . The main script defines the information for identifying the scenario script and the action script to be used for provisional activation and criteria for determining whether provisional activation is successful. The scenario script defines the scenario of provisional activation. The scenario is a procedure for operating a provisionally activated application using the operations panel . The action script defines actions the content of emulation of the native service layer in response to a call transmitted to the provisional activation service by the request path control unit .

The main script is interpreted by the provisional activation service . Therefore the provisional activation service controls provisional activation according to the main script . The provisional activation service generates a thread a scenario service for interpreting the scenario script and a thread an action service for interpreting the action script .

The scenario service functions as a pseudo operator that enters an operational instruction for the provisionally activated application according to the scenario script . A call from the application to the native service layer which call is generated according to the operational instruction of the scenario service is transmitted to the action service by the request path control unit . The action service performs emulation in response to the transmitted call according to the definition of the action script and sends a response indicating the result in the same form as the form used by the native service layer . Because the transmitted response is in the same form as the form used by the native service layer it appears to the application that the native service layer has been called.

A processing procedure performed by the multifunction machine is described below. is a sequence diagram illustrating a processing procedure for provisional activation by the multifunction machine according to a first embodiment.

When installation of an application is requested the SAS manager searches for application management files stored in an SD card in the memory card slot of the multifunction machine and acquires all the detected application management files from the SD card Step S . Each application management file stores information about components of the corresponding application information necessary for installation and other management information hereinafter referred to as application information . The application management files are attached to their corresponding applications. That is if plural JSDK applications are stored in the SD card plural application management files are acquired.

The application information includes an information element enclosed by tags a resource element enclosed by tags a pseudo boot element enclosed by tags and an xlet desc element enclosed by tags.

The information element contains information for identifying the application the scan application . For example a product id element contains the product ID of the scan application . A title element contains the title application name of the scan application . A vendor element contains the name of the vendor who has developed the scan application .

The resource element contains information about resources necessary for executing the scan application . For example the value of an href attribute of a jar element specifies the file name path name of a JAR file of the scan application .

The pseudo boot element defines information about provisional activation. For example the value of a trigger attribute of the pseudo boot element specifies the timing to execute provisional activation. In the example of the value of the trigger attribute is install indicating that provisional activation is performed at the time of installation of the scan application . The value of a platform attribute specifies the platform on which provisional activation is performed. In the example of the value of the platform attribute is same indicating that provisional activation is performed on the same platform as the platform on which full activation is performed. The value of an href attribute of a pb element specifies the file name ScanApp. pb of the main script of the provisional activation script of the scan application . Note that the pseudo boot element is contained in the case where provisional activation is required. Therefore the necessity of performing provisional activation can be determined based on whether the pseudo boot element is contained.

The value of a visible attribute of the xlet desc element specifies whether the scan application performs screen display on the operations panel . In the example of the value of the visible attribute is visible indicating that the scan application performs screen display.

While shows an example of application information of the scan application application information of other applications is defined in the same format as the format of the application information of the scan application .

Next the SAS manager determines which application is installable in the multifunction machine based on the acquired application management files and causes the operations panel to show a list of installable applications for example a list of the name of installable applications Steps S and S .

An operator selects an application to be installed from the list of the applications shown on the operations panel . In this example the scan application is selected. When the scan application is selected a request for starting installation of the scan application is transmitted to the SAS manager Step S .

In response to the request for starting installation the SAS manager requests the JSDK platform to install the scan application according to the content of the application management file the application information of the scan application Step S . The JSDK platform installs the scan application as a bundle Step S .

Then the SAS manager determines whether an instruction for provisional activation pseudo boot element is contained in the application information . If an instruction for provisional activation is contained the SAS manager starts provisional activation of the scan application Step S . If the provisional activation service is not activated the SAS manager starts activation of the provisional activation service Step S . First the SAS manager requests the JSDK platform to install the provisional activation service Step S and the JSDK platform installs the provisional activation service Step S . Then the SAS manager requests the JSDK platform to activate the provisional activation service Step S so that the JSDK platform activates the provisional activation service Step S .

When the provisional activation service is activated the provisional activation service registers interface information pieces about services that the provisional activation service can offer in the JSDK platform Step S . The provisional activation service acquires an interface information piece of the request path control unit from the JSDK platform Step S . In this example the interface information piece indicates information necessary for calling the request path control unit . It is to be noted that the request path control unit is activated when for example the multifunction machine is started. At this point the interface information piece of the request path control unit is registered into the JSDK platform .

The SAS manager acquires an interface information piece of the provisional activation service from the JSDK platform Step S . The SAS manager refers to the pb element of the application information to acquire the main script corresponding to the file name ScanApp.pb specified in the pb element . The SAS manager transmits the main script and the application name of the scan application to the provisional activation service thereby requesting the provisional activation service to control provisional activation of the scan application Step S .

The provisional activation service transmits the application name of the scan application which is to be provisionally activated to the request path control unit and requests the request path control unit to transmit to the provisional activation service a request message from the scan application for a call to the native service layer Step S . The request path control unit retains the application name transmitted in Step S to identify the application to be provisionally activated.

The provisional activation service executes a description of the main script . The description defines that provisional activation is performed using the scenario script with a file name of ScanApp.s and the action script with a file name of ScanApp.b . Accordingly the provisional activation service activates generates the scenario service and transmits the scenario script ScanApp.s to the scenario service Step S . Further the provisional activation service activates generates the action service and transmits the action script ScanApp.b to the action service Step S .

In this embodiment the operations screen includes a label indicating that the application to be activated is the scan application a start button and a Result label . The start button is used by a user to enter an instruction for starting execution of the scan application . The Result label is configured to display the processing result of the scan application . If the scan application is successfully completed if scanning is successful a character string Complete is displayed as shown in the operations screen . If the scan application is abnormally terminated if scanning has failed a character string of e.g. Error is displayed. Note that as shown in the operations screen the Result label displays nothing when the scan application is in the initial state.

The SAS manager requests the JSDK platform to activate the scan application Step S . The scan application is provisionally activated by the provisional activation service . In response to the request for activation of the scan application the JSDK platform shifts the state of the scan application to the init state and transmits to the logging service information indicating that the scan application has moved to the init state Step S . The logging service records the transmitted information in a provisional activation log .

The provisional activation log is written in a file according to for example syntax as described below. is a diagram illustrating an example of syntax of the provisional activation log . In a single line a single record of syntax of a provisional activation log is written in a tree format. Each node of the tree is an item constituting the provisional activation log .

As shown in the provisional activation log contains the number as a first item date as a second item time as a third item and the application name as a fourth item. The number indicates the recorded order of a log entry. The date and time indicate when the log entry was recorded. The application name indicates the name of a provisionally activated application. The application name may be substituted for by the product ID. As a fifth item the type of the recorded content of the log entry is contained. As the type Bundle Memory Scan panel or hdd is recorded.

The Bundle indicates that the log entry is related to a state transition of a bundle application . In this case the state e.g. initState or activeState of the bundle after a transition is recorded as a sixth item. The initState indicates the init state. The activeState indicates the active state.

The Memory indicates that the log entry is related to reserving or releasing memory space. In this case as the sixth item the total usage of a heap memory by the application is recorded in a format of Heap . As a seventh item the total usage of a stack area by the application is recorded in a format of Stack . As an eighth item for example Object is recorded as the type of an item for which memory is newly reserved. The Object indicates an object. As a ninth item the Object is recorded as the type or the class name of the item for which memory is newly reserved. Although the Heap the Stack and the Object appear to have a selective relationship in these items are serially recorded as described above.

The Scan indicates that the log entry is related to an operation of a scanner the imaging unit . In this case the type e.g. setup start or complete of the operation related to the scanner is recorded as the sixth item. The setup indicates setting up the scanner. The start indicates starting scanning. The complete indicates that the scanning is successful. In the case of the setup a value attribute indicating an attribute setting is recorded as the seventh item and a value mono indicating monochrome scanning or a value color indicating color scanning is recorded as the eighth item.

The Panel indicates that the log entry is related to an operation of the operations panel . In this case the type e.g. show of the operation of the operations panel is recorded as the sixth item. The show indicates displaying information a screen a message etc. on the operations panel .

The hdd indicates that the log entry is related to an operation of the HDD . In this case the type e.g. read or write of the operation is recorded as the sixth item. The read indicates reading information. The write indicates writing information.

Referring back to after Step S in response to the request for activation of the scan application the JSDK platform shifts the state of the scan application to the active state and transmits to the logging service information indicating that the scan application has moved to the active state Step S . The logging service records the transmitted information as a log entry in the provisional activation log . The log entry recorded in Step S corresponds to a second line of the provisional activation log of . For purposes of simplicity of explanation a transition of the scan application to the pause state is omitted.

Then the JSDK platform activates the bundle of the scan application Step S . When activated the scan application acquires from the JSDK platform the interface information pieces of the service bundle to be used by the scan application Step S . In this example the interface information pieces of the scan service and the panel service are acquired. It is to be noted that the scan service and the panel service are activated when for example the multifunction machine is started. At this point the interface information pieces of the scan service and the panel service are registered into the JSDK platform .

Then the scan application generates according to the interface information piece of the scan service an object an instance of a ScanService class of the scan service that is necessary for using the scan service . To be exact in the following process transmission of requests from the scan application to the scan service is performed via this object. Generation of objects of the service bundle such as the scan service is subjected to the access control by the security manager . Accordingly information indicative of the generation of the object of the scan service is transmitted to the security manager in a constructor of the object Step S . Having received the information the security manager identifies the class name of the generator the scan application that has generated the object and transmits to the logging service information indicative of consumption of the memory by the scan application together with the class name and the size of the object Step S . The size of the object may be determined based on the class name. A detailed description about how the security manager identifies the generator that has generated the object is given below.

The logging service records the transmitted information as a log entry in the provisional activation log . The log entry recorded in this step corresponds to a third line of the provisional activation log of . In the third line of the provisional activation log of Memory Heap 2 MB Stack 100 KB Object ScanService 1 MB is recorded. This indicates that the current total usage of the heap memory by the scan application is 2 MB the total usage of the stack area is 100 KB an object of the ScanService class has been generated and the size of the object is 1 MB.

Then the scan application performs initial setting of the scan service for constructing a scanning process corresponding to an action of the scan application i.e. initial setting for monochrome scanning based on the interface information piece of the scan service Step S . The scan service attempts to transmit an initial setting request from the scan application to the native service layer via the request path control unit Step S . However because the scan application which is the origin of the initial setting request is provisionally activated the request path control unit transmits the initial setting request not to the native service layer but to the action service Step S . A detailed description about how the request path control unit determines whether the calling application in this example the origin of the initial setting request is provisionally activated is given below.

The action service emulates initial setting of the scanner and transmits the processing result to the origin of the request scan application via the request path control unit . In this step according to the setting defined in the description of the action script information indicating that initial setting is successfully performed is transmitted. Therefore the scan application determines that initial setting for scanning is successfully performed. If the scan application is not provisionally activated i.e. if the scan application is fully activated the request transmitted to the request path control unit is transmitted to the native service layer so that initial setting is actually performed.

Then the action service transmits to the logging service information indicating that initial setting for monochrome scanning is requested Step S . The logging service records the transmitted information as a log entry in the provisional activation log . The log entry recorded in this step corresponds to a fourth line of the provisional activation log of . Also the action service transmits to the scenario service information indicative of completion of the emulation of initial setting for monochrome scanning Step S . The scenario service is a service that functions as a pseudo operator of an application and hence the scenario service cannot function until the operations screen for the application is displayed on the operations panel . The scenario service therefore does not start execution of the definitions of the scenario script and ignores information from the action service until the completion of drawing displaying the operations screen on the operations panel is reported.

Transmission of information by the action service to the logging service and the scenario service is an operation performed according to logic that is previously incorporated in the action service and is not an operation performed based on the action script . That is the action service is configured to upon receiving a service request whose path is changed by the request path control unit transmit to the logging service information indicative of reception of the service request and also transmit to the scenario service the result of emulation performed by the action service in response to the service request.

Then the scan application generates according to the interface information piece of the panel service an object an instance of a PanelService class of the panel service that is necessary for using the panel service . To be exact in the following process transmission of requests from the scan application to the panel service is performed via this object. Information indicative of the generation of the object of the panel service is transmitted to the security manager in a constructor of the object Step S . Having received the information the security manager identifies the class name of the generator the scan application that has generated the object and transmits to the logging service information indicative of consumption of the memory by the scan application together with the class name and the size of the object Step S . The logging service records the transmitted information as a log entry in the provisional activation log . The log entry recorded in this step corresponds to a fifth line of the provisional activation log of . In the fifth line of the provisional activation log of Memory Heap 3 MB Stack 300 KB Object PanelService 1 MB is recorded. This indicates that the current total usage of the heap memory by the scan application is 3 MB the total usage of the stack area is 300 KB an object of the PanelService class has been generated and the size of the object is 1 MB.

Then the scan application transmits based on the interface information piece of the panel service a request for drawing the operations screen of the scan application on the operations panel to the panel service Step S .

The panel service constructs generates screen information to be transmitted to the native service layer to draw the operations screen of the scan application on the operations panel and attempts to transmit the request for drawing the operations screen based on the screen information to the native service layer via the request path control unit Step S . However because the scan application which is the origin of the request for drawing the operations screen is provisionally activated the request path control unit transmits the drawing request together with the screen information not to the native service layer but to the action service Step S .

The action service emulates drawing the operations screen based on the screen information. As a result the operations screen is virtually drawn. The term virtually indicates that the operations screen is not actually displayed on the operations panel . However the screen information of the operations screen is retained in the action service . The action service transmits the result of the emulation of drawing the operations screen to the origin of the request scan application via the request path control unit . In this step according to the setting defined in the description of the action script information indicating that drawing is successfully performed is transmitted.

Then the action service transmits to the logging service information indicating that drawing the operations screen is requested Step S . The logging service records the transmitted information as a log entry in the provisional activation log . The log entry recorded in this step corresponds to a sixth line of the provisional activation log of . Also the action service transmits to the scenario service information indicative of completion of the emulation of drawing the operations screen Step S .

Having received the information indicative of completion of drawing the operations screen the scenario service starts a process corresponding to the definitions of the scenario script . First based on a description of an object hereinafter referred to as a start button object of the start button of the operations screen is acquired. The start button object is an object of an object group constituting the screen information of the operations screen and is acquired by the action service in response to a call to a function described in the description . After a predetermined time period three seconds specified by an argument of a function since the operations screen is displayed which function is described in the description a message indicating that the start button is pressed is transmitted to the request path control unit based on a description Step S . Note that transmitting the message indicating that pressing the start button is performed after three seconds since the operations screen is displayed in order to make a pseudo entry of an input by the scenario service similar to an actual entry of an input by a user. That is because an actual user does not press the start button immediately after the operations screen is displayed but rather presses the start button after about three seconds since the operations screen is displayed.

Then the scenario service acquires based on a description of the scenario script an object hereinafter referred to as a Result label object of the Result label of the operations screen . The Result label object is an object of the object group constituting the screen information of the operations screen and is acquired by the action service in response to a call to a function described in the description .

Then based on a description of the scenario script the scenario service is placed in a waiting state to wait for the Result label to be updated. Therefore the process following a description is not performed at this stage.

Meanwhile having received from the scenario service the message indicating that the start button is pressed in Step S the request path control unit transmits the message to the panel service Step S .

Having received the message indicating that the start button is pressed the panel service transmits to the scan application information indicating that the start button is pressed Step S . Having received the message indicating that the start button is pressed the scan application requests the scan service to start scanning Step S . The scan service attempts to transmit a scanning start request from the scan application to the native service layer via the request path control unit Step S . However because the scan application which is the origin of the scanning start request is provisionally activated the request path control unit transmits the scanning start request not to the native service layer but to the action service Step S .

Then the action service transmits to the logging service information indicating that starting scanning is requested Step S . The logging service records the transmitted information as a log entry in the provisional activation log . The log entry recorded in this step corresponds to a seventh line of the provisional activation log of . Also the action service transmits to the scenario service information indicating that scanning is to be started Step S . Because the scenario service is in the waiting state to wait for the Result label to be updated the scenario service performs no operation.

Then the action service emulates scanning and transmits the processing result to the request path control unit Step S . In the Step S according to the setting defined in the description of the action script a message indicating that scanning is successfully performed completed is transmitted. Also the action service transmits information indicative of the successful completion of scanning to the logging service and the scenario service Steps S S . The logging service records the transmitted information as a log entry in the provisional activation log . The log entry recorded in this step corresponds to an eighth line of the provisional activation log of . Having received the information indicative of the successful completion of scanning the scenario service performs no operation because the scenario service is in the waiting state to wait for the Result label to be updated.

Meanwhile having received the message indicative of the successful completion of scanning from the action service in Step S the request path control unit transmits the message to the scan service Step S . The scan service transmits information indicative of the successful completion of scanning to the origin of the scanning start request namely the scan application Step S .

Having received the information indicative of the successful completion of scanning the scan application requests the panel service to display a character string Complete on the Result label of the operations screen Step S . In response to the request from the scan application the panel service attempts to transmit the request for displaying the character string Complete to the native service layer via the request path control unit Step S . However because the scan application which is the origin of the request for displaying the character string Complete is provisionally activated the request path control unit transmits the request for displaying the character string Complete not to the native service layer but to the action service Step S .

The action service virtually displays the Complete on the Result label . More specifically the action service specifies the character string Complete to the Result label object in the retaining screen information thereby emulating a process of displaying the character string Complete . The action service transmits the result of the emulation to the origin of the request scan application via the request path control unit . In this step according to the setting defined in the description of the action script information indicating that the character string Complete is successfully displayed is transmitted.

Then the action service transmits to the logging service information indicating that updating the operations screen is requested Step S . The logging service records the transmitted information as a log entry in the provisional activation log . The log entry recorded in this step corresponds to a ninth line of the provisional activation log of . Also the action service transmits to the scenario service information indicating that the character string Complete is displayed on the Result label Step S .

Having received the information the scenario service moves back from the waiting state to wait for the Result label to be updated and determines whether the character string displayed on the Result label is Complete according to the description of the scenario script . If the character string displayed on the Result label is Complete the scenario service transmits to the provisional activation service according to a description information indicating that the provisionally activated application operates according to the scenario a success of the scenario Step S . On the other hand if the character string displayed on the Result label is not Complete the scenario service transmits to the provisional activation service according to a description information indicating that the provisionally activated application does not operate according to the scenario a failure of the scenario .

Having received the information indicative of the success of the scenario the provisional activation service requests the logging service to search for the provisional activation log of the application the scan application with the name ScanApp according to a description of the main script Step S . The logging service searches for the provisional activation log of the scan application in the provisional activation log based on the application name and transmits the search result to the provisional activation service Step S . In the example shown in the provisional activation log only contains log information of the scan application . Therefore the contents in the first line through the ninth line shown in are transmitted to the provisional activation service .

Then according to a description of the main script the provisional activation service determines whether the provisional activation is successful. The description defines conditions of successful provisional activation which are the memory usage is less than 5 MB no data are written into the HDD and the scan mode is monochrome. Therefore the provisional activation service searches for the maximum value in the log indicating the usage of the heap memory written in the format Memory Heap xxx MB in the provisional activation log and determines whether the detected maximum value is equal to or less than 5 MB. Also the provisional activation service searches for a description such as hdd write in the provisional activation log to determine whether data are written into the HDD . Further the provisional activation service searches for a description such as Scan setup attribute mono in the provisional activation log to determine whether the scan mode is monochrome.

According to the provisional activation log of this embodiment as written in the third line the maximum value of the usage of the heap memory is 3 MB which is less than 5 MB. There is no description such as hdd write . This indicates that no data are written into the HDD . A description Scan setup attribute mono is contained in the fourth line. This indicates that the scan mode is monochrome. That is the conditions of successful provisional activation are satisfied. Therefore according to a description of the main script the provisional activation service transmits information indicative of successful provisional activation to the SAS manager Step S .

Having received information indicative of successful provisional activation the SAS manager requests the JSDK platform to terminate the provisionally activated scan application Step S . The JSDK platform transmits to the logging service information that the scan application is to be moved to the destroy state Step S . The logging service records the transmitted information as a log entry in the provisional activation log . The log entry recorded in this step corresponds to a tenth line of the provisional activation log of . Then the JSDK platform terminates the scan application Step S .

Meanwhile after requesting termination of the scan application in Step S the SAS manager causes the operations panel to display an indication of completion of installation of the scan application Step S . This indication lets the operator know that the scan application is successfully installed Step S . Then in order to use the scan application the operator enters an instruction for full activation of the scan application using the operations panel Step S . The instruction for full activation of the scan application is transmitted to the SAS manager Step S . The SAS manager requests the JSDK platform to fully activate the scan application Step S . Then the JSDK platform fully activates the scan application Step S .

Requests from the fully activated scan application are transmitted to the native service layer without the path of the requests being changed by the request path control unit . Therefore the operations screen is actually displayed and scanning is actually performed in response to an entry of an input by the operator on the operations screen.

If provisional activation has failed for example if the provisionally activated scan application does not operate according to the scenario or if the conditions of successful provisional activation in the description of the main script are not satisfied the provisional activation service transmits information indicative of a failure of provisional activation is transmitted to the SAS manager in Step S according to a description of the main script . Having received the information the SAS manager causes the operations panel to display an indication indicating that installation of the scan application has failed and disables installation of the scan application . Accordingly the operator cannot fully activate i.e. cannot actually use the scan application .

A detailed description about how the security manager identifies the generator of an object in Step S etc. is given below. is a diagram illustrating a method used by the security manager to identify the generator of an object. In the example shown in the scan application generates an object of the scan service . That is the process shown in corresponds to Steps S and S of .

In ScanApp represents the class name of the scan application ScanService represents the class name of the scan service a ScanApp represents an object a i.e. an instantiated scan application of the ScanApp class and b ScanService represents an object b i.e. an instantiated scan service of the ScanService class.

When the object a calls a constructor of the ScanService class to generate the object b Step S the class name ScanApp is stored in the stack Step S . When the object b calls the security manager in the constructor Step S the class name ScanService of the object b is stored in the stack Step S . In response to the call from the object b the security manager traces data in the stack thereby identifying that the class name of the calling application is ScanApp i.e. that the generator of the object b is the scan application Step S .

Next a detailed description about how the request path control unit determines in Step S etc. whether the origin of a request for a call to the native service layer is provisionally activated is described below. First a premise is that an application to be provisionally activated is registered in the request path control unit e.g. Step S . Therefore if the application name of the origin of a call request can be identified in the request path control unit it is possible to determine whether the application is provisionally activated.

In this embodiment the application bundle as the JSDK application is provisionally activated. The JSDK application is a Java application. Therefore for example it is possible to identify the application using a thread group ThreadGroup as a standard Java class. A thread group indicates a thread Thread or a group of threads. One or more Threads may be associated with a ThreadGroup. A name thread group name may be given to a thread group. In each thread the thread group to which the current thread belongs can be identified. In this embodiment the application bundle and the service bundle are implemented as bundles . The term bundle as used herein indicates a library a collection of functions or classes that can be dynamically linked. The request path control unit is also a library a collection of functions or classes . Accordingly none of them is activated as a process. The called party operates on a thread of the calling application.

Based on this mechanism the request path control unit can identify the name of the calling application as described below. is a diagram illustrating a method for identifying the name of the calling application using a thread group. In the hierarchical relationship between modules is different from the one shown in for explanation purposes.

In GPx x indicating a c indicates a thread group and thx x indicating a d indicates a thread. In the example of the scan application is associated with a thread group GPb to which the application name of the scan application is given as the name of the thread group. The scan service is associated with a thread group GPc.

The scan application includes a thread tha executing a method A and a thread thb executing a method B. The thread tha and the thread thb belong to the thread group GPb. For example if the method C of the scan service is called from the method B of the scan application the method C operates on the thread thb. Further if a function D of the request path control unit is called from the method C the function D operates on the thread thb. Accordingly the thread thb is identified as the current thread in the function D and the thread group GPb is identified as the thread group to which the thread thb belongs. Thus the name of the application that called the function B i.e. the request path control unit is acquired by acquiring the thread group name of the thread group GPb. Further the acquired application name thread group name is compared with the previously registered name of the provisionally activated application thereby determining whether the application that called the function B is provisionally activated.

The thread group is not necessarily used for identifying the calling application. For example the name of the calling application may be taken over by the argument of each method or function.

As described above according to the multifunction machine of the first embodiment before actually using an application the application is provisionally activated and the log related to its action a provisional activation log is recorded. Then it can be determined whether the application satisfies predetermined restrictions based on the provisional activation log . Therefore it is possible to prevent an application that does not satisfy the predetermined restrictions from operating and thus to reduce the risk of malfunction due to the application.

The criteria for determining whether provisional activation is successful operations of a provisionally activated application and actions of the action service during provisional activation are defined in the provisional activation script the main script the scenario script and the action script as a file separate from the program. Therefore these information pieces determination criteria operations actions etc. can easily be modified according to a change in each application and the resources of the multifunction machine e.g. adding memory . Especially if the information pieces are described in a text file format as in this embodiment the information pieces can more easily be modified.

The action service responds as the native service layer i.e. responds in the same manner as the native service layer to the application so that the application does not need to be conscious of being provisionally activated. Therefore there is no need to implement the application especially for the purpose of provisional activation.

Applications that do not satisfy the predetermined restrictions can be provisionally activated. Therefore in the case where an application is provisionally activated while another application is fully activated the progress of an operation of the fully activated application might be impeded due to a negative influence such as memory shortage of the provisionally activated application on the fully activated application.

To avoid such a problem the software of the multifunction machine may be configured as described below. is a diagram showing an example of a software configuration of a multifunction machine having plural virtual machines. In the same elements as those shown in are indicated by the same reference numerals.

In the multifunction machine includes two JSDK platforms namely a JSDK platform and a JSDK platform . Each JSDK platform includes a Java virtual machine VM . The virtual machines are activated as separate processes and JSDK applications on the JSDK platforms are activated as threads in the processes of the corresponding virtual machines.

In this configuration it is preferable that the JSDK platform be used as an execution environment for e.g. a fully activated application bundle while the JSDK platform be used as an execution environment for e.g. a provisionally activated application bundle . These execution environments use different processes. Therefore even if the process of the JSDK platform stops due to malfunction of the application bundle the risk of negatively affecting the process for full activation is reduced. Therefore it is possible to prevent the stability of e.g. the fully activated application bundle from degrading due to execution of provisional activation.

As for the process virtual machine for provisional activation it is preferable that a lower priority order be given than the priority order given to the process virtual machine for full activation a virtual memory be enabled and the heap memory allocated to the process for provisional activation be greater than the heap memory allocated to the process for full activation. As for the process for full activation it is preferable that a higher priority order be assigned and a virtual memory is disabled thereby improving the real time performance. The reason why different priority orders are assigned to the process for provisional activation and the process for full activation is to prevent a negative effect of execution of provisional activation on the fully activated application. The reasons why the virtual memory for the process for provisional activation is enabled and the heap memory allocated to the process for provisional activation is greater than the heap memory allocated to the process for full activation are because in order to determine whether the application can be executed using the heap memory having the size allocated for full activation memory greater than the memory used for full activation needs to be checked first.

As mentioned in connection with the native service layer is not called during provisional activation so that hardware specific to the multifunction machine e.g. hardware for image processing is not used. Therefore provisional activation may be performed in the general purpose personal computer PC . In this case software excluding the native service layer of needs to be executable in the computer .

A second embodiment is described below. In the first embodiment whether the memory usage of each application is equal to or less than the limit value 5 MB is determined based on the provisional activation log . However in the case where plural applications are activated in parallel the determination made in the first embodiment might not be enough to prevent malfunction.

This problem is prevented in the second embodiment. Differences between the first embodiment and the second embodiments are described below. Features of the second embodiments not described herein may be the same as the features of the first embodiment.

In the second embodiment a main script is defined as described below. is a diagram showing an example of descriptions of the main script according to the second embodiment. In the same elements as those shown in are indicated by the same reference numerals. The main script of the second embodiment corresponds to the main script of the first embodiment.

The main script is different from the main script of the first embodiment in having a description . The description defines the interface of a script function pb Case . In the second embodiment a variable PseudoBootLog log for storing a provisional activation log is defined as an OUT parameter for call by reference. The value of the parameter is defined in the description .

The processing procedure for provisional activation by the multifunction machine in the second embodiment is similar to that in the first embodiment. However in the second embodiment based on the description in the main script the provisional activation service transmits the content of the provisional activation log to the SAS manager together with information indicating whether provisional activation is successful in Step S. The SAS manager associates the transmitted provisional activation log with the provisionally activated application bundle in the example of the scan application and stores and manages the provisional activation log in e.g. the HDD . The provisional activation log may be associated with the application bundle by giving the application name of the application bundle as the file name of the provisional activation log for example.

The second embodiment is further different from the first embodiment in how the SAS manager manages activated applications including applications being activated when the SAS manager receives an activation instruction in Step S.

In the multifunction machine if there is an application hereinafter referred to as an application A that requires a state transition including a state transition to the init state upon activation Yes in Step S the SAS manager determines whether the sum of the maximum memory usage of the application A in the destination state of the application A and the maximum memory usage of other applications that are currently fully activated is equal to or less than a predetermined limit value e.g. MB Step S .

Note that the SAS manager determines the maximum memory usage of the application A in the destination state and the maximum memory usage of the other applications in their current states based on the provisional activation logs associated with the respective applications. The SAS manager detects the presence of the application that requires a state transition based on a notice from the application.

If the sum of the maximum memory usage is equal to or less than the limit value Yes in Step S the SAS manager permits a state transition of the application A. Thus the application A moves to its destination state Step S . On the other hand if the sum of the maximum memory usage is greater than the limit value No in Step S the SAS manager withholds a state transition of the application A and registers information herein after referred to as a waiting information piece indicating the application A is waiting for its state transition to be performed. The waiting information piece includes for example identification information of the application A and the identification information of the destination state. The waiting information piece may include the maximum memory usage in the destination state in place of the identification information of the destination state. In this case it is possible to eliminate a process for referring again to the provisional activation log for the memory usage of the destination state of the application A. The state transition waiting queue is a queue or a list of waiting information pieces. Applications waiting for their state transitions to be performed can be identified based on the state transition waiting queue.

When the application A moves to its destination state in Step S the sum of the maximum memory usage of each of the applications in their respective states changes due to the state transition of the application A. That is there is a chance that state transitions of applications waiting for their state transitions to be performed can be permitted. Therefore the SAS manager executes the processing in Step S and the subsequent steps.

More specifically the SAS manager determines whether there are any waiting information pieces in the state transition waiting queue thereby determining whether there are any applications waiting for their state transitions to be performed Step S . If there is no application waiting for its state transition to be performed i.e. if the state transition waiting queue is empty No in Step S the process returns to Step S.

On the other hand if there is an application waiting for its state transition to be performed Yes in Step S the SAS manager acquires one waiting information piece from the state transition waiting queue Step S . The order of acquiring the waiting information pieces from the state transition waiting queue may be based on FIFO First In First Out or may be based on LRU Least Recently Used . Alternatively applications may be prioritized so that the waiting information pieces are acquired in the order of priority. The order of priority may previously be registered in the HDD or the like.

Then the SAS manager determines whether the sum of the maximum memory usage of the application related to the acquired waiting information piece hereinafter referred to as a current waiting information piece in its destination state and the maximum memory usage of other applications in their respective states is equal to or less than the predetermined limit value Step S .

If the sum of the memory usage is equal to or less than the limit value Yes in Step S the SAS manager deletes the current waiting information piece from the state transition waiting queue Step S and moves the application waiting for a state transition to be performed to its destination state Step S . After the state transition of the application the processing in Step S and the subsequent steps is performed to determine whether to permit a state transition of one of the other applications.

On the other hand if the sum of the maximum memory usage is greater than the limit value No in Step S the process returns to Step S. Alternatively the process may return to Step S. In this case among the applications of which waiting information pieces are registered in the state transition waiting queue the application for which a state transition can be performed without resulting in exceeding the limit value is given priority for a state transition.

As described with reference to it is possible to avoid the situation illustrated in by restricting state transitions of applications. The example of is improved as described below. is a chart illustrating how the memory usage is properly managed by restringing state transitions.

In if both the application A and the application B are in the init state the sum of maximum memory usage of the application A and the application B exceeds the limit value 5 MB . Therefore the application A is moved to the init state after moving the application B to the pause state. Thus the sum of the memory usage is maintained equal to or less than the limit value throughout the process.

As described above according to the multifunction machine of the second embodiment even if plural applications operate in parallel the action behavior of the applications can be controlled based on the information in the provisional activation log that has been recorded during provisional activation of the applications. That is the sum of the maximum memory usage of each application can be maintained equal to or less than the predetermined limit value. Therefore it is possible to reduce the risk of malfunction due to the applications.

Note that in the example of the second embodiment it is determined during provisional activation whether the maximum memory usage throughout the states is equal to or less than the limit value. Therefore the processing procedure of is described on the premise that only applications that satisfy this condition are to be fully activated. In an alternative embodiment upon fully activating an application the SAS manager determines the maximum memory usage of the application throughout the states by reference to the provisional activation log of the application and rejects full activation of the application if the maximum memory usage is greater than the limit value. In this case determination of the maximum memory usage does not necessarily performed during provisional activation. That is the description log. Maxmem 5 MB in the description of the main script may be removed.

In the above description provisional activation is used for previously determining the adequacy of an application. However provisional activation may be used for other purposes. For example provisional activation may be used for analyzing the cause of a failure during full activation of an application. In the following examples provisional activation is used for failure cause analysis according to a third embodiment and a fourth embodiment.

In response to an instruction from an operator the SAS manager of the multifunction machine fully activates an application e.g. the scan application Step S . If a failure occurs during full activation of the application the panel service displays a warning screen reporting the occurrence of failure Step S . Then the SAS manager sends information e.g. an error code indicating the type of the failure to the failure support server Step S .

Based on the information indicating the type of the failure the failure support server sends a provisional activation script suitable for investigating the cause of the failure to the multifunction machine Step S . For example in a memory unit of the failure support server a provisional activation script for investigating the cause of failure is previously stored for each application and for each failure type. The provisional activation script suitable for investigating the cause of the failure may include a scenario script defining a scenario for analyzing the failure and an action script defining the content of emulation suitable for analyzing the failure.

The multifunction machine provisionally activates the failed application using the received provisional activation script Step S . The procedure used in Step S is the same as that described in connection with . As a result a provisional activation log is generated. The SAS manager of the multifunction machine sends the provisional activation log to the failure support server Step S .

The failure support server analyzes the provisional activation log to identify the cause of the failure. The cause of the failure may be identified automatically or manually. After the cause is identified the result of the failure analysis is reported to the operator Step S . The result may automatically be sent by e mail or the like. If the failure is caused by a bug a modified version may be remotely installed into the multifunction machine from the failure support server .

Alternatively the provisional activation script for each failure type may previously be stored in the multifunction machine so that the multifunction machine performs cause analysis. In this case the failure support server is not necessarily needed.

The fourth embodiment is described below. is a diagram illustrating a method of failure analysis using provisional activation according to the fourth embodiment. In the same elements as those shown in are indicated by the same reference numerals. In the fourth embodiment the failure support server includes a JSDK application a JSDK platform and a request path control unit .

Based on information indicating the type of the failure the failure support server selects a provisional activation script suitable for investigating the cause of the failure from the memory unit Step S . The failure support server provisionally activates the failure application using the received provisional activation script to generate a provisional activation log . Then the failure support server analyzes the provisional activation log to identify the cause of the failure Step S . After the cause is identified the failure support server reports the result of the failure analysis to the operator Step S . If the failure is caused by a bug a modified version may be remotely installed into the multifunction machine from the failure support server .

As described above provisional activation of an application is performed based on the provisional activation script corresponding to the failure to generate a provisional activation log so that a cause analysis can properly be performed based on the provisional activation log .

While the present invention is described in terms of preferred embodiments variations and modifications may be made without departing from the scope of the invention as set forth in the accompanying claims.

The present application is based on Japanese Priority Application No. 2007 181345 filed on Jul. 10 2007 and Japanese Priority Application No. 2008 098627 filed on Apr. 4 2008 with the Japanese Patent Office the entire contents of which are hereby incorporated herein by reference.

