---

title: Heterogeneous database management system
abstract: An administration server in a database management system retrieves log files in a plurality of formats from a plurality of clients through helper programs running on the clients. The plurality of clients can include Web servers, application servers, and database servers. The log files can be generated by software modules on the clients. An administration engine converts log entries in the log files into a unified format for display. The converted log entries can be stored in a log database. Upon a user request, the administration server presents the log entries to the user in a log viewer. The log viewer can display log entries originated from heterogeneous software modules in a unified view.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08060470&OS=08060470&RS=08060470
owner: Apple Inc.
number: 08060470
owner_city: Cupertino
owner_country: US
publication_date: 20081223
---
In a distributed computing environment heterogeneous components of a database management system can be hosted on multiple servers. A database management application can have multiple software modules such as Web servers application servers databases and load balancers. The software modules can be hosted on a variety of computers running on a variety of operating systems. Each of the computers can have a unique system configuration. Each software module can also have an individualized or unique logging mechanism. For example a system log can contain memory usage disk usage Input Output I O frequency paging frequency etc. A Web server log can contain access time access Internet Protocol IP address and page visited. An application log can contain tracing information. A database log can contain number of active connections number of commits number of reads etc.

A system administrator is often required to monitor the status of software modules on a variety of servers. For example in a complex Web based database backed application a system administrator needs to monitor the health of each database on each server and load balance the system by directing a next request to a proper database. For another example if a Web based database backed application fails to respond to a user request a system administrator needs to locate a component in the system that failed. The failure can be a software failure or a hardware failure. The system administrator can identify a failed component by viewing logs for each software module and each computer.

Traditionally system and database log files are vendor proprietary. A database vendor can provide homogeneous log files for the vendor s database even when the database runs on a variety of operating systems. Similarly a computer vendor can provide a homogeneous log files for the computer vendor s computers no matter what database runs on the computers. Furthermore technologies exist to view both a server log file and system log files in a single viewer. However no existing solutions provide a unified viewer for interactive display of disparate log files.

An administration server in a database management system retrieves log files in a plurality of formats from a plurality of clients through helper programs running on the clients. The plurality of clients can include Web servers application servers and database servers. The log files can be generated by software modules on the clients. An administration engine converts log entries in the log files into a unified format for display. The converted log entries can be stored in a log database. Upon a user request the administration server presents the log entries to the user in a log viewer. The log viewer can display log entries originated from heterogeneous software modules in a unified view.

In one implementation a heterogeneous database management system can be an administrative tool for analyzing database application performance. In one example a server program can periodically read log files created by disparate software and hardware components in the database management system. The log files can be generated by for example a Web publishing core a database an application program or a computer system. The service process can normalize log entries in the log files into a unified format. The unified format can include date event description severity and source. The unified format can differ from the log file formats generated by the disparate software and hardware components.

In another implementation a heterogeneous database management system can include a client application. A client application can provide information to a system administrator. The client application can request information from a service program. The information can be stored in a storage device in a unified format. The client application can display the information in a table view combined with graphical form. The combined tabular and graphical form can provide a graphical user interface that enables a user to select an entry in a log viewer table and as a result of the selection view a corresponding graph and vice versa.

In yet another implementation a client application in a heterogeneous database management system can display database usage characteristics. The database usage characteristics can include the number of connections memory usage and number of reads and writes. The database usage characteristics can be correlated to a system event log based on date and time. The client application and the service program can provide normalization of event information based on database usage statistics and system event log. Normalized event information can be provided to a user in an integrated viewer to assist the user to identify performance issues.

In another implementation a client application can display the database usage characteristics in a graphical manner. Further a client application can provide a graphical user interface for managing a database. The graphical user interface can allow a user to start a database stop a database change configurations for a database and back up the database.

The details of one or more implementations of a heterogeneous database management system are set forth in the accompanying drawings and the description below. Other features objects and advantages of the techniques will be apparent from the description and drawings and from the claims.

In step a server program receives or reads the first log file from a software module of the database management system. A log file in step can be a file automatically created and maintained by a computer program on a client. A log file can record the activities of a software module on the client. An example log file can be a Web server access file where the Web server is a client in a heterogeneous database management system. A log file can be in a format that is recognized by a helper for the server. For example a log file can be a Web server access log file or error log file in the W3C Extended Log File Format. A log file can alternatively be a database transaction log file. Log files are commonly stored on a storage device in a directory.

The receiving or reading of a log file in step can be achieved by a plurality of implementations. In one example implementation a server in a heterogeneous database management system can periodically poll the client computers. Polling can include accessing particular directories on client computers where log files are stored. The period of access can be configured as a cron job in a UNIX based system. The access can be achieved by creating dedicated password less remote access user accounts with limited privileges. A configuration profile can limit the privileges to log access only.

In another example implementation a server can periodically poll the client computers by running software that implements instances of a monitor class. A monitor instance can communicate with an instance of a helper class. A helper instance can run on a client computer. A helper instance can execute a method to record a recent entry in a log file on a client and communicate the recent entry back to the monitor.

In another example implementation the receiving of first log file in step can be achieved by creating one or more daemon programs on a client machine that monitor log files on the client machine. A daemon program can be a computer program that runs in the background on a UNIX based system. Daemon programs can be configured to monitor database logs Web server logs system logs or any other log file that is created by an application program. Once a daemon program on a client detects an update the daemon program can remotely invoke a process on a server. The invocation can be for example through a remote procedure call RPC or more specifically through a remote method invocation in an object oriented programming environment. As an alternative to remotely invoking a process on a server a daemon program on a client computer can use Web services to send the updates to a server. Information can be passed by an HTTP request such as POST or GET. The HTTP request can originate from a client. A server can host a Web server that contains a component to process information passed in from a client. A server can identify a client by an IP address that is included in a header of the HTTP request.

In a next step a server in the heterogeneous database management system receives a second log file from a client. The second log file can be associated with a second software module. The format of the second log file can differ from the log file received in step . The method of receiving a second log file can also differ from the method of receiving a first log file in step . The method of receiving the first and second log files can be dictated by the nature of the first and second log files. For example a customized application program on a client computer can be configured to write application program logs to a directory on a remote server computer.

The format of the second log file in step can differ from the format of the first log file in step . For example the first log file can be a Web server access log while the second log file can be a database transaction log. The logs can be in ASCII format or in binary format. The logs can contain Extensible Markup Language XML . The logs can also be compressed.

In a next step a server in the heterogeneous database management system converts log entries in the first and second log files received or read in step and step into a third unified log file format. The unified third log file format can differ from the formats of first and second log files received by the server. In one example implementation the unified log file format can contain the following log fields date module type event ID and event description. A date field can contain date and time of a logged event. A module field can contain information on the source of an event. The information can include for example which software module created the event on which client computer etc. A type field can contain an event type e.g. whether the event is informational a warning or an error. An event ID field can contain unique identifiers of events. A description field can contain a free form text string describing the event. Each log entry can be in the same format. Table 1 is an example implementation of a LogEntry class.

In another implementation of a unified format in step log entries from various software modules on client computers can contain both a universal component and a module specific component. A universal component can contain date module type event ID and description fields as described above. A module specific component can contain information that is specific to the module from which a logged event originated. For example for an application program log an event can be that an error occurred when a particular user accessed a particular process. While module specific information can be put in a description field as text it can be beneficial to separate fields such as user ID process ID etc. for viewing or data mining purposes. Therefore subclasses can be created for the LogEntry class as shown in Table 1.

In step a server in the heterogeneous database management system can also write a first or second log file in a unified log file format to a storage device. In one example implementation the writing can be achieved by a serialization method for the LogEntry class or its subclasses. In a second example implementation a log writer can write the entries of logs in the unified log format to log files in text format. A benefit of the second example implementation can be simplified automatic rotation of log files. Automatic rotation process can be set up to delete or archive log files that are older than a certain time period e.g. one week or one month. In a third example implementation the first or second log file in the third unified log file format can be stored in a main database table. The main database table can have fields corresponding to common data fields in the log file. Module specific data can be tracked in separate tables whose table names and keys can be tracked as sub table names and foreign keys in the main database table.

In a next step a server in the heterogeneous database management system presents the converted log files in a log viewer in unified log file format on a display device. The first and second log files can be presented in a table having rows and columns. The rows of the table can correspond to log entry times. A column of the table can indicate which software module generated an original entry. Another column of the table can indicate a severity condition associated with the software module. A severity condition can be whether the event is informational is a warning or is an error.

In step the rows of the table which corresponds to number of displayable log file entries can be limited. In one example implementation the rows of the table can be limited by a time period. The time period can be defined by a start time and end time. A time period can also be defined to contain periods and intervals. For example a time period can be every Monday from 9 a.m. to 12 noon. In a second example implementation the rows of the table can be limited by an event number. For example the server can display the last N long entries in a log database. In a third example implementation the rows of the table can further be limited by the software module that generated the event. For example a user can view all log entries generated from a database an application or a Web server. Table 2 shows example implementations of listing log entries.

In Table 2 the getEntries method can be invoked by a log viewer a client program or through an application programming interface API to retrieve log entries in a unified format. Retrieving log entries can be limited based on module selection date range severity type or other limiting criteria.

Furthermore a software module is not limited to a database Web or application program. A software module can be an operating system on a computer. In one example implementation an admin helper can run on an operating system . Operating system can run on any computer in a system including a computer that runs software modules and . Operating system can create an operating system log file . Admin helper can contain a helper adaptor to convert operating system log file to standard log entries for a unified log viewer.

Web server can generate and maintain Web server logs . Web sever logs can include access logs and error logs. An admin helper program can run as part of Web server or in conjunction with Web server . In one example implementation admin helper program can be a daemon running in the background. In another example implementation Admin helper program can be a routine built into the Web server itself. A routine built into the Web server can be a dynamic shared object DSO which can be a module in an Apache HTTP Server. Admin helper program can monitor log files generated by a Web server. When Admin helper program detects an update of log files Admin helper program can send an update request to an Admin Server . The request can be in the form of an RPC call or an HTTP request.

In another example implementation admin helper program can be invoked by Admin Server . Admin Server can make a request to admin helper program on server computer . Admin helper program can send a requested log file or a portion of a requested log file to the Admin Server using an HTTP URL Connection. An HTTP URL Connection can be implemented with a universal HTTP connection class. For example An HTTP URL Connection can be implemented with a java.net.HttpUrlConnection class published by SUN Inc.

Similarly application server can contain application logs . An admin helper program monitors the application logs . Admin helper program can run similarly as admin helper program . Admin helper program can alternatively run in a different manner from admin helper program . Database server can contain database logs . An admin helper program tailored for database server can run on database server .

Admin Server manages log files or log file entries from software modules and . Information passed from admin helpers and can contain log files or log file entries in native formats. After receiving the log files or log file entries in native formats Admin Server can store the log files or log file entries in a local cache folder e.g. Logs cache on the Admin Server . The log files or log file entries can be a mirror image of remote log files. A benefit for keeping mirror copies of the remote log files is reduced access latency when a user views the log files because the cached mirror image can be parsed like local log files. Cached files can be created at Admin Server startup time and updated periodically by an admin engine . Admin engine can be an independent program or a thread of a program running on the Admin Server . In one example implementation admin engine can manage the admin helpers and by periodically requesting updates from admin helpers and . An update from admin helpers and can contain entire log files or new log entries. New log entries can be appended to cached log files. A cache will be cleared out and rebuilt when the Admin Server is restarted. In another example implementation admin engine can request updating from admin helpers and when a user views log entries in a log viewer through a client application or . Client applications and can be log viewers.

An Admin Server can cache a List collection of objects for log file entries cached in a local Log cache directory. Admin engine can be configured to create the List collection when Admin Server receives a request from a user to build a List. Once a List has been created Admin Server can cache that List until a new request is made on a software module that provided log entries in the List. When a new request is made the existing List can be discarded and a new List can be constructed. For example if a user requests Event.log entries from last week the Admin Server can construct the List object and return it to the a server administration console or a log viewer or . If another request is made for Event.log entries from a more recent time period that does not overlap with an existing time period e.g. today the List of entries from the prior week will be discarded.

Admin Server can avoid re reading any entries whenever possible. In the previous example if a user requests Event.log entries from the previous seven days then requests Event.log entries for yesterday no re reading of Event.log is necessary. If the user requests Event.log entries from the previous 14 days the Admin Server can avoid re reading the seven days already in its cache and just read the seven days not in its cache.

In one example implementation Admin Server can keep all cached log entry lists in a centralized log database . Log database can contain normalized log entries instead of raw log entries. Normalized log entries are log entries that conform to a unified log file format. Caching normalized entries in a log database has the potential advantage of providing quicker user response upon user request. However Caching normalized entries in a log database can have potential disadvantage of wasted computing resources when a user does not view the content of the logs.

A user can request viewing of the log entries for various software modules. The viewing can be through client applications and . Client applications and can be log viewers. Admin Server can provide various views of the log files. For example client application can be a dedicated client program communicating directly to Admin Server . Client application can be a Web browser which communicates with Admin Server through a Web based interface.

The example implementation in shows servers client applications and and Admin Server as distinct components. It should be noted that servers client applications and and Admin Server can be computer programs or software modules that can be hosted by one or more computers. When a server program and client programs run on a same computer the network connection between the server and clients can be through a loop back.

A range control box can be used to determine which entries in a log file to display. For example range control box can specify Date as a factor to limit the log entries displayed. When Date is specified Admin Server can display additional user interface components such as text boxes pull down menus or pop up dialog boxes in order to allow a user to specify a date range. An example date range can be specified as a day a week a month etc. A date range can also be specified to include hour minute or second. A date range can also be a recurring period e.g. every Monday. For another example range control box can specify Number as a factor to limit the log entries displayed. When Number is specified Admin Server can display additional user interface components such as text boxes pull down menus or pop up dialog boxes to allow a user to specify a number range. An example number range can be the last 100 log entries or the last 200 to last 100 log entries. Control box can also specify other limiting factors.

A module selection control can control the source of log entries displayed in table view . A user can select one or more software modules whose logs are to be displayed. Some examples of software module selection are server access server events application engine access application engine events Web server access and Web publishing core access. Further module selection control can allow a user to view all logs for all Web servers in a system view logs of a particular Web server in a system based on server name or IP address view a particular type of log of all Web servers such as access logs or error logs and view a particular type of log of a particular Web server. In addition to controlling the viewing of Web servers the module selection control can be used to select event logs application logs or other logs. Admin Server can display a user dialog box when a user selects to limit the display by both software module type and log type e.g. error logs for all application servers or when a user selects a subset of software modules e.g. some but not all database servers .

Severity controls can control which type of log file entries can be displayed in table view . A log file entry can be classified by a severity. Displayed data can be limited by severity level. For example severity control can limit the table view to show all log entries to show log entries that are warnings or log entries that are errors. Severity levels can be determined by the nature of the event that caused an entry to be registered in a log file. Because the system is heterogeneous log entries from different software modules can have different meanings for a log entry type information warning or error. The admin engine can maintain a mapping that maps events from database logs Web logs and application server logs to each log entry type.

A column field filter control can be used to limit displayed data. For example column field filter control when activated can cause log viewer to display only log entries that contain a particular string. The particular string can be a word phrase or sentence in the description field e.g. stopped . The string can also be a particular event ID e.g. .

Log viewer can contain a table view which contains a table with columns and rows for displaying log entries. The columns can contain headers e.g. Date Module Type ID and Description . A user click on a header can cause the log entries in table view be sorted on the column under the header. The sorting order can be toggled between high to low and low to high by a subsequent click on the header. When the number of log entries to display exceeds the number of available rows in table view a user can use a scroll bar to select a window of log entries for viewing. In one example implementation the rows of the table corresponding to log entry times. A column of the table indicates which software module generated the log entry. Another column of the table indicates a severity condition associated with the software module that generated the entry. A severity condition can be the severity of the event that generated the log entry i.e. whether the entry is informational a warning or an error. A user can select a log entry by clicking on the row of the log entry. A selected log entry can be highlighted.

A user can enter statistics display by clicking toggle control button on screen in conjunction with module selection control . A chart in statistics display shows database server network activity. On an x axis a date and time range is displayed. The date range can be controlled by range control box . On a y axis numbers of kilobytes per second is displayed. A highlighted vertical bar can be displayed in chart . Vertical bar can correspond to a highlighted row in a table view in viewer . A user can switch chart to display to other software modules or other type statistics on a same software module by using the module selection control . A user can toggle back to a table view in log viewer or to a combined tabular statistics display see by clicking toggle control button .

A variety of severity levels and are shown in database status chart . A triangular symbol can be used to indicate a warning. An octagonal symbol can be used to indicate an error. It should be noted that other shapes colors or texts can be used to represent warnings and errors. Warning symbols and error symbols can be displayed on an x axis of a database status chart. The position of the symbols of the x axis can be determined by the time the warning or the error occurred. By interacting with the warning or error symbols in the database status chart a user can highlight corresponding row or rows in table view . Overlaying warning symbols and error symbols in the same graph can aid the navigation of the information displayed. Overlaying table view and chart makes it easier to select an error on the chart and match the error with an entry in table . In the example shown database activity peak occurred between two warnings started backing up and client connection terminated. Such information provided together in display of a unified log viewer can help a database administrator in determining whether the database backup operation caused the peak in database server which in turn caused a user to lose connection.

A lower portion of unified log viewer can be a statistics display or . The lower portion can contain a module selection control with which a user can change chart to display statistics on other software modules or other statistics of a same software module. In addition the lower portion can have an additional control . Control can assist the display of finer granularity on some types of software module statistics than general statistics. For example statistics on a software module can be generated to show a number of calls by the software module at a certain time. With control a user can view total number of calls number of remote calls and number of system calls to an application server software module. Control can also allow a user to see other information such as wait time per call elapsed time per call number of application clients connected to an application server disk activity network activity memory paging activity number of database commits number of distinct users etc.

The lower portion of unified log viewer can contain a statistical chart . The data range and type of statistical chart can be controlled by control units and . The date range for statistical chart can correspond to a table view of log entries. A user selection of a row in table view can cause row to be highlighted. The same user selection can cause a log viewer to display a vertical bar that corresponds to the highlighted row. In one example implementation the correspondence between highlight row and a vertical bar can be time based. The date and time fields of row can determine the horizontal position on the x time axis of the vertical bar . A user s unselecting highlighted row by selecting another row in table view can cause the other row to be highlighted and can cause vertical bar to move to another position on the x time axis corresponding to the other row.

In another example implementation a user can select a row in tabular display by moving vertical bar in statistical chart . A user can click and drag the vertical display bar horizontally on the x time axis. A row in tabular display that has a date and time corresponding to a current position on vertical bar is highlighted. Continued movement of vertical bar can cause the table view to scroll. The movement of vertical bar and the scrolling of table view can be synchronous.

Linking a vertical bar to a highlighted log entry row can enable a user to efficiently identify problems in a heterogeneous system. For example a user can examine on the same screen call volume corresponding to a server stopped log entry to determine whether high call volume is a factor in an unexpected server shut down. For another example a user can choose to view log entries for a first software module in tabular display by making selections with control . The user can choose to view statistics for a second software module in statistical chart by making selections with control . As a result the user can view the correlation between different software modules such as application server activity with corresponding database activity at a particular time.

In the above examples time is used as a related value between a tabular display and a statistical chart . Other factors can be used as alternatives to time. For example event ID event number and event type can all be used as dimension x in place of time. The x and y axes can be configured to represent dimensions that can be retrieved from a plurality of log files.

Helper class can be a base class for specialized helper classes. Helper class can have subclasses that correspond to different types of software modules that are monitored. For example a DBHelper subclass can be a subclass of Helper . Admin helpers and can be instances of Helper class residing on servers and .

A DBHelper class can include a monitor object as an instance variable and a method Notify for notifying the monitor object. A monitor object is an object of a Monitor class . A Monitor class can be a component in an admin engine . An instance of DBHelper subclass can be part of or be run concurrent with a database server software module which is a client to Admin Server . DBHelper subclass can inherit public and protected methods of Helper base class . For example DBHelper subclass can inherit the Notify method from Helper base class . DBHelper subclass can alternatively overwrite the Notify method with a specific database related notification process. A DBHelper subclass can also include an instance variable localLogContent. The instance variable localLogContent can be a file handle that points to the actual log file for a database software module. The instance variable localLogContent can alternatively be a string that maps to the last log file entry.

In some example implementations DBHelper class can contain a private FormatContent method. The FormatContent method can be invoked during notification. A DBMonitor class thus retrieves the value of log file entries that have already been formatted to a unified format. A Notify method in DBHelper class can invoke the private method FormatContent to format the log files or log file entries in instance variable localLogContent. The Notify method can invoke a SetLogContent method in a monitor instance to submit log content to a Monitor object.

Base class Monitor can have subclasses that correspond to different plug ins on a server. For example a DBMonitor subclass can be a subclass of Monitor . An instance of DBMonitor class can reside on an Admin Server . DBMonitor subclass can inherit public and protected methods of Monitor base class . DBMonitor subclass can have a SetLogContent method which saves log content to an instance variable LogContent. An instance of DBMonitor class can reside on a computer different from a computer where an instance of DBHelper class resides. In such cases connection between the two computers can be initialized before Notify method can invoke SetLogContent method . If the SetLogContent method has been invoked by the Notify method in an instance of a Helper which was in turn invoked by GetLog method proper connections between will have been properly established already by the Notify method . To guarantee that only Notify method can invoke Update method and that only Update method can invoke SetLogContent method both SetLogContent method and Update method can be made protected methods and Monitor class can be made into a friend class of Helper class .

In some example implementations DBMonitor class can contain a caching method which stores retrieved log files a cache in the log files original format on an Admin Server . The retrieved log files can be formatted at view time. In some other example implementations the retrieved log files can be saved in a database or in a serialized object structure.

The term computer readable medium refers to any medium that participates in providing instructions to a processor for execution including without limitation non volatile media e.g. optical or magnetic disks volatile media e.g. memory and transmission media. Transmission media includes without limitation coaxial cables copper wire and fiber optics.

The computer readable medium further includes an operating system e.g. Mac OS server Windows NT server a network communication module Web Publishing Core e.g. Apache HTTP Server with customized DSO module an Application Server e.g. FileMaker Pro Database Server e.g. MySQL and Admin Server . The operating system can be multi user multiprocessing multitasking multithreading real time etc. The operating system performs basic tasks including but not limited to recognizing input from and providing output to the devices keeping track and managing files and directories on computer readable mediums e.g. memory or a storage device controlling peripheral devices and managing traffic on the one or more communication channels . The network communications module includes various components for establishing and maintaining network connections e.g. software for implementing communication protocols such as TCP IP HTTP etc. .

The architecture is one example of a suitable architecture for hosting a browser application having audio controls. Other architectures are possible which include more or fewer components. The architecture can be included in any device capable of hosting a database management system. The architecture can be implemented in a parallel processing or peer to peer infrastructure or on a single device with one or more processors. Software can include multiple software components or can be a single body of code.

The described features can be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from and to transmit data and instructions to a data storage system at least one input device and at least one output device. A computer program is a set of instructions that can be used directly or indirectly in a computer to perform a certain activity or bring about a certain result. A computer program can be written in any form of programming language e.g. Objective C Java including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment.

Suitable processors for the execution of a program of instructions include by way of example both general and special purpose microprocessors and the sole processor or one of multiple processors or cores of any kind of computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memories for storing instructions and data. Generally a computer will also include or be operatively coupled to communicate with one or more mass storage devices for storing data files such devices include magnetic disks such as internal hard disks and removable disks magneto optical disks and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices such as EPROM EEPROM and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in ASICs application specific integrated circuits .

To provide for interaction with a user the features can be implemented on a computer having a display device such as a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to the computer.

The features can be implemented in a computer system that includes a back end component such as a data server or that includes a middleware component such as an application server or an Internet server or that includes a front end component such as a client computer having a graphical user interface or an Internet browser or any combination of them. The components of the system can be connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include e.g. a LAN a WAN and the computers and networks forming the Internet.

The computer system can include clients and servers. A client and server are generally remote from each other and typically interact through a network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

A number of implementations of the invention have been described. Nevertheless it will be understood that various modifications can be made without departing from the spirit and scope of the invention. Accordingly other implementations are within the scope of the following claims.

For example in receiving a first log file in step precedes receiving a second log file in step . It should be noted that the order of receiving log files can be arbitrary. Receiving a first log file in step can occur concurrently with or after receiving a second log file in step . Furthermore the terms first log file and second log file are used for illustrative purposes. An arbitrary number of log files in an arbitrary number of log file formats can be supported by the method computer program product and system.

For another example in data columns are arranged in the order of Date Module Type ID and Description. It should be noted that the data columns can be arranged in any order. Further a table view can contain more or fewer columns than what are shown in the examples.

