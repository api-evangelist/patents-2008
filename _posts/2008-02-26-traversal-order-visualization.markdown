---

title: Traversal order visualization
abstract: In one example embodiment, a system and method is illustrated that includes retrieving a document having a plurality of input mechanisms to receive input from a user. Further, the system and method may include determining an input ordering relating to the plurality of input mechanisms. Additionally, the system and method may include in conjunction with a display of the document, dynamically displaying a visual indication of the input order relating to the plurality of input mechanisms. The system and method may include retrieving a document including a plurality of text fields. In addition, determining a reading order relating to the plurality of text fields. Moreover, in conjunction with a display of the document, dynamically displaying a visual indication of the reading order relating to the plurality of text fields.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08010577&OS=08010577&RS=08010577
owner: Adobe Systems Incorporated
number: 08010577
owner_city: San Jose
owner_country: US
publication_date: 20080226
---
A portion of the disclosure of this document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent files or records but otherwise reserves all copyright rights whatsoever. The following notice applies to the software data and or screenshots that may be illustrated below and in the drawings that form a part of this document Copyright 2008 Adobe Systems Incorporated. All Rights Reserved.

The present application relates generally to the technical field of algorithms and programming and in one specific example the visual representation of a traversal order.

An eXtensible Markup Language XML is a general purpose markup language. In some cases families of XML based specifications have been developed to perform a number of functions relating to the sharing of structured data. These families include the XML Forms Architecture XFA . XFA may be used in conjunction with for example the Document Object Model DOM to generate a structure representing a document. These documents may be text documents such as online documents containing fields that a user may traverse.

In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of an example embodiment of the present invention. It may be evident however to one skilled in the art that the present invention will be practiced without these specific details.

In some example embodiments a system and method is shown that allows a user to determine whether the traversal order for a document is correct. This determination may be made by the user using an input device such as a mouse and associated cursor to move through the document observing a sequence of arrows denoting a traversal order. This input device may also be a light pen touch screen or other suitable input device. The document may be composed of a number of forms sub forms and fields e.g. collectively input mechanisms . This document may be a Hyper Text Markup Language HTML or XML based document. A field may include an object or widget such as for example a list box button radio button or fillable text box. Using XFA and DOM these forms sub forms and fields may be represented in a tree structure. A tree structure may be a data structure representing a simple and connected acyclic graph. This tree structure may represent the forms sub forms and fields as nodes. In some example embodiments only the nodes surrounding the node upon which the cursor is hovering e.g. the node having the focus of the cursor have their traversal visually shown. In some example embodiments the tree may reflect the structural information associated with a document.

Some example embodiments may include the presenting of an arrow for each traversal between a form sub form or fields in a document. This arrow may appear visually to a user as rendered by an Integrated Development Environment IDE or document viewer. The traversal order of a plurality of these arrows may be dictated by a document designer. In some example embodiments this arrow serves as a visual representation of a traversal. In other example embodiments another visual representation of a traversal may be implemented such as a line highlight a segmented line or some other suitable visual representation of a traversal. An individual traversal that is part of a traversal order may be a property of a node in a tree structure that indicates related nodes for traversal purposes. Traversal can point to multiple nodes for example first or next. In some example embodiments a single or multiple traversal paths may be utilized. A traversal order is the path through the forms sub forms or fields of a document as executed through the use of an input device. For example a traversal order may be followed where a user executes a Tab command from a keyboard to traverse through the fields of an online document. In some example embodiments the arrow may be a visual indication of the input order.

In some example embodiments a traversal order may be a reading order. A reading order may be the sequence in which static text fields are read by for example a screen reader application. A screen reader application may be a software application that attempts to identify and interpret what is being displayed on a computer screen. Some well known screen reader applications include the Job Access With Speech JAWS screen reader and the Linux Screen Reader LSR . One or more visual representations of a traversal in the form of an arrow may reflect this reading order.

In some example embodiments the system and method may provide the user with certain indicator numbers as to the traversal order and the forms sub forms and fields associated with the traversal order. For example a show tab order mode may be implemented wherein an indicator number is presented and visually associated with the form sub form or field. This indicator number may appear at the top right corner of the form sub form or field as it appears in the document. Some other suitable position such as the top left corner may also be used. In some example embodiments this indicator number may be a visual indication of the input order.

In some example embodiments the previously referenced XFA technology may be utilized to display a traversal order for a document. XFA may be used to define a traversal property which indicates related nodes for the purpose of traversing through the nodes in sequence. For example using XFA three fields Field1 Field2 and Field3 may be defined as part of a document. Field1 might have a next traversal that targets Field2 which would have a traversal that targets Field3. The traversal order in this example may be Field1 Field2 Field3.

In some example embodiments when the user places the mouse cursor over a node the node may be temporarily highlighted to indicate to the user which node the cursor is over. Further when in show tab order mode this highlight is extended to present an extra highlight over the hovered node and to include the traversal arrows. Additionally when show tab order is enabled and the user hovers over a node e.g. a target node the traversal order for the document may be generated e.g. a list of nodes in traversal order and this order is walked using an interator until the hovered node is found. The iteration may then be backed up 1 or 2 nodes e.g. depending on whether the target node is at the front of the list 1 traversal from the front 2 traversals from the front etc. and the arrow presentation may begin. In some example embodiments the traversal order may be walked recursively until the hover node is found.

In some example embodiments arrow presenting involves calculating the location of the indicator number for the current node calculating the location of the indicator number for the next node in traversal sequence and presenting a line and an arrowhead rotated to the angle of the line. When the cursor moves off the currently hovered node the hovered node may be or ed e.g. a logical union U operation may be executed with the surrounding nodes and may be invalidated so the arrows are no longer visually represented.

The traverse order may be shown through using some type of document authoring tool. This document authoring tool e.g. a design IDE may include Adobe Systems Inc. s LIVECYCLE DESIGNER tool. This document authoring tool may work in conjunction with a document server application such as Adobe Systems Inc. s LIVECYCLE FORM SERVER application. In one example embodiment a document designer may generate a traversal order for a document and its associated forms sub forms and fields. This traversal order may be associated with the document stored by a document server for future use.

In some example embodiments the computer system may include an location engine to identify location input that includes a location of the input from the user with respect to a first input mechanism the location associated with a portion of the document. This computer system may also include a node retriever to retrieve next node settings that includes a number of traversals along a data structure in traversal order the first input mechanism included in the data structure in traversal order. Further the computer system may include a mapping engine to map the location input to a target node in a path the target node in the path included in the data structure in traversal order and identified by the input from the user with respect to the first input mechanism. A traversal engine is also shown to traverse the data structure in traversal order based upon the next node settings to start at the target node. A display is shown to display the visual indication of the input order from the target node to a next node in the data structure in traversal order. In some example embodiments the display may also be used to display the document having a plurality of input mechanisms. Further an input detection engine may be used to detect a user action with respect to the plurality of input mechanisms. User actions may be hovering on a field contained in a document. Additionally the display may be used to display the visual indication of the input order relating to the plurality of input mechanisms.

Some example embodiments may include the computer system includes various blocks to be used to facilitate the operation of a screen reader. In some example embodiments these blocks may be used to facilitate the reading of text fields without the use of a screen reader. A retriever is shown that retrieves a document that includes a plurality of text fields. A reading order determination engine is illustrated that determines a reading order that relates to the plurality of text fields. A dynamic display engine is shown to in conjunction with a display of the document dynamically display a visual indication of the reading order that relates to the plurality of text fields. These text fields may be static text fields.

In some example embodiments an XML representation of various fields and traversals between fields is utilized to generate the arrows collectively illustrating a traversal order within a document. This XML representation may be created by for example a document designer using a design IDE . Further this XML representation may be included as part of the traversal order for a document . Additionally this XML representation may be retrieved through the execution of operation . The following XML representation illustrates not only nodes as sub forms but also fields as child nodes. These fields may have traversal nodes as children. This XML representation is illustrated as follows 

This XML representation may be parsed by the operation to determine a traversal order. Here for example the XML representation shows a traversal order represented as Text Field 1 Text Field 2. These text fields are child nodes of a sub form called form1.

In some example embodiments once the target node is identified and the next node setting retrieved a path will be iteratively walked or traversed. This path may be represented as a list of nodes in traversal order. Each link between the nodes in the path may be visually rendered as an arrow denoting a traversal between a form sub form or field. Collectively these traversals may be considered as a traversal order. This traversal order may be backwards in terms of traversing the path from the target node to a previous node in the list of nodes in traversal order. Some example embodiments may include traversing forward in the list of nodes in traversal order from the target node to nodes after the target node. Some combination of backward and forward traversals may also be implemented. An operation may be executed that may present a line on a document as rendered from a current node to the next node in the path. This line may have an arrowhead rotated to the angle of the line. A decisional operation may be executed that determines whether a next node exists in the path. This next node determination may be based in part upon the next node setting. In cases where decisional operation is evaluated as true the previously shown operation may be re executed. In cases where decisional operation is evaluated as false a further decisional operation may be executed. This decisional operation may determine whether or not the location input is still mapped to the target node. In cases where decisional operation is evaluated as false the operation is re executed. The determination of the next node by decisional operation may be based upon whether or not any nodes remain in the path that the target node is a part of during the course of the traversal of the path. In some example cases the next node determination by decisional operation may be based upon whether or not there are remaining nodes to be traversed as defined by the next node setting.

In some example embodiments the operation may use a pixel locations of a portion of a field sub form or form as the basis to the present the line on the document as rendered. For example when executed the operation may determine the pixel location of a first portion of a first field sub form or form corresponding to a first field sub form or field existing as part of the list of nodes. This operation when executed may also determine the pixel location of a first portion of a second field sub form or form corresponding to a second field sub form or field existing as part of the list of nodes. Where a traversal exists between the first field sub form or field and the second field sub form or form a line may be presented from the first portion of the first field sub form or form to the first portion of the second form sub form or form.

In some example embodiments also shown as a part of this tree structure is a path . A plurality of traversals are shown as a part of this path that collectively represent a traversal order. For example a traversal connects the node and node . Further a traversal connects the node and node . A traversal connects the node and . A traversal connects the node and . Using this path a list of nodes in traversal order may be generated showing a list of nodes e.g. nodes through in their traversal order. This list of nodes in traversal order may be referenced elsewhere as a second data structure or a data structure in traversal order.

In some example embodiments the various traversals shown in e.g. traversals through reflect field traversals between fields in a document. The traversals and reflect the initial path traversal from a target node as hovered on by for example a cursor to the beginning of a list of nodes in traversal order . The number of initial path traversals may be dictated by the next node setting. For example the node setting may dictate that the two previous nodes in the traversal order be rendered as arrows in the document. The traversals through may represent field traversals in a document as illustrated by visually represented arrows. Further this cursor may be construed to be identifying a location input.

Some embodiments may include the various databases e.g. document database and document database being relational databases or in some cases OLAP based databases. In the case of relational databases various tables of data are created and data is inserted into and or selected from these tables using a Structured Query Language SQL or some other database query language known in the art. In the case of OLAP databases one or more multi dimensional cubes or hyper cubes containing multidimensional data from which data is selected from or inserted into using a Multidimensional Expression MDX language may be implemented. In the case of a database using tables and SQL a database application such as for example MYSQL MICROSOFT SQL SERVER ORACLE 8I 10G or some other suitable database application may be used to manage the data. In this the case of a database using cubes and MDX a database using Multidimensional On Line Analytic Processing MOLAP Relational On Line Analytic Processing ROLAP Hybrid Online Analytic Processing HOLAP or some other suitable database application may be used to manage the data. The tables or cubes made up of tables in the case of for example ROLAP are organized into an RDS or Object Relational Data Schema ORDS as is known in the art. These schemas may be normalized using certain normalization algorithms so as to avoid abnormalities such as non additive joins and other problems. Additionally these normalization algorithms may include Boyce Codd Normal Form or some other normalization or optimization algorithm known in the art.

Some example embodiments may include the above illustrated operations being written as one or more software components. These components and the functionality associated with each may be used by client server or peer computer systems. These various components can be implemented into the system on an as needed basis. These components may be written in an object oriented computer language such that a component oriented or object oriented programming technique can be implemented using a Visual Component Library VCL Component Library for Cross Platform CLX Java Beans JB Enterprise Java Beans EJB Component Object Model COM or Distributed Component Object Model DCOM or other suitable technique. These components are linked to other components via various Application Programming Interfaces APIs and then compiled into one complete server and or client application. The method for using components in the building of client and server applications is well known in the art. Further these components may be linked together via various distributed programming protocols as distributed computing components.

Some example embodiments may include remote procedure calls being used to implement one or more of the above illustrated components across a distributed programming environment. For example a logic level may reside on a first computer system that is located remotely from a second computer system containing an interface level e.g. a GUI . These first and second computer systems can be configured in a server client peer to peer or some other configuration. The various levels can be written using the above illustrated component design principles and can be written in the same programming language or in different programming languages. Various protocols may be implemented to enable these various levels and the components contained therein to communicate regardless of the programming language used to write these components. For example an operation written in C using Common Object Request Broker Architecture CORBA or Simple Object Access Protocol SOAP can communicate with another remote module written in Java . Suitable protocols include SOAP CORBA and other protocols well known in the art.

Some embodiments may utilize the OSI model or TCP IP protocol stack model for defining the protocols used by a network to transmit data. In applying these models a system of data transmission between a server and client or between peer computer systems is illustrated as a series of roughly five layers comprising an application layer a transport layer a network layer a data link layer and a physical layer. In the case of software having a three tier architecture the various tiers e.g. the interface logic and storage tiers reside on the application layer of the TCP IP protocol stack. In an example implementation using the TCP IP protocol stack model data from an application residing at the application layer is loaded into the data load field of a TCP segment residing at the transport layer. This TCP segment also contains port information for a recipient software application residing remotely. This TCP segment is loaded into the data load field of an IP datagram residing at the network layer. Next this IP datagram is loaded into a frame residing at the data link layer. This frame is then encoded at the physical layer and the data transmitted over a network such as an internet Local Area Network LAN Wide Area Network WAN or some other suitable network. In some cases internet refers to a network of networks. These networks may use a variety of protocols for the exchange of data including the aforementioned TCP IP or some other suitable protocol. These networks may be organized within a variety of topologies e.g. a star topology or structures.

The example computer system includes a processor e.g. a CPU a Graphics Processing Unit GPU or both a main memory and a static memory which communicate with each other via a bus . The computer system may further include a video display unit e.g. a Liquid Crystal Display LCD or a Cathode Ray Tube CRT . The computer system also includes an alphanumeric input device e.g. a keyboard a UI cursor controller e.g. a mouse a drive unit a signal generation device e.g. a speaker and a network interface device e.g. a transmitter .

The disk drive unit includes a machine readable medium on which is stored one or more sets of instructions and data structures e.g. software embodying or used by any one or more of the methodologies or functions illustrated herein. The software instructions may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processor also constituting machine readable media.

The instructions may further be transmitted or received over a network via the network interface device using any one of a number of well known transfer protocols e.g. Hyper Text Transfer Protocol HTTP Secure Hyper Text Transfer Protocol HTTPS .

The term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies illustrated herein. The term machine readable medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media and carrier wave signals.

In some example embodiments a system and method is shown that visually represents the traversal order between fields sub forms and forms within a document. This document may be written in HTML XML or some other suitable markup language. This visual representation of the traversal order may assist a document designer user or other suitable person in understanding the traversal order for filling in data fields within a document. This document may be an online form or other document having data fields that may be filled.

The Abstract of the Disclosure is provided to comply with 37 C.F.R. 1.72 b requiring an abstract that will allow the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition in the foregoing Detailed Description it can be seen that various features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description with each claim standing on its own as a separate embodiment.

