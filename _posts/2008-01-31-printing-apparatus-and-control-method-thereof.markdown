---

title: Printing apparatus and control method thereof
abstract: A printing apparatus manages identifiers of accounting destinations of print jobs. With a Web browser, a client can set update settings (update rules) of an identifier list saved in an identifier saving unit (of a device. An identifier update unit obtains an identifier list from another device, and updates the identifier list by adding or synchronizing identifiers included in the obtained identifier list in accordance with the update settings.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07877427&OS=07877427&RS=07877427
owner: Canon Kabushiki Kaisha
number: 07877427
owner_city: Tokyo
owner_country: JP
publication_date: 20080131
---
The present invention relates to a printing apparatus included in for example a printer copying machine multi function peripheral MFP and the like and a control method thereof.

In recent years some copying machines have not only a function of copying documents but also a function of executing a print job received from an external client. Furthermore some copying machines have a function of digitally transmitting a scanned document to an external device using an e mail or file transfer function. A copying machine having these functions is called an MFP Multi Function Peripheral .

When peripheral devices such as a copying machine MFP printer and the like and especially an output device are used one may ask a third party for a use charge of the peripheral device. For example this is the case in which an advertising agency or law firm asks a customer for an actual cost of a work which was done based on a request from the customer.

Conventionally an accounting system which calculates an actual cost is available for example see Japanese Patent Laid Open No. 2003 316458 . In Japanese Patent Laid Open No. 2003 316458 an actual cost is calculated as follows. 1 A server manages a correspondence table of user IDs and account IDs of authorized accounting destinations and accounting information for each accounting account. Clients and peripheral devices can add delete and update a management table and accounting information.

 2 Prior to printing the client requests the server to issue a job ticket indicating authorization of printing. A job ticket issuance request includes the user ID and account ID of an accounting destination.

 3 The server which received the job ticket issuance request looks up the correspondence table to check whether or not to authorize accounting for an account of the accounting destination. If accounting is authorized the server issues a job ticket to the client.

 5 The peripheral device confirms if the job ticket is an authentic one issued by the server. If the job ticket is an authentic one the peripheral device executes printing and charges to the account ID described in the job ticket.

However in the aforementioned related art the server which manages the account IDs of accounting destinations and the correspondence table and issues a job ticket to each client need be installed. In order to install and maintain the server labor for management and electricity and seat costs are required.

The account IDs and correspondence table managed by the server require maintenance and repair according to addition deletion or the like of accounting destinations thus requiring labor for maintenance.

The present invention has been made in consideration of the aforementioned related art and has as its object to obviate the need for installation of a server and to reduce maintenance cost required for accounting management of print jobs by facilitating management of accounting destinations.

In order to achieve the above object the present invention comprises the following arrangement. That is there is provided a printing apparatus connected to a network comprising 

a storage configured to store an identifier list in which identifiers of layers for identifying accounting destinations to be charged for job execution are registered associated with the layers respectively 

an obtaining unit configured to obtain an identifier list from an external apparatus via the network 

an updating unit configured to update the stored identifier list stored in the storage based on the obtained identifier list obtained by the obtaining unit in accordance with an update rule and

a display configured to display a setting screen for setting the update rule designating a layer whose identifier is used to update the stored identifier list when the stored identifier list is updated 

wherein the updating unit updates the stored identifier list using the identifier contained in the obtained identifier list the identifier used to update the obtained identifier list being designated by the update rule set in the setting screen displayed by the display.

In order to achieve the above object the present invention further comprises the following arrangement. That is there is provided a method for controlling a printing apparatus comprising a storage for storing an identifier list in which identifiers of layers for identifying accounting destinations to be charged for job execution are registered associated with the layers respectively and connected to a network the method comprising 

an updating step of updating the stored identifier list stored in the storing step based on the obtained identifier list obtained in the obtaining step in accordance with an update rule and

a displaying step of displaying a setting screen for setting the update rule designating a layer whose identifier is used to update the stored identifier list when the stored identifier list is updated 

wherein in the updating step the stored identifier list is updated using the identifier contained in the obtained identifier list the identifier used to update the obtained identifier list being designated by the update rule set in the setting screen displayed in the displaying step.

In order to achieve the above object the present invention further comprises the following arrangement. That is there is provided a computer readable medium storing a computer program that causes a computer to perform a method for controlling a printing apparatus comprising a storage for storing an identifier list in which identifiers of layers for identifying accounting destinations to be charged for job execution are registered associated with the layers respectively and connected to a network the method comprising 

an updating step of updating the stored identifier list stored in the storing step based on the obtained identifier list obtained in the obtaining step in accordance with an update rule and

a displaying step of displaying a setting screen for setting the update rule designating a layer whose identifier is used to update the stored identifier list when the stored identifier list is updated 

wherein in the updating step the stored identifier list is updated using the identifier contained in the obtained identifier list the identifier used to update the obtained identifier list being designated by the update rule set in the setting screen displayed in the displaying step.

According to the present invention cost required for installation and maintenance of an accounting management system can be reduced and convenience can be improved.

Further features of the present invention will become apparent from the following description of exemplary embodiments with reference to the attached drawings.

One embodiment of the present invention will be described hereinafter with reference to the accompanying drawings. Referring to a device is a peripheral device including a printing apparatus such as a printer MFP or the like. A client PC is also called a client terminal and is a computer with which the user makes various operations printing and the like. A server is a computer which stores a variety of data. A device is also a peripheral device such as a printer MFP or the like. These devices are connected to each other via a network .

A server manages users of the network system and groups to which the users belong. The server saves a user device table which associates devices the use authorities of which are granted to respective users or groups with user names or group names. The user device table is transmitted to a device as a request source in response to a request from the device. When the user executes printing at the client PC the client PC requests the server to issue a print authorization ticket. If the request source client has an authority the server issues the print authorization ticket to the client PC . The client PC issues a print job to a device e.g. a printer together with this print authorization ticket. The device which received the print job refers to the print authorization ticket. If the user as the issuer of the print job is an authorized user the device executes the print job to perform printing and the like. In this embodiment no more explanation about authentication of the user authority will not be given.

At the client PC the user executes an application program to be simply referred to as an application hereinafter and instructs to print application data as needed. Upon issuing a print instruction the application issues a rendering instruction to an API Application Programming Interface provided by an OS Operating System . The OS calls a printer driver according to the issued rendering instruction.

Assume that the printer driver can add a software module to be simply referred to as add in hereinafter which provides a new function to original basic functions using a function called add in. In this case an identifier input add in is added. The identifier input add in is called from the printer driver at the beginning of printing e.g. when the printer driver receives the rendering instruction from the OS. The identifier input add in communicates with the device and acquires a list of identifiers saved in the device . The identifier input add in displays an identifier specifying dialog. The user can specify a desired identifier via the identifier specifying dialog. In this embodiment identifiers are classified into three layers and the user can specify an identifier which belongs to each layer. Furthermore the user can add or edit identifiers saved in the device via the identifier specifying dialog. Details will be described later.

The identifier input add in notifies the printer driver of the identifier specified by the user. The printer driver embeds the received identifier in print job data as an entity of a print job which has began to be generated upon calling the identifier input add in . shows an example of print job data. Referring to print job data includes authentication information identifier information and a body part . The authentication information is used to authenticate the authenticity of the print job in the device as a transmission destination of the print job. The identifier information is an identifier which is passed from the identifier input add in and is embedded. The body part is data which represents an image to be printed by the device and is for example PDL data or bitmap data. In the example of the body part stores PDL data. The client PC is also installed with an application program not shown Web browser and the like.

Upon reception of the print job data the device executes the print job and records its history information in a print job history recording unit . shows an example of history information of a print job to be referred to as a job history or log hereinafter . The job history shown in saves identifiers to in correspondence with a job ID of the print job in addition to print setting information such as the start and end times user name document name paper size and the like of the print job. The identifier is unique to e.g. a customer client as an accounting destination of the print job. The identifier indicates e.g. the contents matter or the like of the print job. The identifier indicates contents sub matter or the like formed by segmenting the contents indicated by the identifier . In this way the identifiers are hierarchized into three layers in this embodiment . A target indicated by these identifiers e.g. a customer is charged for the print job.

On the device a virtual machine is running and an identifier management application is further running on the virtual machine . Other applications can be added onto the virtual machine and applications on the virtual machine can be deleted. As an example of the virtual machine JavaVM of SUN MICROSYSTEMS U.S.A. is known.

The identifier management application includes a print job history collection unit identifier update unit print job history transmission unit and identifier saving unit D . The print job history collection unit monitors completion of a print job. Upon completion of the print job the unit obtains and saves a print job history from the print job history recording unit . The print job history transmission unit transmits print job histories collected by the print job history collection unit to the server based on settings by a system administrator. Note that the server is a simple file server and does not manage identifiers appended to print jobs. Focusing only on the present invention either the print job history recording unit or the print job history collection unit may save print job histories.

The identifier update unit periodically updates a list of identifiers to be referred to as an identifier list hereinafter based on the settings of the system administrator and saves the updated identifier list in the identifier saving unit D after updating. The update processing will be described later. Also a synchronization setting or the like required to synchronize the identifier list with other devices is saved in the identifier saving unit D . The identifier saving unit D also saves for example a cooperation device list required to specify devices as targets with which the identifier list is synchronized update rules of the specified cooperation device list and the like. That is the identifier saving unit D also includes a device saving unit for saving the cooperation device list and an update rule saving unit for saving the update rules.

The device client PC server and device are connected to the network and can communicate with each other. As a scheme for communications for example SOAP Simple Object Access Protocol is known. The SOAP is an information exchange protocol in a distributed environment. The SOAP uses XML eXtensible Markup Language for information description and TCP IP and HTTP for transmission.

In the device an HTTP server used for identifier settings to be described later different from maintenance of identifiers is implemented. The device further comprises saving means for saving pages not shown associated with URLs.

The device comprises the print job history recording unit . The print job history recording unit allows execution of processing that refers to job histories even when the identifier management application is not installed. For example a job history referred to from a remote UI can be made without the intervention of the identifier management application . Note that the remote UI is a device management Web server which makes device management using an HTTP server installed in an MFP e.g. the MFP . The print job history recording unit allows the client PC to display a device management page i.e. a print job history by connecting the device from the Web browser of the client PC.

The client PC server and copying machine are connected to each other via the LAN and exchange information via the LAN . The aforementioned configuration is merely an example of the system and a result collection client and printer driver other than the MFP in may all be implemented by a client computer or by some server computers. That is an interface between the components in may be a physical communication medium such as a CPU bus or the like or a logical interface for a message communication which is implemented by software. The aforementioned functional blocks may be implemented when a CPU executes programs or may be implemented by hardware circuits.

An operating system programs for communication control and engine control and the like are loaded onto the RAM and are executed by the CPU . An engine unit executes a print operation and image scanning operation under the control of the controller. A communication unit executes network communication control and allows communications with the client PC and server described above using . A user operation input output unit provides a user interface for interactive setting operations to the user. A system bus serves as a data path among the aforementioned components.

A print engine unit actually prints the image data stored in the image storage unit on a medium such as a print sheet or the like using a known print technique such as an electrophotography technique ink jet technique or the like. The print data interpreting unit image storage unit and print engine unit serve as a print execution unit that executes the print job.

Upon completion of execution of the print job the print job history recording unit records attributes of the print job such as the user name document name and the like stored in the print job management unit as an execution history of the print job i.e. a print job history in a nonvolatile recording medium as history saving means. The print job history also includes print results such as the number of pages the number of sheets color mode and the like printed by the print engine unit . The identifier management application exchanges information associated with maintenance management of identifiers with the client PC .

The sequence for selecting identifiers by the user in the aforementioned configuration will be described below. shows an example of an identifier specifying dialog displayed by the identifier input add in so as to make the user select identifiers to be appended to the print job. For example this dialog is displayed when an identifier specifying button is added to a UI of the printer driver as a result of addition of the identifier input add in and the user presses that button.

On a window shown in the user can specify identifiers classified into three layers in respective layers. Layer names are respectively client matter and sub matter . The user selects a desired identifier from each of list boxes to corresponding to the respective layers and presses an OK button upon completion of selection. The identifiers of the respective layers selected at that time are specified identifiers. The specified identifiers are appended to print jobs to be executed later until the identifiers to be specified are changed.

Upon pressing an edit button the identifier input add in shows an identifier edit dialog shown in . An identifier obtaining unit communicates with the device to obtain the identifier list saved in the identifier saving unit D . The obtained identifier list is saved in an identifier saving unit U . shows an example of the identifier list.

Each identifier information included in an identifier list includes a layer name indicating one of the three layers and an identifier. Furthermore the identifier information is associated with the name of a user who added or generated the identifier and a group name to which the user belongs. The identifier and items associated with the identifier in the identifier list will often be referred to as an identifier record hereinafter.

Display rules for determining which identifiers included in the identifier list are to be displayed as options on the identifier specifying dialog are obtained from the identifier saving unit D . For example examples of the display rules are 1 all identifiers saved in the identifier list are displayed 2 identifiers associated with a group which matches that of the operating user of those saved in the identifier list are displayed and 3 identifiers associated with the user name which matches the operating user of those saved in the identifier list are displayed. Also other rules are available. the user can select desired identifiers for respective layers from those which are displayed according to one of these rules.

The system administrator can determine the number of layers of identifiers the names of the layers components of each layers and display rules. This will be described later.

The identifier edit dialog shown in will be described below. The user can select a layer to be edited from a layer selection list box . An identifier list field displays identifiers registered in the selected layer in the form of a list. Upon pressing a delete button while a given identifier is selected the client PC communicates with the device and transmits a delete request message of the identifier selected on the identifier list field . Upon reception of the delete request the device deletes the corresponding identifier from the identifier saving unit D and returns a processing completion message. Deletion targets at not only the identifier but also a record of that identifier. That is the layer name group name and user name associated with the identifier are also deleted. Of course if the identifier list includes other items associated with the identifier these items are also deleted. This processing will be simply referred to as deletion of an identifier hereinafter. Upon completion of deletion the device transmits a processing completion message to the identifier input add in . Upon reception of the processing completion message the identifier input add in deletes that identifier from the identifier saving unit U of the client PC and updates display on the identifier list field accordingly.

Upon pressing an add button on the dialog the identifier input add in executes processing for adding a character string input to a new identifier text box as an identifier to the identifier list. The identifier input add in communicates with the device and transmits an add request message of the input identifier. shows an example of the add request message. As shown in the add request includes a layer name an identifier a name of an added user and a group name to which the user belongs. The add request message shown in has an XML format. A tag Insert indicates an add request. A tag name indicates an identifier to be added. A tag UserName indicates the user name who added the identifier. A tag GroupName indicates a group to which the user who added the identifier belongs. Although not described in detail here the users and groups are managed using a function provided by the OS.

Upon reception of the add request message the device additionally saves the identifier received at the same time in the identifier saving unit D . Then the device returns a processing completion message. Upon reception of the processing completion message the identifier input add in adds the identifier to the identifier saving unit U of the client PC and updates display of the identifier list accordingly.

Upon pressing an import button on the dialog the identifier input add in displays a dialog used to specify a file. Identifiers described in the file specified on the dialog can be added to the identifier list. The processing in this case is the same as that upon pressing the aforementioned add button. Note that the addition processing is repeated for all identifiers included in the specified file. Upon pressing an OK button the dialog closes.

The system administrator specifies a URL of the identifier setting dialog provided by the HTTP server of the device using the Web browser . In response to this operation the HTTP server returns data of the specified page to the client PC . The Web browser displays that page i.e. an identifier setting dialog .

The identifier setting dialog comprises three buttons i.e. a basic setting button search setting button and collaboration setting button . Upon pressing one of these buttons a URL associated with the pressed button is transmitted to the device and a returned dialog for a setting corresponding to the pressed button is displayed.

A check box is used to specify whether or not to conduct an address specified search. A device which is set to conduct an address specified search adds a device specified by an address specified list to the cooperation device list.

A check box is used to specify whether or not to conduct a broadcast search. A device which is set to conduct a broadcast search sends a transmission packet to a broadcast address and adds a device which returns a response to the cooperation device list.

A check box is used to specify a device to be precluded. A device specified as a device to be precluded does not include a device described in an address preclusion list in the cooperation device list. If such device is included in the cooperation device list it is deleted.

A radio button is used to determine the update timing of the device list. When the user selects a periodic time interval a device search is conducted at a time interval specified in a text box to update the cooperation device list. When the user selects after idling and when an idle state in which there is no print job to be processed by devices continues for a time period or longer specified in a text box the cooperation device list is updated. The search setting information indicating the search settings specified on the user interface shown in is transmitted to the device and is saved in the identifier saving unit D .

Upon pressing the add button a policy addition dialog shown in is read out from the device and is displayed. A text box is used to specify the name of this policy. A list box is used to specify a target layer. Radio buttons are used to select a condition. When the user selects match of IP address a match between the IP address specified in the right text box with that of a target device is determined as a policy match condition. An IP address to be specified may be a part of an IP address. In this case a partial match is checked. When the user selects match of group a match between a group associated with an identifier matches that specified by the condition is determined as a match condition. When the user selects match of user a match between a user associated with an identifier and that specified as a condition is determined as a match condition. Radio buttons are used to select whether an identifier is additionally or synchronously updated to the identifier list. In case of additional update an identifier of the target device is inserted into the identifier list. In case of synchronous update the identifier list of the self device is adjusted to the target device with reference to the identifier list of the target device. Upon pressing an OK button a policy is added based on the aforementioned settings. The added or changed policy is saved in the identifier saving unit D as policy information. Upon pressing a cancel button the processing is canceled to close the dialog. The number of cooperation policies is not limited to one but a plurality of pieces of different policy information may be used as shown in the policy list of . Hence policy information specified by one policy name will be referred to as one set of policy information hereinafter. shows an example of three sets of policy information.

Note that a plurality of sets of policy information can be set in this example. However if a plurality of sets of policy information are set for each layer the settings become troublesome. Hence it is desirable to set one set of policy information for each layer.

The search setting information includes a list search target of addresses of devices as search targets. When a broadcast search is specified a specific code e.g. null or the like is set in this item. The search setting information also includes a list device to be precluded of addresses of devices to be precluded from a search. Even when a broadcast search is selected devices having addresses included in the devices to be precluded are precluded from targets to be updated. The search setting information further includes a search time interval of cooperation devices. The search target saves IP addresses if the specified condition is match of address group names if it is match of group or user names if it is match of user name .

The cooperation policy setting information includes zero or one or more sets of policy information . Each set of policy information includes a policy name target layer update condition and action . The target layer indicates the layer name of identifiers to be updated. The update condition is information used to specify the condition specified by one of the radio buttons . The action includes a flag or the like indicating synchronization or addition.

The update operation of the identifier list by the identifier update unit will be described below with reference to the flowchart of . The processing shown in is executed at a time interval set in the update time interval .

In step S the identifier update unit obtains the cooperation policy setting information . The identifier update unit classifies respective sets of policy information included in the cooperation policy setting information to those which have additional update as their action and those which have synchronous update as their action with reference to their action settings . The identifier update unit respectively stores the classified sets of policy information in an addition policy list and synchronization policy list.

In step S the identifier update unit obtains a list device list of IP addresses of other devices serving as cooperation partners. The device list is generated based on the search setting information . The device list is written with IP addresses or an IP address range included in the search target in case of the address specified search or the broadcast address in case of the broadcast search. When the devices to be precluded are specified their IP addresses are precluded from the search targets. However when the broadcast search is set the identifier lists of devices to be precluded may be deleted from collected identifier lists. The device list is generated at a time interval specified in the search time interval asynchronously from the processing in .

In step S the identifier update unit obtains a list user list of user names associated with corresponding group names for which the use of respective devices are authorized. The identifier update unit obtains this user list by sending a request to the server in this example. The user list describes the user names and their groups in correspondence with addresses of devices.

In step S the identifier update unit obtains one user name and corresponding group name from the user list to be referred to as an interest user hereinafter . If all interest users have been obtained the processing ends. Note that executing processing user by user in turn will be referred to as a scan hereinafter.

In step S the identifier update unit obtains one set of policy information from the addition policy list generated in step S to be referred to as interest policy information hereinafter . If all sets of interest policy information have already been obtained the process advances to step S. Otherwise the process advances to step S. Note that executing processing set by set in turn will be referred to as a scan hereinafter.

In step S the identifier update unit sequentially reads one IP address from the device list obtained in step S to be referred to as an interest IP address or interest device . If all interest IP addresses or devices have already been read the process advances to step S. Otherwise the process advances to step S.

In step S the identifier update unit communicates with the interest device read in step S to obtain the identifier list saved in the interest device.

In step S the identifier update unit read one identifier from the identifier list obtained in step S to be referred to as an interest identifier hereinafter . If all interest identifiers have already been read the process advances to step S.

The identifier update unit checks in step S if the layer of the interest identifier matches that specified by the target layer of the interest policy and the interest device or user matches the condition specified by the update condition included in the interest policy information. For example when match of user name is specified as the update condition if the user associated with the interest identifier matches the user name specified by the update condition the unit determines that the condition is met. When match of group is specified as the update condition if the group associated with the interest identifier matches that specified by the update condition the unit determines that the condition is met. When match of IP address is specified as the update condition if the IP address of the interest device matches that specified by the condition the unit determines that the condition is met. If the condition is met the process returns to step S otherwise the process advances to step S.

In step S the identifier update unit adds the interest identifier read in step S to the self identifier list .

On the other hand in step S the identifier update unit reads one set of policy information from the synchronization policy list classified in step S as new interest policy information. If all sets of interest policy information have already been read the processing ends.

In step S the interest policy information obtains an identifier list from a target device. If the update condition is match of IP address the target device is a device having the specified IP address. If the update condition is match of group the target device is a device associated with the specified group name in the user list. If the update condition is match of user name the target device is a device associated with the specified user name in the user list. If there are a plurality of associated devices the identifier update unit obtains information indicating use records of devices by the respective users or groups. The unit identifier update selects a device with a highest frequency of use as the target device. Of course the identifier update unit may obtain an identifier list from a device having an IP address which is independently input and saved as the target device.

In step S the identifier update unit deletes from the identifier list all identifiers which belong to the layer to be referred to as a layer to be synchronized hereinafter specified by the target layer of the interest policy. In step S the identifier update unit adds identifiers of the layer to be synchronized included in the identifier list obtained in step S to the identifier list . That is the identifier update unit replaces the identifiers which are included in the identifier list and belong to the layer to be synchronized by those of the layer to be synchronized which are included in the identifier list obtained in step S.

Note that step S is the end checking process of the loop processing for adding an identifier to the identifier list while changing the interest user. With this loop processing an identifier added by the device can be used by other devices. More specifically step S is the processing for adding when user of the device is selected as the interest user and if an identifier list obtained from another device as a cooperation partner includes an identifier X of user the identifier X to the identifier list of user .

With the aforementioned sequence the identifier list can be updated. As described above each device holds the identifier list and provides identifiers to the client. There are many network systems to which a plurality of devices are connected. In this embodiment a plurality of devices exchange identifier lists with each other to update their identifier lists thus sharing the identifier lists among the devices. Upon updating a target device can be specified. For this reason when a device group which is authorized to be used for each user is set that device group is set as that in which identifier lists are exchanged and the identifier list can be shared in that group.

Note that the device not only executes the sequence shown in but also becomes a communication partner of the sequence of which is executed by another device. That is when the device is required to send the identifier list or user list from another device it transmits the identifier list or user list to the device as the request source in response to that request.

Also the checking process in step S in may be omitted. In this case if end is determined in step S the overall identifier update processing ends.

The programs of the aforementioned computers and and the MFPs and according to the present invention may be executed by the computers and MFPs by externally installed programs. In this case these programs are supplied using storage media. Alternatively an information group including programs are supplied by loading it from an external storage medium to the computers and MFPs via a network. The present invention can be applied to either case.

Note that the present invention may be applied to a system or an integrated apparatus configured by a plurality of devices e.g. a scanner printer network storage and the like or an apparatus including a single device.

The objects of the invention are also achieved by executing a program code of software that implements the functions of the aforementioned embodiments 1 by supplying a storage medium which records the program code to a system or apparatus or 2 by reading out and executing the program code stored in the storage medium by a computer or a CPU or MPU of that system or apparatus. In this case the program code itself read out from the storage medium implements the novel functions of the present invention and the storage medium which stores the program code constitutes the present invention.

As the storage medium used to supply the program code for example a floppy Disk hard disk optical disk magneto optical disk CD ROM CD R magnetic tape nonvolatile memory card ROM and the like can be used.

The functions of the aforementioned embodiments may be implemented when the computer executes the readout program code.

Alternatively the functions of the aforementioned embodiments may be implemented by some or all of actual processes executed by an OS running on the computer according to instructions of the program code.

Furthermore the functions of the aforementioned embodiments may be implemented in the following forms.

 1 The program code read out from the storage medium is written in a memory equipped on a function expansion board or function expansion unit which is inserted in or connected to the computer.

 2 After the program code is written in the memory a CPU or the like equipped on the function expansion board or unit executes some or all of actual processes according to instructions of the program code.

Note that the present invention can also be applied to a case in which from the storage medium which records the program code of software that implements the functions of the aforementioned embodiments that program is delivered to a requester via a communication line such as the Internet or the like.

While the present invention has been described with reference to exemplary embodiments it is to be understood that the invention is not limited to the disclosed exemplary embodiments. The scope of the following claims is to be accorded the broadest interpretation so as to encompass all such modifications and equivalent structures and functions.

This application claims the benefit of Japanese Patent Application No. 2007 28446 filed Feb. 7 2007 which is hereby incorporated by reference herein in its entirety.

