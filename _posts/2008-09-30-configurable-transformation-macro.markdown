---

title: Configurable transformation macro
abstract: Transforming source input data using a configurable transformation macro is provided. A transformation macro script is executed by a configurable transformation macro. One or more transformation templates are read by the transformation macro script. Input data is read by the transformation macro script from one or more source files. Logical processing of the transformation macro script and the one or more transformation templates is performed by the configurable transformation macro. It is determined whether constraints generated by the logical processing of the transformation macro script and the one or more transformation templates are valid. In response to determining that the constraints generated by the logical processing of the transformation macro script and the one or more transformation templates are valid, it is determined whether transformation of the input data is complete. In response to determining that the transformation of the input data is complete, a transformation output is outputted.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08209341&OS=08209341&RS=08209341
owner: International Business Machines Corporation
number: 08209341
owner_city: Armonk
owner_country: US
publication_date: 20080930
---
The present invention relates generally to an improved data processing system and more specifically to a computer implemented method system and computer usable program code for transforming source input data from one data or object format to another data or object format using a configurable transformation macro.

Today transforming data files from one format to another is commonplace in the context of data stored in an Extensible Markup Language XML format. This is in part because the XML data format has experienced widespread use. XML is quickly becoming the de facto standard for exchanging corporate data via structured documents whether internally with business partners or via public applications across the Internet. With the proliferation of data stored in XML formats the transformation of such data into formats that are recognized by diverse applications has also become widespread.

Currently Extensible Stylesheet Language Transformations XSLT is an industrial standard for translating XML documents to other formats. XSLT is a translating language that uses programming type syntaxes which are quite complex. Also XSLT does not recursively read data to initiate a data transform or to trigger an action. Moreover XSLT only reads XML documents. Further XSLT developers are required to do a lot of coding to allow the reading of multiple XML documents and to create complex logic required for complex XML document transformation. Furthermore XSLT developers are required to redo the entire cycle again whenever a new process or business logic is involved.

According to one embodiment of the present invention source input data is transformed using a configurable transformation macro. A transformation macro script is executed by a configurable transformation macro. One or more transformation templates are read by the transformation macro script. Input data is read by the transformation macro script from one or more source files. Logical processing of the transformation macro script and the one or more transformation templates is performed by the configurable transformation macro. It is determined whether constraints generated by the logical processing of the transformation macro script and the one or more transformation templates are valid. In response to determining that the constraints generated by the logical processing of the transformation macro script and the one or more transformation templates are valid it is determined whether transformation of the input data is complete. In response to determining that the transformation of the input data is complete a transformation output is outputted.

As will be appreciated by one skilled in the art the present invention may be embodied as a system method or computer program product. Accordingly the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium.

Any combination of one or more computer usable or computer readable medium s may be utilized. The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CDROM an optical storage device a transmission media such as those supporting the Internet or an intranet or a magnetic storage device. Note that the computer usable or computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory. In the context of this document a computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer usable medium may include a propagated data signal with the computer usable program code embodied therewith either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc.

Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

The present invention is described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions.

These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer program instructions may also be stored in a computer readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

With reference now to the figures and in particular with reference to an exemplary diagram of a data processing environment is provided in which illustrative embodiments may be implemented. It should be appreciated that is only exemplary and is not intended to assert or imply any limitation with regard to data processing environments in which different illustrative embodiments may be implemented. Many modifications to the depicted environment may be made.

Processor unit serves to execute instructions for software that may be loaded into memory . Processor unit may be a set of one or more processors or may be a multi processor core depending on the particular implementation. Further processor unit may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example processor unit may be a symmetric multi processor system containing multiple processors of the same type.

Memory and persistent storage are examples of storage devices. A storage device is any piece of hardware that is capable of storing information either on a transient basis and or a persistent basis. Memory in these examples may be for example a random access memory or any other suitable volatile or non volatile storage device. Persistent storage may take various forms depending on the particular implementation. For example persistent storage may contain one or more components or devices. For example persistent storage may be a hard drive a flash memory a rewritable optical disk a rewritable magnetic tape or some combination of the above. The media used by persistent storage also may be removable. For example a removable hard drive may be used for persistent storage .

Configurable transformation macro transformation templates input data source files and transformation output reside on persistent storage . Configurable transformation macro is a macro for transforming source input data which is stored in a particular file format into another file format. A macro is a rule or pattern that specifies how a particular data input sequence should be mapped to an output sequence according to a defined process or procedure. A file format is a specific way to encode data for storage in a computer file.

Configurable transformation macro includes transformation macro script . Transformation macro script is a scripting language such as for example JavaScript for controlling the process of transforming source input data from one file format to another. Transformation macro script utilizes transformation templates in this file format transformation process. Transformation templates represent one or more transformation templates that contain for example source input data default values and logic used in the file format transformation process.

Input data source files represent one or more source data files which transformation macro script reads and processes into another file format. Even though this exemplary illustration shows input data source files residing on persistent storage input data source files may alternatively reside on a remote database. Transformation output represents the desired final output of the logical processing of input data source files by configurable transformation macro using transformation macro script and transformation templates .

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit is a network interface card. Communications unit may provide communications through the use of either or both physical and wireless communications links.

Input output unit allows for input and output of data with other devices that may be connected to data processing system . For example input output unit may provide a connection for user input through a keyboard and mouse. Further input output unit may send output to a printer. Display provides a mechanism to display information to a user.

Instructions for the operating system and applications or programs are located on persistent storage . These instructions may be loaded into memory for execution by processor unit . The processes of the different embodiments may be performed by processor unit using computer implemented instructions which may be located in a memory such as memory . These instructions are referred to as program code computer usable program code or computer readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or tangible computer readable media such as memory or persistent storage .

Program code is located in a functional form on computer readable media that is selectively removable and may be loaded onto or transferred to data processing system for execution by processor unit . Program code and computer readable media form computer program product in these examples. In one example computer readable media may be in a tangible form such as for example an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage for transfer onto a storage device such as a hard drive that is part of persistent storage . In a tangible form computer readable media also may take the form of a persistent storage such as a hard drive a thumb drive or a flash memory that is connected to data processing system . The tangible form of computer readable media is also referred to as computer recordable storage media. In some instances computer readable media may not be removable.

Alternatively program code may be transferred to data processing system from computer readable media through a communications link to communications unit and or through a connection to input output unit . The communications link and or the connection may be physical or wireless in the illustrative examples. The computer readable media also may take the form of non tangible media such as communications links or wireless transmissions containing the program code.

In some illustrative embodiments program code may be downloaded over a network to persistent storage from another device or data processing system for use within data processing system . For instance program code stored in a computer readable storage medium in a server data processing system may be downloaded over a network from the server to data processing system . The data processing system providing program code may be a server computer a client computer or some other device capable of storing and transmitting program code .

The different components illustrated for data processing system are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in can be varied from the illustrative examples shown. The different embodiments may be implemented using any hardware device or system capable of executing program code. As one example the data processing system may include organic components integrated with organic components and or may be comprised entirely of organic components excluding a human being. For example a storage device may be comprised of an organic semiconductor.

As another example a storage device in data processing system is any hardware apparatus that may store data. Memory persistent storage and computer readable media are examples of storage devices in a tangible form.

In another example a bus system may be used to implement communications fabric and may be comprised of one or more buses such as a system bus or an input output bus. Of course the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally a communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. Further a memory may be for example memory or a cache such as found in an interface and memory controller hub that may be present in communications fabric .

Currently multiple Java scripting language macros are used to generate constraints from developers modeled rules into Selectica KnowledgeBase Development Environment .kbs files during a configuration build process or during a development process by developers to test their newly modeled rules. These .kbs files are files that are used by a Selectica configuration rule engine to interact with a web application for configuration transformation purposes. Illustrative embodiments reduce the complexity for creating transformation macros that use Java scripting language because illustrative embodiments do not require the complexity of programming techniques and syntaxes.

Illustrative embodiments using a simple macro syntax read source input data and transform this input data into a desired output. Illustrative embodiments may create whole configuration transformation files without the need of a database source. However developers may easily add an extension to a database source when a database connection is needed.

In addition illustrative embodiments reduce the need to create duplicate rules in a comma separated values CSV file format for different machine types that have the same configuration constraints. A file encoded using a CSV format is used to store tabular data. Illustrative embodiments may generate multiple CSV files for each different machine type from a single data input source without requiring developers to manually input rules into each CSV file associated with each machine type.

Illustrative embodiments use a simple configurable transformation macro to transform data from any source such as for example from a list of files to a respective .kbs file format for the source data which is used by the rule engine. The configurable transformation macro such as for example Java codes with or without XSLT reads one or more transformation templates that provide transformation data and reads one or more modular transformation macro scripts that provide logical processing of source input data using the transformation data provided by the one or more transformation templates. Based on the transformation data provided by the transformation templates the configurable transformation macro uses the transformation macro scripts to parse the input data which may be provided by a single source or by multiple sources and to create the desired output data or action accordingly.

The configurable transformation macro is a macro processing that analytically translates requests and mechanically navigates the source input data to create macro object responses. This macro processing provided by illustrative embodiments allows the configurable transformation macro to be utilized by other types of applications and not just by rule engine configuration industry applications. The word configurable in the term configurable transformation macro means that the transformation macro may be configured to be used in a plurality of different application types.

The configurable transformation macro with its simple syntax and ability to recursively read data to complete an instruction or to indicate a completed instruction allows the configurable transformation macro to dynamically write its own instructions. In addition the configurable transformation macro may transform source input data into a triggered action and not necessarily just into an output data of a different file format.

Further in addition to solving file format configuration transformation type problems illustrative embodiments with their functionalities may 1 reduce the need to customize coding for extensible markup language XML types of transferring services or applications 2 be incorporated into a corpus based technology that requires the transformation of data from one data type to another 3 be used by the corpus based system to statistically write intelligent data that are sorted counted indexed and related to a number a character or a word and are stored as a formatted string of data or objects that may be referenced by a transformation macro script engine to respond to executing script processes 4 create macro bots which are tiny pieces of automation code similar to transformation macro script except these macro bots use numbers and characters that may be created by the macro bots themselves to read write and gather data for triggering processors or functions within the transformation macro script engine to automate and or to write macro bots by other macro bots dynamically 5 be incorporated into an artificial intelligence AI system which may use the configurable transformation macro to store the macro s memory or understanding temporarily in a cache or persistently in a storage medium and or to intelligently trigger one or more actions 6 be incorporated into a search engine to transform data from one language into another language and also to intelligently index the transformed data by having a single language type tagged with multiple types of languages 7 be incorporated into a simulation system to transform an inactive set of data in an area to an active set of data for that area depending on the availability of the source input data and 8 be incorporated into a genetic analysis system to process or transform data part by part and matrix by matrix.

Moreover in addition to generating constraints for .kbs files illustrative embodiments may generate .kbs files that host the generated constraints. Templates which store transformation data may be created by developers for use by the configurable transformation macro. Illustrative embodiments do not require developers to rewrite functions in the configurable transformation macro because the configurable transformation macro uses transformation templates that define the output layout. As a result the configurable transformation macro is able to automatically write the constraints in the desired format without developers rewriting functions for each type of data or object transformation by using the transformation templates as models.

Illustrative embodiments are not restricted to a specific rule engine and thus do not require the rule engine s application programming interface API . However developers may easily add an extension to call the rule engine API if necessary for any purpose whatsoever. In addition illustrative embodiments may mass generate model rules in a CSV format to be used during the build process. Further illustrative embodiments are highly portable and may be used in rule based technologies corpus based technologies and other types of applications.

As a result illustrative embodiments break the dependency between transformation macros and rule engines. Historically whenever a change in a rule engine was made a corresponding modification in the transformation macro Java script which involves a great deal of complexity was required. In addition the transformation macro was tied to the rule engine modelbuilder for constraint creation. However illustrative embodiments allow for independent rule and configuration file generation and therefore do not require a rule engine.

The configurable transformation macro of illustrative embodiments reads setup information for the configurable transformation macro reads a list of extended functions if any for the configurable transformation macro and reads a list of transformation templates. A reference key for example is associated with each transformation template and a template filename linked to this reference key in order for the transformation macro script to identify the appropriate transformation templates to be used in the transformation process. In addition the configurable transformation macro reads a main transformation macro script or a list of main transformation macro scripts which in turn reads one or more transformation templates.

These transformation macro scripts are modular in nature. Modular means that each transformation macro script is a self contained component which may be combined or grouped with other transformation macro scripts. Consequently transformation macro scripts may be grouped as parent and child transformation macro scripts within one or more transformation templates or one or more other transformation macro scripts. The transformation templates may also be similarly grouped. The configurable transformation macro creates macro objects. A macro object represents a class or container such as for example a data object or hash map which stores functions expressions or just purely data. The configurable transformation macro logically processes these transformation macro scripts and transformation templates accordingly and outputs the final desired transformation result.

With reference now to an exemplary illustration of a data source file is depicted in accordance with an illustrative embodiment. Input data source file which is named transformation.dat in this exemplary illustration may for example represent one or more files within input data source files in . Also input data source file may represent data from a plurality of data sources.

In addition input data source file may be located within a transformation template such as transformation template file in . In this illustrative example input data source file includes input data Some data here. input data Some data here also. and input data Somedata here also. . It should be noted that the hypertext markup language HTML div tags and are not embedded parameters recognized by a configurable transformation macro such as configurable transformation macro in .

With reference now to an exemplary illustration of a transformation template file is depicted in accordance with an illustrative embodiment. Transformation template file which is named template1.tdt in this exemplary illustration may for example represent one or more templates within transformation templates in . It should be noted that div tags that contain F such as F READFILE and F IncrementalNumber are configurable transformation macro extended functions. Also div tags that do not contain F such as LOOP PRINT REPLACE and TDT SHOWVALUE are configurable transformation macro internal functions.

In addition it should be noted that div tag KEY identifies the reference key associated with transformation template file and the filename TemplateKey1 . Further div tag refers to the source input data such as input data source file in with the same name which the configurable transformation macro logically processes into the desired final transformation output such as transformation output in . Furthermore input data source file transformation.dat may be located within transformation template file . Moreover div tag instructs the configurable transformation macro to replace the source input data TestReplace such as input data Some data here also. in with other data.

With reference now to an exemplary illustration of a transformation macro script is depicted in accordance with an illustrative embodiment. Transformation macro script which is named transformscript1.tms in this exemplary illustration may for example be transformation macro script in . In addition transformation macro script may for example be JavaScript .

Div tag DRIVE instructs transformation macro script to read a setup file to prepare the environment for the configurable transformation macro such as configurable transformation macro in . Div tag F READTEMPLATE instructs transformation macro script to read the transformation template such as transformation template file in that is named template1.tdt . Div tag LOOP 3 instructs transformation macro script to loop through the transformation template which has a reference key of TemplateKey1 such as div tag in three times. It should be noted that the transformation template template1.tdt may include the source input data such as input data source file in named transformation.dat which is to be logically processed and transformed. Div tag PROCEED instructs transformation macro script to proceed with the logical transformation process.

With reference now to an exemplary illustration of a transformation output is depicted in accordance with an illustrative embodiment. Transformation output may for example be transformation output in . A configurable transformation macro such as configurable transformation macro in produces transformation output by executing a transformation macro script such as transformation macro script in to logically process the source input data such as input data source files in using one or more transformation templates such as transformation templates in .

 Some data here in line 1 corresponds to input data Some data here. in . It should be noted that lines 1 2 and 3 are repeated three times in transformation output because the div tag LOOP 3 in transformation macro script in instructs the transformation macro script to loop through the one or more transformation templates that contain the source input data three times. Some data here also in line 2 corresponds to input data Some data here also. in . Some other data here also in line 3 corresponds to input data Some data here also. . However it should be noted that div tag within transformation template file in instructs the configurable transformation macro to replace the source input data TestReplace with the other data to produce the desired output Some other data here also in line 3 of transformation output .

With reference now to an exemplary illustration of another data source file is depicted in accordance with an illustrative embodiment. Input data source file which is named compatibility filtering.dat in this exemplary illustration may for example represent one or more files within input data source files in . In this illustrative example input data source file includes a set of CSV files. Each of the files in the set of CSV files contain a different machine type. Also it should be noted that in addition to or instead of transforming input data source files from a CSV file format to a .kbs file format the configurable transformation macro uses input data source file to execute an action of filtering out incompatible machine types and listing compatible machine types.

With reference now to an exemplary illustration of another transformation template file is depicted in accordance with an illustrative embodiment. Transformation template file which is named compatibility filtering.tdt in this exemplary illustration may for example be transformation template in . Div tag KEY identifies the reference key associated with transformation template file with the filename TP COMPATIBILITY FILTERING . Div tag WRITE instructs the transformation macro script to write a file that contains a list of compatible machine types. Div tag HDR KBSName instructs the transformation macro script to transform the files from a CSV format to a .kbs format. Div tag HDR FIRSTCOLUMN START instructs the transformation macro script to start the machine type compatibility filtering action. Div tag OUTFILE instructs the transformation macro script to output the desired final compatibility file.

With reference now to an exemplary illustration of another transformation macro script is depicted in accordance with an illustrative embodiment. Transformation macro script which is named executeScript.tms in this exemplary illustration may for example be transformation macro script in . Div tag TPATH instructs transformation macro script to read information in a setup file to provide the proper processing environment. Div tag INPATH defines an input path for source data. Div tag OUTPATH defines an output path for logically processed data. Div tag F READFILE instructs transformation macro script to read a list of rules files. RULES StartFile.1st which is within div tag F READFILE is a file that stores a list of a plurality of different machine types.

Div tag F READTEMPLATE TPATH defaultvalues.tdt is a transformation template file that contains all the default values and logic which is utilized by other transformation templates such as transformation template file named compatibility filtering.tdt in . Div tag F READTEMPLATE TPATH compatibility filtering.tdt instructs transformation macro script to read transformation template compatibility filtering.tdt . Div tag TRANSFORMTEMPLATE instructs transformation macro script to transform the source input data using the default values from transformation template defaultvalues.tdt . Div tag CLOSEALL instructs transformation macro script to close all open files. Div tag PROCEED instructs transformation macro script to proceed with logical processing of the source input data until completion.

With reference now to an exemplary illustration of another transformation output is depicted in accordance with an illustrative embodiment. Transformation output may for example be transformation output in . Transformation output in this exemplary illustration is a list of compatible machine types converted from a CSV file format into a .kbs file format.

Also in this exemplary illustration machine type 1234 RSS TMF GROUP OS DUMMY OC PM P ARB OSType Custom 92 00 No Listed limk A 20080121 corresponds to incompat OS DUMMY OC PM P ARB OSType Custom 9200 Listed limk A 20080121 in input data source file in . In addition machine type 1234 RSS TMF GROUP 1671 9070 9071 9072 9195 No Listed limk A 20080121 corresponds to incompat 1671 9070 9071 9072 9195 Listed limk A 20080121 InAppMT 2345 in input data source file in . Further machine type 1234 RSS TMF GROUP 4209 0 43634210 0 1771 9070 9071 9072 9195 Yes Listed limk A 20080121 corresponds to compat 4209 0 43634210 0 . . . 1771 9070 9071 9072 9195 Listed limk A 20080121 in input data source file in .

It should be noted that the exemplary illustrations depicted in are only meant as examples and not intended as limitations on illustrative embodiments. Processes of illustrative embodiments may utilize any type of input data source transformation template and transformation macro script necessary to produce the desired transformation output.

With reference now to a flowchart illustrating an exemplary process for transforming source input data from one file format to another file format using a configurable transformation macro is shown in accordance with an illustrative embodiment. The process shown in may be implemented in a data processing system such as data processing system in .

The process begins when the data processing system receives an input to execute a configurable transformation macro such as configurable transformation macro in step . Then the data processing system executes the configurable transformation macro step . Afterward the configurable transformation macro reads an environment setup file for the configurable transformation macro step . The environment setup file is a file that contains data regarding the environment that the configurable transformation macro is being run in and the connections the configurable transformation macro has such as for example external function paths database connections server uniform resource locators URLs and temporary folders and initial parameters for the configurable transformation macro.

In addition the configurable transformation macro reads extended functions if any for the configurable transformation macro step . Further the configurable transformation macro reads a transformation macro script such as transformation macro script in step . It should be noted that illustrative embodiments may store the transformation macro script in whole or in part within a cache as opposed to a storage device such as persistent storage in . Then the configurable transformation macro executes the transformation macro script step .

Afterward the transformation macro script reads one or more transformation templates such as transformation templates in step . Subsequently the transformation macro script reads input data from one or more source files such as input data source files in or from other data sources such as a database or data stream step . Then the transformation macro script outputs the final transformation output by for example writing the final transformation output to a storage device such as persistent storage in printing the final transformation output to a printer such as input output unit in or displaying the final transformation output on a display device such as display in step . The process terminates thereafter.

With reference now to a flowchart illustrating an exemplary process for executing a transformation macro script is shown in accordance with an illustrative embodiment. The process shown in may be implemented in a configurable transformation macro such as configurable transformation macro in . Also the process shown in may be implemented in step in .

The process begins when the configurable transformation macro executes a transformation macro script such as transformation macro script in step . Afterward the transformation macro script reads one or more transformation templates such as transformation templates in step . In addition the transformation macro script reads input data from one or more source files such as input data source files in or from other data sources such as a memory variable or XML file step .

Then the configurable transformation macro performs logical processing of the transformation macro script and the transformation template once the configurable transformation macro environment is setup step . Subsequently the configurable transformation macro makes a determination as to whether the constraints generated by the transformation macro script and transformation template are valid step . If the transformation macro script and transformation template constraints are not valid no output of step then the configurable transformation macro places the macro object created by the transformation macro script in a waiting container for further processing until valid completion step . Thereafter the process returns to step . Alternatively the macro object may wait in the waiting container for a call from another logical process in order for that particular macro object to become a part of the calling logical process.

If the transformation macro script and transformation template constraints are valid yes output of step then the configurable transformation macro makes a determination as to whether the transformation of the source input data is complete step . If the transformation of the source input data is not complete no output of step then the process returns to step . If the transformation of the source input data is complete yes output of step then the transformation macro script outputs the final transformation output step . The process terminates thereafter.

Thus illustrative embodiments of the present invention provide a computer implemented method system and computer program product for transforming source input data from one file format to another file format using a configurable transformation macro. The flowcharts and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowcharts or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustrations and combinations of blocks in the block diagrams and or flowchart illustrations can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any tangible apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modems and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

