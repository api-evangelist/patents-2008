---

title: Predicting candidates using input scopes
abstract: Embodiments are configured to provide one or more candidates based in part on an input identifier associated with an input interface. In an embodiment, a system includes an input method editor (IME) that can be configured to provide one or more candidates based in part on a prediction model and one or more input scope values associated with an input interface. The IME can also operate to store an entered string including one or more associated input scope values to a storage component. The stored information can be used when suggesting candidates.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08010465&OS=08010465&RS=08010465
owner: Microsoft Corporation
number: 08010465
owner_city: Redmond
owner_country: US
publication_date: 20080226
---
Computing devices including handheld mobile devices have become essential tools for both business and personal uses. The size and portability of handheld mobile devices make them particularly attractive to users. Advances in computing power and storage capacity have made handheld computing devices even more attractive. However the limited size of some input controls and displays can adversely affect the user experience. For example handheld devices tend to have input devices with small form factors that can be awkward to use such as a 12 key keypad or T9 type interface. Correspondingly it may be more difficult and require more time to manually enter inputs due in part to the type of input device. Text prediction methods have been developed to try and reduce the amount of manual input required by application users including handheld applications users.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended as an aid in determining the scope of the claimed subject matter.

Embodiments are configured to provide one or more candidates based in part on an input identifier associated with an input interface. In an embodiment a system includes an input method editor IME that can be configured to provide one or more candidates based in part on a prediction model and one or more input scope values associated with an input interface. The IME can be further configured to store an entered string including one or more associated input scope values to a storage component. The stored information can be used when suggesting candidates.

These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are explanatory only and are not restrictive of the invention as claimed.

Embodiments are configured to provide one or more candidates based in part on an input identifier associated with an input interface. In an embodiment a system includes an input method editor IME having a prediction component that can be configured to provide one or more potential candidates based in part on a prediction model. The IME can refine the prediction by presenting one or more candidates based in part on one or more input scope values associated with an input interface. For example a computing device can include the IME for use across applications executing on the computing device.

The IME can be further configured to store an entered string including one or more associated input scope values to a storage component. The stored information can be used when predicting future candidates based in part on an input scope value or values associated with a particular input interface. The IME can be used in conjunction with a variety of applications input methods and types. For example the functionality of the IME can be used with text based applications having keyed input controls handwritten based or inking applications speech based applications and other applications that can be configured to receive user input. The functionality of the IME can also be used with multiple languages.

In one embodiment a mobile computing device includes an IME application having executable instructions that can be executed to present one or more candidates as part of a candidate window that is associated with an input interface. The IME application can operate to predict the one or more candidates based in part on a prefix matching determination using input history data and an input scope value associated with the input interface of an application. The IME application can operate to store user input including an associated input scope to an input history buffer or other memory. The IME application can be used with different input types such as handwritten input speech input typed input or some other type of input.

In another embodiment a software application can be configured to provide one or more candidates based in part on an input scope value or values across a plurality of disparate applications. The software application can operate to determine a word phrase or other string that a user is attempting to input into one or more of the disparate applications to assist the user to input the information faster and with less effort. The software application can be installed on a computing device and used to provide text prediction handwriting prediction vocalized prediction and other types of candidate prediction. The software application can be used to suggest one or more candidates based in part on user input such as typed input spoken input or handwritten input for example.

As shown in the system includes an input method editor IME that can operate to provide one or more candidates based in part on an input scope associated with an input interface of an application or other component. For example the IME can be used in conjunction with a number of applications running on a computing device to predict and suggest one or more words or other strings to a user based in part on an input scope value assigned to an input field of an application. The IME includes a prediction component that can be used to predict one or more potential candidates as part of an input operation but the prediction component is not so limited.

In an embodiment the prediction component includes a prediction model or algorithm that can be used to predict candidates based in part on user input to an editable field of an application. For example the prediction component can operate to return one or more potential candidates such as candidate strings based in part on an associated predictive probability which can include usage frequency parameters statistical parameters n gram and or other probability models etc.

In one embodiment the prediction component includes an input history candidate provider IHCP that can operate to predict candidates using a prefix matching determination to identify candidates by matching one or more input characters with strings that are stored in the storage component . The IME can further refine candidates to be presented to a user by using one or more input scope values to filter the predicted or potential candidates provided by the prediction component . In another embodiment the prediction component can include the refining or filtering functionality of the IME .

The system also includes a storage component such as a memory or other storage device. The storage component can be a local store a remote store or some combination thereof for storing information. For example the storage component can include random access memory RAM read only memory ROM flash memory and or some other type of memory. As shown in the storage component includes an input history store a fixed data store and a dictionary . In one embodiment the fixed data store includes one or more fixed data sets that include data that does not change such as month names weekday names etc. An input scope value or values can be associated with certain input interfaces to identify fixed data types so that the IME can use the fixed data store when suggesting candidates. In one embodiment the dictionary includes statistical information associated with a probability of certain words appearing in proximity to other words.

The input history store includes input history data and input scope information associated with the input history data. In one embodiment the input history store includes data such as strings for example that a user has previously entered or selected from a candidate list but is not so limited. The input history store can also include statistical information regarding the probability of one string appearing in proximity to another string. A string can refer to a sequence of one or more alphanumeric characters and or symbols including words compound words phrases Internet addresses email addresses telephone numbers passwords credit card numbers street addresses etc.

The input scope information can be stored with the input history data to identify a data type or input type that can be used when filtering predicted candidates but is not so limited. Moreover input scope information can also be preconfigured for the static dictionary data. In one embodiment an input scope value see Table 1 below can be stored in the input history store with each entered string to identify a data type or input type that can be used when providing one or more candidates to a user. For example the IME can use an application programming interface API to identify an input scope value that is associated with an input field of an application wherein the IME can store the identified input scope value with associated data in the input history store .

Moreover an identified input scope value can be used to refine or filter predicted or potential candidates provided by the prediction component so that the most relevant candidates are presented to the user based in part on an associated input scope value. In one embodiment the input history data can be stored separately from the input scope information and pointers or links can be used to associate certain data with one or more input scopes. In another embodiment the input history store can include input scope containers that include input history data wherein each input scope container includes a data set of input data associated with the particular input scope.

As described below an input scope value can be used when suggesting one or more strings or candidates from the input history store . For example the IME can operate to suggest one more candidates to a user which have an input scope value that is the same as the input scope value that is associated with the input interface that a user is currently using to enter some string. The IME can also operate to check the dictionary and or fixed data store when appropriate to identify one or more candidates that match a given prefix that the user has typed so far if the IME does not find enough candidates in the input history store to fill a candidate suggestion interface with a designated number of candidates. The IME can add any additional candidates to the candidate suggestion interface until the maximum number of candidates allowed to be presented is reached.

However if a default input scope value is associated with an input interface the IME can operate to provide one or more candidates from the input history store without limiting to a particular input scope value. That is when a default value is associated with a current input interface being used by a user to input one or more characters i.e. the input interface has focus the IME operates to provide one or more candidates using the input history data with certain exceptions from the input history store and static data from the dictionary based in part on the user input. In some cases the IME can operate to exclude certain candidates or all candidates associated with certain input scope values from being suggested that may not make sense in the current context. For example the IME can be configured to exclude candidates tagged with an input resource locator URL input scope value when a user is entering text in an email message body that includes a default value.

According to one embodiment the following input scope values shown in Table 1 can be used to identify an input scope such as a data type or input type for example 

With continuing reference to the system also includes a number of applications where n 0 1 2 . . . . One or more of the applications can be resident on an associated computing device such as a handheld device and or other applications can be accessed remotely across one or more networks or other communication means. Application includes input interfaces through Application includes input interfaces through and Application includes input interfaces through . For example applications and may correspond to a web based search engine application and an email application respectively while application may correspond to a web based banking application.

As shown in each one of the respective input interfaces can include one or more associated input scope values. That is a plurality of input scope values can also be assigned to a particular input interface as described below. For example an input interface such as an input field may direct a user to enter a city state a zip code and a country wherein associated input scope values can be assigned or tagged to the input field. Correspondingly input scope values can be associated with the input interface and used to provide one or more candidates to the user for selection which can reduce the amount of input operations required by the user.

In an embodiment the IME can operate to provide one or more candidates associated with an input interface having a plurality of input scope values associated therewith. Input from such an interface can be used to provide one or more candidates in other input interfaces that include the same set of input scope values or a superset of the input scope values included in the original interface. When a user enters a string into an input interface the IME can operate to store multiple input scope values per string entry and tag the associated input data with each of the input scope values associated with the input interface. Thereafter when suggesting one or more candidates as part of an input to an input interface having a plurality of input scope values the IME can determine whether the input scope values associated with a potential candidate are the same as or a subset of the input scope values of the associated input interface currently being used.

For example consider an input field that has been tagged with a city input scope value and with a state input scope value. That is the input field has been configured to receive inputs associated with city or state names. If a user enters the word Idaho in this input field the IME can operate to store the string in the input history store with the city input scope value and the state input scope value. Idaho would then be provided as a suggested candidate when a user subsequently enters one or more prefix matching characters in an input field that includes the city and state input scope values or a superset of these values e.g. input field includes city state and country input scope values . In an alternative embodiment the IME can operate to store an entered string multiple times for each associated input scope value associated with a multi valued input field.

For the example above the IME can store the string Idaho twice once with a city input scope value and again with a state input scope value. The two Idaho entries can be linked together to avoid presenting Idaho as a candidate for City input fields or for State input fields note that we should not present Idaho for State fields because we do not actually know whether the entry is meant to indicate a city or a state . The linking can be accomplished by including a pointer with each entry. The first entry should include a pointer to the second entry the second entry should include a pointer to the third entry and so on until the last entry which should include a pointer linking back to the first entry. When the entries are so linked they will form a circular linked list of entries within the input history store . The IME can then traverse this circular list to identify the set of input scopes that were defined for the input interface where the word was entered. Using this information the IME can operate to suggest the string Idaho in City or State or City or State or ZIP input fields.

In one embodiment once a user has entered a string e.g. clicked a button to enter the string in an associated input field tabbed to a different input field etc. or selected a candidate from a candidate window e.g. used a stylus to tap and select a candidate etc. associated with an input interface having a plurality of input scopes the IME can operate to store the entered string or selected candidate to the input history store with a default input scope value. In another embodiment the IME can operate to store the entered string or selected candidate to the input history store with each of the input scope values associated with the input interface as described above. For example the IME can operate to store a selected candidate as selected candidate AND input scope value or input scope value or input scope value .

In an embodiment the IME can operate to present candidates from the input history store which have any of a plurality of input scope values associated with an input interface currently being used as part of refining a prediction of potential candidates predicted by the prediction component . Accordingly the IME can operate to present candidates that are most likely relevant to what the user is attempting to enter in the current input interface. For example assume that an input field has been tagged with a city input scope value and a state input scope value. That is the input field has been assigned two input scope values wherein each of the input scope values can be used to present predicted candidates.

When presenting candidates to the user the IME can operate to present or suggest candidates from the input history store that include either city or state names that match the text entered so far in the input field. Continuing this example a user might enter S and the IME can operate to present a city such as Seattle and a state such as South Dakota as candidates in a candidate window or other selection interface associated with the input field. The user can select a presented candidate or can enter a different string according to the particular situation. The IME can store the selected candidate and or update a probability associated with the selected candidate or entered string along with the associated input scope value or values to the input history store .

As described above as a user enters one or more characters of an undetermined input stream or string in an input interface the IME uses the prediction component to predict potential candidates such as a string or strings. The potential candidates can be further refined by using an input scope value or values to limit which candidates are ultimately presented to the user. For example the IME can operate to present relevant candidates while limiting the presentation of irrelevant candidates by using one or more input scope values as a refinement tool which can reduce the number of input operations required by the user.

Correspondingly the IME can assist the user when entering a string or strings by reducing the amount of keystrokes pen strokes or other inputs as part of an input operation. For example the IME can use the prediction component to predict one or more potential words or numerical strings based on a prefix match against what text the user has entered so far into an input field and or other statistical information stored in the input history store . As another example a user using handwritten input can tap the display to select a word presented by the IME based in part on one or more handwritten inputs and an associated input scope value which can result in a reduction of the amount of pen strokes required to enter a desired word.

In an alternative embodiment the IME can operate to present one or more candidates to a user without any user input as long as the input interface is in focus e.g. the cursor is in an input field . In this embodiment the IME can present one or more candidates based on an input scope value or values associated with the input interface. For example the IME can automatically suggest first names from the input history store when a user places a cursor in an input field having a first name input scope value.

According to an embodiment in addition to suggesting candidates as part of entering a string into one input interface a grouping of such input interfaces can be tagged as a class. For example a Name and Address class can use the input of several fields such as First Name Last Name Street Address City State Zip Code and Country which can be grouped and saved together. The grouping can be referred to an input scope class. An input scope class can be used to auto complete forms that are asking for the same or similar sets of data.

An example of this retrieval would be when filling out a webpage requesting the Name and Address of an individual. When a user starts typing in the First Name input field the IME can operate to present a predicted first name along with all of the associated data for each field of the input scope class. When such a candidate is selected the IME can operate to automatically populate the Last Name Street Address City State Zip Code and Country fields with the data associated with the input scope class. Correspondingly the amount of time required to enter data for multiple fields of an associated input class can be reduced. Moreover the number of data input operations are also reduced as compared to having to enter data into each field one at a time.

In one embodiment a database component can be included with the storage component and used to track input scope classes and instances of the input scope classes that have previously been entered. An instance of an input scope class can consist of a set of strings wherein the number of strings is equal to the number of input scope values that define the input scope class. Each string corresponds to one of the input scope values. For example the database of input scope classes and associated instances can be used when suggesting one or more candidates including automatically completing the input fields with suggested candidates such as for forms which contain multiple input fields wherein each input field has a unique input scope value.

As one example assume that there is only one input scope value associated with each input field of a form which contains a plurality of input fields. An input scope class can be defined by the set of input scope values associated with the plurality of input fields for the form. Changing the order of the input scope values does not change the definition of the class. Table 2 below provides an example of a first name last name city state input scope class and two instances of such as class.

In an embodiment an application can register a class with the system to enable input scope class prediction for an associated form or other interface. An API can be used to pass a list of edit controls or input fields associated with an input scope class for the application. Thereafter the IME can use an API to obtain input scope values associated with edit controls or input fields. The IME can identify the input scope class using the obtained input scope values for the edit controls or fields. When one of the edit controls or fields in the form subsequently receives focus the IME can operate to identify that the control or field is a member of a registered input scope class.

Assuming the sample input scope class shown in Table 2 and that a user entered J in the first name field of the form. As part of the suggestion functionality the IME can present the user with a prediction candidate that would include all of the strings in Instance 1 of the input scope class of Table 2. The IME can operate to identify candidates of input scope classes that are a logical superset of a target input scope class. In most cases a subset of each instance of these classes if they exist in the database component will correspond to a valid instance of the target input scope class. The IME can also present additional single word candidates from the input history store as described above. If the user selects John Doe Reardon Wash. from the candidate list the IME can operate to populate all four fields of the form that map to each field of the associated input scope class.

When the user submits the form and if the class instance is new the IME can operate to save the new instance of the input scope class to the database component. If the new instance matches an existing instance i.e. the instance is not really new the IME can ignore the instance without a store operation. In another embodiment an application can be configured to specify a subset of input scope values belonging to an input scope class and a format string to use when displaying candidates as part of the registration of an input scope class with the system . As an example the IME can then operate to present candidates as John Doe instead of John Doe Reardon Wash. .

As described above components of the system can also be used to predict and suggest candidates for other types of input methods. In an embodiment the IME can be used to improve accuracy for Speech Recognition SR by restricting or weighting SR grammars that are associated with input controls that are tagged with input scope values. The grammars can be weighted or restricted to favor words that had previously been entered in fields tagged with the same input scope values.

For example consider a speech grammar set on an input control that includes the names Don and Tom. These names can be difficult for a speech recognition engine to differentiate. However if the input control is tagged with the IS PERSONALNAME GIVENNAME input scope value and the user has entered Tom and not Don in other input controls tagged with this input scope value then the IME can operate to suggest Tom as a more likely candidate and weight the grammar in favor of this name. Correspondingly the IME can use the input scope values and weighting or restriction operations to reduce misrecognitions of spoken inputs e.g. Tom as Don a substitution error .

Various devices systems and interfaces such as QWERTY keyboard devices 12 key devices and other input devices can use the aforementioned functionality to provide one or more suggested candidates based in part on a user input such as one or more input characters. For example for a 12 key device when a user presses 2 the user may be attempting to input a string that begins with an A B or a C . Multiple key presses can result in more potential combinations. For example 227 could be the prefix car bar cap etc. By associating an input scope identifier with an input field or other interface the potential candidates can be limited accordingly. For example if a user is tying 227 into a zip code field using a 12 key device the IME will only present numeric strings since a zip code input scope value is associated with the input field.

As described above components of the system can be used to present or suggest one or more candidates based in part on an input identifier in the context of one or more applications including email applications browsing applications texting applications inking applications application with forms to be submitted speech based applications and or some other application or implementation. For example components of the system can operate to predict words number sequences alphanumeric sequences phrases and other strings or sequences based in part on handwritten input typed input speech input and or other types of input in conjunction with an input scope value or values. One or more candidates can be displayed on a user device such as a laptop desktop smart phone or other computing or communication device.

Components of system described above can be implemented as part of networked distributed and or other computer implemented and communication environments. The system can be employed in a variety of computing environments and applications. For example the system can used with computing devices having networking security and other communication components configured to provide communication functionality with other computing and or communication devices. Such computing devices include desktop computers laptop computers tablet computers handheld devices e.g. smart phone personal data assistant PDA ultra mobile personal computer etc. and or other devices and systems.

The embodiments described herein can be used with a number of applications systems and other devices and are not limited to any particular implementation or architecture. Moreover certain components and functionalities can be implemented either in hardware or software. While certain embodiments include software implementations they are not so limited and they encompass hardware or mixed hardware software solutions. Also while certain data structures component features and predictive functionality has been described herein the embodiments are not so limited and can include more complex data structures features and other functionality. Accordingly the embodiments and examples described herein are not intended to be limiting and other embodiments are available.

Referring now to an example of using one or more input scope values to present one or more candidates to a user is shown. A display of a mobile computing device is shown in . As shown in a user is using a search application to search the web for some information. In this example the user has entered the text Spider man Spandex in a search window having a default input scope attribute and associated value and a city Spokane in a city window having a city input scope attribute and associated value. After entering the text the IME operates to store the strings Spider man and Spandex with default input scope values and the string Spokane with the city input scope value to the input history store .

Next as part of a subsequent search the user enters the text Salty Seafood in the search window and Seattle in the city window of the search application and executes the search. The IME has stored the strings Salt and Seafood with default input scope values and Seattle with the city input scope value to the input history store . For this example the input history store now includes six strings which begin with the letter S . Moreover Seattle and Spokane were stored with an input scope value corresponding to the city attribute due to the associated city window tag and the remaining words were stored with an input scope value corresponding to the default attribute due to the associated search window tag. While the words are stored as unitary strings the IME can also store data as phrases classes and other data structures.

As shown in the user is now using a weather application to determine weather information associated with a city. While one application is shown in the applications may both be open at the same time and the mobile device may also have other applications open and or running. For this example the user has entered the letter S into a city window which also includes the city input scope attribute and associated value. The cursor illustrates that the city window has focus and the user has not yet entered a complete word or selected a candidate.

As part of the suggestion process and using the input character S the IME uses the prediction component to provide two potential candidates Spokane and Seattle in a candidate window based in part on a prefix matching determination against input data of the input history store having the city input scope value. As described above the prediction component can also be configured to operate with a different type of predictive functionality. For example the prediction component can include a candidate provider to return a potential candidate based on a probability model and or statistical data such as usage frequency n gram models temporal data etc.

Since the other strings having the default input scope values are not considered for prediction the amount and time of processing can be reduced while increasing the speed at which candidates are ultimately presented to the user. If an input scope value was not used to refine the potential candidates and assuming that the candidate window was configured to display only four candidates the IME may not have presented Spokane due to the five other words beginning with s that had recently been added to the input history store.

At the IME can operate to identify an input identifier that is associated with the input interface currently in use. In one embodiment the IME can use an API to identify an input scope value or values associated with the input interface such as an input control or field for example. An API can also be used to associate modify or remove one or more input scopes associated with an input interface. For example a user such as an application developer can use the API to tag a selected input field or control with one or more input scope values. An API can also be used to identify an input scope class associated with a plurality of input fields. Besides using an API to tag a selected input field fields can also be assigned one or more input scope values in a resource or similar configuration file.

At the user can use an input device such as a keyboard microphone keypad stylus or other input device to enter a part of a string such as one or more alphanumeric or other characters into the input interface. As described above the IME can also operate to automatically present one or more candidates absent any input by the user based in part on the input scope value or values associated with the particular input interface in use and input history data stored in the storage component .

At the IME uses the prediction component to identify one or more prefix matching candidates having the proper input scope value or values using the input history data stored in the storage component . In one embodiment the IME can first use the prediction component to identify any prefix matching candidates using the input history data stored in the storage component . Thereafter the IME can operate to filter any prefix matching candidates according to the input scope value or values identified at and only present prefix matching candidates having the proper input scope value or values.

In another embodiment the IME can be configured to first filter the input history data according to the input scope value or values identified at and then use the prediction component to identify prefix matching candidates from the filtered data for an appropriate input scope value or values. Thereafter the IME can present one or more prefix matching candidates having the proper input scope value or values to the user. In other embodiments the prediction component can be configured to predict one or more candidates using a different type of prediction or statistical model as described above. The IME can also identify one or more candidates using data from the fixed data store and or dictionary if there is no input scope assigned to the current input interface or if the current input interface has a default input scope value associated therewith.

At the IME can operate to present the one or more identified candidates to the user based in part on the input scope value or values associated with the input interface. For example the IME can operate to present one or more identified word or phrase candidates as part of a candidate window see window of in an associated device display. As described above the IME can also present candidates having different input scope values when an input interface is tagged with multiple input scope values. As an example assume that an input interface such as an edit control is tagged with a city input scope value and a state input scope value. In such as case the IME can suggest city and state names from the input history data that match the text entered so far. For example a user might enter S into the input interface having city and state input scope values and be presented with suggestions of Seattle and South Dakota .

At the user can complete and enter a string if a desired candidate is not available. For example a user may enter a word into the input interface that was not presented in a candidate window by the IME . Optionally the user can select a candidate from the one or more candidates presented by the IME . If the user enters a string into the input interface at the IME can operate to store the string and the associated input scope value or values to the input history store .

If the user selects a presented candidate at the IME can operate to update statistical data associated with selected candidate and input scope value or values. For example the IME can increase a probability or weighting factor associated with the selected candidate while reducing a probability or weighting factor associated with each of the unselected candidates. Accordingly the IME can use the probabilities and or other statistical information to suggest candidates. For example the IME can suggest prefix matching candidates with higher probabilities before suggesting prefix matching candidates having lower probabilities. Accordingly candidates with higher probabilities can be presented higher in a list of suggest candidates in a candidate interface.

At an input field of a first application is tagged with an input scope value. For example a developer or other user can use an API to tag the input field with an appropriate input scope value. An API can also be used to associate a plurality of input fields with an input scope class. An example API to tag an input field with an input scope value is as follows 

The new input scope value replaces any previously set input scope value for an associated input field.

Another example API that can be used to tag an input field with one or more input scope values is as follows 

At a user inputs and enters data in the input field of the first application. For example a user may enter an email address as part of a login operation to a login field of an application. At the IME operates to identify the input scope value associated with the input field. For example the IME can use an API to identify the input scope value of an associated input field. An example API to identify an input scope value or multiple input scope values of an input field or fields is as follows 

The API can operate to return a default input scope value if the input field has no currently assigned input scope value or values.

At the IME operates to store the entered data and the associated input scope value or values to the input data history store . At an input field of a second application is tagged with the same input scope value that was tagged to the input field of the first application. As described above an API can be used to tag the input field of the second application with one or more input scope values. At the user inputs data to the input field of the second application. For example a user may use soft keys of a keypad to enter one or more alphanumeric characters in the input field of the second application.

At the IME operates to identify one or more input scope values that may be associated with the input field currently being used by the user. As described above the IME can use an API to identify one or more input scope values associated with the input field having focus. At the IME can use the prediction component and the one or more identified input scope values associated with the input field of the second application to present one or more candidates to the user using data stored in the input history store which now includes the data entered into the input field of the first application.

As described above the IME can refine the presentation of candidates by only presenting candidates which have the proper input scope value or values determined at . Correspondingly the IME is operable to present the most relevant candidates to the user for selecting without having the user enter the entire candidate string thereby also reducing the number of input operations. The presentation of the one or more candidates can be further tuned according to an associated predictive functionality of the prediction component .

While a certain order and number of operations are described with respect to the order and or number of operations can be changed according to a desired implementation. Accordingly other embodiments are available.

Referring now to the following discussion is intended to provide a brief general description of a suitable computing environment in which embodiments of the invention may be implemented. While the invention will be described in the general context of program modules that execute in conjunction with program modules that run on an operating system on a personal computer those skilled in the art will recognize that the invention may also be implemented in combination with other types of computer systems and program modules.

Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations including handheld devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Referring now to an illustrative operating environment for embodiments of the invention will be described. As shown in computer comprises a general purpose desktop laptop handheld tablet or other type of computer capable of executing one or more application programs. The computer includes at least one central processing unit CPU a system memory including a random access memory RAM a read only memory ROM a textual store and a system bus that couples the memory to the CPU . A basic input output system containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM .

The computer further includes a mass storage device for storing an operating system application programs and other program modules. The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable media provide non volatile storage for the computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable media can be any available media that can be accessed or utilized by the computer .

By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer .

According to various embodiments the computer may operate in a networked environment using logical connections to remote computers through a network such as a local network the Internet etc. for example. The computer may connect to the network through a network interface unit connected to the bus . It should be appreciated that the network interface unit may also be utilized to connect to other types of networks and remote computing systems. The computer may also include an input output controller for receiving and processing input from a number of input types including a keyboard mouse keypad pen stylus finger speech based and or other means. Other input means are available including combinations of various input means. Similarly an input output controller may provide output to a display a printer or other type of output device. Additionally a touch screen or other digitized device can serve as an input and an output mechanism.

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a networked personal computing device such as the WINDOWS operating systems from MICROSOFT CORPORATION of Redmond Wash. for example. The mass storage device and RAM may also store one or more program modules. In particular the mass storage device and the RAM may store other application programs such as a word processing application an inking application e mail application drawing application browser application etc.

It should be appreciated that various embodiments of the present invention can be implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance requirements of the computing system implementing the invention. Accordingly logical operations including related algorithms can be referred to variously as operations structural devices acts or modules. It will be recognized by one skilled in the art that these operations structural devices acts and modules may be implemented in software firmware special purpose digital logic and any combination thereof without deviating from the spirit and scope of the present invention as recited within the claims set forth herein.

Although the invention has been described in connection with various exemplary embodiments those of ordinary skill in the art will understand that many modifications can be made thereto within the scope of the claims that follow. Accordingly it is not intended that the scope of the invention in any way be limited by the above description but instead be determined entirely by reference to the claims that follow.

