---

title: Calculating web page importance based on web behavior model
abstract: Method for determining a webpage importance, including receiving web browsing behavior data of one or more users; creating a model of the web browsing behavior data; calculating a stationary probability distribution of the model; and correlating the stationary probability distribution to the webpage importance.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08103599&OS=08103599&RS=08103599
owner: Microsoft Corporation
number: 08103599
owner_city: Redmond
owner_country: US
publication_date: 20080925
---
Search services currently use conventional link analysis algorithms to compute the importance of a particular web page. Input data for link analysis algorithms may be obtained from link graphs which represent the web pages and the hyperlinks that link to those particular web pages. The link analysis algorithms employ a discrete time Markov process to model the behavior of a web user using the web pages and links listed in a link graph. Unfortunately link graphs may not accurately represent the importance of each webpage because links can be easily added and deleted by webmasters. Some webmasters even create web pages with link spam different link functions and other crawling strategies that may skew the calculation of the importance of a webpage via link analysis algorithms.

Described herein are implementations of various techniques for calculating a web page s importance using information from a web user s internet browsing behavior. In one implementation a webpage importance application may receive information pertaining to the web browsing behavior data of one or more web users. Using the web browsing behavior data the webpage importance application may reorganize the data into a browsing thread that may display a machine identification number from which the data may have been obtained from a list of Universal Resource Locator URL addresses that the web user may have accessed from his machine a time at which each URL address may have been accessed and the manner in which the user accessed each URL address e.g. via link or URL address entry .

After creating a browsing thread for each web user from which that data was obtained the webpage importance application may create a graph to represent the web browsing behavior data. The webpage importance application may use the browsing thread to add nodes and lines to the graph to represent a web user s browsing behavior.

The webpage importance application may create a node e.g. denoted by a circle on a browsing graph for each URL address listed in each browsing thread. In one implementation only one node may be created for each specific URL address. If a URL address was accessed after the user clicked a link from a different webpage the webpage importance application may draw a line from the node which represents the URL address with the link to the node which represents the accessed URL address. The line may be represented by an arrow that may point to the destination URL address. The webpage importance application may then store the graph on a browsing graph file. In addition to the nodes and lines that may be created on the browsing graph the webpage importance application may also store the time in which each URL address was accessed by each machine in the metadata portion of the browsing graph file.

The webpage importance application may then use the browsing graph file as an input for a webpage importance algorithm to calculate the importance of each URL address represented by a node in the browsing graph. The webpage importance algorithm may model the behavior of a web user by creating a continuous time time homogenous Markov process of the browsing graph. The importance of each node in the browsing graph may relate to a stationary probability distribution of each URL address listed in the continuous time time homogenous Markov process.

In order to speed up the calculation of the stationary probability distribution the webpage importance algorithm may use an Embedded Markov Chain EMC to represent the continuous time time homogenous Markov process. The EMC may be a discrete time Markov chain wherein the conditional probability of transitioning from one state webpage to another is represented therein. In this implementation the EMC model may take into account the transition probability of a web browser clicking a link to another webpage or typing in a new URL address.

The webpage importance algorithm may then use the time data stored in the metadata of the browsing graph file to estimate a time in which each web page was being accessed. The webpage importance algorithm may first calculate each user s raw staying time on each webpage. The webpage importance algorithm may then remove certain noise factors from the raw staying time data to account for a user s behavior that may not accurately reflect time in which a webpage was being accessed such as when the user may receive a phone call the load time of the webpage is slow and other similar delays that may result in an inaccurate representation of the time in which a web user may have been accessing the webpage.

After estimating the time in which each web page was being accessed for each user defined in the browsing graph the webpage importance algorithm may combine the EMC model and the estimated time for each webpage to calculate the stationary probability distribution of each node in the browsing graph. The stationary probability distribution value of each node may correlate to the importance the respective node s webpage.

The above referenced summary section is provided to introduce a selection of concepts in a simplified form that are further described below in the detailed description section. The summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

In general one or more implementations described herein are directed to calculating webpage importance based on the behavior of one or more web users. One or more implementations of various techniques for calculating webpage importance will now be described in more detail with reference to in the following paragraphs.

Implementations of various technologies described herein may be operational with numerous general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the various technologies described herein include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The various technologies described herein may be implemented in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that performs particular tasks or implement particular abstract data types. The various technologies described herein may also be implemented in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network e.g. by hardwired links wireless links or combinations thereof. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

The computing system may include a central processing unit CPU a system memory and a system bus that couples various system components including the system memory to the CPU . Although only one CPU is illustrated in it should be understood that in some implementations the computing system may include more than one CPU. The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus. The system memory may include a read only memory ROM and a random access memory RAM . A basic input output system BIOS containing the basic routines that help transfer information between elements within the computing system such as during start up may be stored in the ROM .

The computing system may further include a hard disk drive for reading from and writing to a hard disk a magnetic disk drive for reading from and writing to a removable magnetic disk and an optical disk drive for reading from and writing to a removable optical disk such as a CD ROM or other optical media. The hard disk drive the magnetic disk drive and the optical disk drive may be connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The drives and their associated computer readable media may provide nonvolatile storage of computer readable instructions data structures program modules and other data for the computing system .

Although the computing system is described herein as having a hard disk a removable magnetic disk and a removable optical disk it should be appreciated by those skilled in the art that the computing system may also include other types of computer readable media that may be accessed by a computer. For example such computer readable media may include computer storage media and communication media. Computer storage media may include volatile and non volatile and removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media may further include RAM ROM erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computing system . Communication media may embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and may include any information delivery media. The term modulated data signal may mean a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media may include wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above may also be included within the scope of computer readable media.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM including an operating system one or more application programs a browser application program data and a database system . The operating system may be any suitable operating system that may control the operation of a networked personal or server computer such as Windows XP Mac OS X Unix variants e.g. Linux and BSD and the like. The browser application may be a web browsing software that may be capable of recording the browsing activity of its user. The browser application will be described in more detail with reference to in the paragraphs below.

A user may enter commands and information into the computing system through input devices such as a keyboard and pointing device . Other input devices may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices may be connected to the CPU through a serial port interface coupled to system bus but may be connected by other interfaces such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device may also be connected to system bus via an interface such as a video adapter . In addition to the monitor the computing system may further include other peripheral output devices such as speakers and printers.

Further the computing system may operate in a networked environment using logical connections to one or more remote computers The logical connections may be any connection that is commonplace in offices enterprise wide computer networks intranets and the Internet such as local area network LAN and a wide area network WAN .

When using a LAN networking environment the computing system may be connected to the local network through a network interface or adapter . When used in a WAN networking environment the computing system may include a modem wireless router or other means for establishing communication over a wide area network such as the Internet. The modem which may be internal or external may be connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the computing system or portions thereof may be stored in a remote memory storage device . The remote memory storage device may include a webpage importance application . In one implementation the webpage importance application may be stored on the hard disk magnetic disk optical disk ROM or RAM . The webpage importance application will be described in more detail with reference to below. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

It should be understood that the various technologies described herein may be implemented in connection with hardware software or a combination of both. Thus various technologies or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the various technologies. In the case of program code execution on programmable computers the computing device may include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may implement or utilize the various technologies described herein may use an application programming interface API reusable controls and the like. Such programs may be implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s may be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

At step the webpage importance application may collect web browsing data from the browser application of one or more web users. In one implementation the browser application may keep a record of the URL addresses web pages it may have accessed the time at which each URL address may have been accessed and the manner in which the URL address was accessed in a toolbar log. The URL address may have been accessed by a user from a hyperlink on a different webpage or it may have been accessed after a user entered the URL address into the URL address input of the browser application .

In one implementation the webpage importance application may receive a log or record of the web browsing data that occurred on the browser application of one or more users. The webpage importance application may obtain a log from multiple web users in order to create a comprehensive and accurate browsing graph. Prior to receiving the web browsing data from one or more web users the webpage importance application may receive permission to receive the data from each user of the browser application via legal agreements or the like. In one implementation the identity of each user may remain anonymous when obtaining the log of the web browsing data from any web user.

At step the webpage importance application may create a browsing thread from the user browsing behavior data obtained from the one or more browser applications . In one implementation the web browsing data of each individual browser application may be separated into different browsing threads. The browsing thread may include a machine identification number to indicate where the web browsing data may have been obtained from the URL addresses accessed by the browser application the time at which each URL address was accessed and the means in which each URL address was accessed. In one implementation a browsing thread may be created for each machine identification number.

At step the webpage importance application may create a browsing graph. In one implementation the browsing graph may initially contain a blank page.

At step the webpage importance application may add a node for each URL address listed in each browsing thread created at step . A node may be represented on the browsing graph as a circle. In one implementation if two or more identical URL addresses appear in one or more browsing threads the identical URL addresses may be represented by only one node in the browsing graph. If a URL address appears multiple times on one or more browsing threads the webpage importance application may indicate the amount of times in which the URL address may have been accessed by coloring the node that represents the URL address darker or storing that information in the metadata of the browsing graph file. The browsing graph file may store the browsing graph and some other relevant information in its metadata.

At step the webpage importance application may add a line or link from a node representing a first accessed URL address to a node representing a second accessed URL address if the browsing thread indicates that the web user accessed the second URL address via a hyperlink from the webpage displayed on the first URL address. In one implementation the line may be represented by an arrow that may point from the node representing a first accessed URL address to the node representing a second accessed URL address. In one implementation if one link was used multiple times to access a particular URL address it may be represented by only one arrow in the browsing graph. In this case the webpage importance application may indicate the amount of times in which the URL address may have been accessed by coloring the arrow that connects to the URL address darker or storing that information in the metadata of the browsing graph file.

At step the webpage importance application may store the browsing graph and information pertaining to the time at which each URL address was accessed in a browsing graph file. In one implementation the time information may be stored in the metadata of the browsing graph file.

Each user browsing thread may include information pertaining to a user s web browsing behavior. In one implementation the user may use the browser application to access various URL addresses on the Internet. The information stored in the user browsing thread may include the machine identification the URL address the URL access time and the URL access method . In one implementation the browsing thread may list the URL addresses in chronological order according to their respective URL access times . The machine identification may be assigned a random number to keep the actual identity of each user anonymous.

The URL address may indicate a URL address that the web user may have navigated to on the Internet. The URL access time stamp may indicate the time at which the URL address was initially accessed or the time in which the URL address was completely loaded on the browser application . The URL access method may include either input or click. Input may refer to a user navigating to a URL address by entering the URL address into the browser application . Click may refer to a user clicking a hyperlink from a webpage that may connect to the URL address .

The browsing thread may be used by the webpage importance application to create the browsing graph as illustrated in the steps of the method . In one implementation the browsing graph may include one or more nodes and one or more arrows . Each node may represent each URL address that may be listed in the browsing thread . Each arrow may represent a hyperlink that existed on one webpage connected to another webpage. The head of the arrow may be directed at the node and represent the destination of the hyperlink. The tail of the arrow may be connected to the node and may represent the webpage that contained the hyperlink.

In one implementation the webpage importance application may incorporate all of the information obtained from each user s browsing thread on a single browsing graph . Since the browsing graph may include information pertaining to the web browsing behavior of all of the users it may have received the browsing thread from it may more accurately model a random user s web browsing behavior. The random user s web browsing behavior model or the browsing graph may then be used to calculate the importance of each webpage listed in the browsing graph . The browsing graph may be capable of storing billions of web user s browsing behavior patterns and these patterns may be interpreted as an implicit voting on webpage importance by each of the web users.

In one implementation the webpage importance application may split a user s web browsing activities into one or more sessions such that each session may represent a user s browsing activities during a single sitting. In order to group a user s web browsing activities into one or more sessions the browsing graph file may be used as an input into the session segmentation module . The session segmentation module may segment a user s browsing behavior into browsing sessions . In one implementation if the difference between the time stamps of two linked URL addresses is more than a specified amount of time the session segmentation module may create a new session . This kind of session segmentation may be referred to as a time rule. In another implementation the session segmentation module may also create a new session if the web user entered a new URL address into the browser application . This kind of session segmentation may be referred to as a type rule. Although the session segmentation module has been described as creating sessions based on the time or type rule it should be noted that sessions may also be created using a variety of other methods.

The sessions may be provided as an input into an estimation module . The estimation module may output the URL pairs the reset probability and the transition probability of each session . In one implementation the URL pairs may be created by putting together URL addresses that may be linked together by the arrow in between two nodes of the browsing graph .

The reset probability may correspond to each session that may have been segmented due to the type rule. In one implementation a URL address obtained by the type rule may be referred to as green traffic. The estimation module may regard URL addresses created by green traffic as the destinations of a random reset when web users do not want to use a hyperlink on a webpage . The estimation module may normalize the frequencies of the URL addresses being the first one in a session to get the reset probability of the URL address.

The transition probability may be determined by the estimation module by analyzing the transitions of the web user on the browsing graph via arrows . Each arrow on the browsing graph represents the transition between two URL addresses and the number of transitions between two nodes may be used as a weight factor in determining the transition probability .

The URL pairs may be used as an input into the estimated staying time module to find a raw staying time for each URL address. The raw staying time may refer to the time in which a URL address was being accessed. For example a user may navigate to a first URL address and remain on that URL address for a certain length of time before navigating to a second URL address. The actual time that expired between when the second URL address was accessed and when the first URL address was accessed may be referred to as the raw staying time. The estimated staying time module may calculate the raw staying time for each URL address by determining the difference between the times at which each URL address of the URL pair were accessed. In one implementation the estimated staying time module may estimate the raw staying time for a last URL address listed in a session by taking a random time sample from a distribution of times in which the URL address was being accessed in its records as the raw staying time. If the session is segmented by the type rule the estimated staying time module may use the difference between the time of the last URL address in the session and that of the first URL of the next session as the raw staying time.

After determining the raw staying time of each URL address the estimated staying time module may remove noise that may be contained within the raw staying times. Noise considerations may be due to Internet connection speed page size page structure and other factors. In order to remove the noise from the raw staying time the estimated staying time module may create an additive noise model to represent the observations and to conduct an unbiased and consistent estimation each staying time q. The staying time qmay be a more accurate representation of the time in which a URL address was being accessed because certain noise components may have been removed.

In one implementation suppose for page the estimated staying time module may have mobservations on the time in which a webpage was being accessed in the browsing graph file denoted as Z Z . . . Z and they have the same distribution as random variable Z. Without loss of generality the estimated staying time module may assume that Z is the combination of real time in which a web page was being accessed Tand noise U i.e. 1 

If noise U is governed by a Chi square distribution as Chi k then its mean and variance will be k and 2k respectively. Furthermore the mean and variance of Z may be and . By assuming U and Tto be independent the estimated staying time module may have 

In one implementation the browsing graph file may be represented as a continuous time time homogenous Markov process. However in order to compute a stationary probability distribution for this continuous time time homogenous Markov process the EMC module may find the embedded Markov chain EMC of this continuous time time homogenous Markov process.

Referring back to the outputs of the estimation module the reset probability and the transition probability may be used as inputs into an Embedded Markov Chain EMC module . The EMC module may create a transition rate matrix to represent the conditional probability of transitioning from one webpage to another. The EMC module may use the reset probability and the transition probability to create a discrete time Markov process featured by a transition probability matrix with zero values in all its diagonal positions and

The EMC module may define the browsing graph as G V W T where V v W w T T i j 1 . . . N denote nodes weights of arrows lengths of time in which a webpage was being accessed and reset probabilities respectively. N denotes the number of web pages in the user browsing graph. V may represent a set of nodes in which each node may represent a web page. W may represent a set of arrows and the weights of each arrow may be set according to the frequency of the arrows between the nodes. Tmay represent a set of time samples that represent the length of time that a user was accessing a web page. Sigma may represent a vector of reset probability or the normalized frequency of a user accessing a web page by typing the URL address directly into the browser application .

The EMC module may then add a pseudo node the N 1 node to G and add two types of arrows an arrow from the last URL address in each session to the pseudo node with the transition probability as its weight and an arrow from the pseudo node to the first URL address in each session with the reset probability as its weight. The EMC module may denote the new graph as tilde over G tilde over V tilde over W T tilde over where tilde over V N 1 tilde over . . . 0. V wave tilde over V may represent the union set of node set V and the additional pseudo nodes. W wave tilde over W is the union set of arrow set W and the arrows with weights between the nodes in V and the additional pseudo nodes. Sigma wave tilde over may represent the union vector of sigma and 0 i.e. tilde over . . . 0. Based on a large number of web users the transition probabilities and reset probabilities in the EMC may be estimated in the equation below 

The result of the equation may be used to determine the EMC and it may describe a web user s random walk on the browsing graph . The web user may go along the edges with the probability or he may choose to restart from a new page with the probability 1 . The selection of the new page is determined by the reset probability .

In one implementation the advantage of using the EMC for estimation may be that the estimation will not be biased by the limited number of observed transitions. Another advantage may be that the corresponding EMC is primitive and thus has a unique stationary distribution which may be used to calculate the stationary distribution of each node in an efficient manner such as the power method and the like.

The staying time and the EMC may then be used as inputs into the stationary probability distribution module to determine the webpage importance . The web page importance may correspond to the stationary probability distribution of each node on the browsing graph . The stationary probability distribution module may define a transition rate matrix as the derivation of the transition probability defined as P t when t goes to 0 if it exists e.g. QP 0 . In one implementation the matrix Q q may be referred to as the Q matrix for short. It has been proven that when the state space is finite there is a one to one correspondence between the Q matrix and P t and 

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

