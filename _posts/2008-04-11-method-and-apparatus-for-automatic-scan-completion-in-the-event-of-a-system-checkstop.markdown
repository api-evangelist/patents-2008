---

title: Method and apparatus for automatic scan completion in the event of a system checkstop
abstract: A method for automatic scan completion in the event of a system checkstop in a processor. The processor includes: a processor register; a millicode interface connected between the processor register and a checkstop scan controller; a checkstop logic circuit connected between the checkstop scan controller and a checkstop scan engine; and a scan chain engine and a scan chain connected to the checkstop scan engine. The method includes (a) upon occurrence of a checkstop serially reading data from a processor register and serially writing the data to latches of a scan chain register; and (b) upon occurrence of a system checkstop during (a), stopping the reading and writing and moving data sent before the system checkstop from latches of the scan chain where the data was stored when the system checkstop occurred to latches where the data would have been stored if the system checkstop had not occurred.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07966536&OS=07966536&RS=07966536
owner: International Business Machines Corporation
number: 07966536
owner_city: Armonk
owner_country: US
publication_date: 20080411
---
The present invention relates to fault recovery in processor systems more specifically it relates to a method and apparatus for automatic scan completion in the event of a checkstop error.

When a processing error occurs called a checkstop the data in various registers of a processor which are connected in a scan chain are scanned out in order to diagnose and recover from the error. Diagnosis is typically handled by an external service element while recovery is handled by a so far unused processor spare processor . When an error occurs error recovery code implemented in millicode running on a millicode interface extracts the data from the registers by using the scan chains in efforts to minimize the impact of the hardware failure to the operating system and the applications. If the error recovery code is interrupted in the middle of a checkstop scan by an event that leads to a system checkstop where the millicode interface is shut down the scan chains will only be partially rotated and error recovery will be difficult or impossible. Accordingly there exists a need in the art to overcome the deficiencies and limitations described hereinabove.

A first aspect of the present invention is a processor comprising a processor register a millicode interface connected between the processor register and a checkstop scan controller a checkstop logic circuit connected between the checkstop scan controller and a checkstop scan engine and a scan chain engine and a scan chain connected to the checkstop scan engine.

A second aspect of the present invention is a method of automatic scan completion in the event of a system checkstop the method comprising a upon occurrence of a checkstop serially reading data from a processor register and serially writing the data to latches of a scan chain register and b upon occurrence of a system checkstop during a stopping the reading and writing and moving data sent before the system checkstop from latches of the scan chain where the data was stored when the system checkstop occurred to latches where the data would have been stored if the system checkstop had not occurred.

A third aspect of the present invention is a method comprising providing a processor the processor comprising a process register a millicode interface connected between the process register and a checkstop scan controller the checkstop scan controller coupled to checkstop scan engine and a scan chain engine and a scan chain connected to the checkstop scan engine and connecting a checkstop logic circuit between the checkstop scan controller and a checkstop scan engine.

A checkstop is defined as the stoppage of instruction processing including stoppage to responses to interrupts by a processor as a result of a hardware failure. In one example the hardware failing is the processor itself. A system check stop as distinct from a simple checkstop is defined as a response to an error resulting in shutdown of the clock to the entire system.

Examples of millicode implemented instructions include but are not limited to start interpretive execution cross memory instructions interruption handlers resets and reliability availability and serviceability features. Millicode resides in a protected area of storage called the hardware system area which is not accessible to the normal operating system or application program. One example of a code implemented in millicode is Dynamic Processor Sparing Code which extracts data from the processor registers and passes the data to a spare processor by using the scan chains in response to a checkstop in an effort to minimize the impact of a hardware failure on the operating system and applications.

Millicode interface is connected between processor registers and checkstop scan controller . Millicode interface runs millicode that among the other actions described supra transfers data from processor registers to checkstop scan controller in the event of a checkstop. Checkstop logic circuit is connected between checkstop scan controller and checkstop scan engine . Scan commands from checkstop controller are passed to checkstop logic circuit which in the case of a checkstop are passed to checkstop scan engine . In the case of a system checkstop during a checkstop new scan command are generated by the finite state machine encoded in checkstop logic circuit and the new scan commands are passed to checkstop engine . Checkstop scan engine executes the scan commands or new scan commands. Data is passed directly between checkstop scan controller and checkstop scan engine . Checkstop scan engine is connected to scan chain engine and scan chains . Checkstop scan engine passes data and between scan chains and checkstop scan controller and lock requests see infra between checkstop logic circuit and scan chain engine . Checkstop scan engine passes scan errors to checkstop logic circuit as well. Scan chain engine controls the actual write and read of data into scan chains .

When a checkstop occurs data is in processor registers is transferred to scan chains through the path described supra. If a system checkstop should occur during the transmission of data the S CLK will turn off halting further data transmission however the V CLK continues to run. Checkstop logic circuit monitors ongoing scan operations. In the case of a system checkstop checkstop logic circuit which has monitored all scan commands will take over control and complete the scan chain rotation. While no new data can be added checkstop logic circuit will clock the data around the scan chain until the data that was written before the system checkstop is in the proper latch of the scan chain.

In a data path exists from processor registers through millicode interface through checkstop scan controller and through checkstop scan engine to scan chains . The data path does not pass through checkstop logic circuit . A command path exists between checkstop scan controller through checkstop logic circuit and through checkstop scan engine to scan chain engine . All the information needed by checkstop logic circuit to generate new scan commands is contained in the scan commands transmitted by checkstop scan controller before the system checkstop.

A scan start command SCAN START must be executed first before any other scan command can be executed. The scan start command sets up scan chain selects tells checkstop scan engine see to request a lock LOCK REQ for the scan chains and sets a scan length decrement register to the total length of the scan chain selected. Once a lock has been granted a fixed N bit header is scanned into the selected scan chain where N is a positive integer such 8 16 etc.

A scan start command must be executed before issuing a scan skip SCAN SKIP command so that the scan chain selects are properly setup and a lock has been obtained.

The scan skip command is used to rotate a scan chain to the proper position to allow reads and or writes of the data transmitted before the system checkstop occurred. The scan skip command rotates the number of bits indicated in the command. If the scan length zero then the scan kip command will skip to the end of the scan chain using the remaining count in the scan length decrement register.

A scan start command must have been executed before issuing a scan read command SCAN READ so that the domain and scan chain selects are properly setup and a lock has been obtained. The scan read command is used to read anywhere from 1 to M bits of data from the selected scan chain where M is a positive integer such as 8 16 64 etc. The scan read command reads the number of bits indicated by a scan length vector within the scan read command. If the scan length is set to 0 then M bits of data are read and returned on a read data bus.

A scan start command must have been executed before issuing a scan write command SCAN WRITE so that the scan chain selects are properly setup and a lock has been obtained. The scan write command is used to write anywhere from 1 to M bits of data into the selected scan chain. The scan write command writes the number of bits indicated by the scan length vector in the command. If the scan length is set to 0 then M bits of data from the command are shifted into the scan chain.

The scan reset command RESET resets checkstop scan engine see and error log registers after an error has occurred. Examples of errors include but are not limited to parity errors and latch flip errors.

In the following description of the operation of finite state machine the numbers through in parenthesis correspond to the numbers through in and indicate the state or transition in where the activity described occurs. The normal uninterrupted scan operation for reading out processor registers see in a checkstopped processor consists of the following command sequence SCAN START one or more SCAN SKIP SCAN READ SCAN WRITE commands in any order SCAN SKIP to end if scan rotations not already completed SCAN DONE .

Checkstop logic circuit see constantly monitors to determine if checkstop scan engine see is executing a command CMD RUNNING or if it is waiting for the next command IDLE. Initially checkstop logic circuit is in the IDLE state and goes to the CMD RUNNING state when checkstop scan engine see sends a command to the scan chain engine see . If the command has finished checkstop logic circuit goes back to the IDLE state. Furthermore checkstop logic circuit monitors the LOCK REQ to determine if a scan sequence is active. LOCK REQ is set by the SCAN START command and reset by the SCAN DONE command.

When a system checkstop SYS CHECKSTOP occurs checkstop logic circuit see can be either in the CMD RUNNING state or in the IDLE state . If checkstop logic circuit is in the CMD RUNNING state checkstop logic circuit waits until the command ends and checkstop logic circuit returns to the IDLE state . When in the IDLE state or when returned to the IDLE state after a system checkstop there are two different responses available to checkstop logic circuit depending on whether or not LOCK REQ is asserted. If a LOCK REQ is not asserted no actions is taken because scan chains see are not rotated and finite state machine transitions directly to the end state . If LOCK REQ is asserted checkstop logic circuit tries to finish the current scan chain rotation by one of two transitions or depending upon whether there is an ERROR or NOT ERROR asserted. If the last scan command encountered an error ERROR is asserted and checkstop logic circuit sends a RESET CMD to checkstop scan engine see to try and clear the error and enable scan operations again. If ERROR NOT is asserted or if the error was successfully cleared then checkstop logic circuit sends a SCAN SKIP command to checkstop scan engine . This finishes the rotation of the scan chain and puts the scan chain into its original rotational state.

After the SCAN SKIP command is completed the checkstop logic circuit see sends a SCAN DONE command to de assert LOCK REQ. This re enables access to the scan chain see for a service processor. When processor registers see are now scanned out by the service processor the alignment of each latch inside scan chains see is correctly aligned again. In one example the service processor performs analysis of the contents of scan chains which reflect the state of process registers to try to determine the cause of the checkstop. In one example the service processor performs diagnosis of the contents of scan chains which reflect the state of process registers to try recover from the error that caused the checkstop.

In in response to a checkstop four data bits out of X data bits where X is greater than 4 have been clocked using scan clocks generated by checkstop scan engine see into scan chain A and then a system checkstop has occurred. The data bit in latch is not the proper data bit that would be in latch if the system checkstop had not occurred and the scan chain fully rotated clocked 10 times . The proper data bit is data bit .

In enough additional clocking six clocks in this example using scan clocks generated by checkstop scan engine see has been performed to restore the correct order of the data bits in the scan chain where it may be read out to the external service element through the scan out.

Thus the embodiments of the present invention provide that the correct number of scan commands are applied to ensure that data scanned before a system checkstop is stored in the proper latch of the scan chain i.e. complete scan rotation in order allow recovery of the data stored in the process registers as a result of a checkstop.

The description of the embodiments of the present invention is given above for the understanding of the present invention. It will be understood that the invention is not limited to the particular embodiments described herein but is capable of various modifications rearrangements and substitutions as will now become apparent to those skilled in the art without departing from the scope of the invention. Therefore it is intended that the following claims cover all such modifications and changes as fall within the true spirit and scope of the invention.

