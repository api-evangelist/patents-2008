---

title: Methods and apparatus for making a hypermedium interactive
abstract: A system and method of making a hypermedium page interactive. In one embodiment the system includes a hyperlink on the hypermedium page displayed on a client node; a hyperlink configuration file (corresponding to the hyperlink on the client node) located on a network server node; and a client agent located on the client node. In response to a user selecting the hyperlink on the hypermedium page, the client agent establishes a communications link from the client agent to an application execution server agent on an application server using the information located in the configuration file obtained from the network server node. In response to the creation of the communications link between the application execution server agent and the client agent, the application executes on the application execution server and the user is capable of interactively using the application running on the application execution node from the client node. Data input and display occurs at the client node under the control of the client agent.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08090793&OS=08090793&RS=08090793
owner: Citrix Systems, Inc.
number: 08090793
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20080325
---
This application is a continuation of application U.S. Ser. No. 10 689 824 filed on Oct. 20 2003 which is now U.S. Pat. No. 7 359 953 which is itself a continuation of application U.S. Ser. No. 10 068 790 filed on Feb. 6 2002 which is now U.S. Pat. No. 6 691 157 which is itself a continuation of application U.S. Ser. No. 09 247 220 filed on Feb. 10 1999 which is now U.S. Pat. No. 6 370 570 which is itself a continuation of application U.S. Ser. No. 08 556 623 filed on Nov. 13 1995 which is now U.S. Pat. No. 6 088 515 all of which are incorporated herein by reference.

The invention relates generally to the field of computer communications and more specifically to the field of remote application processing.

A hypermedium is a graphical display which contains a series of graphic and textual images which are referred to as hyperlinks. Each hyperlink typically corresponds to additional information which is available to a user of the hypermedium. For example a hypermedium display might be an encyclopedic article about flight. If the graphical display of the article includes a picture of a rocket and if the user is able to obtain information about the engine of the rocket by selecting typically by using a pointing device referred to as a computer mouse a portion of the display showing the engine the portion of the picture containing the rocket engine is referred to as a hyperlink. That is the portion of the picture containing the engine is a link to information about the engine. The activation of a hyperlink causes the hypermedium to request a data file of the desired information from the program actually controlling the hypermedium.

When a hypermedium is used in conjunction with a network for example the world wide web or the internet a user on a client node on the network first accesses what is termed a home page or a web page. This home page or web page is obtained from another node on the net termed a network server and is displayed on the client node by a program termed a network browser or web browser. In such a case when the user selects the hyperlink in the previous example the portion of the display showing the rocket engine a request is made to the network browser for the data file containing the requested information. The network browser on the user s node establishes communication with the network node the data server having data corresponding to the requested hyperlink. In this case the node having information about the rocket engine contains the information required by the hyperlink.

Although hypermedium has been used to transfer information to a user in the manner just discussed it is desirable to be able to use a hypermedium display to interactively execute applications such as database programs located on another computer an application execution server on the network. The present invention relates to a method and apparatus to accomplish this task.

The invention relates to a system of making a hypermedium page interactive to thereby permit an application to be executed on one node and the results displayed and data entered on another node. In one embodiment the system includes a client node a network server node and an application execution server node interconnected by a communication link. A hyperlink on the hypermedium page is displayed on the client node and a hyperlink configuration file corresponding to the hyperlink on the client node is located on the network server node. In one embodiment a client agent is located on the client node and a server agent is located on the application execution server node. A communication link is created by the client agent between the client agent on the client node and the server agent on the application execution server node in response to data in the hyperlink configuration file. The system also includes an application on the application execution server node which executed on the application execution server node in response to the communications link between the client agent and the server agent. The application running on the application execution node then communicates with the client agent through the server agent. The client agent on the client node is responsible for receiving data input from the user and transferring the data to the application on the application execution node and receiving data from the application on the application execution node and displaying data output to the user on the client node.

The invention also relates to a method of making a hypermedium page interactive. The method includes the steps of selecting a hyperlink on the hypermedium page displayed on a client node retrieving from a server node to the client node a hyperlink configuration file corresponding to the hyperlink and starting a client agent on the client node. The method further includes the steps of creating a communications link between a server agent on an application execution server and the client agent starting the application on the application execution server in response to the connection communicating data between the client agent on the client node and application on the application execution node and managing the display and input of data on the client node.

Referring to and in brief overview an embodiment of an interactive hypermedium system of the invention includes a client node a network server node and an application execution server node interconnected by a communications link herein referred to without any loss of generality as a network or web. Although only one client node network server node and application execution server node are shown in for clarity an actual network may include many such nodes. Alternatively the services provided by each of the nodes listed may be combined in one or more nodes. For example the application execution server and the network server may in fact be the same node. In the extreme it is possible for all functions to be performed by the same node although such would not typically be the case. In addition although only one application is shown on the application execution server in reality an application execution server node typically includes many applications . Each node on the network or web includes a processor which may vary significantly from other processors on the web in terms of computing power and associated hardware. Further the applications available for execution on each node may be different.

A user on a client node wishing to run the application program which is located on the application execution server on the web does so through a graphical user interface which is herein referred to without any loss of generality as a hypermedium located on the client node . The graphical interface is displayed on a graphical display device . Data is entered by the users through a mouse and a keyboard located on the client node . The graphical display or page which the user first views on the hypermedium is referred to herein without any loss of generality as the home page or web page of the application . A page or home page of the hypermedium includes a graphic link or textual link herein referred to without any loss of generality as a hyperlink. The web page is displayed by a process referred to herein without any loss of generality as a network browser executing on the client node .

The network browser obtains the first page or web page from a network server node and displays the web page on the hypermedium for the user to view on the graphical display device . When the user selects an application program to execute by selecting a graphical or textual hyperlink using the mouse or keyboard the network browser obtains a network configuration file corresponding to the selected application from a predetermined network server and starts a client agent which will communicate with the selected application . This will be discussed in more detail below.

The client agent reads the configuration file and establishes a communications link to a server agent on the application execution server specified by the configuration file . In one embodiment the configuration file includes the name of the application and the node location of the application corresponding to the hyperlink . The configuration file may also contain optional information such as authentication or authorized user information. Server agent performs the operations necessary such as authentication to permit the client agent access to the application and once access is permitted starts the application requested by the user. Once the application is executing on the application execution server the application communicates through the server agent directly with the client agent without intervention by the network browser . The client agent is then responsible for receiving data from the user through the mouse and keyboard and transmitting it to the application program the application execution server . Similarly the client agent is responsible for receiving data from the application on the application execution server and displaying the data in an application display window on the graphical display device on the client node . It should be noted that the application display window may be located within the boundaries or outside the boundaries of the hypermedium . When the application is completed the server agent instructs the client agent to disconnect the communication link between the client agent and the server agent and the server agent waits for the next connection.

Next when a user wishes to execute an application from a hypermedium environment for example a database program the hypermedium is displayed in a manner that is well known to those skilled in the art. When the user selects a hyperlink on the page of the hypermedium Step by using the mouse or keyboard on the client node a request is made to the network browser for the corresponding data file Step . In this example the filetype .RMT is requested.

The network browser obtains the corresponding configuration file from the network server which is specified in the file request made by the hyperlink to the network browser Step . The network browser then compares the obtained configuration file with the registration file of client agent names which it maintains Step . If the client agent specified by the configuration file is found in the registration file the client agent is started Step .

The invoked client agent reads the configuration file Step and based upon the information in the configuration file begins to establish a communication link with the server agent on the application execution server Step in this case the sales database application execution server generally .

Considering the process of beginning the communications link of step in more detail communication begins with the server agent monitoring communication activity on the network . At this point no protocol assumptions are made by the server agent beyond those necessary for the transport layer. Similarly the client agent also makes no assumption of the communications protocol beyond that required by the transport layer. Once the server agent determines that a client agent is attempting to communicate with it the server agent transmits a message to the client agent indicating that service is available.

Once the client agent determines that service is available on the application execution server node the client agent transmits a message to the server agent indicating that it is ready to proceed with the communication protocol. Once the server agent has responded that it is ready to continue the communication protocol the client agent enables the protocol necessary for it to run the application . In response to the message from the client agent the server agent also enables the required protocol. The server agent then transmits a message using the required protocol indicating that the client agent s request has been received and accepted.

In response the client agent and the server agent exchange a set of messages which negotiate the parameters under which communications will occur. Once negotiations are complete the client agent and the server agent are able to communicate as necessary for the application to be run by the user.

Once the communications protocol has been established and the server agent has authenticated the client agent Step for example determining that the user has permission to read and write to the database the application Step is run on the application execution server . At this point application running on the application execution server is communicating via the server agent with the client agent on the client node . The client agent is now responsible for transmitting data input by the user using the mouse and keyboard to the application running on the application execution server . Further the client agent is responsible for receiving data for display from the application and displaying that data in the application window on the graphical display device of the client node .

It should be noted that the underlying presentation protocol which passes data to a transport layer such as TCP IP must be capable of transferring graphical information. Examples of such protocols which may be used for interactive hypermedia communication include public domain X WINDOWS protocol and the proprietary ICA protocol of Citrix Systems Inc.

Thus the above described system permits a user on a client node which may have very limited resources to start and interact with an application program located on another application execution server node . The application then runs on the application execution server node and the data is input and the results displayed on the client node .

These and other examples of the concept of the invention illustrated above are intended by way of example and the actual scope of the invention is to be determined solely from the following claims.

