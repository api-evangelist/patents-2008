---

title: Persistent personal messaging in a distributed system
abstract: A persistent personal messaging system provides tuple space functionality supporting a user changing between a plurality of client devices, even within a loosely coupled, distributed system for persistent personal messaging. A user, irrespective of which messaging client they are using, logs on to the system. The act of logging on places a tuple, representing the user, into the tuple space. A “contacts” service agent finds the friends and groups that the user belongs to and notifies other users that the user has logged on. Given the on-line status of other users and groups, a “history” service agent will retrieve previous messages from the tuple space that formed the user's conversations with users and groups, as if the user had never logged off or switched devices. When the user adds a new message to any conversation, the message is added as a tuple to the tuple space.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08060603&OS=08060603&RS=08060603
owner: QUALCOMM Incorporated
number: 08060603
owner_city: San Diego
owner_country: US
publication_date: 20080618
---
The present Application for Patent is related to the co pending U.S. patent application Ser. No. 12 141 478 entitled User Interfaces For Service Object Located In A Distributed System by Jackson et al. filed on even date herewith assigned to the assignee hereof and expressly incorporated by reference herein and U.S. patent application Ser. No. 12 141 682 entitled Apparatus and Method of Managing Electronic Communities of Users to Jackson et al. filed on even date herewith assigned to the assignee hereof and expressly incorporated by reference herein which in turn claimed priority to Provisional Application No. 60 945 091 entitled Apparatus and Method of Managing Communities of Users filed 19 Jun. 2007.

The described aspects relate to interactive workspaces and ubiquitous computing. More particularly it pertains to an infrastructure for a population of disparate computing platforms to readily interface to a service object located in a distributed system to obtain persistent personal messaging.

A distributed computer system such as but not limited to the Internet is characterized by rapid real time interchange among many dissimilar processes executing simultaneously on a large array of dissimilar and geographically diverse processors. A distributed computer system s resources are usually spatially separated and the execution of its applications often involves multiple execution threads that can be widely separated in time.

Operators for a population of users of client devices compete in a competitive evolving communication marketplace. It is difficult to satisfy user expectations for various services especially over distributed computer systems. Often user expectations are at variance with each other in having different preferred service providers such as searching. In addition certain types of content can be segregated in different nodes of a distributed network with proprietary interfaces that frustrate accessing these services.

Client devices are increasingly mobile with communication capabilities as their principal purpose or having wireless communication capabilities to extend connectivity. End users desire to access services with these mobile communication devices that were previously the domain of terminals work stations and general purpose computers. The latter devices intended for general purpose computing have had a tendency toward standardization or at least to accommodate a wide range of usage environments. By contrast mobile communication devices are progressed with a priority toward economic manufacture small size and extended battery service life with performance focused on wireless communication rather than processing capabilities. Furthermore the evolution of broadcast bands and protocols has tended to encourage a proliferation in communication chipsets. As such offering of various services to users of mobile communication devices has been limited especially as compared to the larger current market for users of general purpose computers.

A number of obstacles discourage addressing the challenges of deploying services to mobile communication devices as is conventional for a general purpose computer. The communication bandwidth to mobile communication devices is often constrained as compared to broadband channels to general purpose computers discouraging downloading of interfacing software to properly configure the mobile communication device for various services. Often the user interface of the mobile communication device is severely constrained in size limiting display size and the number of control buttons that can be presented further complicating such configuring. Moreover many users tend to make use of mobile communication devices in situations e.g. traveling that do not lend themselves to such focused interaction.

One such function that is complicated by the unique constraints and pattern of usage of mobile devices is instant messaging. Often a person will use several different instances of an Internet messaging client such as on a desktop personal computer PC at work on a laptop PC at home and on a mobile device. One problem is that there is no continuity between using the different devices. A conversation with a single person or a group that is started on a client running on the PC is broken and lost once the user switches to the client on the laptop or mobile device.

The following presents a simplified summary in order to provide a basic understanding of some aspects of the present disclosure. This summary is not an extensive overview and is intended to neither identify key or critical elements nor delineate the scope of such aspects. Its purpose is to present some concepts of the described aspects in a simplified form as a prelude to the more detailed description that is presented later.

In accordance with one or more aspects and corresponding disclosure thereof various features are described in connection with use of a client device such as a mobile communication device for accessing services via a loosely coupled distributed network that advantageously maintains continuity of instant messaging communications in a tuple space that can be readily accessed from a wide variety of computing platforms providing seamless accessibility to various remote clients.

In one aspect a method is provided for persistent messaging services to a population of client devices connected to a distributed network. A user tuple is placed in a tuple space for a user initiating active communicating with a persistent messaging service from a client device. A message tuple stored in the tuple space is located that matches the user tuple for a prior messaging session. A historical message derived from the message tuple is sent to the client device.

In another aspect at least one processor is provided for persistent messaging services to a population of client devices connected to a distributed network. A first module places a user tuple in a tuple space for a user initiating active communicating with a persistent messaging service from a client device. A second module locates a message tuple stored in the tuple space that matches the user tuple for a prior messaging session. A third module sends a historical message derived from the message tuple to the client device.

In an additional aspect a computer program product is provided for persistent messaging services to a population of client devices connected to a distributed network. A computer readable medium comprising sets of codes for causing a computer to place a user tuple in a tuple space for a user initiating active communicating with a persistent messaging service from a client device to locate a message tuple stored in the tuple space that matches the user tuple for a prior messaging session and to send a historical message derived from the message tuple to the client device.

In a further aspect an apparatus is provided for persistent messaging services to a population of client devices connected to a distributed network that has means for placing a user tuple in a tuple space for a user initiating active communicating with a persistent messaging service from a client device means for locating a message tuple stored in the tuple space that matches the user tuple for a prior messaging session and means for sending a historical message derived from the message tuple to the client device.

In yet another aspect an apparatus is provided for persistent messaging services to a population of client devices connected to a distributed network. A computing platform hosts a tuple space performing a persistent messaging service. A messaging gateway places a user tuple in the tuple space for a user initiating active communication between a client device and the messaging gateway via a communication network. The messaging gateway further locates a message tuple stored in the tuple space that matches the user tuple for a prior messaging session and sending a historical message derived from the message tuple to the client device via the communication network.

In yet an additional aspect a method is provided for receiving persistent messaging services from a distributed network. An initiation of active communicating with a persistent messaging service from a client device causes placement of a user tuple in a tuple space for a user. The initiation further causes locating of a message tuple stored in the tuple space that matches the user tuple for a prior messaging session. A historical message can then be received that is derived from the message tuple.

In yet a further aspect at least one processor is provided for receiving persistent messaging services from a distributed network. A first module initiates active communicating with a persistent messaging service from a client device to cause placement of a user tuple in a tuple space for a user and to cause locating of a message tuple stored in the tuple space that matches the user tuple for a prior messaging session. A second module receives a historical message derived from the message tuple to the client device.

In yet a further additional aspect a computer program product is provided for receiving persistent messaging services from a distributed network. A computer readable medium comprises sets of codes for causing a computer to initiate active communicating with a persistent messaging service from a client device to cause placement of a user tuple in a tuple space for a user and to cause locating of a message tuple stored in the tuple space that matches the user tuple for a prior messaging session and to receive a historical message derived from the message tuple to the client device.

In yet another additional aspect an apparatus is provided for receiving persistent messaging services from a distributed network having means for initiating active communicating with a persistent messaging service from a client device to cause placement of a user tuple in a tuple space for a user and to cause locating of a message tuple stored in the tuple space that matches the user tuple for a prior messaging session and having means for receiving a historical message derived from the message tuple to the client device.

In another additional aspect an apparatus is provided for receiving persistent messaging services from a distributed network. A communication module controls a transmitter and a receiver for communicating over a communication network to a gateway that operably interacts with a tuple space performing a persistent messaging service. A user interface initiates active communicating with a persistent messaging service via the communication module to cause placement of a user tuple in the tuple space for a user and to cause locating of a message tuple stored in the tuple space that matches the user tuple for a prior messaging session. The user interface receives via the communication module and receiver a historical message derived from the message tuple.

To the accomplishment of the foregoing and related ends one or more aspects comprise the features hereinafter fully described and particularly pointed out in the claims. The following description and the annexed drawings set forth in detail certain illustrative aspects and are indicative of but a few of the various ways in which the principles of the aspects and versions may be employed. Other advantages and novel features will become apparent from the following detailed description when considered in conjunction with the drawings and the disclosed versions are intended to include all such aspects and their equivalents.

A persistent personal messaging system provides tuple space functionality supporting a user changing between a plurality of client devices even within a loosely coupled distributed system for persistent personal messaging. A user irrespective of which messaging client they are using logs on to the system. The act of logging on places a tuple representing the user into the tuple space. A contacts service agent finds the friends and groups that the user belongs to and notifies other users that the user has logged on. Given the on line status of other users and groups a history service agent will retrieve previous messages from the tuple space that formed the user s conversations with users and groups as if the user had never logged off or switched devices. When the user adds a new message to any conversation the message is added as a tuple to the tuple space. Because tuples have a lease old messages in a conversation can be expired automatically or persisted externally after a determined period of time. Because of the nature of a tuple space it is also possible to search across the tuple space for commonality amongst users and groups to create virtual super groups. A super group can be targeted with specific messages. For example a super group which contains all current users and groups which have an interest in football can be targeted by a shout service agent that will inject a latest football result into their conversations.

As used in this application the terms component module system and the like are intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a server and the server can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

The word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as preferred or advantageous over other aspects or designs.

Furthermore the one or more aspects may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed aspects. The term article of manufacture or alternatively computer program product as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. For example computer readable media can include but are not limited to magnetic storage devices e.g. hard disk floppy disk magnetic strips etc. optical disks e.g. compact disk CD digital versatile disk DVD etc. smart cards and flash memory devices e.g. card stick etc. . Additionally it should be appreciated that a carrier wave can be employed to carry computer readable electronic data such as those used in transmitting and receiving electronic mail or in accessing a network such as the Internet or a local area network LAN . Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope of the disclosed aspects.

Various aspects will be presented in terms of systems that may include a number of components modules and the like. It is to be understood and appreciated that the various systems may include additional components modules etc. and or may not include all of the components modules etc. discussed in connection with the figures. A combination of these approaches may also be used. The various aspects disclosed herein can be performed on electrical devices including devices that utilize touch screen display technologies and or mouse and keyboard type interfaces. Examples of such devices include computers desktop and mobile smart phones personal digital assistants PDAs and other electronic devices both wired and wireless.

In a distributed system allows client devices such as mobile communication devices to examine a tuple space operating on a computing platform to find messaging services such as a messaging interface service tuple . An appropriate attributes depicted as user interface code from the service tuple can then be loaded and executed as a search interface on the client device in the illustrative depiction. Thereby a user can interact with persistent messaging services via a communication module of the client device to maintain continuity with a prior messaging conversation that the user engaged in via another client device .

In the illustrative depiction the persistent messaging system includes a status service tuple that interacts with user tuples . A history service tuple interacts with history tuples . A contacts service tuple interacts with the user tuples . A messaging service tuple interacts with a message tuple that in turn can interact with the history tuples . A shout service tuple and an advert service tuple each interacts with interest attributes of the user tuples .

An operator such as a carrier for digital services via a radio access network or digital cellular service can provide a gateway between the client device and the tuple space . In particular a messaging component that relays personal messaging through a communication network to the plurality of client devices as validated by a subscriber services component .

The tuple space is a globally shared associatively addressed memory space that is organized as a grouping of tuples. A tuple is the basic element of a tuple space system. In the context of a tuple space based coordination language like Linda a tuple is a vector having fields or values of certain types. In a broader sense a tuple is an entry in an information storage system. For example a row in a relational database system can be referred to as a tuple.

In Linda like languages constructs called templates are used to associatively address tuples via matching techniques. A template matches a tuple if they have an equal number of fields and if each template field matches the corresponding tuple field.

Tuple space based coordination languages provide a simple yet powerful mechanism for inter process communication and synchronization which is the crux of parallel and distributed programming. A process with data to share generates a tuple and places it into the tuple space. A process requiring data simply requests a tuple from the tuple space. Tuple space programs may be easier to write and maintain for a number of reasons including the following 

 1 Destination uncoupling fully anonymous communication the creator of a tuple requires no knowledge about the future use of that tuple or its destination.

 2 Spatial uncoupling because tuples are retrieved using an associative addressing scheme multiple address space disjoint processes can access tuples in the same way.

 3 Temporal uncoupling tuples have their own life span independent of the processes that generated them or any processes that may read them. This enables time disjoint processes to communicate seamlessly.

The implementation of the tuple space can be either closed or open. The closed implementations use compile time analysis of object and source code to provide highly efficient closed programs. The open implementations allow processes agents and programs to coordinate through tuple spaces without the run time system requiring any prior knowledge. Essentially the open implementations provide a persistent data store.

The Linda language uses three standard instructions or primitives. These are with their informal semantics 

 2 in template If a tuple exists that matches the template then remove the tuple and return it to the agent performing the in. If no matching tuple is available then the primitive blocks until a matching tuple is available.

 3 rd template If a tuple exists that matches the template then return a copy of the tuple to the agent that performed the rd. If there is no matching tuple then the primitive blocks until a matching tuple is available.

Tuple space comprises a data repository and each of a service tuple and a data tuple placed in tuple space comprises an object having an ordered set of data comprising a tuple type and tuple attributes . Further tuple attributes may vary depending upon tuple type . The tuple space comprises an abstract space operable to receive data objects e.g. tuple and includes a predetermined set of operations that can be performed within the space. For example the predetermined set of functions may include an in function and a rd function which both take input parameters that allow the selection of specific tuples in the space by matching the input parameters where given with those values present within the tuple space. Additionally both the in and rd functions may have non blocking equivalents inp and rdp . In some aspects the predetermined set of functions may include a set of operations such as JAVA methods that may be performed on both tuple space and tuple .

Further in a specific example each tuple is an instance of a com.qualcomm.qspaces.linda.Tuple class or subclass and is created with a set of attributes defined by an array of objects which are specified when the tuple is constructed. The array can be zero length however in some aspects the array may not be null. In addition in some aspects none of the individual attribute objects in the array may be null.

In some aspects when the tuple is first constructed and every time the respective attributes are retrieved from the respective tuple the array of objects may be defensively copied using a very fast form of in memory serialization. This process allows the tuple to be immutable and therefore guarantees the integrity of tuple space in which the tuple resides.

In the above noted aspects tuple equality adheres to the same equality principles of any JAVA object including the symmetry rule which states that if t.equals t then t.equals t .

Specifically a tuple equals another tuple e.g. t.equals t if t known as a template meets the following criteria 

2 The attributes of the template t are equal to the attributes of the tuple t meaning that t s attributes are the same as t s attributes irrespective of their order.

In other aspects a tuple matches another tuple e.g. t.matches t if t known as a template meets the following criteria 

2 The attributes of the template t match the attributes of the tuple t meaning that t s attributes are the same set or a subset of t s attributes irrespective of their order.

When matching one tuple with another the symmetry rule does not apply so t.matches t does not necessarily equate to t.matches t .

In some aspects the comparison of one set of tuple attributes with another uses the normal object equality rules so any object used as a tuple attribute can implement the object.equals Object obj and object.hashcode methods.

A tuple is added to tuple space with a lease . Lease is a period of time for example specified in milliseconds which defines how long the tuple will remain in the respective tuple space . For example lease having a value of zero may indicate that the respective tuple never expires. Once lease has expired for a respective tuple the tuple is automatically removed from tuple space .

Service tuples represent services that interact with by clients of the tuple space such as client devices . Further service tuples are also autonomous live JAVA objects in their own right which may also interact with tuple space and other tuples in the space. Service tuples may be discovered in the same manner as other tuples e.g. by matching the class and attributes of the tuple. In some aspects service tuples may not be used in this way however rather service tuples are interacted with indirectly by placing other tuples such as data tuples into tuple space .

For example a client such as a respective client device may create data tuple of class A with attributes abc and 123 and places the tuple into tuple space . As such data tuple can be described using the following notation 

Service tuple is a live object which can interact with tuple space in the same way as a client application. As such in this example service tuple has been instantiated and is blocking on a read from tuple space for any tuples with a matching template for class A and any attributes. Such a matching criterion can be described as follows 

where s and x mean that any values of the string s and the integer x will be matched. Consequently tuple space matches the template from service tuple and will then read tuple A from tuple space . In this manner the described aspects pass parameters in the form of tuples to a service.

Further in system it is possible to embed objects that represent user interfaces into the service objects themselves. Consider the following user interface service tuple 

The service tuple for instance can contains three user interface objects such as a user interface A attribute e.g. defined in JAVA a user interface B attribute e.g. defined in ADOBE FLASH and a user interface C e.g. defined in uiOne technologies of QUALCOMM Incorporated of San Diego Calif. . In the context of mobility the present aspects enable the offering of a service across a wide variety of wireless devices each with its own specific requirements whether in terms of support of different technologies such as Java Flash or uiOne or even multiple variants of a single technology optionally including optimizations for screen size or other device specific properties. A respective client device and corresponding application and or any other party to system is thus able to locate a user interface service object and then load user interface components from it.

Data tuple may be placed into tuple space either directly by a respective client device such as a wireless device or alternately by a data source such as operator gateway as a service with which client device interacts or a service connected to the service interacting with client device . For example client device may be any type of computerized wireless device such as a cellular telephone a satellite telephone a PDA a laptop computer etc.

Referring to for example a communications network includes one or a plurality of client devices wireless telephone devices in this case that utilizes a wireless network to communicate with wired network e.g. a local area network LAN etc. having network device or server and or storage device and or data source . One or both of network device server and or storage device may include tuple space and some portions the above discussed components of system . Further data source may include a processor and a memory in communication with the processor wherein the memory comprises a tuple generation module having tuple generation logic operable to generate a plurality of data tuples from any source of data operable to readily interface with unknown services such as a web based transactional service. In particular wireless device includes a computer platform having a memory in communication with a processor such as via an application programming interface API that enables interaction with any resident applications such as client identification component and a search service interface that is located in tuple space .

Further network device or server and or storage device and or data source may include a processor and a memory in communication with the processor as well as an interfacing search and rating module not depicted stored in the memory and executable by the processor wherein the interface search and rating module comprises tuple space service tuple and rating service tuple described above. Wireless network is connected to wired network via a carrier network . Network device or server and or storage device and or data source may be present on communications network with any other network components that are desired to provide community management capabilities and or cellular telecommunication services. Network device or server and or storage device and or data source may communicate with carrier network through data links and which may be data links such as the Internet a secure LAN WAN or other network. Carrier network controls messages generally being data packets sent to a mobile switching center MSC . Further carrier network communicates with MSC by the network such as the Internet and or POTS plain old telephone service . For example in network a network or Internet portion transfers data and the POTS portion transfers voice information. MSC may be connected to multiple base stations BTS by another network such as a data network and or Internet portion for data transfer and a POTS portion for voice information. BTS ultimately broadcasts messages wirelessly to the wireless communication devices for example using predetermined voice and or data packet services such as Code Division Multiple Access CDMA and short messaging service SMS respectively or any other over the air methods. Thus communication network in combination with system allow for the discovery creation and management of electronic or on line user media access based on relationships discovered between data objects in a tuple space.

It should be noted that is a representative diagram that more fully illustrates the components of a wireless communication network and the interrelation of the elements of one aspect of the present system. Communications network is merely exemplary and can include any system whereby remote modules such as wireless communication devices communicate over the air between and among each other and or between and among other components of a wireless and or wired network including without limitation wireless network carriers and or servers.

In an illustrative mobile communication device can serve as client device for remotely accessing and controlling persistent messaging services via a graphical user interface GUI which can include physical controls such as dial tone multi function DTMF keypad with four cursor keys and select button and left middle and right menu buttons . Alternatively or in addition the GUI can be a touch screen. The GUI can include a display as depicted. Alternatively a display with touch screen capability can also be used to provide soft input controls not shown . The display can depict a dynamic messaging interface organized under a hierarchy of tabs of a messaging tab player tab a find tab and a links tab . The interface can include historical conversation threads made by the user from a different device not shown . These threads can be located selected saved via menu options and respectively.

The GUI can also provide an opportunity to set personal interests as depicted at . An advertising banner that can be interactive can be received based upon an interest incorporated into the user tuple set by the select interests control . Similarly a shout message can be presented also based on the interest incorporated into the user tuple set by the select interests control .

In view of the exemplary systems described supra methodologies that may be implemented in accordance with the disclosed subject matter have been described with reference to several flow diagrams. While for purposes of simplicity of explanation the methodologies are shown and described as a series of blocks it is to be understood and appreciated that the claimed subject matter is not limited by the order of the blocks as some blocks may occur in different orders and or concurrently with other blocks from what is depicted and described herein. Moreover not all illustrated blocks may be required to implement the methodologies described herein. Additionally it should be further appreciated that the methodologies disclosed herein are capable of being stored on an article of manufacture to facilitate transporting and transferring such methodologies to computers. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media.

In an illustrative methodology is depicted for a User A User B User C and a Third Party interacting via an instant messaging gateway to a server that hosts a tuple space . A persistent messaging service provided by the tuple space provides individual group shout and advert persistent messaging services for a subscriber population .

With initial reference to as depicted at the User A logins into a persistent messaging service by transmitting to the instant messaging gateway . As depicted at the gateway causes a status service tuple to add a user tuple to the tuple space and as depicted at causes a contacts service tuple to find buddies for User A. Matching user tuples are returned by the tuple space to the instant messaging gateway as depicted at which in turn notifies User B as depicted at and User C as depicted at that User A is online. As depicted at the history service tuple placed by the gateway finds recent message tuples for User A which are returned as depicted by the tuple space .

As depicted at the gateway returns the recent user group conversation threads to User A . Continuing a conversation the User A sends a message intended for User B as depicted at to the gateway . The gateway causes the message service to add a message tuple in tuple space for this message as depicted at and relays the message to User B as depicted at .

As depicted at User A can also continue a group conversation for a Group Z comprised of User B and User C by sending a message intended for Group Z to the gateway . The gateway causes the message service to add a message tuple in tuple space for this group message as depicted at and relays the group message to User B as depicted at and to User C as depicted at .

In addition to individual messages and group messages the persistent messaging service can support shout messages to those sharing an interest rather than being part of a defined group. As depicted at the Third Party sends a shout message to the gateway that causes the shout service tuple to find user tuples with a matching interest as depicted at .

Continuing with reference to the tuple space returns with matching user tuples to gateway as depicted at . The gateway in turn relays the targeted shout message interspersed with user conversations to those identified users depicted respectively at and to User A and User C .

In addition to individual group and shout persistent messaging as depicted at the Third Party can send a targeted advertisement advert to the gateway . In response the gateway causes the shout service to find user tuples with a matching interest in tuple space as depicted at which in turn returns matching user tuples as depicted at . The gateway intersperses the targeted message advert to the identified users depicted respectively at and to User A and User B .

When User A causes a logoff indication to go to gateway as depicted at the gateway causes the status service tuple to remove the user tuple from the tuple space as depicted at . The gateway causes the contact service tuple to find buddies for User A in tuple space as depicted at . In turn the tuple space returns matching user tuples to the gateway as depicted at . The gateway uses these identified buddies to send a message that User A is offline to User B and User C as depicted respectively at and .

The various illustrative logics logical blocks modules and circuits described in connection with the aspects disclosed herein may be implemented or performed with a general purpose processor a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor may be a microprocessor but in the alternative the processor may be any conventional processor controller microcontroller or state machine. A processor may also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration. Additionally at least one processor may comprise one or more modules operable to perform one or more of the steps and or actions described above.

Further the steps and or actions of a method or algorithm described in connection with the aspects disclosed herein may be embodied directly in hardware in a software module executed by a processor or in a combination of the two. A software module may reside in RAM memory flash memory ROM memory EPROM memory EEPROM memory registers a hard disk a removable disk a CD ROM or any other form of storage medium known in the art. An exemplary storage medium may be coupled to the processor such that the processor can read information from and write information to the storage medium. In the alternative the storage medium may be integral to the processor. Further in some aspects the processor and the storage medium may reside in an ASIC. Additionally the ASIC may reside in a user terminal. In the alternative the processor and the storage medium may reside as discrete components in a user terminal. Additionally in some aspects the steps and or actions of a method or algorithm may reside as one or any combination or set of codes and or instructions on a machine readable medium and or computer readable medium which may be incorporated into a computer program product.

While the foregoing disclosure discusses illustrative aspects and or versions it should be noted that various changes and modifications could be made herein without departing from the scope of the described aspects and or aspects as defined by the appended claims. Furthermore although elements of the described aspects and or aspects may be described or claimed in the singular the plural is contemplated unless limitation to the singular is explicitly stated. Additionally all or a portion of any aspect and or aspect may be utilized with all or a portion of any other aspect and or aspect unless stated otherwise.

It should be appreciated that any patent publication or other disclosure material in whole or in part that is said to be incorporated by reference herein is incorporated herein only to the extent that the incorporated material does not conflict with existing definitions statements or other disclosure material set forth in this disclosure. As such and to the extent necessary the disclosure as explicitly set forth herein supersedes any conflicting material incorporated herein by reference. Any material or portion thereof that is said to be incorporated by reference herein but which conflicts with existing definitions statements or other disclosure material set forth herein will only be incorporated to the extent that no conflict arises between that incorporated material and the existing disclosure material.

