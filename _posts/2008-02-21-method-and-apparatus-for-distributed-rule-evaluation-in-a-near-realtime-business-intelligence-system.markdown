---

title: Method and apparatus for distributed rule evaluation in a near real-time business intelligence system
abstract: A method is provided for performing an action, in a distributed environment, upon occurrence of a monitored event related to a set of data elements. The method includes providing a rule that includes an event identification component which specifies an event to be monitored and an action component which specifies an action to be performed when the event has occurred. The method also includes determining, from the rule, if the event identification component is to be evaluated by a remote event engine and if the action component is to be evaluated by the remote event engine, evaluating the event identification component and the action component of the rule.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08001185&OS=08001185&RS=08001185
owner: Oracle International Corporation
number: 08001185
owner_city: Redwood Shores
owner_country: US
publication_date: 20080221
---
The present application is a continuation of and claims priority to U.S. patent application Ser. No. 10 289 142 filed Nov. 5 2002 entitled Method and Apparatus For Distributed Rule Evaluation In A Near Real Time Business Intelligence System which in turn is a continuation in part of and claims priority to U.S. patent application Ser. No. 10 237 559 filed Sep. 6 2002 entitled Enterprise Link For a Software Database. U.S. patent application Ser. No. 10 289 142 also claims benefit of U.S. Provisional Application No. 60 410 989 filed Sep. 16 2002 entitled Business Intelligent System. U.S. patent application Ser. Nos. 10 289 142 10 237 559 and 60 410 989 are incorporated by reference in their entirety for all purposes.

The present invention relates in general to enterprise information systems. More particularly the present invention relates to methods and apparatus for optimizing the delivery of data to a device.

Timely intelligence is critical to proper business decision making. Collecting and quickly analyzing information however is often difficult. In a dynamic marketplace delayed delivery of intelligence can reduce both its reliability and relevancy. Substantial delays can even make the information often acquired at considerable cost completely worthless.

Intelligence is often extracted from OLTP applications and from specialized databases called operational data stores OLTP online transaction processing applications are those enterprise systems that manage a company s basic transactions such as order entry and billing systems. Since they are commonly optimized for reading and writing and not for querying extracting information from an OLTP application can be sufficiently complex to require additional user training. Furthermore while operational data stores generally archive OLTP information in a format for querying they also generally do not maintain important historical information. For instance an operational data store may store a current checking account balance but not the individual daily balances over the previous month.

In addition the queries themselves often take substantial time to execute producing only static snapshots of the information. Observing the dynamic aspect of changing information is therefore difficult. A possible solution may be to sequentially execute and aggregate a series of queries. However this solution can be both inefficient and ineffective since manual manipulation still often delays the information delivery. That is these queries must be first manually aggregated and summarized before intelligence reports can be generated and delivered.

ETL extraction transformation and loading systems help by extracting transforming and aggregating the information. But latency inherently found in most distributed networks coupled with considerable manual intervention that ETL systems often require mean that critical information can still be received late.

Automatic notification is a possible solution. Many analytical products such as business intelligence BI and online analytical processing OLAP systems are capable of monitoring scheduling and broadcasting alerts via email or pager. These systems however cannot generally assure that the intended recipient promptly receives and reads the message. This presents a significant problem for time sensitive information where minutes or even seconds can make a difference.

To facilitate discussion shows a simplified functional diagram of distributed information architecture. The diagram can be divided into an enterprise data layer and a client layer . Enterprise data layer comprises elements that are primarily focused on accumulating processing and transforming operational data. Client layer comprises elements that are primarily focused on rendering the processed data for a user.

OLTP online transaction processing applications are commonly coupled to each other as well as to other enterprise applications through a dedicated messaging and queuing application MQ such as IBM s MQSeries. MQ provides an efficient communication channel for these applications by storing and forwarding data messages in a manner that is similar to email.

Commonly coupled to each OLTP application is operational data store such as an Oracle database. Through an API application programming interface transactional data can be transferred between the OLTP application and the database. Operational data store consolidates that data from multiple sources and provides a near real time integrated view of volatile current data. Since its purpose is to provide integrated data for operational purposes operational data store primarily has add change and delete functionality.

In order to conduct meaningful analysis this information is often further placed in a more stable environment optimized for random querying. ETL system extracts the information from the appropriate data store transforms and combines the data based on pre defined constraints and subsequently loads the data into data warehouse . A popular ETL technique developed by Sagent is the use of data flows.

Data flows are a series of rule enabled transformations that are connected in data pipelines. They handle the tasks of joining merging comparing and splitting data and permit the separation of data into different logic paths each of which can be further combined and split off to create more complex transformation sequences.

ETL data extractions often occur by either a bulk or a trickle method. In the bulk method periodic snap shots of data in operational data store are extracted and uploaded into data warehouse . This commonly occurs as a large batch file scheduled during a low system utilization period. In the trickle method changes in operational data store are continuously uploaded or trickled into data warehouse . These updates are therefore frequent smaller and more current than in the bulk method. As in the case of OLTP systems ETL can also use the MQ for data extraction.

Once the data is in data warehouse it is available for OLAP online analytical processing . OLAP enables trained users to perform ad hoc analysis of data in multiple dimensions such as with an OLAP cube. OLAP cubes provide multi dimensional views of data querying and analytical capabilities. Furthermore many OLAP products can schedule run publish and broadcast reports alerts and responses over the network email or personal digital assistant. Users often access OLAP by thin client . Thin clients are applications that generally are integrated into the underlying client device and generally require minimal modification. For instance a thin client can be browser with a Macromedia Flash module installed.

Although OLAP analysis can provide valuable insight about business operations critical information is often received late even with automated reporting. Automated OLAP reporting often only has access to the information within data warehouse which can be several processing stages behind OLTP . This delay can be substantial reducing the information s value. Furthermore these reports are often only static snapshots of information in data warehouse .

For example a NASDAQ broker places an order into an OLTP application called an electronic communications network or ECN. The ECN matches customer buy and sell orders directly through the computer. In this case an order to buy 100 shares of ABC at 18.75 was entered. This open order is stored in the ECN operational data store subsequently extracted by ETL and analyzed by OLAP . If the buy order amount is the then highest in the ECN OLAP forwards the information to thin client NASDAQ quote montage where it is immediately displayed on the familiar stock market ticker tape. And although this system delivers stock information to individual brokers with reasonably small latency it is also not easily modified. The NASDAQ application is custom designed for the specific purpose of enabling stock trading. As such it would be difficult to display additional data on the stock ticker such as non financial information without substantial additional programming.

In view of the foregoing there is desired a method and apparatus for optimizing the delivery of data to a device in which relevant information is received in a timely manner and in which that data is rendered in a dynamic format.

The invention relates in one embodiment to method for optimally monitoring a set of data elements for an event. The method includes determining a set of data elements each of which further comprises a state. An event is commonly a change in this state. The method further includes creating a rule for monitoring the event wherein the rule comprises an event identification portion resident on a first computer and an action portion resident on a second computer. The method also includes monitoring the set of data elements for the event based in part on the event identification portion and determining if the event has occurred. If so the method further includes sending the set of data elements to the second computer. The method also includes executing a set of actions based in part on the action portion. Thereafter the method further includes monitoring the set of data elements based in part on the rule.

In another embodiment the invention relates to an apparatus for optimally monitoring a set of data elements for an event. The apparatus includes a means for determining a set of data elements each of which further comprises a state. An event is commonly a change in this state. The apparatus further includes a means for creating a rule for monitoring the event wherein the rule comprises an event identification portion resident on a first computer and an action portion resident on a second computer. The apparatus also includes a means for monitoring the set of data elements for the event based in par on the event identification portion and a means for determining if the event has occurred. If so the apparatus further includes a means for sending the set of data elements to the second computer. The apparatus also includes a means for executing a set of actions based in part on the action portion. Thereafter the apparatus further includes a means for monitoring the set of data elements based in part on the rule.

These and other features of the present invention will be described in more detail below in the detailed description of the invention and in conjunction with the following figures.

The present invention will now be described in detail with reference to a few preferred embodiments thereof as illustrated in the accompanying drawings. In the following description numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however to one skilled in the art that the present invention may be practiced without some or all of these specific details. In other instances well known process steps and or structures have not been described in detail in order to not unnecessarily obscure the present invention. The features and advantages of the present invention may be better understood with reference to the drawings and discussions that follow.

In accordance with one embodiment of the present invention an active data architecture is advantageously employed to facilitate the presence aware delivery of timely data. That is determining the type of device available to the user and delivering the information in a format within the device s capabilities. In accordance with another embodiment of the present invention information can be continuously extracted from data sources without the need for manual queries or additional user training. In accordance with another embodiment of the present invention information may be dynamically delivered in order to render streaming real time or near real time data and or analytical results whether graphically textually audibly or otherwise.

Referring now to a simplified functional diagram of an active data platform is illustrated. Active data platform comprises a suite of applications that allow a user to actively monitor continuously changing information throughout enterprise data layer according to a pre defined set of rules. A rule may be a pre defined procedure comprising the events to be monitored and the subsequent action or transformation that may be required. These rules enable active data platform to extract combine and transform data from various systems as well as the MQ messages transferred among the applications in a substantially contemporaneous manner. This processed information can then be transmitted in substantially near real time to devices in client layer . For example processed information can arrive at a client layer device within 2 10 seconds of an event or transaction or even sooner. Depending on the type of client device this processed information can be received as a continuous data stream a static report or an alert. The processed information can also be stored in a data warehouse and compared with future information.

As in OLTP generates transactional information. Operational data store consolidates that data from multiple sources and provides a near real time integrated continuously updated view of data. ETL system extracts the information from the appropriate data store transforms and combines the data based on pre defined constraints and subsequently loads the data into data warehouse that is optimized for querying or random data retrieval. The ETL extraction can occur in either a bulk or a trickle method. Once the data is in data warehouse it is available for OLAP or online analytical processing applications. OLAP enables trained users to perform ad hoc analysis of data in multiple dimensions such as with an OLAP cube.

Through the use of browser technology such as DHTML thin client and a rich client provide the user with enhanced visualization functionality such as the capability to graphically render streaming data. Thin client in one embodiment is called active viewer and comprises a browser. Rich client in another embodiment is called active viewer pro and comprises a browser with additionally installed software. DHTML is a combination of HTML style sheets and scripts and allows web pages to be animated. In addition rich client further allows for enhanced functionality such as pen based user input secure instant messaging robust printing capability and the use of skins. Skins are configuration files that allow modification of the browser appearance. Messaging client such as a SMS cell phone or an instant messaging program such as Yahoo Messenger or Windows Messenger provides alert capability. These alerts as well as static reports can also be received through thin client such as a browser. Other represents those enterprise applications that have been programmatically coupled to active data platform as a client.

In one embodiment client applications in client layer can reside on a Tablet PC. The Tablet PC represents the evolution of the business notebook personal computer. It marks a new direction for notebook PCs adding pen based technologies to existing notebook functionality and enabling Windows XP compatible applications to take advantage of various input modes such as pen and voice based data. The Tablet PC will be among the most versatile PCs ever made with high powered and efficient processors lightweight designs and for man built in wireless capability. All Tablet PCs will have keyboards some permanently attached and others detachable. But the Tablet PC is more than just a great notebook. The real value of the Tablet PC is that it makes it possible for information workers to bring the power of their business PC into more places than ever before and they can do it with the same software they use on their office PC or notebook today.

For example betting transactions would be normally stored in a casino s game transaction system. Wanting to be extra attentive to high rollers a casino would configure the active data platform to observe for any customer whose betting exceeds a specified threshold upon which an alert would be sent to the closest pit boss. The pit boss would locate these customers and personally oversee that exceptional customer service was provided.

Active data cache is the core repository for the active data platform. Unlike traditional databases such as operational data store and data warehouse active data cache stores data in a de normalized format. Normalization is the practice of optimizing the database structure into multiple tables eliminating data redundancy and improving sealability and maintainability.

Since active data cache is primarily focused on automatic reporting and not on querying it generates substantially de normalized tables representing each report or data stream. By logically placing these de normalized tables near client layer in a non obvious fashion fewer processing stages are required and latency is substantially reduced.

Database tables are not commonly de normalized since data is duplicated. In general duplicated data tends to increase the likelihood of data corruption during updates. That is multiple separate entries no longer match each other. Furthermore de normalized tables tend to be more difficult to query than normalized tables since each individual data record may be substantially larger and hence take longer to search. This is even more so if the table is not properly indexed. However since ad hoc querying is not a substantial requirement and table joins are not necessary normalization enables database tables within active data cache to be optimized for the efficient creation of pre defined reports and alerts. In one embodiment a single de normalized table is the source for each report.

Active design process is powerful intuitive suite of applications that allow a user to create rules map onto message queues manage security define data objects and configure enterprise link processes and sources based on simple drag and drop operations for the data streams reports and alerts. In addition to active design process in active data layer there is a corresponding active design process client in client layer such as a web browser. In one embodiment active design process comprises an application entitled architect. Unlike traditional real time business intelligence applications active design process allows a user to dynamically add new data sources or create new transformations and reports without changing the system as a whole. That is unlike the NASDAQ stock trading example previously shown which is not easily modified active design process can easily tailor the active data platform to new applications and changing corporate infrastructures.

Active report engine converts the raw information in active data cache into charts tables and graphs for display on a device in the client layer . Active studio is a presentation editor that allows a user to easily create and format specific graphical and textual active views of data based on pre defined templates. Common views are tables pie graphs bar graphs line graphs scatter graphs columnar reports form reports geographic map views crosstabs and Excel integration. For instance a user can create an hourly report in which gambling customers are aggregated into different groups based on the value of their accumulated betting that day. The user selects a bar graph for the report and changes the fill color and font type to the user s preference. These views can be substantially active changing in near real time as the underlying data changes or can be static like a printed report.

Event engine monitors the information in active data cache for pre determined changes or events. Once an event occurs such as a rising temperature in a chemical processing plant message center is notified subsequently forwarding the appropriate message to messaging client thin client or rich client .

In one embodiment message center tracks the presence of client devices as well as the status of users themselves in order to substantially assure message delivery. This is in contrast to traditional messaging systems that cannot determine if messages are in fact delivered to intended recipients. Presence determines if the device is available on the network. Status determines if the intended recipient is available to read and respond to the instant message. Common status categories include descriptive information such as out to lunch busy away from desk important meeting etc. For instance the device may be turned on and available but the intended recipient is in an important meeting and does not wish to be disturbed. The intended recipient sets the status to important meeting in order to notify message center as well as any other subscribed user that he will probably not respond to the alert until after the meeting. Message center would then choose an alternative available recipient based on an established notification rule.

For example a casino s active data platform attempts to notify the nearest pit boss of a particularly prolific gaming customer. However since the pit boss has a busy status the casino manager is alerted instead and subsequently walks over to greet the customer.

Enterprise security system represents a company s existing security infrastructure such as Steel Belted Radius by Funk Software. Since operational information may be sensitive active data cache can be integrated into enterprise security system . In this way users are authenticated before information is transmitted to client layer devices.

Event engine is further comprised of four logical components event generator manager rules manager accountability manager and actions manager . Event generator manager maintains the state information of monitored events for rules manager . Rules manager is the primary event handler for the active data platform. Accountability manager monitors the delivery status of all reports and alerts. And actions manager initiates actions based on input from the actions module of the rules manager .

Event generator manager maintains state information of monitored events for rules manager . Constraint module specifies the parameters that must be satisfied before evaluating an event and or a condition and or before applying the rule. Conditions module maintains information for the corresponding conditions module in rules manager . It further specifics attributes relevant to the specific event other than constraints which must be satisfied before the action associated with the rule may be taken. Events module maintains event information for the corresponding events module in rules manager .

Rules manager further includes three components in order to manage active data an events module a conditions module and an actions module . Events module monitors all generated events within the active data platform. Conditions module filters out non relevant events and forwards the information to actions module which in turn initiates new system events based on criteria within rule sets . For example all betting transactions are sent as events to event generator manager which in turn sends the information to the events module of rules manager . The conditions module is configured to subsequently filter out all but the blackjack events. The actions module based on rules then creates an internal system event to instruct the active reports engine as shown in to create a report for all blackjack transactions above a threshold as described in rules .

Accountability manager monitors the delivery status of all reports and alerts. It further includes an unaccounted notifies module and a report engine tie module . The unaccounted notifies module maintains the status of undelivered alerts and reports. That is unaccounted notifies module determines if a recipient cannot be reached subsequently forwards a delivery incomplete message to rules manager . Report engine tie monitors for successfully received reports and alerts and subsequently forwards a delivery complete message to rules manager . For example a receipt notification status message is received in accountability manager which is subsequently processed. If the receipt notification status message comprises an acknowledgment report engine tie module further processes the message and forwards the information to rules manager . However if an acknowledgment is not received unaccounted notifies module processes the message and forwards the information to rules manager which in turn allows active data cache to escalate alerts and reports to alternate recipients based on status and presence should the original recipient be unavailable.

Actions manager initiates events and actions based upon input from the actions module . It further includes a notification module a generate event module a run a plan module a web service MQ module and an others module . Notification module forwards any report and alert non delivery messages to unaccounted notifies module . Generate event module generates system events initiated by actions module in rules manager . Run a plan module executes script based on rules . Web service MQ module provides an interface to third party web services based on WSDL web service description language as well as message queue applications. Others module is an API that allows additional modules to be later added.

Rich client is comprised of a main application a rendered reports component and a re notify applet component. Main application provides the core environment for client interface to the active data cache . It comprises several functional components that can dynamically render incoming data streams from active data cache and locally create reports such as report builder . Rendered reports functions as a viewer to display reports from active data cache which already have been assembled. Re notify applet displays notification messages to the user.

In a non obvious fashion rich client substantially maintains an open TCP IP connection to active data cache through the execution of blocking HTTP request in a second open browser window. Internet browsers normally implement HTTP an asynchronous protocol that uses multiple short lived synchronous TCP IP connections to render the objects on a web page. For instance a connection is opened a picture is rendered and the connection is closed. However in the current invention a web server periodically sends keep alive messages to the second open browser window in order to prevent a TCP IP connection timeout. Through the use of this code a TCP IP connection is kept open allowing data to be sent in a substantially continuous way to rich client without having first to refresh the browser window. Thus the dynamic rendering process in the primary browser window is more readily controlled. For example the following JavaScript code may be executed by the second browser window 

Active data cache further comprises functional components that facilitate the generation of a report. These are a report execution component a view execution component a report builder component a rule builder component a modifier builder component data object builder component a structured data supplier component and a message center gateway .

Report execution creates caches and then forwards specific reports based on configuration to either rendered reports for report builder . View execution likewise creates and forwards views to report builder . Views are data objects that may be filtered. Report builder pre processes extracted information from multiple sources and transforms the aggregated data into a format optimized for use in multiple reports. Rule builder pre processes stored rules from multiple rule caches for use in the generation of multiple reports. Modifier builder pre processes intermediate information transformations such as additional metrics that the user wishes calculated and reported. Data object builder pre processes data objects into optimized formats for report execution component . Structured data supplier forwards external pre processed data to report builder .

API layer provides a uniform application interface for system generated events such as notification request administration request and presence request . Presence and notify component provides the main messaging infrastructure for the active data platform. It insures that reports and alerts are properly routed to intended recipients. Local user information maintains a local cache of user profile information such as names passwords and delivery preferences.

Rich client interface is further coupled to rich client which provides the user with enhanced visualization functionality such as the capability to graphically render streaming data. Thin client interface is coupled to thin client which further comprises agent application . Since thin client is commonly a browser without presence functionality agent notifies presence and notify component that a given report or alert is being viewed. Agent is commonly an Active X component or a java applet. Email interface is further coupled to email server such as an SMTP server which forwards messages to email client . IM interface is further coupled to IM client manager which sends a notification request to IM client . Instant messaging IM is a means for sending small simple messages that are delivered immediately to online users. It differs from email primarily in that its primary focus is immediate end user delivery. Through an IM client application a user can discover and immediately begin a text conversation or chat session. Common public instant message systems include AOL Instant Messenger MSN Messenger Yahoo Messenger Microsoft Exchange 2000 IM and Lotus Sametime.

For example a casino s active data cache identifies particularly prolific gaming customer. The active data cache forwards a notification request to message center . The presence notify module then determines if the intended user s device is present and the user is available. If so message center forwards an alert through IM interface to IM server and finally to IM client .

Unlike like the prior art the active data platform is general purpose and is substantially customizable by entering new parameters in active design process and the active studio as shown is . Furthermore enterprise links also shown in allows active data platform to quickly adapt enterprise data sources to changing near real time BI needs.

Referring now to an exemplary active studio screen display is shown according to an embodiment of the invention. This display is used by a user in order to easily manage the generation and secure delivery of data streams reports and alerts without substantial additional computer programming.

The display is divided into three sections a tab pane a function pane and a display pane . Tab pane further allows the user to select one of various functional displays within active studio such as home my reports shared reports personalize and alerts . Home comprises a summarized view of the user s most recent activities. My reports comprises a summarized list of the user s created reports. Shared reports comprises a summarized list of third part reports to which the user has subscribed. Personalize comprises administrative components that can allow the user to modify report delivery and display parameters. And alerts comprises a summarized list of a user s active alerts.

Function pane displays several functional list boxes within home tab such as recent list box new list box list toolbox and actions list box . Recent list box displays the user s most recently accessed reports. The new list box displays the user s new reports. The alerts list box displays the user s currently active alerts. And the actions list box allows the user to create and edit reports. Display pane displays the corresponding result of the chose function of function pane . In this case a dynamic financial report comprising a cost bar graph and a percentage change line graph. For example if a user where to select intraday sales by region in the new list box the corresponding dynamic intraday sales report would be displayed in display pane . As sales are booked through out the day the sales chart would dynamically change as well.

Referring now to an exemplary report viewer screen is depicted according to an embodiment of the invention. There are three functions available from this view launch active studio email and print . Display pane allows the user to view the selected report in this case a Q1 sales report. Launch active studio allows the user to open the viewed report in the Iteration Active Studio. Email allows the user to mail the viewed report to an email recipient. Print allows the user to print out the viewed report on an attached printer.

Referring now to the exemplary active studio screen display of is shown with the components of my reports tab . Function pane further displays two sub tabs a task bar tab and a folders tab . Task bar tab allows the user to select various functions related to the current view in this case a report summary view. Folders tab allows the user to organize created or stored reports in an hierarchical format. Two components within the task bar tab are report creation and guide . Report creation allows the user to create new active data. Guide provides a source of online help to the user.

Referring now to the exemplary active studio screen display of is shown with additional components of the my reports tab such as the report creation toolbox the report properties toolbox and the guide window . The report creation toolbox further comprises functions to easily create specific graphical views of data based on pre defined templates. Common views are tables pie graphs bar graphs line graphs scatter graphs columnar reports form reports geographic map views crosstabs and Excel integration. These views can be further modified in the report properties toolbox . For instance a user can create an hourly report in which gambling customers are aggregated into different groups based on the value of their accumulated betting that day. The user selects a bar graph for the report and changes the fill color and font type to the user s preference.

Referring now to the exemplary active studio screen display of is shown with an additional example of the my bar graph function window which allows the user to further customize the selected report with specific data objects and files. In general three types of attributes can be customized views data and properties . Views allows a user to modify the types of graphical displays available in which to view the current data such as a bar graph line graph etc. Data allows a user to select the specific data fields to be used in views . Properties allows a user to modify other attributes such as language number formats etc. In this case the user has selected a bar graph template for the report and has added four fields.

In another aspect of the invention an Iteration instant messaging collaboration server is advantageously employed to enable rich secure graphical collaboration in an instant messaging environment. Instant messaging systems commonly monitor the presence of devices and availability state of users. Presence determines if the IM device is coupled to the given IM network or at least reachable from the client. Status determines if the intended recipient is available to read and respond to the instant message. Common status categories also include descriptive information such as out to lunch busy away from desk important meeting etc. For instance the IM device may be turned on and available but the user is in an important meeting and does not wish to be disturbed. The user would set the status to important meeting in order to notify other subscribed IM users that he will probably not respond to a text message until after the meeting.

These IM systems however commonly lack the capability for graphical peer to peer or multi party collaboration. That is while short text messages can be sent back and forth in an online chat meeting there is no comparable means for sharing a graph or report. This would normally have to be compressed and transmitted ahead of time to each recipient who would each then download de compress and locally store the file. In situations where the underlying data is continuously changing as temperatures would be in a chemical plant and impromptu collaboration is desired pre mailing a graph would be very impractical inefficient and of marginal use to the problem at hand.

Furthermore public IM systems are not particularly secure. They were originally designed for rapid information text conversations called chat. IM protocols emerged and were established primarily without supervision from any standard bodies such as the Internet Engineering Task Force. Subsequently security was never originally considered and common instant messaging traffic is essentially unencrypted. Just about anyone on the network can secretly monitor a chat conversation.

User manager manages user profile information. Users create profiles based on rules in which they describe events of which they want to notified. Should such an event occur user manager notifies message center which in turn contacts the user. Furthermore user manager selects alternative recipients if the primary recipient is unavailable based on user preference and availability status. For instance user has configured user manager for notification of a specific event for example a temperature change beyond a certain range. Furthermore user also wants user to be notified should user be unavailable. Once the event occurs if user is unavailable message center attempts to notify user . Presence manager monitors for the availability of user devices on the network. For instance in the previous example user has a wireless PDA and a SMS phone. If the event occurs and the PDA is turned off an alert is sent to the SMS phone instead.

IIM Iteration instant messenger interface provides an interface to the HM client an enhanced IM application that allows secure concurrent graphical collaboration and pen based user input. In general it is sometimes desirable to implement private instant messaging systems having enhanced capability including different protocols encryption capabilities graphical processing display capabilities I O capabilities and or the like compared to public messaging systems such as those available from Yahoo AOL and the like . IIM client is an example of a client in such a private instant messaging system.

IIM client commonly connect through active collaboration server which marshals collaboration request from multiple IIM clients and combines connections whenever possible to improve overall system performance and scalability. Furthermore active collaboration server synchronizes the text and graphical portions of the IIM session to insure that all users view the same information at substantially the same time.

Active collaboration server further enforces security protocols as implemented by the IIM client in order to prevent unauthorized interception of the collaboration session. In one embodiment IIM client implements a Triple DES security protocol to protect the collaboration session and insure message integrity. Triple DES is an encryption algorithm whose security is based on a single secret key. Each key is generated selected at random from all possible keys for each particular collaboration session.

In another embodiment only one user in an IIM collaboration session needs authorization to access a given alert or report. By virtue of being authenticated to the session all other users will receive the alert or report with the security privileges of authorized user for as long as these users participate in the session.

In addition to IIM interface there is SMTP interface and other IM interface . SMTP or simple mail transfer protocol is the most common protocol for sending email message on the internet. Through SMTP interface message center can forward email notifications with the event information to email server . Unlike IIM client however notification is not automatic. The user must first log onto mail server with a SMTP client such as MS Outlook and download the messages. Likewise other IM interface represents traditional IM interfaces to currently available IM systems such as AOL Instant Messenger MSN Messenger Yahoo Messenger Microsoft Exchange 2000 IM and Lotus Sametime. In contrast to SMTP notification can be automatic although communication is generally insecure. Furthermore graphical collaboration is difficult.

For example user is a chemical engineer at a petroleum processing plant. He created a profile in user manager in which he wants to be notified of specific events such as a change in a process temperature beyond a certain range. The event occurs. Message center forwards the notification to active collaboration server through IIM interface . Seeing the temperature dynamically change on his device user realizes that he wants additional advice from user his manager. Through his IIM device he instructs message center to initiate a request for collaboration with user . Receiving a collaboration request from his subordinate user accepts the connection. User s display is immediately rendered on User s device upon which they collaborate on the matter at hand.

Referring to IIM client and active collaboration server as shown in are described in greater detail. The user interface of IIM client is comprised of four panes a graphical display pane a chat text display pane a pen entry pane and a chat text entry pane . Graphical display pane is the main rendering window for IIM client . It allows a user to make better sense of large amounts of dynamic data presenting changing information in an easily accessible graphical visual representation. Chat text display pane displays IM messages in a formatted way using a choice of colors and styles. Pen entry pane allows the IM device to recognize a user s handwriting. Chat text entry pane allows the user to enter text through a keyboard.

For example user is a network systems engineer monitoring traffic at a company s e commerce web site. When network congestion reaches a certain point active report engine generates a report and forwards it to user . Realizing that customers are starting to have difficulty placing online orders user initiates a connection with user the web site manager and user the customer service manager. Once both accept user s display is immediately rendered on the other devices upon which all can collaborate on the matter at hand.

In another embodiment an instant messaging manager is advantageously employed to rapidly alert intended recipients of data events. Referring to a simplified functional diagram is shown of a rules based monitoring engine with alert capability such as in a BI or OLAP application. Enterprise systems comprise the series of applications commonly used to run and manage a business such as OLTP data warehouse and OLAP. OLTP online transaction processing applications are those enterprise systems that manage a company s basic transactions such as order entry and billing systems. In order to conduct meaningful analysis this information is often further placed in a more stable environment optimized for random querying such as a data warehouse. OLAP enables trained users to perform sophisticated ad hoc analysis of data stored in a data warehouse.

Rules based monitoring engine monitors the applications in enterprise systems for pre defined events. A rule is a pre defined procedure comprising the event s to be monitored and the subsequent action or transformation that is required. For example the event can be a specific transaction a change in a file size the publishing of a report etc. Rules U I is typically graphical application that allows a user to create sophisticated and complex rules as well as store the rules in the rules db for use by rules based monitoring engine . In this case the subsequent action is an alert.

When a specific event occurs rules based monitoring engine forwards an alert to notification engine which properly formats the alert and transmits it via email system pager system or another system through proprietary API . Alerts sent to email system can further contain an embedded link to a report generated by active reports engine as shown if .

For example betting transactions would be normally stored in a casino s game transaction system. Wanting to be extra attentive to high rollers a casino would configure the rules based monitoring engine to observe for any customer whose betting exceeds a specified threshold upon which an alert would be sent to the closest pit boss with an embedded link to the customer record.

As in there is shown a simplified functional diagram of a rules based monitoring engine with alert capability such as in a BI or OLAP application. Rules based monitoring engine monitors the applications in enterprise systems for pre defined events. Rules U I is typically graphical application that allows a user to create sophisticated and complex rules as well as store the rules in the rules db for use by rules based monitoring engine . In this case the subsequent action is an alert.

Instant messaging manager properly formats the alert as an instant message and transmits to the intended recipient through one of the various instant message systems Unlike notification engine however instant messaging manager also monitors the various instant message systems for changes in state for any subscribed users. State is comprised of presence and status. Presence determines if the IM device is coupled to the given IM network or at least reachable from the client. The given instant message system normally determines the presence of individual IM clients and broadcast the information to interested parties such as the instant messaging manager . Status determines if the intended recipient is able to read and respond to the instant message. Normally whether a recipient is available or not is a true or false question. However it is common for recipients to customize the unavailable status with further descriptive information such as out to lunch busy away from desk important meeting etc.

For instance the IM device can be turned on and available but the user is in an important meeting and does not wish to be disturbed. The user can set the status to important meeting notifying any other subscribed users that he will probably not be able to respond to the instant message until after the meeting. The rules based monitoring engine realizing that the user will not immediately read the instant message will choose an alternative present and available user based on a pre determined notification rule. Rules based monitoring engine can forward an alert to instant messaging manager for immediate delivery to the intended recipient.

Referring now to simplified pseudo code is illustrated as would be used by IM client manager as shown in to notifying running processes of user status changes. In procedure ProcessMessagesFromServer with a message argument IM client manager receives a message from an instant message system. It then determines whether it is a user status in procedure case UserStatuses. If so then procedure is called Process User status messages with an userStatusObjects collection argument. It then updates the user data structure at procedure HashOfUserObjects.update and subsequently notifies any active processes running on the active server platform of this status change.

In another embodiment an event engine is advantageously employed to substantially assure the examination of a report by a user. Many analytical products such as business intelligence BI and online analytical processing OLAP systems are capable of monitoring scheduling and broadcasting alerts via email or pager. These systems however cannot generally assure that the intended recipient promptly receives and reads the message. This presents a significant problem for time sensitive information where minutes or even seconds can make a difference.

In the current invention the event engine monitors the state of transmitted alerts in an escalation table. Upon receipt of an alert the user reviews the received report. This is commonly done by manually browsing for the report or by clicking an embedded URL contained within the alert. If the user does not review the report within a specified time the escalation table can further escalate the alert to another user based upon predefined rules. For instance the alert is transmitted to the user s manager.

Referring to a simplified functional diagram displaying the active data platform is shown with elements of the notification and escalation process. Advantages include substantially improving alert accountability in business intelligence applications. That is enabling the right person to receive critical information at the right time and if not escalating the information to the appropriate person.

Enterprise data comprises those enterprise systems that manage a company s basic transactions such as order entry and billing systems. Active data cache monitors transaction data packets generated by enterprise data . Active data cache further comprises user data manager which describes user event interest and monitoring rule manager that analyzes data packet for specific events.

Should an event of interest occur monitoring rule manager forwards a rule fired message to the rules list manager of event engine . Rules list manager further comprises the subsequent actions required for the fired rule such as the transmission of a notification message to a user the execution of a subsequent rule or the generation of an accountability escalation event. In this case notification message is forwarded to message center . Rules list manager also places an entry into escalation table describing notification message the intended recipient and the time the message was sent. If a report viewed message is not received within a pre determined amount of time a timeout occurs and escalation table notifies escalation manager which in turn executes pre configured escalation rules such as notification of a different person or entity or the calling of a web service.

Upon receiving notification message user address manager attempts to find a device address at which the user is currently available. Message center further embeds a link in notification message through which the user can review the corresponding report from active reports engine .

The user subsequently receives notification message on his device in this case through a browser. If not already viewing the report the user can either locate the report by manually entering information such as a URL or can also simply click on an embedded link to the report.

Upon receiving a request report supplier of report engine generates the report from information in the active reports table and forwards it to user device . A report viewed message is also generated and forwarded to escalation table which in turn deactivates the previous notification message entry.

For example a large multi site manufacturing organization such as Ford Motor Company would configure the active data platform to monitor manufacturing processing information such as increasing part reject rates or outright machine failures. Should a machine failure actually occur an alert is forwarded to the appropriate manufacturing process engineer. The alert would contain an embedded link to the specific machine s status report as generated by active reports engine . If the process engineer did not review the report within a few minutes or any time period specified a new alert would be immediately forwarded to the local plant manager for immediate action.

Referring to a simplified diagram of a common instant messaging client displaying notification message is shown in . In this case an alert message with a link to the budgetbuster report is shown. Upon clicking link a report would open in a new browser window. Furthermore a report viewed message would be generated and forwarded to escalation table as shown in .

In accordance with one aspect of the present invention rule evaluation is advantageously distributed in order to improve efficiency. To further elaborate a rule often comprises multiple interdependent components i.e. event constraint condition and action that must be evaluated and acted upon.

The first component of a rule is the event which specifies the event of interest. An example of an event is when the sales volume exceeds 5 000 units. If the sales volume exceeds 5 000 units the event component is satisfied.

The second component of a rule is the constraint which specifies the parameters that must be satisfied before evaluating an event and or a condition and or before applying the rule. A constraint is usually provided for efficiency reasons and commonly comprises dates times and or frequencies. For instance if the specific event described in the event clause e.g. sales volume in the previous example does not need to be monitored over the weekend or between certain times or more often than a given frequency then the constraint clause would instruct the event engine to that effect. Typically a constraint is evaluated to be either true or false. In one embodiment if the constraint is evaluated to be false by the event engine the satellite evaluation engine is informed accordingly and does not even need to spend its resources evaluating the event. Advantageously efficiency is improved.

The third component of a rule is the condition which further specifies other attributes relevant to the specific event which attributes must be satisfied before the action associated with the rule may be taken. In the previous example the condition may be to take action only if the sales volume that fires the event is achieved without any special promotion in place. Generally speaking all conditions may be thought of as events but not all events are conditions.

The fourth component of a rule is the action which determines the course of action taken should the event constraint and or condition components be satisfied. For instance the sending of a notification to a specific person may be an action that needs to be taken if as in the previous example during a weekday constraint satisfied the sales volume exceeds 5 000 units event satisfied and the sales volume is achieved without any specific promotion in place condition satisfied .

It should be noted that a rule typically includes an action but a rule does not require all three other components i.e. event condition and constraint. A rule may have one two or three of these components as desired by the rule designer. Furthermore each of the event condition constraint and action components may be a complex Boolean operation comprising multiple sub components. A preferred embodiment however is a single event component per rule.

For example an event may be satisfied if sales volume is greater than 5 000 and the total revenue is greater than 10 000 a Boolean operation of two sub events .

In order to reduce design complexity a common solution has been to evaluate and execute these rules in a centralized event engine. It is found however that the information that needs to be monitored and evaluated can be found anywhere on the enterprise network. It is often the case that the information that must be monitored and evaluated e.g. the event or condition may be distributed in one or more machines such as servers remote from the computer executing the centralized event engine. In some cases only 5 of the information may be relevant to a particular rule. Yet when the rule evaluation is centralized all the data that needs to be monitored and evaluated must be transmitted across the machine and or process boundaries for the centralized event engine to perform its rule evaluation task. In a networked environment the remaining 95 of the information that is needlessly sent represents an inefficient use of scarce network resources and bandwidth as well as a detriment to performance.

In accordance with one embodiment of the invention rule evaluation is distributed in one or more satellite evaluation engines local to or closer to the origin of the monitored information. The evaluation is distributed in satellite evaluation engines that are in communication with an event engine. Distributed rule evaluation allows the evaluation of a rule to take place with reduced bandwidth usage and delay. Since active data and the timely report notification responsive to active data are important aspects of the active data platform minimizing delay is an important consideration and the distributed evaluation mechanism substantially furthers that goal.

To facilitate the implementation of distributed rule evaluation it is highly preferable that a universal rule syntax be developed that allows the event engine to analyze any given rule and decides which portion of the rule should be distributed and which portion of the rule should be processed by the centralized event engine.

In accordance with one embodiment of the invention a rule syntax is developed in which the four components of a rule event constraint condition action are specified as clauses in a specific order to facilitate parsing.

Clause 1 describes the event to be executed by the satellite evaluation engine in this case the viewset application. The event is a change to QTD Sales information. Clause 2 comprises the constraint clause. It describes that the event will only be monitored from Monday to Friday. Clause 3 comprises the condition further qualifying the situation that occasions the firing of the action. In this case if the time was between 9 00 a.m. and 5 00 p.m. i.e. 1700 hrs and if the date corresponds to the end of the quarter. Clause 4 describes the action. In this case the action is to send an email to user named Joe if the event constraint and condition are satisfied. Of course these four components may be ordered in a different order if another syntax construct so dictates.

In accordance with one embodiment of the present invention a rule is parsed to one or more core events which are then distributed to one or more appropriate satellite evaluation engines to facilitate evaluation of the distributed event s . In the previous example the rule may be parsed and the event pertaining to the sales volume may be distributed to for example the satellite evaluation engine associated with the active data cache. The satellite valuation engine then evaluates the monitored data sales volume in this example and communicates the result which may be simply true false or may include pertinent sales volume data back to the event engine. Meanwhile the event engine is offloaded from the task of handling that rule until the event is satisfied.

To further improve efficiency the centralized event engine may not even parse all components of a rule until the event is satisfied. Thus if an event is never satisfied no resource has been wasted parsing the entire rule and preparing the centralized event engine and or the satellite evaluation engine s to handle the other components which may never need to be handled if the event is never satisfied . Further the satellite evaluation engine may only send information back to the event engine if the event evaluates to be true. Thus if the sales volume is below 5 000 in the previous example no message is sent from the satellite evaluation engine to advantageously avoid wasting bandwidth. Of course as mentioned earlier the evaluation of an event may be held off by the satellite evaluation engine to further avoid wasting resource unless the constraint is evaluated to be true by the centralized event monitor.

If the event is evaluated to be true at the satellite evaluation engine and assuming any applicable constraint is also evaluated to be true the satellite evaluation engine informs the centralized event engine which may then evaluate the condition using either the same or another satellite evaluation engine or using the centralized resource. If the same or a different satellite evaluation engine is also used to evaluate a condition the event monitor may send out the parsed condition and ask for the result of the evaluation of the condition. As the exemplary syntax above indicates each of the event constraint condition and action may be but not required in all cases implemented as a function. Distributing rule evaluation thus may comprise using the appropriate satellite evaluation engine to make the required function call.

Referring to in accordance with one embodiment of the present invention a simplified functional diagram illustrating the more relevant components of an exemplary active data platform in which distributed rule evaluation is implemented. Event engine employs a satellite evaluation engine manager to distribute and manage the evaluation of certain components of a rule in one or more event satellite evaluation engines. The distributed evaluation results are then received by monitor manager for use by event engine .

Satellite evaluation engines are some exemplary satellite evaluation engines employed by the active data platform of . Viewset satellite evaluation engine observes changes to database data objects such as the modification of a database filter to certain change in the data in the active data cache. Presence satellite evaluation engine observes changes to the availability of devices and the status of users. Time satellite evaluation engine observes time changes. Date satellite evaluation engine observes dates changes. System satellite evaluation engine observes changes to the underlying operating systems or applications for instance a change in the virtual memory or a cache miss. File satellite evaluation engine observes changes to a given file as stored in a file system. External satellite evaluation engine observes externally generated events through an API. These external events can be used for integration with other applications. Other satellite evaluation engine represents additional events that can be programmatically monitored by event engine .

In accordance with another embodiment of the present invention there is provided a universal function call syntax to facilitate the task of distributing certain aspects of rule evaluation to one or more satellite evaluation engines. As discussed above the rule syntax allows an event a constraint a condition or an action to be specified as a function. Thus the function call syntax may have the following construct 

where satname is the name of the satellite evaluation engine. Funcname which is separated from satname by a symbol such as a dot is the name of the function. The arguments represent optional arguments of the function.

By creating a universal function call syntax the invention substantially simplifies the task of specifying that a particular satellite evaluation engine should handle a particular event or condition. Furthermore the function syntax improves scalability in that a new satellite evaluation engine is added to the system only the satellite evaluation engine name needs to be changed and the remainder of the syntax may be reused. Also if a new event or condition is specified vis vis an existing satellite evaluation engine only the function name needs to be changed.

In one embodiment a rule template library may be provided to allow users to leverage on work done by others. A rule template is simply a rule with certain argument s not completely specified. For example a rule template may specify that if the sales volume exceeds 5 000 on a weekday and no special promotion is involved then notify person X. In this case person X represents the argument that remains to be filled out to turn the rule template into a rule instance. In this example the filling out of the person may be automatically accomplished by filling in the missing argument with the identity of the user accessing the rule template. In other cases the missing arguments may be filled out by the user wishing to employ the rule template.

Of course the user can always edit existing rules i.e. complete rule instances to fit his needs. For example the user can access an existing report and edit the rules therein to modify the arguments related to the event condition constraint and or action so that the newly created report would contain the information needed. The universal rule syntax renders it simple to implement rule templates and makes it easy for users to convert a rule template to a rule instance or to modify an existing rule to fit his needs.

While this invention has been described in terms of several preferred embodiments there are alterations permutations and equivalents which fall within the scope of this invention. For example although reference is given to Sagent Business Intelligence Solutions it should be understood that the invention can also integrate with other business intelligence and ETL solutions. It should also be noted that there are many alternative ways of implementing the apparatuses of the present invention. It is therefore intended that the following appended claims be interpreted as including all such alterations permutations and equivalents as fall within the true spirit and scope of the present invention.

Advantages of the invention include optimizing the presence aware delivery of relevant information to a device in a timely manner and rendered in a dynamic format. Additional advantages include the continuous extraction of information from data sources without the need for manual queries or the need of additional user training.

Having disclosed exemplary embodiments and the best mode modifications and variations may be made to the disclosed embodiments while remaining within the subject and spirit of the invention as defined by the following claims.

